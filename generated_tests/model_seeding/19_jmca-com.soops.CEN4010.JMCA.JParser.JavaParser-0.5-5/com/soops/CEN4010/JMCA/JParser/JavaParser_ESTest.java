/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 18:37:22 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JJTJavaParserState;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.JavaParserTreeConstants;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParser_ESTest extends JavaParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", column ");
      assertFalse(boolean0);
      
      boolean boolean1 = javaParser_ModifierSet0.isFinal(0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      
      boolean boolean2 = javaParser_ModifierSet0.isStatic((-633));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.CompilationUnit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "T<#Y[T";
      StringReader stringReader0 = new StringReader("'>r#+j");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.LocalVariableDeclaration();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"r\" (114), after : \"\\'>\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.SynchronizedStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8!6aY%|+=r");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.CompilationUnit();
      assertFalse(javaParser0.lookingAhead);
      
      SystemInUtil.addInputLine(",LrVbiDL[(KY>3$");
      try { 
        javaParser0.ForStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.MemberValuePairs();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JavaParser.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Reader reader0 = null;
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.RUNSIGNEDSHIFT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.ShiftExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(100);
      assertTrue(boolean0);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.AnnotationTypeBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0Z[kl^bK1pV");
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser("0Z[kl^bK1pV");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.TypeDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser(bufferedInputStream0);
      assertNotNull(javaParser0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ThrowStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0Z[kl^bK1pV");
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser("0Z[kl^bK1pV");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.LabeledStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JavaCharStream javaCharStream0 = null;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.AnnotationTypeMemberDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)0;
      JavaParser javaParser0 = new JavaParser("QDf9Oc9<cV=4i{Jl`");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.FormalParameters();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("a7\"A-VFOJ9");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.Name();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser javaParser1 = new JavaParser((Reader) null);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertFalse(javaParser1.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser1.ArgumentList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.ArrayDimsAndInits();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 68;
      SimpleNode simpleNode0 = new SimpleNode(68);
      assertNotNull(simpleNode0);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
      
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JavaParser javaParser0 = new JavaParser(reader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser javaParser1 = new JavaParser((Reader) null);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertFalse(javaParser1.lookingAhead);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      int int1 = sequenceInputStream0.available();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        javaParser0.SwitchLabel();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("</identifier>");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JavaParser.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      int int0 = (-4894);
      JavaCharStream javaCharStream0 = new JavaCharStream(reader0, 1504, (-4894), 0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      javaCharStream0.ReInit((InputStream) pushbackInputStream0, 55, 0, 0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      StringReader stringReader0 = new StringReader("(qzXr");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(40, int0);
      
      stringReader0.close();
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.InstanceOfExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.ArrayInitializer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)0;
      JavaParser javaParser0 = new JavaParser("QDf9Oc9<cV=4i{Jl`");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.MemberValueArrayInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = true;
      try { 
        javaParser0.ShiftExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaParser0.lookingAhead);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("", token0.toString());
      assertFalse(javaParser0.lookingAhead);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      
      javaCharStream0.nextCharInd = 1;
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.ReInit(javaCharStream0, 0);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertFalse(javaParser0.lookingAhead);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertFalse(javaParser0.lookingAhead);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParser1.lookingAhead);
      
      int int0 = javaParser0.Modifiers();
      assertFalse(javaParser0.equals((Object)javaParser1));
      assertNotSame(javaParser0, javaParser1);
      assertEquals(0, int0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser1.LabeledStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.AnnotationTypeMemberDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      assertNotNull(javaParser0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(javaParser0.lookingAhead);
      
      int int0 = 0;
      try { 
        javaParser0.SwitchLabel();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      assertNotNull(javaParser0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.LocalVariableDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 1875);
      assertNotNull(simpleNode0);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      boolean boolean0 = javaParser_ModifierSet0.isStatic(255);
      assertTrue(boolean0);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      boolean boolean1 = javaParser_ModifierSet0.isPrivate(1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      // Undeclared exception!
      try { 
        javaParser0.MemberSelector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = javaParser_ModifierSet0.isTransient(36);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      
      JavaParser javaParser0 = new JavaParser("XaTlaVG{[rK]v'Gs");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      int int0 = 38;
      try { 
        javaParser0.PrimaryExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 101, 128);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-56), (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((-97), byteArrayInputStream0.available());
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 0, 30);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = javaParserTokenManager0.input_stream;
      assertNotNull(javaCharStream1);
      assertSame(javaCharStream1, javaCharStream0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, (byte)0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager1);
      assertNotNull(javaParser0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.PreIncrementExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 0, column 29.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("T<#Y[T");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      try { 
        javaParser0.Annotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      assertNotNull(sequenceInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      long long0 = mockFileInputStream0.skip(0L);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, long0);
      
      JavaParser javaParser0 = new JavaParser(sequenceInputStream0);
      assertNotNull(javaParser0);
      assertFalse(fileDescriptor0.valid());
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.EmptyStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XOuo;dk10qa/Bpp:%");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.LocalVariableDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 5.  Encountered: ;
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)109, (byte) (-127), (byte)93, (byte)91, (byte) (-1), (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)109, (byte) (-127), (byte)93, (byte)91, (byte) (-1), (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)109, (byte) (-127), (byte)93, (byte)91, (byte) (-1), (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      InputStreamReader inputStreamReader0 = (InputStreamReader)javaCharStream0.inputStream;
      assertNotNull(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)109, (byte) (-127), (byte)93, (byte)91, (byte) (-1), (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      JavaParser javaParser0 = new JavaParser(inputStreamReader0);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)109, (byte) (-127), (byte)93, (byte)91, (byte) (-1), (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.ForInit();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      int int0 = 30;
      sequenceInputStream0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 0, 30);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      long long0 = sequenceInputStream0.skip(30);
      assertEquals(0L, long0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.CastLookahead();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaParser javaParser0 = new JavaParser(sequenceInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      int int0 = 888;
      sequenceInputStream0.mark(888);
      try { 
        javaParser0.EmptyStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)0;
      JavaParser javaParser0 = new JavaParser("QDf9Oc9<cV=4i{Jl`");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.SwitchStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 1875);
      assertNotNull(simpleNode0);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser javaParser1 = simpleNode0.parser;
      assertNotNull(javaParser1);
      assertSame(javaParser1, javaParser0);
      assertFalse(javaParser1.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.WhileStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      assertNotNull(javaParser0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(javaParser0.lookingAhead);
      
      int int0 = 0;
      try { 
        javaParser0.SwitchLabel();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 1140);
      assertNotNull(simpleNode0);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser javaParser1 = simpleNode0.parser;
      assertNotNull(javaParser1);
      assertSame(javaParser1, javaParser0);
      assertFalse(javaParser1.lookingAhead);
      
      try { 
        javaParser1.VariableDeclaratorId();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      assertNotNull(javaParser0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.LocalVariableDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      boolean boolean0 = javaParser_ModifierSet0.isVolatile((-2083));
      assertTrue(boolean0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      JavaParser javaParser0 = new JavaParser("c;K_PNnr");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.Expression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)109, (byte) (-127), (byte)93, (byte)91, (byte) (-1), (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)109, (byte) (-127), (byte)93, (byte)91, (byte) (-1), (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)109, (byte) (-127), (byte)93, (byte)91, (byte) (-1), (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      InputStreamReader inputStreamReader0 = (InputStreamReader)javaCharStream0.inputStream;
      assertNotNull(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)109, (byte) (-127), (byte)93, (byte)91, (byte) (-1), (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      JavaParser javaParser0 = new JavaParser(inputStreamReader0);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)109, (byte) (-127), (byte)93, (byte)91, (byte) (-1), (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.AllocationExpression();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.SwitchStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("V");
      assertNotNull(stringReader0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      
      boolean boolean1 = javaParser_ModifierSet0.isAbstract(1553);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.SynchronizedStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: V
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.AnnotationTypeMemberDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = JavaParser.ModifierSet.removeModifier(92, 0);
      assertEquals(92, int0);
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("h$n1Vp0Rxhep", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      boolean boolean0 = javaParser_ModifierSet0.isStatic(0);
      assertFalse(boolean0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JavaParser javaParser0 = new JavaParser(reader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.CompilationUnit();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Reader reader0 = null;
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.getToken(9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean0 = bufferedInputStream0.markSupported();
      assertEquals(0, pipedInputStream0.available());
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser(bufferedInputStream0);
      assertNotNull(javaParser0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ThrowStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        JavaParser.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "p,";
      JavaParser javaParser0 = new JavaParser("p,");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.MemberValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("T<#Y[T");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      JavaCharStream javaCharStream0 = new JavaCharStream(reader0, 59, 2643);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParser0.jj_input_stream = javaCharStream0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaParser0.jj_input_stream.getBeginColumn());
      assertEquals(0, javaParser0.jj_input_stream.getBeginLine());
      
      try { 
        javaParser0.Annotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      int int0 = 9;
      // Undeclared exception!
      try { 
        javaParser0.RUNSIGNEDSHIFT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8!6aY%|+=r");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.CompilationUnit();
      assertFalse(javaParser0.lookingAhead);
      
      SystemInUtil.addInputLine(",LrVbiDL[(KY>3$");
      try { 
        javaParser0.WhileStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      JavaParser javaParser0 = new JavaParser(reader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.CompilationUnit();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isSynchronized(64);
      assertTrue(boolean0);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 64);
      assertNotNull(bufferedInputStream0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaParser javaParser0 = new JavaParser(bufferedInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParser javaParser1 = new JavaParser("{6");
      assertNotNull(javaParser1);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertFalse(javaParser1.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0Z[kl^bK1pV");
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      int int0 = 1875;
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 1875);
      assertNotNull(simpleNode0);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser javaParser1 = simpleNode0.parser;
      assertNotNull(javaParser1);
      assertSame(javaParser1, javaParser0);
      assertFalse(javaParser1.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser1.ClassOrInterfaceDeclaration(1875);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 101, 128);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-56), (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((-97), byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-56), (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((-97), byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(bufferedInputStream0);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-56), (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((-97), byteArrayInputStream0.available());
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.StatementExpressionList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Reader reader0 = null;
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      int int0 = 9;
      // Undeclared exception!
      try { 
        javaParser0.BooleanLiteral();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.BooleanLiteral();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      boolean boolean0 = javaParser_ModifierSet0.isNative((-555));
      assertTrue(boolean0);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      boolean boolean1 = javaParser_ModifierSet0.isStatic(50);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      boolean boolean0 = javaParser_ModifierSet0.isProtected((-1210));
      assertTrue(boolean0);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      String string0 = ".*n\\Y8b^2S\"yD%";
      StringReader stringReader0 = new StringReader(".*nY8b^2S\"yD%");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.CompilationUnit();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: .
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 64;
      PipedInputStream pipedInputStream0 = new PipedInputStream(64);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      assertNotNull(javaParser0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.WildcardBounds();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 1140);
      assertNotNull(simpleNode0);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
      assertFalse(javaParser0.lookingAhead);
      
      simpleNode0.parser = javaParser0;
      assertEquals(0, simpleNode0.jjtGetNumChildren());
      
      JavaParser javaParser1 = simpleNode0.parser;
      assertNotNull(javaParser1);
      assertSame(javaParser1, javaParser0);
      assertFalse(javaParser1.lookingAhead);
      
      try { 
        javaParser1.DefaultValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      
      int int0 = (-2083);
      boolean boolean0 = javaParser_ModifierSet0.isVolatile((-2083));
      assertTrue(boolean0);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      
      JavaParser javaParser0 = new JavaParser("c;K_PNnr");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.Expression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.ArrayInitializer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaParser0.lookingAhead);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("", token0.toString());
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(0, token0.endColumn);
      
      try { 
        javaParser0.VariableInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.PreIncrementExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.bufsize = 8;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      try { 
        javaParser0.Arguments();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      boolean boolean1 = javaParser_ModifierSet0.isStatic(0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      boolean boolean2 = javaParser_ModifierSet0.isPrivate((-1127));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaParser0.lookingAhead);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals("", token0.toString());
      assertFalse(javaParser0.lookingAhead);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(1, token0.beginLine);
      
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertFalse(javaParser0.lookingAhead);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParser1.lookingAhead);
      
      try { 
        javaParser1.UnaryExpressionNotPlusMinus();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(64);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      assertNotNull(javaParser0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(javaParser0.lookingAhead);
      
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 1250);
      assertNotNull(simpleNode0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleNode0.jjtGetNumChildren());
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser javaParser1 = simpleNode0.parser;
      assertNotNull(javaParser1);
      assertSame(javaParser1, javaParser0);
      assertFalse(javaParser1.lookingAhead);
      
      Token token0 = javaParser0.getNextToken();
      assertNotNull(token0);
      assertSame(javaParser0, javaParser1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("", token0.toString());
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(1, token0.endLine);
      
      try { 
        javaParser1.ImportDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.EqualityExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("V");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser("V");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      Token token0 = javaParser0.getNextToken();
      assertNotNull(token0);
      assertEquals("", token0.toString());
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(0, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "r;AC\"$f");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      assertNotNull(javaParser0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.enable_tracing();
      assertEquals(0, pipedInputStream0.available());
      assertFalse(javaParser0.lookingAhead);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      try { 
        javaParser0.MemberValueArrayInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(bufferedInputStream0);
      assertNotNull(javaParser0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.PrimaryExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 64;
      PipedInputStream pipedInputStream0 = new PipedInputStream(64);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      assertNotNull(javaParser0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ClassOrInterfaceType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.LocalVariableDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 1875);
      assertNotNull(simpleNode0);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser javaParser1 = simpleNode0.parser;
      assertNotNull(javaParser1);
      assertSame(javaParser1, javaParser0);
      assertFalse(javaParser1.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser1.RelationalExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("QYHr[7&&D7Q");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.CompilationUnit();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.AndExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 642;
      PipedInputStream pipedInputStream0 = new PipedInputStream(642);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      assertNotNull(javaParser0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(javaParser0.lookingAhead);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "G*$=B4Kp@O,oFbk");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      pipedInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        javaParser0.Block();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)109;
      PipedInputStream pipedInputStream0 = new PipedInputStream(64);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      pipedInputStream0.mark(2990);
      assertEquals(0, pipedInputStream0.available());
      
      pipedInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      String string0 = ".*n\\Y8b^2S\"yD%";
      StringReader stringReader0 = new StringReader(".*nY8b^2S\"yD%");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.LabeledStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: .
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser javaParser1 = new JavaParser((Reader) null);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertFalse(javaParser1.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser1.ArgumentList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 1140);
      assertNotNull(simpleNode0);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser javaParser1 = simpleNode0.parser;
      assertNotNull(javaParser1);
      assertSame(javaParser1, javaParser0);
      assertFalse(javaParser1.lookingAhead);
      
      try { 
        javaParser1.VariableDeclaratorId();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        javaParser0.CompilationUnit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sbm$M|]0q|qH");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser javaParser1 = new JavaParser("         java JavaParser inputfile");
      assertNotNull(javaParser1);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertFalse(javaParser1.lookingAhead);
      
      try { 
        javaParser1.PackageDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)93;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)109, (byte) (-127), (byte)93, (byte)0, (byte) (-1), (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)109, (byte) (-127), (byte)93, (byte)0, (byte) (-1), (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)109, (byte) (-127), (byte)93, (byte)0, (byte) (-1), (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      InputStreamReader inputStreamReader0 = (InputStreamReader)javaCharStream0.inputStream;
      assertNotNull(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte)109, (byte) (-127), (byte)93, (byte)0, (byte) (-1), (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      javaCharStream0.nextCharInd = (int) (byte)0;
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser0 = new JavaParser(inputStreamReader0);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte)0, (byte)109, (byte) (-127), (byte)93, (byte)0, (byte) (-1), (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.AllocationExpression();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)109, (byte) (-127), (byte)93, (byte)91, (byte) (-1), (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)109, (byte) (-127), (byte)93, (byte)91, (byte) (-1), (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)109, (byte) (-127), (byte)93, (byte)91, (byte) (-1), (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)109, (byte) (-127), (byte)93, (byte)91, (byte) (-1), (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.SwitchLabel();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("\"\t\"");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.TryStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.FormalParameter();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(0);
      assertFalse(boolean0);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.AnnotationTypeBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)93, (byte) (-1), (byte) (-53), (byte) (-53), (byte)91}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(bufferedInputStream0, (byte)91, (-1602), 3953);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      javaCharStream1.ReInit((InputStream) pipedInputStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      InputStreamReader inputStreamReader0 = (InputStreamReader)javaCharStream1.inputStream;
      assertNotNull(inputStreamReader0);
      
      JavaParser javaParser0 = new JavaParser(inputStreamReader0);
      assertNotNull(javaParser0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.AllocationExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("p,");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.MemberValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      int int0 = 30;
      sequenceInputStream0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 0, 30);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      long long0 = sequenceInputStream0.skip(30);
      assertEquals(0L, long0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.CastLookahead();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 0, column 29.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.InstanceOfExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8!6aY%|+=r");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.CompilationUnit();
      assertFalse(javaParser0.lookingAhead);
      
      SystemInUtil.addInputLine(",LrVbiDL[(KY>3$");
      try { 
        javaParser0.PrimarySuffix();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      JavaParser javaParser0 = new JavaParser(reader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser javaParser1 = new JavaParser((Reader) null);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertFalse(javaParser1.lookingAhead);
      
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        javaParser1.dump(writer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(68);
      assertNotNull(simpleNode0);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
      
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      JavaParser javaParser0 = new JavaParser(reader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser javaParser1 = new JavaParser((Reader) null);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertFalse(javaParser1.lookingAhead);
      
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        javaParser1.dump(writer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sbm$M|]0q|qH");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.LocalVariableDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 6.  Encountered: |
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("vitPd0m%:Y#$\"");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      boolean boolean0 = false;
      try { 
        javaParser0.ResultType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JavaParser.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn("").when(file0).getAbsolutePath();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      
      boolean boolean0 = javaParser_ModifierSet0.isStatic(0);
      assertFalse(boolean0);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      
      boolean boolean1 = javaParser_ModifierSet0.isPrivate((-1127));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      
      int int0 = (-2083);
      JavaParser javaParser0 = new JavaParser("c;K_PNnr");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.Expression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(qzXr");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(40, int0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int1 = stringReader0.read();
      assertFalse(int1 == int0);
      assertEquals(113, int1);
      
      stringReader0.close();
      boolean boolean1 = stringReader0.markSupported();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[3];
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-7);
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertArrayEquals(new byte[] {(byte)53, (byte)24, (byte) (-7)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean3);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.RUNSIGNEDSHIFT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(64);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      assertNotNull(javaParser0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ClassOrInterfaceDeclaration(64);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JavaParser javaParser0 = null;
      try {
        javaParser0 = new JavaParser((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      int int0 = 0;
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 0, 30);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.curChar = '@';
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      long long0 = sequenceInputStream0.skip(0);
      assertEquals(0L, long0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.generateParseException();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("'@XOD`(r< ]~*[eMQF");
      assertNotNull(stringReader0);
      
      JavaParser.ModifierSet javaParser_ModifierSet1 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet1);
      assertFalse(javaParser_ModifierSet1.equals((Object)javaParser_ModifierSet0));
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      boolean boolean1 = javaParser_ModifierSet1.isAbstract(2853);
      assertFalse(javaParser_ModifierSet1.equals((Object)javaParser_ModifierSet0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(javaParser_ModifierSet1, javaParser_ModifierSet0);
      assertFalse(boolean1);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.SynchronizedStatement();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"X\" (88), after : \"\\'@\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-19);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)14, (byte)28, (byte)83, (byte) (-19)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)14, (byte)28, (byte)83, (byte) (-19)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 41);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)14, (byte)28, (byte)83, (byte) (-19)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(bufferedInputStream0);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte)14, (byte)28, (byte)83, (byte) (-19)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.MemberValuePairs();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\u000e\" (14), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal((-363));
      assertFalse(boolean0);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      JavaParser.ModifierSet javaParser_ModifierSet1 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet1);
      assertFalse(javaParser_ModifierSet1.equals((Object)javaParser_ModifierSet0));
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        pipedOutputStream0.connect(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      boolean boolean0 = javaParser_ModifierSet0.isAbstract(599);
      assertFalse(boolean0);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      
      JavaParser javaParser1 = new JavaParser((Reader) null);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertFalse(javaParser1.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.SynchronizedStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 1875);
      assertNotNull(simpleNode0);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser javaParser1 = simpleNode0.parser;
      assertNotNull(javaParser1);
      assertSame(javaParser1, javaParser0);
      assertFalse(javaParser1.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser1.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaParser0.lookingAhead);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      try { 
        javaParser0.VariableInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.SynchronizedStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: K
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isStrictfp(4096);
      assertTrue(boolean0);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaParser javaParser0 = new JavaParser(bufferedInputStream0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.Arguments();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      int int0 = (-1160);
      boolean boolean0 = javaParser_ModifierSet0.isStrictfp((-1160));
      assertTrue(boolean0);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      
      try { 
        bufferedInputStream0.available();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ImportDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaParser0.lookingAhead);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals("", token0.toString());
      assertFalse(javaParser0.lookingAhead);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager0);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertFalse(javaParser0.lookingAhead);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParser1.lookingAhead);
      
      try { 
        javaParser1.TryStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = "V";
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("V");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.InstanceOfExpression();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.PreDecrementExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(0);
      assertFalse(boolean0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      int int0 = (-633);
      boolean boolean1 = javaParser_ModifierSet0.isStatic((-633));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.CompilationUnit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertNotNull(javaParser_ModifierSet0);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      boolean boolean0 = javaParser_ModifierSet0.isProtected((-1210));
      assertTrue(boolean0);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      
      InputStream inputStream0 = null;
      JavaParser javaParser0 = null;
      try {
        javaParser0 = new JavaParser((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      // Undeclared exception!
      try { 
        javaParser0.WildcardBounds();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertNotNull(javaParser0);
      assertFalse(javaParser0.lookingAhead);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        javaParser0.ClassOrInterfaceBody(true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }
}

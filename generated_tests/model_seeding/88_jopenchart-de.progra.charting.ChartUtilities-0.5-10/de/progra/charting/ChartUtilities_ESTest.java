/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 22:27:52 GMT 2019
 */

package de.progra.charting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.progra.charting.ChartUtilities;
import java.util.LinkedList;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ChartUtilities_ESTest extends ChartUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[4];
      Byte byte0 = new Byte((byte)16);
      Byte.toUnsignedLong((byte) (-62));
      numberArray1[0] = (Number) byte0;
      treeSet0.add("");
      Short short0 = new Short((short) (-323));
      numberArray1[1] = (Number) short0;
      numberArray0[0] = numberArray1;
      // Undeclared exception!
      try { 
        ChartUtilities.addDataToSet(treeSet0, numberArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Byte
         //
         verifyException("java.lang.Byte", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = ChartUtilities.performAutoScale((-2925.233766820741), 8.0);
      int[][] intArray0 = new int[2][6];
      int[] intArray1 = new int[3];
      intArray1[0] = 4355;
      intArray1[1] = 4;
      intArray1[2] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      intArray2[0] = 4355;
      intArray2[1] = 1;
      intArray2[2] = 4;
      intArray2[3] = 4355;
      intArray2[4] = 4;
      intArray2[5] = 4;
      intArray2[6] = 1;
      intArray0[1] = intArray2;
      Number[][] numberArray0 = ChartUtilities.transformArray(intArray0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      ChartUtilities.addDataToSet(treeSet0, numberArray0);
      ChartUtilities.calculateTickSpacing((-2925.233766820741), 1);
      double[][] doubleArray1 = new double[7][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 1;
      doubleArray1[6] = doubleArray2;
      // Undeclared exception!
      try { 
        ChartUtilities.transformArray(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("de.progra.charting.ChartUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      ChartUtilities.calculateTickSpacing((-1.0), (-1.0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Number[][] numberArray0 = new Number[0][1];
      ChartUtilities.addDataToSet(treeSet0, numberArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      double[] doubleArray0 = new double[0];
      ChartUtilities.interpolate(doubleArray0, doubleArray0, (-2730.6));
      double[] doubleArray1 = ChartUtilities.performAutoScale(Double.NaN, (-2730.6));
      ChartUtilities.interpolate(doubleArray0, doubleArray1, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ChartUtilities.ceil((-632.294078372), 0);
      ChartUtilities.calculateTickSpacing(0, (-632.294078372));
      ChartUtilities.exp(10.0);
      double[][] doubleArray0 = new double[5][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[3] = (-632.294078372);
      ChartUtilities.transformArray(doubleArray0);
      ChartUtilities.transformArray(doubleArray0);
      ChartUtilities.calculateTickSpacing(0, 4.0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      ChartUtilities.transformArray(intArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = ChartUtilities.performAutoScale((-2925.233766820741), 8.0);
      int[][] intArray0 = new int[2][6];
      int[] intArray1 = new int[3];
      intArray1[0] = 4355;
      intArray1[1] = 4;
      intArray1[2] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      intArray2[0] = 4355;
      intArray2[1] = 1;
      intArray2[2] = 4;
      intArray2[3] = 4355;
      intArray2[4] = 4;
      intArray2[5] = 4;
      intArray2[6] = 1;
      intArray0[1] = intArray2;
      Number[][] numberArray0 = ChartUtilities.transformArray(intArray0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      ChartUtilities.addDataToSet(treeSet0, numberArray0);
      ChartUtilities.calculateTickSpacing((-2925.233766820741), 1);
      double[][] doubleArray1 = new double[7][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      ChartUtilities.interpolate(doubleArray0, doubleArray0, 1914.97114784676);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      treeSet0.clone();
      Number[][] numberArray0 = new Number[0][1];
      ChartUtilities.addDataToSet(treeSet0, numberArray0);
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1635.81009;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (-134.1698347283);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      ChartUtilities.interpolate(doubleArray1, doubleArray2, (-1.0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ChartUtilities.exp(1952.725956192464);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Number[][] numberArray0 = new Number[8][9];
      Number[] numberArray1 = new Number[2];
      Integer integer0 = new Integer(1350);
      numberArray1[0] = (Number) integer0;
      Double double0 = new Double(1350);
      numberArray1[1] = (Number) double0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = (Number) double0;
      numberArray2[2] = (Number) double0;
      numberArray2[3] = (Number) double0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[8];
      Float float0 = new Float(0.0);
      numberArray3[0] = (Number) float0;
      numberArray3[1] = (Number) double0;
      numberArray3[2] = (Number) integer0;
      Integer integer1 = new Integer(443);
      numberArray3[3] = (Number) integer1;
      Float float1 = new Float((float) 3);
      numberArray3[4] = (Number) float1;
      numberArray3[5] = (Number) double0;
      numberArray3[6] = (Number) double0;
      numberArray3[7] = (Number) integer0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[1];
      numberArray4[0] = (Number) double0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[7];
      numberArray5[0] = (Number) float1;
      numberArray5[1] = (Number) float0;
      numberArray5[2] = (Number) integer0;
      numberArray5[3] = (Number) float0;
      numberArray5[4] = (Number) float1;
      numberArray5[5] = (Number) integer0;
      numberArray5[6] = (Number) float1;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[3];
      numberArray6[0] = (Number) double0;
      numberArray6[1] = (Number) integer0;
      numberArray6[2] = (Number) integer1;
      numberArray0[5] = numberArray6;
      Number[] numberArray7 = new Number[2];
      numberArray7[0] = (Number) integer0;
      numberArray7[1] = (Number) double0;
      numberArray0[6] = numberArray7;
      Number[] numberArray8 = new Number[2];
      numberArray8[0] = (Number) double0;
      numberArray8[1] = (Number) float1;
      numberArray0[7] = numberArray8;
      // Undeclared exception!
      try { 
        ChartUtilities.addDataToSet(treeSet0, numberArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.Double
         //
         verifyException("java.lang.Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ChartUtilities.ceil(921.8419463131, 0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Number[][] numberArray0 = new Number[7][1];
      Number[] numberArray1 = new Number[2];
      Float float0 = new Float((-340.94894F));
      numberArray1[0] = (Number) float0;
      Float float1 = Float.valueOf(0.0F);
      numberArray1[1] = (Number) float1;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      numberArray2[0] = (Number) float1;
      numberArray2[1] = (Number) float1;
      numberArray2[2] = (Number) float1;
      numberArray2[3] = (Number) float0;
      numberArray2[4] = (Number) float0;
      numberArray2[5] = (Number) float1;
      numberArray2[6] = (Number) float1;
      numberArray2[7] = (Number) float0;
      numberArray2[8] = (Number) float0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[5];
      numberArray3[0] = (Number) float0;
      numberArray3[1] = (Number) float0;
      numberArray3[2] = (Number) float0;
      numberArray3[3] = (Number) float1;
      numberArray3[4] = (Number) float0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[3];
      numberArray4[0] = (Number) float1;
      numberArray4[1] = (Number) float0;
      Float float2 = new Float(921.8419463131);
      numberArray4[2] = (Number) float2;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[9];
      numberArray5[0] = (Number) float2;
      numberArray5[1] = (Number) float2;
      numberArray5[2] = (Number) float1;
      numberArray5[3] = (Number) float1;
      numberArray5[4] = (Number) float0;
      numberArray5[5] = (Number) float1;
      numberArray5[6] = (Number) float0;
      numberArray5[7] = (Number) float0;
      Long.getLong((String) null);
      numberArray5[8] = (Number) null;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[7];
      numberArray6[0] = (Number) null;
      Byte byte0 = new Byte((byte) (-37));
      numberArray6[1] = (Number) byte0;
      numberArray6[2] = (Number) float0;
      numberArray6[3] = (Number) float0;
      Short short0 = new Short((byte) (-37));
      numberArray6[4] = (Number) short0;
      numberArray6[5] = (Number) float2;
      numberArray6[6] = (Number) float0;
      numberArray0[5] = numberArray6;
      Number[] numberArray7 = new Number[1];
      numberArray7[0] = (Number) short0;
      numberArray0[6] = numberArray7;
      // Undeclared exception!
      try { 
        ChartUtilities.addDataToSet(treeSet0, numberArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 235.71314035913;
      doubleArray0[4] = (-1702.34919772);
      ChartUtilities.interpolate(doubleArray0, doubleArray0, 6.0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      int[] intArray0 = new int[0];
      ChartUtilities.transformArray(intArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "ye^exj1+#88-m7r$R";
      stringArray0[3] = "Hs";
      stringArray0[4] = "";
      stringArray0[5] = "Hs";
      stringArray0[6] = "";
      ChartUtilities.main(stringArray0);
      ChartUtilities.performAutoScale(3.0, Double.NaN);
      ChartUtilities.calculateTickSpacing(3.0, 8.0);
      ChartUtilities.transformArray(intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChartUtilities.transformArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.ChartUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChartUtilities.transformArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.ChartUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ChartUtilities.calculateTickSpacing((-1074.308), 785.77);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      ChartUtilities.interpolate(doubleArray0, doubleArray0, 4.78427817145646);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = ChartUtilities.performAutoScale((-2925.233766820741), 0.001);
      ChartUtilities.transformArray(doubleArray0);
      ChartUtilities.calculateTickSpacing((-948.2), 1518.6723076093);
      ChartUtilities.exp(0.009000000000000001);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 0;
      ChartUtilities.floor(0.0, 0);
      ChartUtilities chartUtilities0 = new ChartUtilities();
      // Undeclared exception!
      try { 
        ChartUtilities.transformArray((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.ChartUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[][] intArray0 = new int[6][5];
      int[] intArray1 = new int[1];
      intArray1[0] = (-1402);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      intArray3[0] = (-1402);
      intArray3[1] = (-1402);
      intArray3[2] = (-1402);
      intArray3[3] = (-1402);
      intArray3[4] = (-1402);
      intArray3[5] = (-1402);
      intArray3[6] = 443;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[1];
      intArray4[0] = 443;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[7];
      intArray5[0] = (-1402);
      intArray5[1] = (-1402);
      intArray5[2] = (-1402);
      intArray5[3] = (-1402);
      intArray5[4] = (-1643);
      intArray5[5] = (-1402);
      intArray5[6] = 443;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[2];
      intArray6[0] = (-1402);
      intArray6[1] = (-1402);
      intArray0[5] = intArray6;
      // Undeclared exception!
      try { 
        ChartUtilities.transformArray(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("de.progra.charting.ChartUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[][] doubleArray0 = new double[0][3];
      // Undeclared exception!
      try { 
        ChartUtilities.transformArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("de.progra.charting.ChartUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[4];
      double[] doubleArray0 = new double[1];
      ChartUtilities.transformArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ChartUtilities.calculateTickSpacing(1.0, 0.003);
      ChartUtilities.main((String[]) null);
      double[] doubleArray0 = new double[0];
      ChartUtilities.transformArray(doubleArray0);
      ChartUtilities.interpolate(doubleArray0, doubleArray0, (-396.047507537));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[][] intArray0 = new int[16][6];
      ChartUtilities.transformArray(intArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[][] doubleArray0 = new double[9][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 6.0;
      doubleArray1[2] = (-2907.714575154);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-172.0);
      doubleArray1[5] = 3785.08774849009;
      doubleArray1[6] = (-2984.3875);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-172.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (-2984.3875);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 3785.08774849009;
      doubleArray4[1] = (-2907.714575154);
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 6.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (-2984.3875);
      doubleArray5[2] = 0.0;
      doubleArray5[3] = (-2984.3875);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = 6.0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = (-2984.3875);
      doubleArray6[3] = (-2984.3875);
      doubleArray6[4] = (-172.0);
      doubleArray6[5] = 0.0;
      doubleArray6[6] = (-172.0);
      doubleArray6[7] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 3785.08774849009;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = (-2984.3875);
      doubleArray8[2] = 0.0;
      doubleArray8[3] = 0.0;
      doubleArray8[4] = (-2907.714575154);
      doubleArray8[5] = (-2984.3875);
      doubleArray8[6] = 0.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[2];
      doubleArray9[0] = 0.0;
      doubleArray9[1] = 0.0;
      doubleArray0[8] = doubleArray9;
      // Undeclared exception!
      try { 
        ChartUtilities.transformArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("de.progra.charting.ChartUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ChartUtilities.ceil((-632.294078372), 0);
      ChartUtilities.calculateTickSpacing(0, (-632.294078372));
      ChartUtilities.exp(10.0);
      double[][] doubleArray0 = new double[5][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 264.9045;
      doubleArray1[3] = (-632.294078372);
      doubleArray1[4] = 10.0;
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 10.0;
      doubleArray2[1] = (-632.0);
      doubleArray2[2] = (-632.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 10.0;
      doubleArray3[1] = 10.0;
      doubleArray3[2] = 5.0;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = 264.9045;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 5.0;
      doubleArray4[1] = 264.9045;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (-632.294078372);
      doubleArray4[4] = 10.0;
      doubleArray4[5] = 5.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = (-632.0);
      doubleArray0[4] = doubleArray5;
      // Undeclared exception!
      try { 
        ChartUtilities.transformArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("de.progra.charting.ChartUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ChartUtilities.exp((-3898.991));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ChartUtilities chartUtilities0 = new ChartUtilities();
      int[] intArray0 = new int[6];
      intArray0[0] = 591;
      intArray0[1] = (-304);
      intArray0[2] = 0;
      intArray0[3] = (-7);
      intArray0[4] = 1;
      intArray0[5] = 0;
      ChartUtilities.transformArray(intArray0);
      ChartUtilities.floor(2874.927540321, 359);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-869.31);
      doubleArray0[1] = 530.0;
      doubleArray0[2] = 0.5;
      doubleArray0[3] = (-0.00337);
      doubleArray0[4] = (-1787.34842996211);
      ChartUtilities.interpolate(doubleArray0, doubleArray0, (-0.00337));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[10];
      ChartUtilities.main(stringArray0);
      assertEquals(10, stringArray0.length);
      
      int int0 = ChartUtilities.exp((-10.0));
      assertEquals(1, int0);
      
      // Undeclared exception!
      ChartUtilities.performAutoScale(0.001, 0.001);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      Number[][] numberArray0 = ChartUtilities.transformArray(doubleArray0);
      assertNotNull(numberArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = ChartUtilities.exp((-4.915526104128947));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChartUtilities.addDataToSet((TreeSet) null, (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.ChartUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = ChartUtilities.ceil(0.0, (-2747));
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2747);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) (-2747);
      doubleArray0[4] = Double.NaN;
      int[] intArray0 = new int[8];
      intArray0[0] = 1879048192;
      intArray0[1] = 0;
      intArray0[2] = (-2747);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-2747);
      intArray0[6] = 0;
      intArray0[7] = (-2747);
      Number[] numberArray0 = ChartUtilities.transformArray(intArray0);
      assertNotNull(numberArray0);
      assertEquals(8, numberArray0.length);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1879048192, 0, (-2747), 0, 0, (-2747), 0, (-2747)}, intArray0);
      
      double double1 = ChartUtilities.floor(1879048192, 2);
      assertEquals(1.8790481E9, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "** Given values [-4, 64], [0, 0], [3, 36]";
      stringArray0[1] = "";
      stringArray0[2] = "** Performing interpolation for 5 * x^3 - 4 * x^2 + 2 * x - 5";
      stringArray0[3] = "";
      stringArray0[4] = ".@5hll";
      stringArray0[5] = " ";
      ChartUtilities.main(stringArray0);
      assertEquals(6, stringArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2.5;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2.5;
      doubleArray1[1] = 2.5;
      doubleArray1[2] = 2.5;
      doubleArray1[3] = 2.5;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = 2.5;
      doubleArray1[6] = 2.5;
      double double0 = ChartUtilities.interpolate(doubleArray0, doubleArray1, 566.7);
      assertEquals(2, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 2.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.5, 2.5, 2.5, 2.5, (-1.0), 2.5, 2.5}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 0;
      double double0 = ChartUtilities.floor(0.0, 0);
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        ChartUtilities.transformArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.ChartUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[][] intArray0 = new int[0][7];
      // Undeclared exception!
      try { 
        ChartUtilities.transformArray(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("de.progra.charting.ChartUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChartUtilities.transformArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.ChartUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double double0 = ChartUtilities.floor(571.698979317819, 572);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[][] doubleArray0 = new double[9][4];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = Double.NaN;
      doubleArray2[2] = (double) 572;
      doubleArray2[3] = Double.NaN;
      doubleArray2[4] = Double.NaN;
      doubleArray2[5] = (double) 572;
      doubleArray2[6] = Double.NaN;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = Double.NaN;
      doubleArray3[1] = (double) 572;
      doubleArray3[2] = Double.NaN;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 2149.5972155434347;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = Double.NaN;
      doubleArray3[8] = (double) 572;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 572;
      doubleArray4[1] = (double) 572;
      doubleArray4[2] = (-2.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      
      doubleArray7[0] = 2149.5972155434347;
      doubleArray7[1] = (double) 572;
      doubleArray7[2] = (double) 572;
      doubleArray7[3] = (double) 572;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[1];
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      
      doubleArray9[0] = 1.0;
      doubleArray0[8] = doubleArray9;
      Number[][] numberArray0 = ChartUtilities.transformArray(doubleArray0);
      assertNotNull(numberArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChartUtilities.transformArray((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.ChartUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      ChartUtilities.performAutoScale((-2925.233766820741), (-2925.233766820741));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double double0 = ChartUtilities.ceil((-632.294078372), 0);
      assertEquals((-632.0), double0, 0.01);
      
      double double1 = ChartUtilities.calculateTickSpacing(0, (-632.294078372));
      assertEquals(5.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int int0 = ChartUtilities.exp(10.0);
      assertEquals(1, int0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 264.9045;
      doubleArray0[3] = (-632.294078372);
      double double2 = ChartUtilities.floor((-632.294078372), 1);
      assertEquals((-640.0), double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      int int1 = ChartUtilities.exp(10.0);
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      
      double double3 = ChartUtilities.interpolate(doubleArray0, doubleArray0, (-632.294078372));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 264.9045, (-632.294078372), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      int int2 = ChartUtilities.exp((-632.294078372));
      assertEquals(2, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = ChartUtilities.exp((-1.0));
      assertEquals(0, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      String[] stringArray0 = new String[0];
      ChartUtilities.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      Number[] numberArray0 = ChartUtilities.transformArray(intArray0);
      assertNotNull(numberArray0);
      assertEquals(3, numberArray0.length);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 0}, intArray0);
      
      double double4 = ChartUtilities.calculateTickSpacing(780.044, 2405.84017);
      assertEquals(50.0, double4, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      
      double[] doubleArray1 = ChartUtilities.performAutoScale(2587.237712, (-1057.5342039380228));
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {2000.0, (-1000.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[1];
      Number[] numberArray0 = ChartUtilities.transformArray(intArray0);
      assertNotNull(numberArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, numberArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ChartUtilities.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-376);
      intArray0[1] = 1;
      intArray0[2] = (-349);
      Number[] numberArray0 = ChartUtilities.transformArray(intArray0);
      assertNotNull(numberArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, numberArray0.length);
      assertArrayEquals(new int[] {(-376), 1, (-349)}, intArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-376);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-376);
      doubleArray0[3] = (double) (-349);
      double double0 = ChartUtilities.interpolate(doubleArray0, doubleArray0, 0.0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-376.0), 1.0, (-376.0), (-349.0)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = ChartUtilities.calculateTickSpacing((-974.77063013895), (-4813.203739948854));
      assertEquals(50.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = ChartUtilities.calculateTickSpacing(0.0, 1);
      assertEquals(0.05, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double[] doubleArray1 = ChartUtilities.performAutoScale(1971.484587971, (-3029.6272692874572));
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {1000.0, (-3000.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>(linkedList0);
      assertNotNull(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>(linkedList1);
      assertNotNull(treeSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      Number[][] numberArray0 = new Number[6][2];
      Number[] numberArray1 = new Number[2];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      numberArray1[0] = (Number) integer0;
      Float float0 = new Float((double) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      numberArray1[1] = (Number) float0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) float0;
      numberArray2[1] = (Number) integer0;
      numberArray2[2] = (Number) float0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[2];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) integer0;
      numberArray3[1] = (Number) integer0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[6];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      
      double double0 = ChartUtilities.ceil(0, 0);
      assertEquals(0.0, double0, 0.01);
      
      numberArray4[0] = (Number) 0.0;
      numberArray4[1] = (Number) float0;
      numberArray4[2] = (Number) integer0;
      try { 
        Byte.valueOf((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[9];
      intArray1[0] = 0;
      intArray1[1] = (-1907);
      intArray1[2] = 0;
      intArray1[3] = 1024;
      intArray1[4] = 2757;
      intArray1[5] = 2772;
      intArray1[6] = (-1586);
      intArray1[7] = 0;
      intArray1[8] = 3684;
      intArray0[0] = intArray1;
      Number[][] numberArray0 = ChartUtilities.transformArray(intArray0);
      assertNotNull(numberArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double double0 = ChartUtilities.ceil(1384.623, (-930));
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) (-930);
      doubleArray0[2] = 1384.623;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 1384.623;
      doubleArray0[6] = (double) (-930);
      doubleArray0[7] = 1384.623;
      double double1 = ChartUtilities.interpolate(doubleArray0, doubleArray0, 1384.623);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, (-930.0), 1384.623, Double.NaN, Double.NaN, 1384.623, (-930.0), 1384.623}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = ChartUtilities.floor((-930), 58);
      assertEquals((-1.0E58), double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      ChartUtilities.main(stringArray0);
      assertEquals(2, stringArray0.length);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(Double.NaN));
      
      Number[][] numberArray0 = new Number[7][1];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = (Number) (-930.0);
      numberArray1[1] = (Number) Double.NaN;
      numberArray1[2] = (Number) 1384.623;
      numberArray1[3] = (Number) 1384.623;
      numberArray1[4] = (Number) Double.NaN;
      numberArray1[5] = (Number) Double.NaN;
      numberArray1[6] = (Number) 1384.623;
      numberArray1[7] = (Number) (-930.0);
      numberArray1[8] = (Number) (-930.0);
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[1];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) 1384.623;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[4];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      
      numberArray4[0] = (Number) Double.NaN;
      numberArray4[1] = (Number) 1384.623;
      Long long0 = new Long(422L);
      assertNotNull(long0);
      assertEquals(422L, (long)long0);
      
      numberArray4[2] = (Number) long0;
      numberArray4[3] = (Number) 1384.623;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[1];
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray2));
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray3));
      
      Short short0 = new Short((short) (-4062));
      assertNotNull(short0);
      assertEquals((short) (-4062), (short)short0);
      
      numberArray5[0] = (Number) short0;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[2];
      assertFalse(numberArray6.equals((Object)numberArray1));
      assertFalse(numberArray6.equals((Object)numberArray3));
      assertFalse(numberArray6.equals((Object)numberArray5));
      assertFalse(numberArray6.equals((Object)numberArray2));
      assertFalse(numberArray6.equals((Object)numberArray4));
      
      numberArray6[0] = (Number) (-930.0);
      numberArray6[1] = (Number) 1384.623;
      numberArray0[5] = numberArray6;
      Number[] numberArray7 = new Number[1];
      assertFalse(numberArray7.equals((Object)numberArray2));
      assertFalse(numberArray7.equals((Object)numberArray4));
      assertFalse(numberArray7.equals((Object)numberArray1));
      assertFalse(numberArray7.equals((Object)numberArray5));
      assertFalse(numberArray7.equals((Object)numberArray6));
      assertFalse(numberArray7.equals((Object)numberArray3));
      
      numberArray7[0] = (Number) 1384.623;
      numberArray0[6] = numberArray7;
      // Undeclared exception!
      try { 
        ChartUtilities.addDataToSet(treeSet0, numberArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.Long
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        ChartUtilities.interpolate(doubleArray0, doubleArray0, 3710.779);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("de.progra.charting.ChartUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      
      Number[][] numberArray0 = new Number[2][1];
      // Undeclared exception!
      try { 
        ChartUtilities.addDataToSet(treeSet0, numberArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double double0 = (-10.0);
      double double1 = ChartUtilities.floor((-10.0), (-2109));
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-10.0);
      double double2 = ChartUtilities.interpolate(doubleArray0, doubleArray0, Double.NaN);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, (-10.0)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      double double3 = 357.65891528;
      double[] doubleArray1 = ChartUtilities.performAutoScale((-10.0), 357.65891528);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-100.0), 400.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double4 = (-511.76);
      double double5 = ChartUtilities.calculateTickSpacing(1424.5, (-511.76));
      assertEquals(50.0, double5, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      
      double double6 = ChartUtilities.floor(50.0, (-1902));
      assertEquals(Double.NaN, double6, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(double6, double2, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertEquals(double6, double1, 0.01);
      
      // Undeclared exception!
      ChartUtilities.exp(0.0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 05 12:57:35 GMT 2019
 */

package Newzgrabber;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Newzgrabber.MultiLineLabel;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.text.Format;
import java.util.Hashtable;
import javax.swing.JTextPane;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.Style;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiLineLabel_ESTest extends MultiLineLabel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("sIFD,f>[jF[KIA[[P&", 2);
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      AttributeSet attributeSet0 = jTextPane0.getCharacterAttributes();
      Font font0 = styleContext0.getFont(attributeSet0);
      multiLineLabel0.setFont(font0);
      // Undeclared exception!
      try { 
        multiLineLabel0.paint((Graphics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Newzgrabber.MultiLineLabel", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("5ppf`5CV", (-2050), 2, 2);
      // Undeclared exception!
      try { 
        multiLineLabel0.paint((Graphics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Newzgrabber.MultiLineLabel", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel(";^nv]@_V", 10, 0);
      // Undeclared exception!
      try { 
        multiLineLabel0.paint((Graphics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Newzgrabber.MultiLineLabel", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("\n", 126, 126);
      multiLineLabel0.paint((Graphics) null);
      assertEquals(126, multiLineLabel0.getMarginHeight());
      assertEquals(126, multiLineLabel0.getMarginWidth());
      assertEquals(0, multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("");
      Dimension dimension0 = multiLineLabel0.getMinimumSize();
      assertEquals(0, dimension0.width);
      assertEquals(10, multiLineLabel0.getMarginWidth());
      assertEquals(10, multiLineLabel0.getMarginHeight());
      assertEquals(0, multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("\n", 126, 126);
      Dimension dimension0 = multiLineLabel0.getPreferredSize();
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(252, dimension0.width);
      assertEquals(252, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Hashtable<Format.Field, Object> hashtable0 = new Hashtable<Format.Field, Object>();
      Font font0 = new Font(hashtable0);
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("v-dYWXWtx;V-0hVk=");
      multiLineLabel0.setFont(font0);
      Dimension dimension0 = multiLineLabel0.getPreferredSize();
      assertEquals(35, dimension0.height);
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(142, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("E", 2, 2);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      SimpleAttributeSet simpleAttributeSet0 = new SimpleAttributeSet();
      Font font0 = defaultStyledDocument0.getFont(simpleAttributeSet0);
      Font font1 = font0.deriveFont(0, (-5440.1426F));
      multiLineLabel0.setFont(font1);
      assertEquals(2, multiLineLabel0.getMarginWidth());
      assertEquals(2, multiLineLabel0.getMarginHeight());
      assertEquals(0, multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("\n", 126, 126);
      Font font0 = Font.decode("\n");
      multiLineLabel0.setFont(font0);
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(126, multiLineLabel0.getMarginWidth());
      assertEquals(126, multiLineLabel0.getMarginHeight());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("se", (-3591));
      multiLineLabel0.newLabel("3ym&");
      assertEquals(10, multiLineLabel0.getMarginWidth());
      assertEquals(10, multiLineLabel0.getMarginHeight());
      assertEquals((-3591), multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("E", 2, 2);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      SimpleAttributeSet simpleAttributeSet0 = new SimpleAttributeSet();
      Font font0 = defaultStyledDocument0.getFont(simpleAttributeSet0);
      multiLineLabel0.setFont(font0);
      multiLineLabel0.measure();
      assertEquals(2, multiLineLabel0.getMarginHeight());
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(2, multiLineLabel0.getMarginWidth());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("z", 126, 126);
      Font font0 = Font.decode("z");
      multiLineLabel0.setFont(font0);
      multiLineLabel0.addNotify();
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(126, multiLineLabel0.getMarginWidth());
      assertEquals(126, multiLineLabel0.getMarginHeight());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("tKk9+m*.gos6hU", 10, 0);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      Style style0 = defaultStyledDocument0.addStyle("qHa?zE\"Z#>%9", (Style) null);
      Font font0 = defaultStyledDocument0.getFont(style0);
      multiLineLabel0.setFont(font0);
      multiLineLabel0.setLabel(";DV&`.N_~6Dw");
      assertEquals(10, multiLineLabel0.getMarginWidth());
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(0, multiLineLabel0.getMarginHeight());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("Create", 0, (-704), (-704));
      Dimension dimension0 = multiLineLabel0.getPreferredSize();
      assertEquals(0, dimension0.width);
      assertEquals((-1408), dimension0.height);
      assertEquals((-704), multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("v-dYWXWtx;V-0hVk=", (-332), 0);
      Dimension dimension0 = multiLineLabel0.getPreferredSize();
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(0, dimension0.height);
      assertEquals((-664), dimension0.width);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel(";^nv]@_V", 10, 0);
      multiLineLabel0.setMarginHeight((-252));
      multiLineLabel0.getPreferredSize();
      assertEquals((-252), multiLineLabel0.getMarginHeight());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel(" j/)", (-115), (-1113));
      multiLineLabel0.max_width = (-1113);
      Dimension dimension0 = multiLineLabel0.getMinimumSize();
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals((-115), multiLineLabel0.getMarginWidth());
      assertEquals((-1113), dimension0.width);
      assertEquals(0, dimension0.height);
      assertEquals((-1113), multiLineLabel0.getMarginHeight());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("tKk9+m*.gos6hU", 10, 0);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      Style style0 = defaultStyledDocument0.addStyle("qHa?zE\"Z#>%9", (Style) null);
      Font font0 = defaultStyledDocument0.getFont(style0);
      multiLineLabel0.setFont(font0);
      Dimension dimension0 = multiLineLabel0.getMinimumSize();
      assertEquals(0, multiLineLabel0.getMarginHeight());
      assertEquals(10, multiLineLabel0.getMarginWidth());
      assertEquals(15, dimension0.height);
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(98, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("", 0, 90, 0);
      int int0 = multiLineLabel0.getMarginWidth();
      assertEquals(90, multiLineLabel0.getMarginHeight());
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("", (-1), 253, (-1));
      int int0 = multiLineLabel0.getMarginWidth();
      assertEquals((-1), int0);
      assertEquals(253, multiLineLabel0.getMarginHeight());
      assertEquals((-1), multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("");
      int int0 = multiLineLabel0.getMarginHeight();
      assertEquals(10, multiLineLabel0.getMarginWidth());
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel(",OGoP+9qW%$", 10, (-872), (-872));
      int int0 = multiLineLabel0.getMarginHeight();
      assertEquals((-872), multiLineLabel0.getAlignment());
      assertEquals((-872), int0);
      assertEquals(10, multiLineLabel0.getMarginWidth());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("K3[c", (-1239), 0, 1257);
      int int0 = multiLineLabel0.getAlignment();
      assertEquals(1257, int0);
      assertEquals(0, multiLineLabel0.getMarginHeight());
      assertEquals((-1239), multiLineLabel0.getMarginWidth());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel(",OGoP+9qW%$", 10, (-872), (-872));
      int int0 = multiLineLabel0.getAlignment();
      assertEquals((-872), int0);
      assertEquals((-872), multiLineLabel0.getMarginHeight());
      assertEquals(10, multiLineLabel0.getMarginWidth());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("");
      // Undeclared exception!
      try { 
        multiLineLabel0.setFont((Font) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("\n", (-18));
      multiLineLabel0.num_lines = 2956;
      // Undeclared exception!
      try { 
        multiLineLabel0.paint((Graphics) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("Newzgrabber.MultiLineLabel", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("Di:ect|ry Dialog");
      // Undeclared exception!
      try { 
        multiLineLabel0.newLabel((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("");
      // Undeclared exception!
      try { 
        multiLineLabel0.measure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = null;
      try {
        multiLineLabel0 = new MultiLineLabel((String) null, 1, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = null;
      try {
        multiLineLabel0 = new MultiLineLabel((String) null, (-18), 1482);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = null;
      try {
        multiLineLabel0 = new MultiLineLabel((String) null, (-2170));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = null;
      try {
        multiLineLabel0 = new MultiLineLabel((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("[Up to parent directory]", 1);
      // Undeclared exception!
      try { 
        multiLineLabel0.paint((Graphics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Newzgrabber.MultiLineLabel", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("s:v393");
      multiLineLabel0.num_lines = (-2618);
      multiLineLabel0.paint((Graphics) null);
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(10, multiLineLabel0.getMarginWidth());
      assertEquals(10, multiLineLabel0.getMarginHeight());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel(";");
      Font font0 = new Font(";", 1, 1);
      multiLineLabel0.setFont(font0);
      assertEquals(10, multiLineLabel0.getMarginWidth());
      assertEquals(10, multiLineLabel0.getMarginHeight());
      assertEquals(0, multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("%?uSAKe%)*", 833);
      multiLineLabel0.setAlignment((-1654));
      assertEquals((-1654), multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("tKk9+m*.gos6hU", 10, 0);
      int int0 = multiLineLabel0.getAlignment();
      assertEquals(10, multiLineLabel0.getMarginWidth());
      assertEquals(0, multiLineLabel0.getMarginHeight());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("K3[c", (-1239), 0, 1257);
      int int0 = multiLineLabel0.getMarginHeight();
      assertEquals((-1239), multiLineLabel0.getMarginWidth());
      assertEquals(1257, multiLineLabel0.getAlignment());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("tKk9+m*.gos6hU", 10, 0);
      // Undeclared exception!
      try { 
        multiLineLabel0.setLabel(";DV&`.N_~6Dw");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("Can not change to ");
      multiLineLabel0.setMarginWidth(3410);
      assertEquals(3410, multiLineLabel0.getMarginWidth());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("z", 126, 126);
      // Undeclared exception!
      try { 
        multiLineLabel0.addNotify();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel(";^nv]@_V", 10, 0);
      int int0 = multiLineLabel0.getMarginWidth();
      assertEquals(0, multiLineLabel0.getMarginHeight());
      assertEquals(10, int0);
      assertEquals(0, multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Font font0 = Font.decode((String) null);
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("Newzgrabber.MultiLineLabel", 106, (-435), (-435));
      multiLineLabel0.setFont(font0);
      // Undeclared exception!
      try { 
        multiLineLabel0.paint((Graphics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Newzgrabber.MultiLineLabel", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("NewzrabberMultiLineLael");
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBorderSelectionColor();
      multiLineLabel0.setForeground(color0);
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(10, multiLineLabel0.getMarginWidth());
      assertEquals(10, multiLineLabel0.getMarginHeight());
  }
}

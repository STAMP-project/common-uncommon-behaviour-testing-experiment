/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 20:25:27 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import java.awt.image.ImageProducer;
import javax.swing.JLayeredPane;
import jigl.image.ColorModel;
import jigl.image.InterpolationMethod;
import jigl.image.ROI;
import jigl.image.types.ColorImage;
import jigl.image.types.InterpolatedColorImage;
import jigl.image.types.InterpolatedGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ColorImage_ESTest extends ColorImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 13;
      ColorImage colorImage0 = new ColorImage(13, 118);
      assertEquals(118, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(13, colorImage0.X());
      assertNotNull(colorImage0);
      
      Integer[] integerArray0 = colorImage0.min();
      assertEquals(118, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(13, colorImage0.X());
      assertEquals(3, integerArray0.length);
      assertNotNull(integerArray0);
      
      ROI rOI0 = new ROI(13, 13, 13, 13);
      assertEquals(13, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(13, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(13, rOI0.ux());
      assertEquals(13, rOI0.uy());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI(13, 13, (-710), 118);
      assertEquals(13, rOI1.uy());
      assertEquals(118, rOI1.ly());
      assertEquals(106, rOI1.Y());
      assertEquals((-710), rOI1.ux());
      assertEquals(724, rOI1.X());
      assertEquals(13, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      // Undeclared exception!
      try { 
        colorImage0.add(13, 118, 7, 0, 118, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 131
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(2, 2);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2, colorImage0.X());
      assertEquals(2, colorImage0.Y());
      assertNotNull(colorImage0);
      
      ColorImage colorImage1 = new ColorImage(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2, colorImage0.X());
      assertEquals(2, colorImage0.Y());
      assertEquals(2, colorImage1.Y());
      assertEquals(2, colorImage1.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertNotNull(colorImage1);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      ColorImage colorImage2 = colorImage1.copy(rOI0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2, colorImage0.X());
      assertEquals(2, colorImage0.Y());
      assertEquals(2, colorImage1.Y());
      assertEquals(2, colorImage1.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, colorImage2.Y());
      assertEquals(1, colorImage2.X());
      assertEquals(ColorModel.RGB, colorImage2.getColorModel());
      assertFalse(colorImage0.equals((Object)colorImage1));
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertFalse(colorImage2.equals((Object)colorImage1));
      assertFalse(colorImage2.equals((Object)colorImage0));
      assertNotSame(colorImage0, colorImage2);
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage1, colorImage0);
      assertNotSame(colorImage1, colorImage2);
      assertNotSame(colorImage2, colorImage1);
      assertNotSame(colorImage2, colorImage0);
      assertNotNull(colorImage2);
      
      ColorImage colorImage3 = new ColorImage(0, 0);
      assertEquals(ColorModel.RGB, colorImage3.getColorModel());
      assertEquals(0, colorImage3.X());
      assertEquals(0, colorImage3.Y());
      assertFalse(colorImage3.equals((Object)colorImage2));
      assertFalse(colorImage3.equals((Object)colorImage1));
      assertFalse(colorImage3.equals((Object)colorImage0));
      assertNotNull(colorImage3);
      
      // Undeclared exception!
      try { 
        colorImage3.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      ColorImage colorImage1 = new ColorImage(0, 0);
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertNotNull(colorImage1);
      
      long[] longArray0 = colorImage1.sqrSum();
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertEquals(3, longArray0.length);
      assertNotSame(colorImage1, colorImage0);
      assertNotNull(longArray0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1370;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      // Undeclared exception!
      try { 
        colorImage0.subtract(intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        colorImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(16, 16);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(16, interpolatedColorImage0.Y());
      assertEquals(16, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(16, interpolatedColorImage0.Y());
      assertEquals(16, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(16, interpolatedColorImage1.Y());
      assertEquals(16, interpolatedColorImage1.X());
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage1);
      
      int int0 = 2023;
      ROI rOI0 = new ROI(255, 2023, 16, 16);
      assertEquals(240, rOI0.X());
      assertEquals(255, rOI0.lx());
      assertEquals(2008, rOI0.Y());
      assertEquals(16, rOI0.uy());
      assertEquals(2023, rOI0.ly());
      assertEquals(16, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.clip(255, 2023, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 0;
      int int1 = 3;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(3, 0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(3, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      int int2 = 0;
      int int3 = (-2874);
      int int4 = (-16777216);
      ROI rOI0 = new ROI((-2874), 4752, (-16777216), (-2874));
      assertEquals(7627, rOI0.Y());
      assertEquals((-2874), rOI0.uy());
      assertEquals(4752, rOI0.ly());
      assertEquals(16774343, rOI0.X());
      assertEquals((-2874), rOI0.lx());
      assertEquals((-16777216), rOI0.ux());
      assertNotNull(rOI0);
      
      rOI0.setROI(0, 0, 0, 3);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(4, rOI0.Y());
      assertEquals(3, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      rOI0.setROI(32767, 1163, (-16777216), 1163);
      assertEquals(16809984, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1163, rOI0.uy());
      assertEquals(32767, rOI0.lx());
      assertEquals(1163, rOI0.ly());
      assertEquals((-16777216), rOI0.ux());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(1163, (-188), (-344), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1163
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(0, 6, 6, 1448, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        colorImage0.divide(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      Integer[] integerArray0 = interpolatedColorImage0.min();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(3, integerArray0.length);
      assertNotNull(integerArray0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI(0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(Integer.MIN_VALUE, rOI1.X());
      assertEquals(Integer.MIN_VALUE, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(Integer.MAX_VALUE, rOI1.lx());
      assertEquals(Integer.MAX_VALUE, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int0 = rOI1.ux();
      assertEquals(Integer.MIN_VALUE, rOI1.X());
      assertEquals(Integer.MIN_VALUE, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(Integer.MAX_VALUE, rOI1.lx());
      assertEquals(Integer.MAX_VALUE, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int0);
      
      int int1 = rOI1.ux();
      assertEquals(Integer.MIN_VALUE, rOI1.X());
      assertEquals(Integer.MIN_VALUE, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(Integer.MAX_VALUE, rOI1.lx());
      assertEquals(Integer.MAX_VALUE, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int1 == int0);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int1);
      
      int int2 = rOI0.lx();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, int2);
      
      int int3 = rOI1.uy();
      assertEquals(Integer.MIN_VALUE, rOI1.X());
      assertEquals(Integer.MIN_VALUE, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(Integer.MAX_VALUE, rOI1.lx());
      assertEquals(Integer.MAX_VALUE, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int3);
      
      int int4 = rOI1.ly();
      assertEquals(Integer.MIN_VALUE, rOI1.X());
      assertEquals(Integer.MIN_VALUE, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(Integer.MAX_VALUE, rOI1.lx());
      assertEquals(Integer.MAX_VALUE, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertNotSame(rOI1, rOI0);
      assertEquals(Integer.MAX_VALUE, int4);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((-945), 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ROI rOI0 = new ROI((-3401), (-1), (-1), (-1));
      assertEquals(3401, rOI0.X());
      assertEquals((-1), rOI0.uy());
      assertEquals((-1), rOI0.lx());
      assertEquals((-1), rOI0.ly());
      assertEquals((-3401), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract((-1), 0, Integer.MAX_VALUE, 0, 1703);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.min((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ROI rOI0 = new ROI(26, 26, 26, 26);
      assertEquals(26, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(26, rOI0.ux());
      assertEquals(26, rOI0.ly());
      assertEquals(26, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[20];
      intArray0[0] = 26;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(0, 0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 130;
      ColorImage colorImage0 = new ColorImage(13, 130);
      assertEquals(130, colorImage0.Y());
      assertEquals(13, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      Integer[] integerArray0 = colorImage0.min();
      assertEquals(130, colorImage0.Y());
      assertEquals(13, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(3, integerArray0.length);
      assertNotNull(integerArray0);
      
      ROI rOI0 = new ROI(13, 255, 13, 255);
      assertEquals(255, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(13, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(13, rOI0.ux());
      assertEquals(255, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        colorImage0.InitFromImage((Image) null, 255, (-1), (-1), (-35));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.PixelGrabber", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      Integer[] integerArray0 = interpolatedColorImage0.min();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(3, integerArray0.length);
      assertNotNull(integerArray0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      rOI0.setROI(1666, 0, 1666, 1666);
      assertEquals(1, rOI0.X());
      assertEquals(1666, rOI0.ux());
      assertEquals(1667, rOI0.Y());
      assertEquals(1666, rOI0.ly());
      assertEquals(1666, rOI0.lx());
      assertEquals(0, rOI0.uy());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 1666;
      intArray0[2] = 0;
      int int0 = 0;
      intArray0[3] = 0;
      intArray0[4] = 1666;
      intArray0[5] = 2;
      intArray0[6] = 0;
      intArray0[7] = 1666;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(0, 2, intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 3;
      int int1 = 0;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(3, 0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(3, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 3;
      intArray0[3] = 0;
      intArray0[4] = 0;
      int int2 = 0;
      ROI rOI0 = new ROI(3, 0, 0, 0);
      assertEquals(3, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(4, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      int int0 = (-2989);
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      // Undeclared exception!
      try { 
        colorImage0.max(163);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 163
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      int int1 = (-535);
      int[] intArray0 = new int[4];
      InterpolatedGrayImage interpolatedGrayImage0 = (InterpolatedGrayImage)interpolatedColorImage0.plane(0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertNotNull(interpolatedGrayImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int2 = rOI0.Y();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(557, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 557
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ColorImage colorImage0 = null;
      try {
        colorImage0 = new ColorImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn((ImageProducer) null).when(image0).getSource();
      doReturn(0).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      ColorImage colorImage0 = null;
      try {
        colorImage0 = new ColorImage(image0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.PixelGrabber", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.multiply((-647), 0, 0, 0, 0, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        colorImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, Integer.MAX_VALUE);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 03 23:09:17 GMT 2020
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.DefaultDateTypeAdapter;
import com.google.gson.FieldNamingPolicy;
import com.google.gson.FieldNamingStrategy;
import com.google.gson.Gson;
import com.google.gson.InstanceCreator;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.LongSerializationPolicy;
import com.google.gson.MockExclusionStrategy;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.Excluder;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.BufferedOutputStream;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.time.Clock;
import java.time.chrono.HijrahDate;
import java.util.Date;
import java.util.HashMap;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.function.LongBinaryOperator;
import java.util.function.LongUnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Gson_ESTest extends Gson_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Gson.FutureTypeAdapter<Long> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Long>();
      Long long0 = new Long(2378L);
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      Class<Excluder> class0 = Excluder.class;
      TypeToken.get(class0);
      Gson gson0 = new Gson();
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        gson0.toJson((Object) integer0, (Type) class0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Gson gson0 = new Gson();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      
      Excluder excluder0 = new Excluder();
      Excluder excluder1 = new Excluder();
      Class<BigInteger> class0 = BigInteger.class;
      excluder0.excludeClass(class0, false);
      excluder1.excludeClass(class0, true);
      Excluder excluder2 = Excluder.DEFAULT;
      excluder2.withVersion((-2186.0));
      Gson gson1 = new Gson();
      Clock clock0 = MockClock.systemUTC();
      MockHijrahDate.now(clock0);
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(13);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) atomicLongArray0);
      Class<AtomicLong> class1 = AtomicLong.class;
      try { 
        gson0.fromJson(jsonElement0, (Class<?>) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected NUMBER but was BEGIN_ARRAY at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Gson gson0 = new Gson();
      String string0 = ")]}'\n";
      Long long0 = Long.getLong(")]}'\n", 2142L);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) long0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
      Excluder excluder0 = new Excluder();
      excluder0.excludeFieldsWithoutExposeAnnotation();
      Class<Object> class0 = Object.class;
      gson0.toJsonTree((Object) excluder0, (Type) class0);
      Gson.FutureTypeAdapter<String> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<String>();
      gson_FutureTypeAdapter0.nullSafe();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
      Gson.FutureTypeAdapter<BigDecimal> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<BigDecimal>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      gson_FutureTypeAdapter0.setDelegate(gson_FutureTypeAdapter0);
      Excluder excluder0 = gson0.excluder();
      Class<Integer> class0 = Integer.TYPE;
      Class<Object> class1 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class1);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      JsonReader jsonReader0 = null;
      try {
        jsonReader0 = new JsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.");
      Class<AtomicLong> class0 = AtomicLong.class;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.newBuilder();
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      try { 
        gson0.fromJson("com.google.gson.internal.bind.util.ISO8601Utils", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("?@e?IY*6");
      stringReader0.close();
      Class<Double> class0 = Double.TYPE;
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Gson gson0 = new Gson();
      boolean boolean0 = gson0.htmlSafe();
      assertTrue(boolean0);
      
      Class<Integer> class0 = Integer.TYPE;
      gson0.fromJson("", (Type) class0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.isProbablePrime((-446));
      // Undeclared exception!
      try { 
        gson0.toJson((Object) bigInteger0, (Type) class0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Gson.checkValidFloatingPoint(0.0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Gson.FutureTypeAdapter<Long> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Long>();
      Gson gson0 = new Gson();
      gson0.toString();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
      Gson.FutureTypeAdapter<Long> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Long>();
      // Undeclared exception!
      try { 
        gson0.newJsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.fieldNamingStrategy();
      gson0.htmlSafe();
      Class<Excluder> class0 = Excluder.class;
      TypeToken<Excluder> typeToken0 = TypeToken.get(class0);
      gson0.getAdapter(typeToken0);
      long[] longArray0 = new long[9];
      longArray0[0] = 2277L;
      longArray0[1] = (-137L);
      longArray0[2] = (-1871L);
      longArray0[3] = (-45L);
      longArray0[4] = 2478L;
      longArray0[5] = 0L;
      longArray0[6] = 2045L;
      longArray0[7] = 992L;
      longArray0[8] = 1039L;
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(longArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("I");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(bufferedOutputStream0, charset0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) atomicLongArray0, (Type) class0, (Appendable) outputStreamWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.serializeNulls();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Gson gson0 = new Gson();
      Long long0 = new Long((-2636L));
      Long.remainderUnsigned((-2636L), (-2636L));
      gson0.toJson((Object) long0);
      gson0.toString();
      Class<Annotation> class0 = Annotation.class;
      gson0.getAdapter(class0);
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonReader) null, (Type) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      JsonNull jsonNull1 = jsonNull0.deepCopy();
      JsonElement jsonElement0 = jsonNull1.deepCopy();
      Class<Double> class0 = Double.TYPE;
      gson0.fromJson(jsonElement0, (Type) class0);
      gson0.serializeNulls();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Gson.FutureTypeAdapter<Long> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Long>();
      long long0 = 2378L;
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      doReturn((JsonPrimitive) null).when(jsonElement0).getAsJsonPrimitive();
      doReturn(false).when(jsonElement0).isJsonNull();
      doReturn(true).when(jsonElement0).isJsonPrimitive();
      // Undeclared exception!
      try { 
        gson0.toJson(jsonElement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.newJsonWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // out == null
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.FutureTypeAdapter<Integer> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Integer>();
      gson_FutureTypeAdapter0.setDelegate((TypeAdapter<Integer>) null);
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      JsonNull jsonNull1 = jsonNull0.deepCopy();
      jsonNull1.getAsJsonNull();
      JsonElement jsonElement0 = jsonNull1.deepCopy();
      Long.getLong(")]}'\n", 2152L);
      JsonWriter jsonWriter0 = mock(JsonWriter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonWriter0).getSerializeNulls();
      doReturn(false).when(jsonWriter0).isHtmlSafe();
      doReturn(true).when(jsonWriter0).isLenient();
      doReturn((JsonWriter) null).when(jsonWriter0).nullValue();
      gson0.toJson(jsonElement0, jsonWriter0);
      Class<String> class0 = String.class;
      Gson.FutureTypeAdapter<Excluder> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<Excluder>();
      Excluder excluder0 = new Excluder();
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter1.write((JsonWriter) null, excluder0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      Class<String> class0 = String.class;
      excluder0.excludeClass(class0, true);
      Class<Object> class1 = Object.class;
      excluder0.excludeClass(class1, false);
      Excluder excluder1 = new Excluder();
      Class<Float> class2 = Float.class;
      excluder1.excludeClass(class2, false);
      Class<Object> class3 = Object.class;
      excluder1.excludeClass(class3, false);
      MockExclusionStrategy mockExclusionStrategy0 = new MockExclusionStrategy(true, true);
      Class<Date> class4 = Date.class;
      mockExclusionStrategy0.shouldSkipClass(class4);
      Excluder excluder2 = excluder1.withExclusionStrategy(mockExclusionStrategy0, false, false);
      TypeToken<BigInteger> typeToken0 = (TypeToken<BigInteger>) mock(TypeToken.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(typeToken0).getRawType();
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter((TypeAdapterFactory) excluder2, typeToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Gson gson0 = new Gson();
      Long.getLong(")]}'\n", 2142L);
      Class<Short> class0 = Short.TYPE;
      CharBuffer charBuffer0 = CharBuffer.allocate(69);
      Appendable appendable0 = charBuffer0.append('|');
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0, appendable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: short. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      gson0.newJsonReader(pipedReader0);
      gson0.fieldNamingStrategy();
      Class<Object> class0 = Object.class;
      Class<Excluder> class1 = Excluder.class;
      TypeToken<Excluder> typeToken0 = (TypeToken<Excluder>) mock(TypeToken.class, new ViolatedAssumptionAnswer());
      doReturn(class0, class1, (Class) null).when(typeToken0).getRawType();
      // Undeclared exception!
      try { 
        gson0.getAdapter(typeToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson(" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.", (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Gson gson0 = new Gson();
      long long0 = 0L;
      AtomicLong atomicLong0 = new AtomicLong(0L);
      LongUnaryOperator longUnaryOperator0 = LongUnaryOperator.identity();
      atomicLong0.updateAndGet(longUnaryOperator0);
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(longBinaryOperator0).applyAsLong(anyLong() , anyLong());
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-42);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      atomicLong0.getAndAccumulate(1343L, longBinaryOperator0);
      gson0.toJsonTree((Object) atomicLong0);
      // Undeclared exception!
      try { 
        gson0.getAdapter((TypeToken<BigDecimal>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
      Excluder excluder0 = new Excluder();
      Excluder excluder1 = excluder0.excludeFieldsWithoutExposeAnnotation();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) excluder1);
      Class<Excluder> class0 = Excluder.class;
      gson0.fromJson(jsonElement0, (Class<?>) class0);
      Class<Object> class1 = Object.class;
      gson0.fromJson(jsonElement0, (Class<?>) class1);
      Gson gson1 = new Gson();
      Class<String> class2 = String.class;
      try { 
        gson1.fromJson("W4NvH:]uPP5Iz", class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 7 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Gson gson0 = new Gson();
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      JsonReader jsonReader0 = new JsonReader(reader0);
      jsonReader0.close();
      Class<Double> class0 = Double.TYPE;
      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: JsonReader is closed
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Excluder> class0 = Excluder.class;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0, (Type) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Gson gson0 = new Gson();
      Long.getLong("Expected a ");
      gson0.toJsonTree((Object) null);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Gson.FutureTypeAdapter<Integer> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Integer>();
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      gson0.toJsonTree((Object) null, (Type) class0);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Gson gson0 = new Gson();
      Long long0 = new Long(2378L);
      Gson.FutureTypeAdapter<Long> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Long>();
      Excluder excluder0 = new Excluder();
      Excluder excluder1 = excluder0.withVersion(0.0);
      int[] intArray0 = new int[6];
      intArray0[0] = 2557;
      intArray0[1] = 3274;
      intArray0[2] = 13;
      Excluder excluder2 = excluder1.withModifiers(intArray0);
      FieldNamingPolicy fieldNamingPolicy0 = FieldNamingPolicy.IDENTITY;
      HashMap<Type, InstanceCreator<Integer>> hashMap0 = new HashMap<Type, InstanceCreator<Integer>>();
      Class<Long> class0 = Long.class;
      TypeToken<Long> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Long> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder2, typeToken0);
      gson_FutureTypeAdapter0.setDelegate(typeAdapter0);
      Long.compare(6605L, 2557);
      Long long1 = new Long(2378L);
      gson_FutureTypeAdapter0.toJsonTree(long1);
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.read((JsonReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
      Excluder excluder0 = new Excluder();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) excluder0);
      Class<Excluder> class0 = Excluder.class;
      gson0.fromJson(jsonElement0, (Class<?>) class0);
      int int0 = 13;
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(13);
      Float float0 = new Float((float) 13);
      gson0.toJsonTree((Object) float0);
      JsonArray jsonArray0 = new JsonArray();
      jsonArray0.add((JsonElement) jsonArray0);
      // Undeclared exception!
      try { 
        jsonArray0.remove(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
      Gson.FutureTypeAdapter<BigDecimal> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<BigDecimal>();
      gson0.excluder();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Gson.checkValidFloatingPoint((-129.99662765));
      Gson gson0 = new Gson();
      gson0.newBuilder();
      Class<Float> class0 = Float.class;
      gson0.fromJson("", class0);
      Gson.FutureTypeAdapter<Short> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Short>();
      int int0 = 669;
      PipedReader pipedReader0 = new PipedReader(669);
      pipedReader0.close();
      JsonReader jsonReader0 = gson0.newJsonReader(pipedReader0);
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
      Class<Excluder> class0 = Excluder.class;
      TypeToken<Excluder> typeToken0 = TypeToken.get(class0);
      gson0.getAdapter(typeToken0);
      gson0.fromJson((String) null, (Type) class0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('|');
      charArrayWriter0.append('[');
      gson0.toJson((JsonElement) jsonNull0, (Appendable) charArrayWriter1);
      Class<String> class0 = String.class;
      gson0.fromJson(")w6", class0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      gson0.toJson((Object) null, (Type) class0);
      Excluder excluder0 = Excluder.DEFAULT;
      Excluder excluder1 = excluder0.excludeFieldsWithoutExposeAnnotation();
      Gson gson1 = new Gson();
      Class<Integer> class1 = Integer.class;
      TypeToken<String> typeToken0 = (TypeToken<String>) mock(TypeToken.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(typeToken0).getRawType();
      // Undeclared exception!
      try { 
        gson1.getDelegateAdapter((TypeAdapterFactory) excluder1, typeToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      Gson.FutureTypeAdapter<Float> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Float>();
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) gson_FutureTypeAdapter0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.Gson$FutureTypeAdapter cannot be cast to java.lang.String
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$16", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
      Excluder excluder0 = Excluder.DEFAULT;
      Excluder excluder1 = excluder0.excludeFieldsWithoutExposeAnnotation();
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      gson0.toJson((Object) excluder1, (Type) class0);
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) typeToken0, (Type) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.lang.Object. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<BigDecimal> class0 = BigDecimal.class;
      gson0.getAdapter(class0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      gson0.toString();
      gson0.htmlSafe();
      gson0.fieldNamingStrategy();
      Float.valueOf(1219.7828F);
      Class<Character> class0 = Character.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) null, (Type) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLong> class0 = AtomicLong.class;
      gson0.fromJson((JsonElement) null, (Class<?>) class0);
      Gson gson1 = new Gson();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      JsonArray jsonArray0 = new JsonArray();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) jsonArray0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.JsonArray cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.Gson$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      Class<String> class0 = String.class;
      try { 
        gson0.fromJson(string0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected a string but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      JsonReader jsonReader0 = gson0.newJsonReader(pipedReader0);
      FieldNamingStrategy fieldNamingStrategy0 = gson0.fieldNamingStrategy();
      Class<Object> class0 = Object.class;
      Class<Excluder> class1 = Excluder.class;
      Class<Object> class2 = Object.class;
      Class<Object> class3 = Object.class;
      TypeToken<Excluder> typeToken0 = (TypeToken<Excluder>) mock(TypeToken.class, new ViolatedAssumptionAnswer());
      doReturn(class0, class1, class2, class3, class1).when(typeToken0).getRawType();
      doReturn(class3, class2, class0, class0, class2).when(typeToken0).getType();
      gson0.getAdapter(typeToken0);
      Class<Boolean> class4 = Boolean.TYPE;
      gson0.fromJson("#\"!PELq%JsF1RcaI", (Type) class4);
      gson0.toJsonTree((Object) fieldNamingStrategy0, (Type) class2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("aw^_DS'xZUNLK:j\"04");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      JsonWriter jsonWriter0 = new JsonWriter(mockPrintWriter0);
      jsonWriter0.setSerializeNulls(true);
      JsonWriter jsonWriter1 = jsonWriter0.value((-835.72589293));
      gson0.toJson((JsonElement) null, jsonWriter1);
      // Undeclared exception!
      gson0.toJsonTree((Object) jsonReader0, (Type) class3);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      gson0.getAdapter(class0);
      gson0.toString();
      String string0 = "LF)u9D{aPrZ_V~Ug}I";
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.fieldNamingStrategy();
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      gson0.getDelegateAdapter((TypeAdapterFactory) null, typeToken0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) typeToken0, (Type) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.lang.Object. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.htmlSafe();
      Long long0 = new Long((-1427L));
      StringReader stringReader0 = new StringReader("4%");
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) stringReader0, (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.checkValidFloatingPoint(0.0);
      Gson.FutureTypeAdapter<Annotation> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Annotation>();
      gson_FutureTypeAdapter0.setDelegate(gson_FutureTypeAdapter0);
      gson0.toString();
      PipedReader pipedReader0 = new PipedReader();
      Class<Byte> class0 = Byte.TYPE;
      try { 
        gson0.fromJson((Reader) pipedReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toJson((Object) null);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: double. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.checkValidFloatingPoint(0.0);
      gson0.toJson((Object) gson0);
      Class<Annotation> class0 = Annotation.class;
      TypeToken<Annotation> typeToken0 = TypeToken.get(class0);
      gson0.getAdapter(typeToken0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
      Excluder excluder0 = Excluder.DEFAULT;
      Class<Excluder> class0 = Excluder.class;
      TypeToken<Excluder> typeToken0 = TypeToken.get(class0);
      typeToken0.toString();
      Class<Annotation> class1 = Annotation.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("com.google.gson.Gson", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.lang.annotation.Annotation. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.");
      Class<Type> class0 = Type.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.lang.reflect.Type. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
      Gson.FutureTypeAdapter<BigDecimal> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<BigDecimal>();
      gson_FutureTypeAdapter0.setDelegate(gson_FutureTypeAdapter0);
      gson0.excluder();
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) gson_FutureTypeAdapter0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.Gson$FutureTypeAdapter cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$7", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(114);
      gson0.serializeNulls();
      Gson gson1 = new Gson();
      Gson gson2 = new Gson();
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      Class<BigDecimal> class0 = BigDecimal.class;
      // Undeclared exception!
      try { 
        gson1.fromJson(jsonElement0, (Class<?>) class0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // AssertionError (GSON 2.8.7-SNAPSHOT): null
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Gson.FutureTypeAdapter<Integer> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Integer>();
      Gson gson0 = new Gson();
      gson0.toJson((JsonElement) null);
      gson0.htmlSafe();
      PipedReader pipedReader0 = new PipedReader(114);
      Class<Boolean> class0 = Boolean.TYPE;
      gson0.fromJson("null", (Type) class0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("null", true);
      gson0.toJson((JsonElement) null, (Appendable) mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        gson0.getAdapter((Class<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Gson.FutureTypeAdapter<Integer> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Integer>();
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.class;
      Gson.checkValidFloatingPoint(0.0);
      TypeAdapterFactory typeAdapterFactory0 = mock(TypeAdapterFactory.class, new ViolatedAssumptionAnswer());
      TypeToken<Object> typeToken0 = (TypeToken<Object>) mock(TypeToken.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(typeToken0).getRawType();
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter(typeAdapterFactory0, typeToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicLong atomicLong0 = new AtomicLong(0L);
      gson0.toJson((Object) atomicLong0);
      // Undeclared exception!
      try { 
        gson0.getAdapter((TypeToken<Excluder>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Gson.FutureTypeAdapter<Double> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Double>();
      Gson gson0 = new Gson();
      gson0.newBuilder();
      Gson gson1 = new Gson();
      Gson gson2 = new Gson();
      Gson gson3 = new Gson();
      Gson gson4 = new Gson();
      Gson gson5 = new Gson();
      Gson gson6 = new Gson();
      Gson gson7 = new Gson();
      Gson gson8 = new Gson();
      BigInteger bigInteger0 = BigInteger.ONE;
      JsonElement jsonElement0 = gson6.toJsonTree((Object) bigInteger0);
      Gson gson9 = new Gson();
      Gson gson10 = new Gson();
      Gson gson11 = new Gson();
      Gson gson12 = new Gson();
      Gson gson13 = new Gson();
      Class<Float> class0 = Float.class;
      gson13.fromJson(jsonElement0, (Class<?>) class0);
      Class<BigInteger> class1 = BigInteger.class;
      try { 
        gson0.fromJson(jsonElement0, (Class<?>) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"java\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$18", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
      Class<Excluder> class0 = Excluder.class;
      TypeToken.get(class0);
      FieldNamingStrategy fieldNamingStrategy0 = gson0.fieldNamingStrategy();
      StringWriter stringWriter0 = new StringWriter(2231);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value((double) 2231);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) fieldNamingStrategy0, (Type) class0, jsonWriter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      gson0.newJsonReader(pipedReader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.gson.Gson$5");
      gson0.fieldNamingStrategy();
      Class<Object> class0 = Object.class;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("':\"");
      jsonPrimitive0.isJsonPrimitive();
      JsonPrimitive jsonPrimitive1 = jsonPrimitive0.getAsJsonPrimitive();
      gson0.fromJson((JsonElement) jsonPrimitive1, (Type) class0);
      Gson.FutureTypeAdapter<BigDecimal> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<BigDecimal>();
      Gson.FutureTypeAdapter<BigDecimal> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<BigDecimal>();
      gson_FutureTypeAdapter0.setDelegate(gson_FutureTypeAdapter1);
      TypeToken<Excluder> typeToken0 = (TypeToken<Excluder>) mock(TypeToken.class, new ViolatedAssumptionAnswer());
      doReturn(class0, (Class) null, (Class) null).when(typeToken0).getRawType();
      // Undeclared exception!
      try { 
        gson0.getAdapter(typeToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Gson gson0 = new Gson();
      Float float0 = new Float(0.0);
      gson0.toJsonTree((Object) float0);
      gson0.htmlSafe();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = new JsonObject();
      JsonObject jsonObject2 = new JsonObject();
      JsonObject jsonObject3 = jsonObject2.deepCopy();
      Type type0 = null;
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonObject3, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Gson.FutureTypeAdapter<Long> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Long>();
      Long long0 = new Long(2378L);
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.toJsonTree(long0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.fieldNamingStrategy();
      // Undeclared exception!
      try { 
        gson0.getAdapter((TypeToken<Excluder>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Long long0 = new Long((-922337203685477580L));
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
      CharBuffer charBuffer0 = CharBuffer.allocate(69);
      Appendable appendable0 = charBuffer0.append('|');
      gson0.toJson((Object) long0, (Type) class0, appendable0);
      StringReader stringReader0 = new StringReader("#`");
      gson0.fromJson((Reader) stringReader0, (Type) class0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      Gson.FutureTypeAdapter<BigDecimal> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<BigDecimal>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      gson_FutureTypeAdapter0.setDelegate(gson_FutureTypeAdapter0);
      gson0.excluder();
      Class<Integer> class0 = Integer.TYPE;
      Gson gson1 = new Gson();
      Gson gson2 = new Gson();
      Gson gson3 = new Gson();
      Gson gson4 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.getAsJsonObject(string0);
      gson0.fromJson((JsonElement) null, (Class<?>) class0);
      Gson gson5 = new Gson();
      Gson gson6 = new Gson();
      Gson gson7 = new Gson();
      Gson gson8 = new Gson();
      JsonPrimitive jsonPrimitive0 = null;
      try {
        jsonPrimitive0 = new JsonPrimitive((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Gson.FutureTypeAdapter<Integer> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Integer>();
      Gson gson0 = new Gson();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)62;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      gson0.toJson((Object) bigInteger0);
      Class<Long> class0 = Long.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Excluder> class0 = Excluder.class;
      TypeToken<Excluder> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Excluder> typeAdapter0 = gson0.getAdapter(typeToken0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
      assertNotNull(typeAdapter0);
      
      gson0.fromJson((String) null, (Type) class0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Gson.FutureTypeAdapter<Long> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Long>();
      Gson.FutureTypeAdapter<Long> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<Long>();
      gson_FutureTypeAdapter0.setDelegate(gson_FutureTypeAdapter1);
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.read((JsonReader) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Gson.FutureTypeAdapter<Double> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Double>();
      Gson gson0 = new Gson();
      gson0.newBuilder();
      Gson gson1 = new Gson();
      Gson gson2 = new Gson();
      Gson gson3 = new Gson();
      Gson gson4 = new Gson();
      Gson gson5 = new Gson();
      Gson gson6 = new Gson();
      Gson gson7 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      Gson gson8 = new Gson();
      Gson gson9 = new Gson();
      Gson gson10 = new Gson();
      Gson gson11 = new Gson();
      PipedReader pipedReader0 = new PipedReader(586);
      Class<Boolean> class0 = Boolean.TYPE;
      try { 
        gson8.fromJson("x,KGIU7g", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
      Excluder excluder0 = new Excluder();
      PipedReader pipedReader0 = new PipedReader();
      Class<Long> class0 = Long.class;
      try { 
        gson0.fromJson((Reader) pipedReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Boolean> class0 = Boolean.TYPE;
      JsonWriter jsonWriter0 = null;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) null, (Type) class0, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader();
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      gson0.toJson((Object) pipedReader0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Gson.FutureTypeAdapter<Long> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Long>();
      JsonReader jsonReader0 = null;
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      Class<BigDecimal> class0 = BigDecimal.class;
      // Undeclared exception!
      try { 
        gson0.fromJson(jsonElement0, (Class<?>) class0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // AssertionError (GSON 2.8.7-SNAPSHOT): null
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Gson gson0 = new Gson();
      JsonWriter jsonWriter0 = mock(JsonWriter.class, new ViolatedAssumptionAnswer());
      PipedReader pipedReader0 = new PipedReader(114);
      gson0.serializeNulls();
      gson0.fieldNamingStrategy();
      try { 
        pipedReader0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "qlh";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "qlh");
      long long0 = (-585L);
      System.setCurrentTimeMillis((-585L));
      Gson gson0 = new Gson();
      gson0.toJsonTree((Object) null);
      Class<Long> class0 = Long.TYPE;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.write(97);
      charArrayWriter0.write((-340));
      charArrayWriter0.write(97);
      charArrayWriter0.write(97);
      charArrayWriter0.toCharArray();
      // Undeclared exception!
      try { 
        charArrayWriter0.append((CharSequence) "qlh", 97, (-1633));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      String string0 = gson0.fromJson("com.google.gson.Gson$5", class0);
      assertFalse(gson0.serializeNulls());
      assertNotNull(string0);
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson("of2dxVW*EL%Q-", (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StringReader stringReader0 = new StringReader("{XoBo?>ZwxX`+(x]5+J");
      pipedWriter0.append('T');
      JsonReader jsonReader0 = gson0.newJsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      
      FieldNamingStrategy fieldNamingStrategy0 = gson0.fieldNamingStrategy();
      assertNotNull(fieldNamingStrategy0);
      
      Class<Excluder> class0 = Excluder.class;
      TypeToken<Excluder> typeToken0 = TypeToken.get(class0);
      gson0.getAdapter(typeToken0);
      JsonWriter jsonWriter0 = gson0.newJsonWriter(pipedWriter0);
      assertTrue(gson0.htmlSafe());
      assertFalse(jsonWriter0.getSerializeNulls());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Gson.FutureTypeAdapter<Integer> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Integer>();
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.class;
      gson0.fromJson((String) null, class0);
      gson0.toJson((JsonElement) null);
      gson0.htmlSafe();
      PipedReader pipedReader0 = new PipedReader(114);
      try { 
        pipedReader0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      gson0.toString();
      gson0.htmlSafe();
      gson0.fieldNamingStrategy();
      Float float0 = Float.valueOf(1219.7828F);
      Float.min(1219.7828F, 491.28F);
      gson0.toJson((Object) float0);
      LongSerializationPolicy longSerializationPolicy0 = LongSerializationPolicy.STRING;
      Long long0 = new Long((-706L));
      JsonElement jsonElement0 = longSerializationPolicy0.serialize(long0);
      // Undeclared exception!
      try { 
        gson0.toJson(jsonElement0, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
      Excluder excluder0 = new Excluder();
      Excluder excluder1 = excluder0.excludeFieldsWithoutExposeAnnotation();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) excluder1);
      Class<Excluder> class0 = Excluder.class;
      gson0.fromJson(jsonElement0, (Class<?>) class0);
      TypeToken<Excluder> typeToken0 = TypeToken.get(class0);
      gson0.getAdapter(typeToken0);
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('|');
      charArrayWriter0.append('Y');
      try { 
        gson0.toJson((JsonElement) jsonNull0, (Appendable) pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: double. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Gson.FutureTypeAdapter<Long> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Long>();
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.read((JsonReader) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Gson.FutureTypeAdapter<Long> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Long>();
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonElement0).isJsonArray();
      doReturn(false).when(jsonElement0).isJsonNull();
      doReturn(false).when(jsonElement0).isJsonObject();
      doReturn(false).when(jsonElement0).isJsonPrimitive();
      // Undeclared exception!
      try { 
        gson0.toJson(jsonElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Couldn't write class com.google.gson.JsonElement$MockitoMock$1192408457
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$29", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = "Awwy";
      // Undeclared exception!
      try { 
        gson0.fromJson("Awwy", (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Gson.FutureTypeAdapter<Long> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Long>();
      Long long0 = new Long(2378L);
      Gson.FutureTypeAdapter<Long> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<Long>();
      gson_FutureTypeAdapter0.setDelegate(gson_FutureTypeAdapter1);
      Long.compare(0L, 2378L);
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.toJsonTree(long0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
      Excluder excluder0 = new Excluder();
      Excluder excluder1 = new Excluder();
      Class<BigInteger> class0 = BigInteger.class;
      excluder0.excludeClass(class0, false);
      Class<AtomicLong> class1 = AtomicLong.class;
      excluder1.excludeClass(class1, true);
      Excluder excluder2 = new Excluder();
      excluder2.withVersion(2);
      Gson gson1 = new Gson();
      Clock clock0 = MockClock.systemUTC();
      HijrahDate hijrahDate0 = MockHijrahDate.now(clock0);
      JsonElement jsonElement0 = gson1.toJsonTree((Object) hijrahDate0);
      try { 
        gson1.fromJson(jsonElement0, (Class<?>) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected NUMBER but was BEGIN_OBJECT at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Gson.FutureTypeAdapter<Long> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Long>();
      Class<Excluder> class0 = Excluder.class;
      Gson gson0 = new Gson();
      try { 
        gson0.fromJson("com.google.gson.JsonNull", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Gson.FutureTypeAdapter<Double> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Double>();
      Gson gson0 = new Gson();
      Short short0 = new Short((short)1);
      Short.toUnsignedLong((short)1);
      Short.toUnsignedLong((short)958);
      Class<Boolean> class0 = Boolean.TYPE;
      gson0.toJsonTree((Object) null, (Type) class0);
      Class<DefaultDateTypeAdapter> class1 = DefaultDateTypeAdapter.class;
      TypeToken<DefaultDateTypeAdapter> typeToken0 = TypeToken.get(class1);
      gson0.getAdapter(typeToken0);
      gson0.fieldNamingStrategy();
      String string0 = "Expected a ";
      Class<Excluder> class2 = Excluder.class;
      Class<Excluder> class3 = Excluder.class;
      try { 
        gson0.fromJson("Expected a ", class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Gson.FutureTypeAdapter<Double> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Double>();
      Gson gson0 = new Gson();
      gson0.newBuilder();
      Gson gson1 = new Gson();
      Gson gson2 = new Gson();
      Gson gson3 = new Gson();
      Gson gson4 = new Gson();
      Gson gson5 = new Gson();
      Gson gson6 = new Gson();
      Gson gson7 = new Gson();
      Gson gson8 = new Gson();
      JsonElement jsonElement0 = gson1.toJsonTree((Object) gson3);
      Gson gson9 = new Gson();
      Gson gson10 = new Gson();
      Gson gson11 = new Gson();
      Gson gson12 = new Gson();
      Gson gson13 = new Gson();
      Class<Float> class0 = Float.class;
      try { 
        gson4.fromJson(jsonElement0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected NUMBER but was BEGIN_OBJECT at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("9!vSN@7Zpv*");
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Class<?>) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(3);
      gson0.toJsonTree((Object) atomicLongArray0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Gson.checkValidFloatingPoint((-2284.8335467));
      Gson gson0 = new Gson();
      int int0 = 1;
      Gson gson1 = new Gson();
      AtomicLong atomicLong0 = new AtomicLong(1L);
      JsonElement jsonElement0 = gson1.toJsonTree((Object) atomicLong0);
      Class<Date> class0 = Date.class;
      try { 
        gson1.fromJson(jsonElement0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Long@0000000046
         //
         verifyException("com.google.gson.internal.bind.DateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      gson0.newJsonReader(pipedReader0);
      gson0.fieldNamingStrategy();
      TypeToken<Excluder> typeToken0 = (TypeToken<Excluder>) mock(TypeToken.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(typeToken0).getRawType();
      // Undeclared exception!
      try { 
        gson0.getAdapter(typeToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      gson0.fromJson("", class0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
      gson0.fromJson("", (Type) class0);
      MockFile mockFile0 = new MockFile("*@X^@$$a?\"I v");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      Appendable appendable0 = mockFileWriter0.append('E');
      gson0.toJson((Object) null, (Type) class0, appendable0);
      gson0.fieldNamingStrategy();
      Class<String> class1 = String.class;
      TypeToken<String> typeToken0 = TypeToken.get(class1);
      gson0.getAdapter(typeToken0);
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Gson.FutureTypeAdapter<Integer> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Integer>();
      Gson gson0 = new Gson();
      gson0.toJson((JsonElement) null);
      gson0.htmlSafe();
      PipedReader pipedReader0 = new PipedReader(114);
      try { 
        pipedReader0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Gson.FutureTypeAdapter<AtomicLong> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<AtomicLong>();
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) gson_FutureTypeAdapter0, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Gson gson0 = new Gson();
      gson0.toString();
      Excluder excluder0 = Excluder.DEFAULT;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(":Ec(5h");
      Class<Long> class0 = Long.TYPE;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \":Ec(5h\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonWriter jsonWriter0 = mock(JsonWriter.class, new ViolatedAssumptionAnswer());
      gson0.serializeNulls();
      Class<Byte> class0 = Byte.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJson((Object) jsonWriter0, (Type) class0, (Appendable) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.stream.JsonWriter$MockitoMock$408448869 cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Gson gson0 = new Gson();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.google.gson.Gson$5");
      gson0.fieldNamingStrategy();
      Class<Object> class0 = Object.class;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("':\"");
      jsonPrimitive0.isJsonPrimitive();
      JsonPrimitive jsonPrimitive1 = jsonPrimitive0.getAsJsonPrimitive();
      gson0.fromJson((JsonElement) jsonPrimitive1, (Class<?>) class0);
      Gson gson1 = new Gson();
      Class<String> class1 = String.class;
      gson1.fromJson("", class1);
      assertTrue(gson1.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Excluder excluder0 = Excluder.DEFAULT;
      Gson gson0 = new Gson();
      gson0.newBuilder();
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      gson0.fromJson((JsonElement) null, (Type) class0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader();
      Class<Float> class0 = Float.class;
      try { 
        gson0.fromJson((Reader) pipedReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.FutureTypeAdapter<Integer> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Integer>();
      gson_FutureTypeAdapter0.setDelegate((TypeAdapter<Integer>) null);
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      JsonNull jsonNull1 = jsonNull0.deepCopy();
      jsonNull1.getAsJsonNull();
      JsonElement jsonElement0 = jsonNull1.deepCopy();
      Long.getLong(")]}'\n", 2152L);
      JsonWriter jsonWriter0 = mock(JsonWriter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonWriter0).getSerializeNulls();
      doReturn(false).when(jsonWriter0).isHtmlSafe();
      doReturn(false).when(jsonWriter0).isLenient();
      doReturn((JsonWriter) null).when(jsonWriter0).nullValue();
      gson0.toJson(jsonElement0, jsonWriter0);
      Class<String> class0 = String.class;
      gson0.getAdapter(class0);
      TypeToken<Integer> typeToken0 = (TypeToken<Integer>) mock(TypeToken.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(typeToken0).getRawType();
      // Undeclared exception!
      try { 
        gson0.getAdapter(typeToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.close();
      Class<Boolean> class0 = Boolean.TYPE;
      Gson gson1 = new Gson();
      gson1.newBuilder();
      JsonReader jsonReader0 = gson1.newJsonReader(pipedReader0);
      Class<Character> class1 = Character.TYPE;
      try { 
        gson0.fromJson(jsonReader0, (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      Class<Excluder> class0 = Excluder.class;
      Gson gson1 = new Gson();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)81;
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      gson0.toJson((Object) gson1, (Appendable) mockPrintStream0);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byte byte0 = (byte)71;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte) (-9);
      byteArray0[7] = (byte)20;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      gson1.toJsonTree((Object) bigInteger0);
      // Undeclared exception!
      try { 
        gson1.toJsonTree((Object) bigInteger0, (Type) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      gson0.newJsonReader(pipedReader0);
      gson0.fieldNamingStrategy();
      Class<Object> class0 = Object.class;
      TypeToken<Excluder> typeToken0 = (TypeToken<Excluder>) mock(TypeToken.class, new ViolatedAssumptionAnswer());
      doReturn(class0, (Class) null, (Class) null).when(typeToken0).getRawType();
      // Undeclared exception!
      try { 
        gson0.getAdapter(typeToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Gson gson0 = new Gson();
      Long long0 = new Long((-2636L));
      gson0.toJson((Object) long0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = "?@e?IY*6";
      StringReader stringReader0 = new StringReader("?@e?IY*6");
      Gson.checkValidFloatingPoint(0.0);
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      int int0 = 1960;
      // Undeclared exception!
      try { 
        stringReader0.read(charArray0, 1960, 1960);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.FutureTypeAdapter<Integer> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Integer>();
      gson_FutureTypeAdapter0.setDelegate((TypeAdapter<Integer>) null);
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      JsonNull jsonNull1 = jsonNull0.deepCopy();
      jsonNull1.getAsJsonNull();
      jsonNull1.deepCopy();
      Long long0 = Long.getLong(")]}'\n", 2152L);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) long0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Gson.FutureTypeAdapter<Long> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Long>();
      String string0 = "\\,iVo>)!@Np";
      PipedReader pipedReader0 = new PipedReader(3262);
      Class<Boolean> class0 = Boolean.TYPE;
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      JsonNull jsonNull1 = jsonNull0.deepCopy();
      gson1.fromJson((JsonElement) jsonNull1, (Type) class0);
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      JsonArray jsonArray0 = new JsonArray();
      JsonNull jsonNull2 = JsonNull.INSTANCE;
      jsonArray0.add((JsonElement) jsonNull2);
      JsonElement jsonElement1 = jsonArray0.remove(0);
      Gson gson2 = new Gson();
      JsonElement jsonElement2 = gson2.toJsonTree((Object) jsonNull2);
      jsonArray0.contains(jsonElement2);
      jsonArray0.add(jsonElement1);
      jsonArray0.add(jsonElement2);
      JsonElement jsonElement3 = jsonArray0.remove(0);
      jsonArray0.contains(jsonElement1);
      jsonArray0.add(jsonElement3);
      // Undeclared exception!
      try { 
        jsonArray0.get(3262);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3262, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+:*KFWN)f");
      Gson.FutureTypeAdapter<Long> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Long>();
      Long.valueOf((-65L));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      PipedReader pipedReader0 = new PipedReader(3262);
      Class<Boolean> class0 = Boolean.TYPE;
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      Gson.FutureTypeAdapter<Double> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<Double>();
      String string0 = gson0.toJson((Object) null);
      assertEquals("null", string0);
      assertTrue(gson0.htmlSafe());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Gson.FutureTypeAdapter<Integer> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Integer>();
      Gson gson0 = new Gson();
      gson0.htmlSafe();
      LongSerializationPolicy longSerializationPolicy0 = LongSerializationPolicy.DEFAULT;
      try { 
        Long.parseLong("com.google.gson.internal.bind.TypeAdapters$30");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.google.gson.internal.bind.TypeAdapters$30\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Gson.FutureTypeAdapter<Long> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Long>();
      Long.valueOf((-65L));
      String string0 = "\\,iVo>)!@Np";
      PipedReader pipedReader0 = new PipedReader(3262);
      Class<Boolean> class0 = Boolean.TYPE;
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonElement0).isJsonArray();
      doReturn(false).when(jsonElement0).isJsonNull();
      doReturn(false).when(jsonElement0).isJsonObject();
      doReturn(false).when(jsonElement0).isJsonPrimitive();
      // Undeclared exception!
      try { 
        gson0.toJson(jsonElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Couldn't write class com.google.gson.JsonElement$MockitoMock$1192408457
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$29", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) null, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }
}

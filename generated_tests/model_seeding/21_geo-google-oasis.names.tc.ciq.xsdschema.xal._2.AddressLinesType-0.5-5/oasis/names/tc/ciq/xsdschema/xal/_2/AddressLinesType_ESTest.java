/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 07 16:10:46 GMT 2019
 */

package oasis.names.tc.ciq.xsdschema.xal._2;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import javax.xml.namespace.QName;
import oasis.names.tc.ciq.xsdschema.xal._2.AddressLine;
import oasis.names.tc.ciq.xsdschema.xal._2.AddressLinesType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AddressLinesType_ESTest extends AddressLinesType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AddressLinesType addressLinesType0 = new AddressLinesType();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) addressLinesType0);
      addressLinesType0.any = (List<Object>) linkedList0;
      List<Object> list0 = addressLinesType0.getAny();
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AddressLinesType addressLinesType0 = new AddressLinesType();
      LinkedList<AddressLine> linkedList0 = new LinkedList<AddressLine>();
      AddressLine addressLine0 = new AddressLine();
      linkedList0.add(addressLine0);
      addressLinesType0.addressLine = (List<AddressLine>) linkedList0;
      List<AddressLine> list0 = addressLinesType0.getAddressLine();
      assertTrue(list0.contains(addressLine0));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AddressLinesType addressLinesType0 = new AddressLinesType();
      List<Object> list0 = addressLinesType0.getAny();
      List<Object> list1 = addressLinesType0.getAny();
      assertNotNull(list1);
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AddressLinesType addressLinesType0 = new AddressLinesType();
      List<AddressLine> list0 = addressLinesType0.getAddressLine();
      List<AddressLine> list1 = addressLinesType0.getAddressLine();
      assertSame(list1, list0);
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AddressLinesType addressLinesType0 = new AddressLinesType();
      Map<QName, String> map0 = addressLinesType0.getOtherAttributes();
      assertEquals(0, map0.size());
  }
}

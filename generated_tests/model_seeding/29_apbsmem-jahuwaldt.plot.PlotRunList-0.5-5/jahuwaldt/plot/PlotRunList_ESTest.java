/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 18:33:58 GMT 2019
 */

package jahuwaldt.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jahuwaldt.plot.CircleSymbol;
import jahuwaldt.plot.PlotDatum;
import jahuwaldt.plot.PlotRun;
import jahuwaldt.plot.PlotRunList;
import jahuwaldt.plot.PlotSymbol;
import jahuwaldt.plot.RTriangle3Symbol;
import jahuwaldt.plot.RTriangle4Symbol;
import jahuwaldt.plot.TabLSymbol;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Set;
import javax.swing.plaf.synth.SynthCheckBoxMenuItemUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PlotRunList_ESTest extends PlotRunList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[1];
      double[] doubleArray0 = new double[6];
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, true, (PlotSymbol) null);
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      plotRunList0.add(1, (Object) plotRun0);
      assertEquals(2, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[4];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PlotRun plotRun0 = new PlotRun(linkedList0);
      plotRunArray0[0] = plotRun0;
      CircleSymbol circleSymbol0 = new CircleSymbol();
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      // Undeclared exception!
      try { 
        plotRunList0.setPlotSymbol(circleSymbol0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[1];
      PlotRun plotRun0 = new PlotRun();
      plotRunArray0[0] = plotRun0;
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      plotRunList0.setLineColor((Color) null);
      assertEquals(1, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[3];
      PlotDatum[] plotDatumArray0 = new PlotDatum[5];
      RTriangle3Symbol rTriangle3Symbol0 = new RTriangle3Symbol();
      PlotDatum plotDatum0 = new PlotDatum(0.0, 0.0, false, rTriangle3Symbol0);
      plotDatumArray0[0] = plotDatum0;
      plotDatumArray0[1] = plotDatum0;
      plotDatumArray0[2] = plotDatum0;
      plotDatumArray0[3] = plotDatumArray0[0];
      plotDatumArray0[4] = plotDatumArray0[0];
      PlotRun plotRun0 = new PlotRun(plotDatumArray0);
      plotRunArray0[0] = plotRun0;
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      // Undeclared exception!
      try { 
        plotRunList0.getMaxY();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[4];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PlotRun plotRun0 = new PlotRun(linkedList0);
      plotRunArray0[0] = plotRun0;
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      // Undeclared exception!
      try { 
        plotRunList0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      int int0 = plotRunList0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[4];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      int int0 = plotRunList0.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      PlotRun[] plotRunArray0 = new PlotRun[9];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      plotRunList0.set(1, objectArray0[0]);
      assertEquals(9, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      PlotRun[] plotRunArray0 = new PlotRun[9];
      plotRunArray0[1] = plotRun0;
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      Object object0 = plotRunList0.set(1, plotRun0);
      assertNotNull(object0);
      assertEquals(9, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[9];
      double[] doubleArray0 = new double[9];
      RTriangle4Symbol rTriangle4Symbol0 = new RTriangle4Symbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, false, rTriangle4Symbol0);
      plotRunArray0[0] = plotRun0;
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      plotRunList0.remove(0);
      assertEquals(8, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[4];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PlotRun plotRun0 = new PlotRun(linkedList0);
      plotRunArray0[0] = plotRun0;
      plotRunArray0[1] = plotRunArray0[0];
      double[] doubleArray0 = new double[3];
      CircleSymbol circleSymbol0 = new CircleSymbol();
      PlotRun plotRun1 = new PlotRun(doubleArray0, doubleArray0, true, circleSymbol0);
      plotRunArray0[2] = plotRun1;
      plotRunArray0[3] = plotRunArray0[0];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      double double0 = plotRunList0.getMinY();
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[3];
      PlotDatum[] plotDatumArray0 = new PlotDatum[2];
      PlotDatum plotDatum0 = new PlotDatum(0.0, 0.0, true);
      plotDatumArray0[0] = plotDatum0;
      PlotDatum plotDatum1 = new PlotDatum(0.0, (-407.54376615), false);
      plotDatumArray0[1] = plotDatum1;
      PlotRun plotRun0 = new PlotRun(plotDatumArray0);
      plotRunArray0[0] = plotRun0;
      plotRunArray0[1] = plotRun0;
      plotRunArray0[2] = plotRunArray0[1];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      double double0 = plotRunList0.getMinY();
      assertEquals(3, plotRunList0.size());
      assertEquals((-407.54376615), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[4];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PlotRun plotRun0 = new PlotRun(linkedList0);
      plotRunArray0[0] = plotRun0;
      plotRunArray0[1] = plotRunArray0[0];
      double[] doubleArray0 = new double[3];
      CircleSymbol circleSymbol0 = new CircleSymbol();
      PlotRun plotRun1 = new PlotRun(doubleArray0, doubleArray0, true, circleSymbol0);
      plotRunArray0[2] = plotRun1;
      plotRunArray0[3] = plotRunArray0[0];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      double double0 = plotRunList0.getMinX();
      assertEquals(4, plotRunList0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (-391.88876365242);
      TabLSymbol tabLSymbol0 = new TabLSymbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, true, tabLSymbol0);
      PlotRun[] plotRunArray0 = new PlotRun[9];
      plotRunArray0[0] = plotRun0;
      plotRunArray0[1] = plotRun0;
      plotRunArray0[2] = plotRunArray0[1];
      plotRunArray0[3] = plotRun0;
      plotRunArray0[4] = plotRun0;
      plotRunArray0[5] = plotRun0;
      plotRunArray0[6] = plotRun0;
      plotRunArray0[7] = plotRun0;
      plotRunArray0[8] = plotRun0;
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      double double0 = plotRunList0.getMinX();
      assertEquals((-391.88876365242), double0, 0.01);
      assertEquals(9, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[2];
      PlotRun plotRun0 = new PlotRun();
      plotRunArray0[0] = plotRun0;
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      Object object0 = plotRunList0.get(0);
      assertNotNull(object0);
      assertEquals(2, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      // Undeclared exception!
      try { 
        plotRunList0.set(2386, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2386, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      // Undeclared exception!
      try { 
        plotRunList0.set((-1506), (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      // Undeclared exception!
      try { 
        plotRunList0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[9];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      // Undeclared exception!
      try { 
        plotRunList0.remove((-1409));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[2];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      // Undeclared exception!
      try { 
        plotRunList0.getMinY();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      // Undeclared exception!
      try { 
        plotRunList0.get(13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 13, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      // Undeclared exception!
      try { 
        plotRunList0.get((-5547));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      PlotRunList plotRunList0 = new PlotRunList(plotRun0);
      // Undeclared exception!
      try { 
        plotRunList0.add((-1646), (Object) plotRun0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1646, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      // Undeclared exception!
      try { 
        plotRunList0.add((-859), (Object) plotRunList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // jahuwaldt.plot.PlotRunList cannot be cast to jahuwaldt.plot.PlotRun
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PlotRunList plotRunList0 = null;
      try {
        plotRunList0 = new PlotRunList((PlotRun[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PlotRunList plotRunList0 = null;
      try {
        plotRunList0 = new PlotRunList((Collection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      Object object0 = plotRunList0.clone();
      assertNotSame(object0, plotRunList0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[1];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      // Undeclared exception!
      try { 
        plotRunList0.setLineColor((Color) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      plotRunList0.setPlotSymbol((PlotSymbol) null);
      assertEquals(0, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      double double0 = plotRunList0.getMaxY();
      assertEquals(4.9E-324, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[4];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PlotRun plotRun0 = new PlotRun(linkedList0);
      plotRunArray0[0] = plotRun0;
      plotRunArray0[1] = plotRun0;
      plotRunArray0[2] = plotRunArray0[0];
      plotRunArray0[3] = plotRun0;
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      double double0 = plotRunList0.getMinY();
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(4, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[4];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PlotRun plotRun0 = new PlotRun(linkedList0);
      plotRunArray0[0] = plotRun0;
      plotRunArray0[1] = plotRunArray0[0];
      plotRunArray0[2] = plotRunArray0[1];
      plotRunArray0[3] = plotRunArray0[1];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      double double0 = plotRunList0.getMaxX();
      assertEquals(4, plotRunList0.size());
      assertEquals(4.9E-324, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[4];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      // Undeclared exception!
      try { 
        plotRunList0.getMinX();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      double double0 = plotRunList0.getMinX();
      assertEquals(1.7976931348623157E308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArrayList<PlotRun> arrayList0 = new ArrayList<PlotRun>();
      PlotDatum[] plotDatumArray0 = new PlotDatum[1];
      PlotRun plotRun0 = new PlotRun(plotDatumArray0);
      arrayList0.add(plotRun0);
      PlotRunList plotRunList0 = new PlotRunList(arrayList0);
      assertEquals(1, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      PlotRunList plotRunList0 = new PlotRunList(set0);
      assertEquals(0, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      PlotRunList plotRunList1 = new PlotRunList(plotRunList0);
      assertTrue(plotRunList1.equals((Object)plotRunList0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      PlotRunList plotRunList0 = new PlotRunList(priorityQueue0);
      plotRunList0.clear();
      assertEquals(0, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      SynthCheckBoxMenuItemUI synthCheckBoxMenuItemUI0 = new SynthCheckBoxMenuItemUI();
      // Undeclared exception!
      try { 
        plotRunList0.set(11, synthCheckBoxMenuItemUI0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.plaf.synth.SynthCheckBoxMenuItemUI cannot be cast to jahuwaldt.plot.PlotRun
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      plotRunList0.add((Object) null);
      // Undeclared exception!
      try { 
        plotRunList0.getMaxX();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      PlotRunList plotRunList0 = new PlotRunList(priorityQueue0);
      Iterator iterator0 = plotRunList0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[9];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      plotRunList0.remove(0);
      assertEquals(8, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[2];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      plotRunList0.get(0);
      assertEquals(2, plotRunList0.size());
  }
}

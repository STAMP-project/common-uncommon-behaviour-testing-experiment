/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 05 13:25:34 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.RenderingHints;
import java.awt.image.ImageProducer;
import java.awt.image.Kernel;
import java.awt.image.MemoryImageSource;
import javax.swing.JLayeredPane;
import jigl.image.Image;
import jigl.image.InterpolationMethod;
import jigl.image.ROI;
import jigl.image.types.GrayImage;
import jigl.image.types.InterpolatedGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GrayImage_ESTest extends GrayImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)5249;
      shortArray0[1] = (short)557;
      shortArray0[2] = (short)1187;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)3109;
      shortArray0[5] = (short)0;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(1773, 1773, shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((-1299), (-2843));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      ROI rOI1 = new ROI((-1792), 0, (-1792), (-1792));
      rOI0.ux();
      rOI0.ly();
      rOI1.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ux();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedGrayImage1.setInterpolationMethod(interpolationMethod0);
      rOI0.lx();
      rOI1.ux();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      integer0.intValue();
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      integer1.intValue();
      Integer integer2 = new Integer(225);
      integer2.floatValue();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.set(52, 34, integer2, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1758
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(8, 12);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage0.clip(37, 8);
      ROI rOI0 = new ROI();
      rOI0.uy();
      Integer integer0 = new Integer(12);
      rOI0.Y();
      interpolatedGrayImage0.clip(388, 106, rOI0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      ROI rOI1 = new ROI(409, 0, 409, 409);
      rOI0.ux();
      rOI0.ly();
      rOI1.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ux();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedGrayImage1.setInterpolationMethod(interpolationMethod0);
      interpolatedGrayImage1.divide(0);
      interpolatedGrayImage1.addbuffer(27, 51, 7229);
      rOI0.lx();
      rOI0.ux();
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.add(0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(6, 6);
      ROI rOI0 = new ROI();
      rOI0.ux();
      Integer integer0 = new Integer(0);
      rOI0.ux();
      Integer integer1 = new Integer(6);
      rOI0.ux();
      rOI0.lx();
      Integer integer2 = new Integer(3);
      rOI0.ux();
      Integer integer3 = new Integer(0);
      rOI0.setROI(8, (-801), 6, 255);
      Integer integer4 = new Integer((int) integer0);
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      Integer integer5 = new Integer(6);
      // Undeclared exception!
      try { 
        grayImage0.median(6, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -801
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 4930;
      intArray0[1] = 4930;
      intArray0[2] = 255;
      intArray0[3] = 4930;
      intArray0[4] = 255;
      intArray0[5] = 255;
      intArray0[6] = 4930;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(255, 4930, intArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 7;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(1, 7, (short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      ROI rOI1 = new ROI(409, 0, 409, 409);
      rOI0.ux();
      rOI0.ly();
      rOI1.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ux();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      interpolatedGrayImage0.toString();
      InterpolationMethod interpolationMethod0 = InterpolationMethod.NEIGHBOR;
      interpolatedGrayImage1.setInterpolationMethod(interpolationMethod0);
      ROI rOI2 = new ROI();
      rOI2.uy();
      rOI2.X();
      rOI2.Y();
      rOI2.lx();
      rOI1.ux();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.add(0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(8, 12);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage0.clip(1491, 12);
      GrayImage grayImage0 = new GrayImage(interpolatedGrayImage0);
      GrayImage grayImage1 = interpolatedGrayImage0.addbuffer(3, 7, 49);
      GrayImage grayImage2 = grayImage1.divide(8);
      interpolatedGrayImage0.subtract((Image<Integer>) grayImage2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[][] intArray0 = new int[3][6];
      int[] intArray1 = new int[6];
      intArray1[0] = 1256;
      intArray1[1] = (-1364);
      intArray1[2] = 0;
      intArray1[3] = 1;
      intArray1[4] = 1;
      intArray1[5] = 0;
      intArray0[1] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = (-1364);
      intArray2[1] = 1;
      intArray2[2] = 1961;
      intArray2[3] = 1256;
      intArray2[4] = 1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      grayImage0.max();
      // Undeclared exception!
      try { 
        grayImage0.multiply(1256);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(8, 12);
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      image0.clear();
      interpolatedGrayImage0.clip(37, 8);
      interpolatedGrayImage0.clip(6, 6);
      ROI rOI0 = new ROI();
      GrayImage grayImage0 = new GrayImage(interpolatedGrayImage0);
      interpolatedGrayImage0.sqrSum();
      interpolatedGrayImage0.subtract(37);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 33;
      GrayImage grayImage0 = new GrayImage(33, 33);
      ROI rOI0 = new ROI();
      int int1 = new Integer(33);
      rOI0.X();
      rOI0.Y();
      grayImage0.copy(rOI0);
      // Undeclared exception!
      try { 
        grayImage0.clip(2198, (-802), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage0.clip(128, 6);
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedGrayImage0.setInterpolationMethod(interpolationMethod0);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      rOI0.Y();
      rOI0.lx();
      rOI0.ux();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      integer0.intValue();
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      Integer integer2 = Integer.valueOf(3795);
      integer2.intValue();
      Integer integer3 = new Integer(932);
      interpolatedGrayImage0.add((-3359), rOI0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.setROI(300, 300, 1, 300);
      Integer integer0 = new Integer(1);
      short[][] shortArray0 = new short[0][3];
      GrayImage grayImage0 = new GrayImage(shortArray0);
      grayImage0.clear();
      // Undeclared exception!
      try { 
        grayImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(6, 0);
      int int0 = 12;
      grayImage0.subtract(50);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        grayImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 5);
      interpolatedGrayImage0.clear();
      GrayImage grayImage0 = new GrayImage(interpolatedGrayImage0);
      interpolatedGrayImage0.getJavaImage();
      GrayImage grayImage1 = null;
      try {
        grayImage1 = new GrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(8, interpolatedGrayImage0.Y());
      
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      assertNotNull(image0);
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(8, image0.Y());
      assertEquals(10, image0.X());
      assertSame(interpolatedGrayImage0, image0);
      
      interpolatedGrayImage0.clip(128, 6);
      assertEquals(10240, interpolatedGrayImage0.absSum());
      assertEquals(1310720L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(10240, interpolatedGrayImage0.addSum());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertSame(interpolatedGrayImage0, image0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.Y();
      assertEquals(1, int2);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      interpolatedGrayImage0.multiply(8, 6, 0, rOI0);
      assertEquals(10112, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(10112, interpolatedGrayImage0.addSum());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(1294336L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertSame(interpolatedGrayImage0, image0);
      
      int int3 = interpolatedGrayImage0.absSum();
      assertEquals(10112, int3);
      assertEquals(10112, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(10112, interpolatedGrayImage0.addSum());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(1294336L, interpolatedGrayImage0.sqrSum());
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertSame(interpolatedGrayImage0, image0);
      
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.subtract(image0, rOI0, rOI0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(9984, interpolatedGrayImage0.absSum());
      assertEquals(1277952L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(9984, interpolatedGrayImage0.addSum());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(8, image0.Y());
      assertEquals(10, image0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1277952L, interpolatedGrayImage1.sqrSum());
      assertEquals(10, interpolatedGrayImage1.X());
      assertEquals(8, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(9984, interpolatedGrayImage1.addSum());
      assertEquals(9984, interpolatedGrayImage1.absSum());
      assertSame(interpolatedGrayImage0, image0);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, image0);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.add((-1), 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage0.addbuffer(8, 10, 10);
      interpolatedGrayImage0.clip(128, 6);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      interpolatedGrayImage0.multiply(8, 6, 10, rOI0);
      rOI0.ux();
      interpolatedGrayImage0.median(1);
      rOI0.setROI(0, 35, 128, 10);
      interpolatedGrayImage0.toString();
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      interpolatedGrayImage1.addbuffer(5, 4, (-3678), 35, 2796);
      interpolatedGrayImage0.clip(4, 4);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 5);
      interpolatedGrayImage0.clear();
      GrayImage grayImage0 = interpolatedGrayImage0.copy();
      interpolatedGrayImage0.getJavaImage();
      grayImage0.toString();
      int int0 = new Integer(10);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      grayImage0.copy();
      rOI0.ux();
      rOI0.ly();
      grayImage0.max();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ux();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedGrayImage1.addbuffer(0, 0, 47, 472, 472);
      interpolatedGrayImage0.toString();
      interpolatedGrayImage1.setInterpolationMethod(interpolationMethod0);
      ROI rOI1 = new ROI();
      rOI1.uy();
      rOI1.X();
      rOI1.Y();
      rOI1.ux();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.add(9, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 128;
      GrayImage grayImage0 = new GrayImage(128, 128);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      ROI rOI1 = new ROI(1, 1376, 0, 0);
      rOI1.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ly();
      int int1 = (-2593);
      int int2 = (-4762);
      // Undeclared exception!
      grayImage0.min();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(6, 6);
      ROI rOI0 = new ROI(6, 6, 3, 6);
      rOI0.ux();
      Integer integer0 = new Integer(3);
      rOI0.ux();
      Integer integer1 = new Integer(6);
      Integer integer2 = new Integer(3);
      rOI0.lx();
      Integer integer3 = new Integer(3);
      rOI0.ux();
      Integer integer4 = new Integer(3);
      Integer integer5 = new Integer((int) integer0);
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      Integer integer6 = new Integer(6);
      // Undeclared exception!
      try { 
        grayImage0.median(3, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI();
      rOI1.uy();
      rOI1.X();
      rOI1.Y();
      rOI1.uy();
      rOI0.X();
      rOI1.Y();
      interpolatedGrayImage0.multiply(1, 6, 731, rOI0);
      interpolatedGrayImage0.subtract(image0, rOI1, rOI1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      ROI rOI1 = new ROI((-1792), 0, (-1792), (-1792));
      rOI0.ux();
      rOI0.ly();
      rOI1.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ux();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedGrayImage1.addbuffer(0, 0, 47, 472, 472);
      interpolatedGrayImage0.toString();
      interpolatedGrayImage1.setInterpolationMethod(interpolationMethod0);
      rOI0.lx();
      rOI0.ux();
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.add(0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1792
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 10;
      int int1 = 8;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      int int2 = 128;
      int int3 = 6;
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.copy((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[][] intArray0 = new int[3][6];
      int[] intArray1 = new int[6];
      intArray1[0] = 1256;
      intArray1[1] = (-1364);
      intArray1[2] = 0;
      intArray1[3] = 1;
      intArray1[5] = 0;
      intArray0[1] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[1] = 1;
      intArray2[2] = 1961;
      intArray2[3] = 1256;
      intArray2[4] = 1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      grayImage0.max();
      ROI rOI0 = new ROI();
      rOI0.setROI((-1639), 1961, 65, 1);
      rOI0.uy();
      rOI0.X();
      rOI0.Y();
      // Undeclared exception!
      try { 
        grayImage0.byteSize(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1639
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(6, 0);
      int int0 = 3;
      int int1 = 6;
      // Undeclared exception!
      try { 
        grayImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      GrayImage grayImage0 = interpolatedGrayImage0.multiply(10);
      interpolatedGrayImage0.toString();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        grayImage0.add(370, 2, 370, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 370
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 8;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      int int1 = 6;
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.clip(128, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      ROI rOI1 = new ROI((-1792), 0, (-1792), (-1792));
      rOI0.ux();
      rOI0.ly();
      rOI1.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ux();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedGrayImage0.setInterpolationMethod(interpolationMethod0);
      rOI0.lx();
      rOI1.ux();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      integer0.intValue();
      interpolatedGrayImage0.divide(5);
      GrayImage grayImage1 = interpolatedGrayImage0.addbuffer(51, 51, 0);
      rOI1.lx();
      grayImage1.multiply(27, 0, 1, rOI0);
      grayImage1.subtract(0);
      grayImage0.add(10);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      ROI rOI1 = new ROI((-1792), 0, (-1792), (-1792));
      rOI0.ux();
      int int0 = new Integer(1);
      Integer integer0 = new Integer(0);
      rOI0.ux();
      rOI0.ux();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedGrayImage0.setInterpolationMethod(interpolationMethod0);
      rOI0.lx();
      rOI1.ux();
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      integer1.intValue();
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      GrayImage grayImage1 = interpolatedGrayImage0.addbuffer(51, 51, 0);
      rOI1.lx();
      grayImage1.multiply(27, 0, 1, rOI0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      GrayImage grayImage2 = grayImage0.add(10);
      grayImage2.copy();
      GrayImage grayImage3 = interpolatedGrayImage2.add((Image<Integer>) grayImage0);
      int int1 = 93;
      // Undeclared exception!
      try { 
        grayImage3.max(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1792
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      ROI rOI0 = new ROI();
      interpolatedGrayImage0.clear();
      // Undeclared exception!
      interpolatedGrayImage0.median(8);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 10;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      int int1 = 128;
      interpolatedGrayImage0.clip(128, 6);
      ROI rOI0 = new ROI();
      int int2 = new Integer(8);
      rOI0.Y();
      interpolatedGrayImage0.multiply(8, 6, 10, rOI0);
      rOI0.ux();
      // Undeclared exception!
      interpolatedGrayImage0.median(8);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      ROI rOI0 = new ROI(53, 4173, 22, 22);
      rOI0.ly();
      Integer integer0 = new Integer(8);
      rOI0.ux();
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      Integer integer1 = new Integer(1901);
      Integer integer2 = JLayeredPane.PALETTE_LAYER;
      GrayImage grayImage0 = new GrayImage(interpolatedGrayImage0);
      grayImage0.byteSize();
      interpolatedGrayImage1.min();
      ROI rOI1 = new ROI();
      rOI1.uy();
      rOI1.X();
      rOI1.Y();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide((Image<Integer>) interpolatedGrayImage1, rOI1, rOI1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 33;
      GrayImage grayImage0 = new GrayImage(33, 33);
      ROI rOI0 = new ROI();
      rOI0.X();
      Integer integer0 = new Integer(1);
      GrayImage grayImage1 = grayImage0.copy(rOI0);
      grayImage1.max();
      // Undeclared exception!
      try { 
        grayImage0.clip(33, 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage0.clip(128, 6);
      ROI rOI0 = new ROI();
      GrayImage grayImage0 = new GrayImage(interpolatedGrayImage0);
      interpolatedGrayImage0.sqrSum();
      interpolatedGrayImage0.subtract(6);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 409;
      GrayImage grayImage0 = new GrayImage(409, 409);
      // Undeclared exception!
      grayImage0.clear();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      short[][] shortArray0 = new short[7][7];
      short[] shortArray1 = new short[0];
      shortArray0[0] = shortArray1;
      short[] shortArray2 = new short[1];
      shortArray2[0] = (short)128;
      shortArray0[1] = shortArray2;
      short[] shortArray3 = new short[9];
      shortArray3[0] = (short)128;
      shortArray3[1] = (short)128;
      shortArray3[2] = (short)128;
      shortArray3[3] = (short)128;
      shortArray3[4] = (short) (-500);
      shortArray3[5] = (short)128;
      shortArray3[6] = (short)128;
      shortArray3[7] = (short)128;
      shortArray3[8] = (short)128;
      shortArray0[2] = shortArray3;
      short[] shortArray4 = new short[7];
      shortArray4[0] = (short) (-500);
      shortArray4[1] = (short)128;
      shortArray4[2] = (short) (-500);
      shortArray4[3] = (short) (-500);
      shortArray4[4] = (short)128;
      shortArray4[5] = (short) (-500);
      shortArray4[6] = (short)3;
      shortArray0[3] = shortArray4;
      short[] shortArray5 = new short[7];
      shortArray5[0] = (short)3;
      shortArray5[1] = (short) (-500);
      shortArray5[2] = (short)128;
      shortArray5[3] = (short)128;
      shortArray5[4] = (short) (-500);
      shortArray5[5] = (short) (-186);
      shortArray5[6] = (short)128;
      shortArray0[4] = shortArray5;
      short[] shortArray6 = new short[3];
      shortArray6[0] = (short) (-500);
      shortArray6[1] = (short) (-186);
      shortArray6[2] = (short)3;
      shortArray0[5] = shortArray6;
      short[] shortArray7 = new short[9];
      shortArray7[0] = (short) (-500);
      shortArray7[1] = (short)0;
      shortArray7[2] = (short)128;
      shortArray7[3] = (short)3;
      shortArray7[4] = (short)128;
      shortArray7[5] = (short)128;
      shortArray7[6] = (short)128;
      shortArray7[7] = (short)3;
      shortArray7[8] = (short)3;
      shortArray0[6] = shortArray7;
      GrayImage grayImage1 = null;
      try {
        grayImage1 = new GrayImage(shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(6, 0);
      ROI rOI0 = new ROI(3, 3, 6, (-137));
      int int0 = new Integer((-137));
      rOI0.ly();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ux();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedGrayImage0.setInterpolationMethod(interpolationMethod0);
      rOI0.lx();
      rOI0.ux();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      integer0.intValue();
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      Integer.valueOf(4);
      Integer integer2 = Integer.valueOf(4);
      integer2.intValue();
      Integer integer3 = new Integer(3);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.add(6, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -137
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      ROI rOI1 = new ROI((-1792), 0, (-1792), (-1792));
      ROI rOI2 = new ROI();
      rOI1.uy();
      grayImage0.min();
      rOI2.setROI(0, 0, 2311, 128);
      ROI rOI3 = new ROI();
      rOI3.uy();
      rOI3.X();
      rOI3.Y();
      rOI3.X();
      ROI rOI4 = new ROI(3, 3, 6, (-137));
      rOI4.ux();
      rOI4.ly();
      rOI4.ux();
      rOI4.ly();
      rOI4.ux();
      rOI4.ux();
      rOI4.lx();
      rOI4.ux();
      rOI4.Y();
      // Undeclared exception!
      try { 
        grayImage0.median(3, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 0;
      GrayImage grayImage0 = new GrayImage(0, 0);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      rOI0.Y();
      // Undeclared exception!
      try { 
        grayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[][] intArray0 = new int[0][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      grayImage0.copy();
      // Undeclared exception!
      try { 
        GrayImage.main((String[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      ROI rOI1 = new ROI((-1792), 0, (-1792), (-1792));
      rOI0.ux();
      rOI0.ly();
      Integer integer0 = new Integer(0);
      rOI0.ux();
      rOI0.ux();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedGrayImage0.setInterpolationMethod(interpolationMethod0);
      rOI0.lx();
      rOI1.ux();
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      integer1.intValue();
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      GrayImage grayImage1 = interpolatedGrayImage0.addbuffer(51, 51, 0);
      rOI1.lx();
      grayImage1.min();
      grayImage0.min();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[0];
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(8, 35, intArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage0.clip(128, 6);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      interpolatedGrayImage0.multiply(8, 6, 10, rOI0);
      GrayImage grayImage0 = interpolatedGrayImage0.addbuffer(1, 128, 2743, Integer.MIN_VALUE, 2743);
      grayImage0.toString();
      Integer integer0 = new Integer(998);
      interpolatedGrayImage0.min();
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(grayImage0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[][] intArray0 = new int[5][6];
      int[] intArray1 = new int[7];
      intArray1[0] = 0;
      intArray1[1] = (-1167);
      intArray1[2] = 0;
      intArray1[3] = (-3266);
      intArray1[4] = (-1);
      intArray1[5] = (-2262);
      intArray1[6] = (-536);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      intArray2[0] = (-2262);
      intArray2[1] = (-1167);
      intArray2[2] = (-1);
      intArray2[3] = (-2262);
      intArray2[4] = 1265;
      intArray2[5] = (-1167);
      intArray2[6] = (-1167);
      intArray2[7] = (-2262);
      intArray2[8] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      intArray3[0] = 1265;
      intArray3[1] = (-536);
      intArray3[2] = 1265;
      intArray3[3] = 0;
      intArray3[4] = (-3266);
      intArray3[5] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[7];
      intArray4[0] = (-536);
      intArray4[1] = (-536);
      intArray4[2] = 0;
      intArray4[3] = (-1);
      intArray4[4] = 0;
      intArray4[5] = 0;
      intArray4[6] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[8];
      intArray5[0] = 0;
      intArray5[1] = (-1);
      intArray5[2] = (-1167);
      intArray5[3] = 1265;
      intArray5[4] = 0;
      intArray5[5] = 0;
      intArray5[6] = (-1167);
      intArray5[7] = (-3266);
      intArray0[4] = intArray5;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("jigl.util.ArrayUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      ROI rOI1 = new ROI((-1792), 0, (-1792), (-1792));
      rOI0.ly();
      Integer integer0 = new Integer(0);
      rOI0.ux();
      rOI0.ux();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedGrayImage0.setInterpolationMethod(interpolationMethod0);
      rOI0.lx();
      rOI1.ux();
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      GrayImage grayImage1 = new GrayImage(interpolatedGrayImage0);
      interpolatedGrayImage0.min();
      // Undeclared exception!
      try { 
        grayImage0.divide((Image<Integer>) grayImage1, rOI1, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage0.max();
      interpolatedGrayImage0.clip(128, 8);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      interpolatedGrayImage0.min();
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      interpolatedGrayImage0.clip(8, 4386, rOI0);
      interpolatedGrayImage0.subtract(0, 5, (-1531));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(8, 12);
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      image0.clear();
      interpolatedGrayImage0.clip(37, 8);
      ROI rOI0 = new ROI();
      rOI0.uy();
      interpolatedGrayImage0.clip(8, 8, rOI0);
      interpolatedGrayImage0.clip(233, 9, rOI0);
      GrayImage grayImage0 = interpolatedGrayImage0.subtract(image0, rOI0, rOI0);
      grayImage0.diff(image0);
      interpolatedGrayImage0.add(12);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.multiply(10);
      interpolatedGrayImage0.toString();
      ROI rOI0 = new ROI();
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      interpolatedGrayImage2.absSum();
      interpolatedGrayImage2.subtract((Image<Integer>) interpolatedGrayImage0, rOI0, rOI0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.add(28, 370, 370);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 370
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(33, 33);
      ROI rOI0 = new ROI();
      Integer integer0 = new Integer(33);
      rOI0.X();
      rOI0.Y();
      int int0 = (-802);
      grayImage0.max();
      int int1 = 6;
      GrayImage grayImage1 = grayImage0.addbuffer(388, 1, 6, 6, 388);
      grayImage1.toString();
      Integer integer1 = new Integer(1);
      short[][] shortArray0 = new short[0][3];
      GrayImage grayImage2 = new GrayImage(shortArray0);
      grayImage1.min();
      int int2 = Integer.MIN_VALUE;
      InterpolatedGrayImage interpolatedGrayImage0 = null;
      try {
        interpolatedGrayImage0 = new InterpolatedGrayImage(Integer.MIN_VALUE, 33);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(8, 12);
      interpolatedGrayImage0.clear();
      ROI rOI0 = new ROI();
      rOI0.uy();
      Integer integer0 = new Integer(12);
      interpolatedGrayImage0.clip(8, 8, rOI0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      ROI rOI1 = new ROI((-1792), 0, (-1792), (-1792));
      rOI0.ux();
      rOI0.ly();
      rOI1.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ux();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedGrayImage0.setInterpolationMethod(interpolationMethod0);
      rOI0.lx();
      rOI1.ux();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      integer0.intValue();
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      int[] intArray0 = new int[4];
      intArray0[0] = (-1792);
      intArray0[1] = 0;
      intArray0[2] = (-1792);
      intArray0[3] = 1;
      GrayImage grayImage1 = new GrayImage(35, 0, intArray0);
      grayImage0.add((-162));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.Y());
      
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      assertNotNull(image0);
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(8, image0.Y());
      assertEquals(10, image0.X());
      assertSame(interpolatedGrayImage0, image0);
      
      interpolatedGrayImage0.clip(128, 6);
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(1310720L, interpolatedGrayImage0.sqrSum());
      assertEquals(10240, interpolatedGrayImage0.addSum());
      assertEquals(10240, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertSame(interpolatedGrayImage0, image0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      
      GrayImage grayImage0 = new GrayImage(interpolatedGrayImage0);
      assertNotNull(grayImage0);
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(1310720L, interpolatedGrayImage0.sqrSum());
      assertEquals(10240, interpolatedGrayImage0.addSum());
      assertEquals(10240, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(10240, grayImage0.absSum());
      assertEquals(10240, grayImage0.addSum());
      assertEquals(10, grayImage0.X());
      assertEquals(1310720L, grayImage0.sqrSum());
      assertEquals(8, grayImage0.Y());
      
      GrayImage grayImage1 = grayImage0.addbuffer(3, 7, (-14));
      assertNotNull(grayImage1);
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(1310720L, interpolatedGrayImage0.sqrSum());
      assertEquals(10240, interpolatedGrayImage0.addSum());
      assertEquals(10240, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(10240, grayImage0.absSum());
      assertEquals(10240, grayImage0.addSum());
      assertEquals(10, grayImage0.X());
      assertEquals(1310720L, grayImage0.sqrSum());
      assertEquals(8, grayImage0.Y());
      assertEquals(7, grayImage1.Y());
      assertEquals(3, grayImage1.X());
      assertEquals(344064L, grayImage1.sqrSum());
      assertEquals(2688, grayImage1.absSum());
      assertEquals(2688, grayImage1.addSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertSame(interpolatedGrayImage0, image0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      
      GrayImage grayImage2 = grayImage1.divide(8);
      assertNotNull(grayImage2);
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(1310720L, interpolatedGrayImage0.sqrSum());
      assertEquals(10240, interpolatedGrayImage0.addSum());
      assertEquals(10240, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(10240, grayImage0.absSum());
      assertEquals(10240, grayImage0.addSum());
      assertEquals(10, grayImage0.X());
      assertEquals(1310720L, grayImage0.sqrSum());
      assertEquals(8, grayImage0.Y());
      assertEquals(7, grayImage1.Y());
      assertEquals(3, grayImage1.X());
      assertEquals(5376L, grayImage1.sqrSum());
      assertEquals(336, grayImage1.absSum());
      assertEquals(336, grayImage1.addSum());
      assertEquals(5376L, grayImage2.sqrSum());
      assertEquals(7, grayImage2.Y());
      assertEquals(336, grayImage2.absSum());
      assertEquals(336, grayImage2.addSum());
      assertEquals(3, grayImage2.X());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertSame(interpolatedGrayImage0, image0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      
      GrayImage grayImage3 = grayImage1.subtract((Image<Integer>) grayImage0);
      assertNotNull(grayImage3);
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(1310720L, interpolatedGrayImage0.sqrSum());
      assertEquals(10240, interpolatedGrayImage0.addSum());
      assertEquals(10240, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(10240, grayImage0.absSum());
      assertEquals(10240, grayImage0.addSum());
      assertEquals(10, grayImage0.X());
      assertEquals(1310720L, grayImage0.sqrSum());
      assertEquals(8, grayImage0.Y());
      assertEquals(263424L, grayImage1.sqrSum());
      assertEquals((-2352), grayImage1.addSum());
      assertEquals(7, grayImage1.Y());
      assertEquals(3, grayImage1.X());
      assertEquals(2352, grayImage1.absSum());
      assertEquals((-2352), grayImage3.addSum());
      assertEquals(263424L, grayImage3.sqrSum());
      assertEquals(7, grayImage3.Y());
      assertEquals(2352, grayImage3.absSum());
      assertEquals(3, grayImage3.X());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertSame(interpolatedGrayImage0, image0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage1, grayImage2);
      assertSame(grayImage1, grayImage3);
      assertNotSame(grayImage1, grayImage0);
      assertSame(grayImage3, grayImage2);
      assertNotSame(grayImage3, grayImage0);
      assertSame(grayImage3, grayImage1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(472, 472);
      GrayImage grayImage1 = new InterpolatedGrayImage(grayImage0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      ROI rOI1 = new ROI(3414, (-4613), 128, 319);
      rOI0.ux();
      rOI0.ly();
      rOI1.ux();
      rOI1.ly();
      rOI0.ux();
      rOI0.ux();
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolationMethod interpolationMethod0 = InterpolationMethod.NEIGHBOR;
      interpolatedGrayImage0.setInterpolationMethod(interpolationMethod0);
      rOI0.lx();
      rOI0.ux();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      integer1.intValue();
      Integer integer2 = new Integer((-33));
      integer2.floatValue();
      integer2.intValue();
      Integer integer3 = JLayeredPane.DRAG_LAYER;
      integer2.intValue();
      Integer integer4 = new Integer(47);
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.add(0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage0.clip(128, 8);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      interpolatedGrayImage0.min();
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      rOI0.X();
      rOI0.Y();
      interpolatedGrayImage1.divide((Image<Integer>) interpolatedGrayImage0, rOI0, rOI0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage0.clip(128, 6);
      ROI rOI0 = new ROI();
      rOI0.Y();
      interpolatedGrayImage0.multiply(8, 6, 10, rOI0);
      rOI0.ux();
      rOI0.setROI(0, 35, 128, 10);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.median(1219, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(128, 128);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      ROI rOI1 = new ROI(1, 1376, 0, 0);
      rOI1.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ux();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      ROI rOI1 = new ROI((-1792), 0, (-1792), (-1792));
      rOI0.ux();
      rOI0.ly();
      Integer integer0 = new Integer(0);
      rOI0.ux();
      rOI0.ux();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedGrayImage0.setInterpolationMethod(interpolationMethod0);
      rOI0.lx();
      rOI1.ux();
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      integer1.intValue();
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      GrayImage grayImage1 = interpolatedGrayImage0.addbuffer(51, 51, 0);
      rOI1.lx();
      grayImage1.multiply(27, 0, 1, rOI0);
      GrayImage grayImage2 = grayImage1.subtract(0);
      GrayImage grayImage3 = grayImage0.add(10);
      grayImage3.copy();
      GrayImage grayImage4 = grayImage2.add((Image<Integer>) grayImage0);
      grayImage4.max();
      int int0 = 93;
      // Undeclared exception!
      try { 
        grayImage4.max(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1792
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      ROI rOI0 = new ROI();
      rOI0.X();
      // Undeclared exception!
      try { 
        grayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(6, 0);
      // Undeclared exception!
      try { 
        grayImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage0.clip(128, 6);
      ROI rOI0 = new ROI();
      GrayImage grayImage0 = new GrayImage(interpolatedGrayImage0);
      grayImage0.addbuffer(3, 7, (-14));
      grayImage0.toString();
      rOI0.Y();
      interpolatedGrayImage0.byteSize(rOI0);
      // Undeclared exception!
      try { 
        grayImage0.divide(3, 915, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 915
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage0.clip(128, 6);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      interpolatedGrayImage0.clip(0, 6, rOI0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(6, 0);
      ROI rOI0 = new ROI();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ux();
      rOI0.lx();
      Integer integer0 = new Integer(3);
      rOI0.ux();
      rOI0.ly();
      Integer integer1 = new Integer(0);
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.Y();
      // Undeclared exception!
      try { 
        grayImage0.median(0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage0.multiply(10);
      interpolatedGrayImage0.toString();
      ROI rOI0 = new ROI();
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(10, 8);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 349;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(349, 349);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.subtract(349);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int[][] intArray0 = new int[0][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      short[] shortArray0 = new short[0];
      GrayImage grayImage1 = null;
      try {
        grayImage1 = new GrayImage(521, 1229, shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      integer0.intValue();
      interpolatedGrayImage0.toString();
      grayImage0.max();
      grayImage0.addbuffer(100, 0, 4);
      GrayImage grayImage1 = grayImage0.divide(25);
      interpolatedGrayImage0.subtract((Image<Integer>) grayImage1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 8;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage0.clip(128, 6);
      ROI rOI0 = new ROI();
      GrayImage grayImage0 = new GrayImage(interpolatedGrayImage0);
      grayImage0.getJavaImage();
      int int1 = 3;
      GrayImage grayImage1 = grayImage0.addbuffer(3, 7, (-14));
      GrayImage grayImage2 = grayImage1.copy();
      grayImage2.toString(rOI0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(grayImage0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.addbuffer(6, (-14), 1490, 86, 3121);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage0.clip(128, 6);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      interpolatedGrayImage0.multiply(8, 6, 10, rOI0);
      rOI0.ux();
      interpolatedGrayImage0.median(1);
      rOI0.setROI(0, 35, 128, 10);
      interpolatedGrayImage0.toString();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.multiply(17, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 0;
      GrayImage grayImage0 = new GrayImage(0, 0);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      ROI rOI1 = new ROI((-1792), 0, (-1792), (-1792));
      rOI0.ly();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      ROI rOI2 = null;
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.min((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      interpolatedGrayImage0.clip(128, 6);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      interpolatedGrayImage0.multiply(8, 6, 10, rOI0);
      rOI0.ux();
      GrayImage grayImage0 = interpolatedGrayImage0.add(image0);
      // Undeclared exception!
      grayImage0.addbuffer(1587, 8, 1587, 40, 0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertFalse(int1 == int0);
      
      ROI rOI1 = new ROI((-1792), 0, (-1792), (-1792));
      assertNotNull(rOI1);
      assertEquals((-1792), rOI1.ux());
      assertEquals((-1792), rOI1.uy());
      assertEquals(1793, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals((-1792), rOI1.lx());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(rOI0, rOI1);
      
      int int3 = rOI0.ly();
      assertEquals(0, int3);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertNotSame(rOI0, rOI1);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)int3));
      
      int int4 = rOI0.ux();
      assertEquals(0, int4);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertNotSame(rOI0, rOI1);
      
      int int5 = rOI0.ux();
      assertEquals(0, int5);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int5 == int4);
      assertFalse(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertNotSame(rOI0, rOI1);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.Y());
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedGrayImage0.setInterpolationMethod(interpolationMethod0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.CUBIC, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.Y());
      
      int int6 = rOI0.lx();
      assertEquals(0, int6);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int6 == int3);
      assertTrue(int6 == int5);
      assertTrue(int6 == int4);
      assertTrue(int6 == int2);
      assertFalse(int6 == int1);
      assertTrue(int6 == int0);
      assertNotSame(rOI0, rOI1);
      
      int int7 = rOI1.ux();
      assertEquals((-1792), int7);
      assertEquals((-1792), rOI1.ux());
      assertEquals((-1792), rOI1.uy());
      assertEquals(1793, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals((-1792), rOI1.lx());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int7 == int1);
      assertFalse(int7 == int3);
      assertFalse(int7 == int5);
      assertFalse(int7 == int0);
      assertFalse(int7 == int4);
      assertFalse(int7 == int2);
      assertFalse(int7 == int6);
      assertNotSame(rOI1, rOI0);
      
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int3));
      assertFalse(integer1.equals((Object)int6));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int7));
      assertFalse(integer1.equals((Object)int4));
      assertFalse(integer1.equals((Object)int5));
      assertFalse(integer1.equals((Object)int0));
      
      int int8 = integer1.intValue();
      assertEquals(100, int8);
      assertFalse(int8 == int6);
      assertFalse(int8 == int5);
      assertFalse(int8 == int2);
      assertFalse(int8 == int0);
      assertFalse(int8 == int7);
      assertFalse(int8 == int3);
      assertFalse(int8 == int4);
      assertFalse(int8 == int1);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int3));
      assertFalse(integer1.equals((Object)int6));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int7));
      assertFalse(integer1.equals((Object)int4));
      assertFalse(integer1.equals((Object)int5));
      assertFalse(integer1.equals((Object)int0));
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.CUBIC, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.CUBIC, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      GrayImage grayImage1 = interpolatedGrayImage0.addbuffer(51, 51, 0);
      assertNotNull(grayImage1);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(51, grayImage1.X());
      assertEquals(51, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.CUBIC, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      
      int int9 = rOI1.lx();
      assertEquals((-1792), int9);
      assertEquals((-1792), rOI1.ux());
      assertEquals((-1792), rOI1.uy());
      assertEquals(1793, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals((-1792), rOI1.lx());
      assertEquals(1, rOI1.X());
      assertFalse(int9 == int5);
      assertFalse(int9 == int6);
      assertFalse(int9 == int0);
      assertFalse(int9 == int1);
      assertFalse(int9 == int3);
      assertTrue(int9 == int7);
      assertFalse(int9 == int8);
      assertFalse(int9 == int4);
      assertFalse(int9 == int2);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      
      grayImage1.multiply(27, 0, 1, rOI0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(51, grayImage1.X());
      assertEquals(51, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.CUBIC, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(rOI0, rOI1);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      
      GrayImage grayImage2 = grayImage1.subtract(0);
      assertNotNull(grayImage2);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(51, grayImage1.X());
      assertEquals(51, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(51, grayImage2.X());
      assertEquals(51, grayImage2.Y());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.CUBIC, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertSame(grayImage1, grayImage2);
      assertNotSame(grayImage2, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      
      GrayImage grayImage3 = grayImage0.add(10);
      assertNotNull(grayImage3);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0, grayImage3.X());
      assertEquals(0, grayImage3.Y());
      assertEquals(0, grayImage3.absSum());
      assertEquals(0L, grayImage3.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage3);
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage3, grayImage0);
      assertNotSame(grayImage3, grayImage1);
      assertNotSame(grayImage3, grayImage2);
      
      GrayImage grayImage4 = grayImage2.add((Image<Integer>) grayImage0);
      assertNotNull(grayImage4);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(51, grayImage1.X());
      assertEquals(51, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(51, grayImage2.X());
      assertEquals(51, grayImage2.Y());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage4.addSum());
      assertEquals(0L, grayImage4.sqrSum());
      assertEquals(51, grayImage4.Y());
      assertEquals(0, grayImage4.absSum());
      assertEquals(51, grayImage4.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.CUBIC, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage1.equals((Object)grayImage3));
      assertFalse(grayImage2.equals((Object)grayImage3));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage4.equals((Object)grayImage3));
      assertFalse(grayImage4.equals((Object)grayImage0));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertNotSame(grayImage0, grayImage4);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage3);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage3);
      assertSame(grayImage1, grayImage2);
      assertSame(grayImage1, grayImage4);
      assertNotSame(grayImage2, grayImage3);
      assertSame(grayImage2, grayImage4);
      assertNotSame(grayImage2, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertSame(grayImage4, grayImage1);
      assertNotSame(grayImage4, grayImage3);
      assertSame(grayImage4, grayImage2);
      assertNotSame(grayImage4, grayImage0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      
      // Undeclared exception!
      try { 
        grayImage1.multiply(93, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1792
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      ROI rOI1 = new ROI((-1792), 0, (-1792), (-1792));
      rOI0.ux();
      rOI0.ly();
      rOI1.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ux();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedGrayImage0.toString();
      interpolatedGrayImage1.setInterpolationMethod(interpolationMethod0);
      rOI0.lx();
      rOI0.setROI(26, 28, (-2565), 1);
      rOI0.ux();
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.add(0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1792
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(6, 0);
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short)1;
      GrayImage grayImage1 = grayImage0.multiply(6);
      grayImage1.toString();
      ROI rOI0 = new ROI();
      rOI0.setROI(0, (short)8, 65, 255);
      rOI0.uy();
      rOI0.X();
      // Undeclared exception!
      try { 
        grayImage0.byteSize(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(8, 12);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage0.clip(37, 8);
      ROI rOI0 = new ROI();
      rOI0.uy();
      Integer integer0 = new Integer(12);
      interpolatedGrayImage0.clip(8, 8, rOI0);
      interpolatedGrayImage0.clip(233, 9, rOI0);
      interpolatedGrayImage0.add(233);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage0.clip(128, 6);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      rOI0.Y();
      interpolatedGrayImage0.clip(8, 1349, rOI0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 10);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage0.clip(128, 6);
      GrayImage grayImage0 = new GrayImage(interpolatedGrayImage0);
      GrayImage grayImage1 = grayImage0.addbuffer(3, 7, (-14));
      grayImage1.divide(10);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "";
      ROI rOI0 = new ROI(Integer.MIN_VALUE, (-834), (-834), 50);
      rOI0.ly();
      Integer integer0 = new Integer(2483);
      rOI0.ux();
      GrayImage grayImage0 = new GrayImage(472, 4526);
      // Undeclared exception!
      grayImage0.toString();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage0.clip(128, 6);
      ROI rOI0 = new ROI();
      GrayImage grayImage0 = new GrayImage(interpolatedGrayImage0);
      GrayImage grayImage1 = grayImage0.addbuffer(3, 7, (-14));
      grayImage1.copy(rOI0);
      grayImage0.toString();
      rOI0.Y();
      interpolatedGrayImage0.byteSize(rOI0);
      // Undeclared exception!
      try { 
        grayImage0.divide(3, 915, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 915
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 10);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage0.clip(128, 6);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      rOI0.Y();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.multiply(10, 6, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      ROI rOI0 = new ROI();
      rOI0.uy();
      GrayImage grayImage1 = new GrayImage(816, 0);
      short[][] shortArray0 = new short[0][1];
      GrayImage grayImage2 = new GrayImage(shortArray0);
      grayImage0.min();
      grayImage2.min();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      ROI rOI0 = new ROI();
      Integer integer0 = new Integer(0);
      rOI0.X();
      ROI rOI1 = new ROI((-1792), (int) integer0, (-1792), (-1792));
      rOI0.ly();
      Integer integer1 = new Integer((int) integer0);
      rOI0.ux();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      rOI1.ux();
      Integer integer2 = JLayeredPane.PALETTE_LAYER;
      GrayImage grayImage1 = new GrayImage(interpolatedGrayImage0);
      interpolatedGrayImage0.min();
      // Undeclared exception!
      try { 
        grayImage0.divide((Image<Integer>) grayImage1, rOI1, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1792
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      GrayImage grayImage1 = null;
      try {
        grayImage1 = new GrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = (-3649);
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(648, (-3649), (int[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      ROI rOI1 = new ROI((-1792), 0, (-1792), (-1792));
      grayImage0.copy();
      rOI0.ux();
      rOI0.ly();
      rOI1.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ux();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedGrayImage1.addbuffer(0, 0, 47, 472, 472);
      interpolatedGrayImage0.toString();
      interpolatedGrayImage1.setInterpolationMethod(interpolationMethod0);
      rOI0.lx();
      rOI0.ux();
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.add(0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1792
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      int int0 = 6;
      interpolatedGrayImage0.clip(128, 6);
      ROI rOI0 = new ROI();
      GrayImage grayImage0 = new GrayImage(interpolatedGrayImage0);
      int int1 = 3;
      int int2 = 7;
      grayImage0.addbuffer(3, 7, (-14));
      // Undeclared exception!
      try { 
        grayImage0.addbuffer(10, (-1124), 6, 10, (-16777216));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      ROI rOI1 = new ROI((-1792), 0, (-1792), (-1792));
      ROI rOI2 = new ROI();
      rOI1.uy();
      rOI2.setROI(0, 0, 2311, 128);
      ROI rOI3 = new ROI();
      rOI3.uy();
      rOI3.X();
      rOI3.Y();
      rOI3.X();
      ROI rOI4 = new ROI(3, 3, 6, (-137));
      rOI4.ux();
      rOI4.ly();
      rOI4.ux();
      rOI4.ly();
      rOI4.ux();
      rOI4.ux();
      rOI4.lx();
      rOI4.ux();
      rOI4.Y();
      // Undeclared exception!
      try { 
        grayImage0.median(3, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 8;
      int int1 = 12;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(8, 12);
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      interpolatedGrayImage0.clip(37, 8);
      ROI rOI0 = new ROI(12, 37, 12, 8);
      rOI0.uy();
      Integer integer0 = new Integer(12);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.subtract(image0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 746;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(8, 746);
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      int int1 = (-16777216);
      interpolatedGrayImage0.clip(int1, int0);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      int int2 = (-5013);
      int int3 = (-767);
      interpolatedGrayImage0.clip(int2, int3, rOI0);
      interpolatedGrayImage0.multiply(image0);
      interpolatedGrayImage0.min(rOI0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(3, 4);
      ROI rOI0 = new ROI(3, 3, 6, (-137));
      rOI0.setROI((-2079), 5, 3, (-709));
      rOI0.setROI(376, 357, 376, (-2079));
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      // Undeclared exception!
      try { 
        grayImage0.add(3, 357, 357, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1722
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(6, 0);
      ROI rOI0 = new ROI(3, 3, 6, (-137));
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ux();
      rOI0.lx();
      Integer integer0 = new Integer(3);
      rOI0.ux();
      rOI0.ly();
      int int0 = new Integer(3);
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.Y();
      // Undeclared exception!
      try { 
        grayImage0.median(3, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -137
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      interpolatedGrayImage0.clip(128, 8);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      rOI0.Y();
      interpolatedGrayImage0.clip(8, 1349, rOI0);
      GrayImage grayImage0 = interpolatedGrayImage0.multiply(image0);
      grayImage0.min(rOI0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      ROI rOI0 = new ROI();
      rOI0.setROI(0, 0, (-2213), (-2213));
      Integer integer0 = new Integer(0);
      rOI0.X();
      ROI rOI1 = new ROI(0, 53, 0, 22);
      rOI1.ly();
      Integer integer1 = new Integer((-763));
      rOI0.ux();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      rOI1.ux();
      Integer integer2 = JLayeredPane.PALETTE_LAYER;
      grayImage0.toString();
      rOI0.setROI(44, 32767, (-641), 22);
      GrayImage grayImage1 = new GrayImage(interpolatedGrayImage0);
      grayImage0.min();
      // Undeclared exception!
      try { 
        grayImage1.divide((Image<Integer>) grayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -641
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int[][] intArray0 = new int[3][6];
      int[] intArray1 = new int[6];
      intArray1[0] = 1256;
      intArray1[3] = 1;
      intArray1[4] = 1;
      intArray1[5] = 0;
      intArray0[1] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = (-1364);
      intArray2[1] = 1;
      intArray2[2] = 1;
      intArray2[3] = 1256;
      GrayImage grayImage0 = new GrayImage(intArray0);
      grayImage0.max();
      // Undeclared exception!
      try { 
        grayImage0.multiply(1256);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(31, 46);
      int int0 = 0;
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.subtract(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage0.clip(124, (-2217));
      ROI rOI0 = new ROI();
      GrayImage grayImage0 = new GrayImage(interpolatedGrayImage0);
      int int0 = 0;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-2217);
      floatArray0[1] = (float) 0;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) (-2217);
      floatArray0[4] = (float) 124;
      floatArray0[5] = 3837.9304F;
      floatArray0[6] = 3837.9304F;
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) 8;
      Kernel kernel0 = new Kernel(0, 0, floatArray0);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_DITHERING;
      GrayImage grayImage1 = null;
      try {
        grayImage1 = new GrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 0;
      int int1 = 796;
      GrayImage grayImage0 = new GrayImage(0, 796);
      int int2 = 6;
      ROI rOI0 = new ROI(3, 3, 6, (-137));
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ux();
      rOI0.lx();
      int int3 = 8;
      rOI0.setROI(0, (-728), 8, 0);
      rOI0.ux();
      // Undeclared exception!
      try { 
        grayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -728
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage0.clip(128, 6);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      interpolatedGrayImage0.multiply(8, 6, 10, rOI0);
      rOI0.ux();
      interpolatedGrayImage0.median(1);
      interpolatedGrayImage0.toString();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      ROI rOI1 = new ROI((-1792), 0, (-1792), (-1792));
      rOI0.ux();
      rOI0.ly();
      Integer integer0 = new Integer(0);
      rOI0.ux();
      rOI0.ux();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedGrayImage0.setInterpolationMethod(interpolationMethod0);
      rOI0.lx();
      rOI1.ux();
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      integer1.intValue();
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      GrayImage grayImage1 = interpolatedGrayImage0.addbuffer(51, 51, 0);
      rOI1.lx();
      grayImage1.multiply(27, 0, 1, rOI0);
      GrayImage grayImage2 = grayImage1.subtract(0);
      GrayImage grayImage3 = grayImage0.add(10);
      grayImage3.copy();
      GrayImage grayImage4 = grayImage2.add((Image<Integer>) grayImage0);
      int int0 = 93;
      // Undeclared exception!
      try { 
        grayImage4.max(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1792
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage0.clip(128, 6);
      ROI rOI0 = new ROI();
      GrayImage grayImage0 = new GrayImage(interpolatedGrayImage0);
      interpolatedGrayImage0.sqrSum();
      // Undeclared exception!
      grayImage0.median(621);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(3, 3);
      ROI rOI0 = new ROI(3, 3, 3, (-137));
      rOI0.setROI((-2079), (-3), 3, (-709));
      rOI0.setROI(376, 357, 376, (-2079));
      rOI0.ly();
      rOI0.ux();
      rOI0.ly();
      int int0 = new Integer((-3));
      rOI0.lx();
      rOI0.setROI(6, 41, 60, 234);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(357, 376);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.subtract((Image<Integer>) grayImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage0.clip(128, 6);
      ROI rOI0 = new ROI();
      GrayImage grayImage0 = new GrayImage(interpolatedGrayImage0);
      grayImage0.addbuffer(3, 7, (-14));
      grayImage0.toString();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide(0, 30, (-16777216));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 30
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(8, 12);
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      image0.clear();
      interpolatedGrayImage0.clip(37, 8);
      ROI rOI0 = new ROI();
      rOI0.uy();
      interpolatedGrayImage0.clip(8, 8, rOI0);
      // Undeclared exception!
      interpolatedGrayImage0.addbuffer(22, 1609, 22);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(8, 12);
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      GrayImage grayImage0 = interpolatedGrayImage0.multiply(3952);
      grayImage0.toString();
      ROI rOI0 = new ROI();
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      interpolatedGrayImage1.absSum();
      interpolatedGrayImage0.subtract(image0, rOI0, rOI0);
      interpolatedGrayImage1.add(0, 8, 28);
      int int0 = 1464;
      Integer integer0 = new Integer(0);
      integer0.intValue();
      integer0.floatValue();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.set(1464, 0, (Integer) 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1464
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        GrayImage.main((String[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedGrayImage0.setInterpolationMethod(interpolationMethod0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      integer0.intValue();
      interpolatedGrayImage0.toString();
      grayImage0.sqrSum();
      interpolatedGrayImage0.subtract((-32768));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      ROI rOI0 = new ROI();
      rOI0.uy();
      GrayImage grayImage1 = new GrayImage(0, 0, (int[]) null);
      InterpolatedGrayImage interpolatedGrayImage0 = null;
      try {
        interpolatedGrayImage0 = new InterpolatedGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ":";
      stringArray0[1] = "";
      stringArray0[2] = "";
      // Undeclared exception!
      try { 
        GrayImage.main(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(472, 4526);
      // Undeclared exception!
      grayImage0.copy();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 8;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage0.clip(128, 6);
      ROI rOI0 = new ROI();
      GrayImage grayImage0 = new GrayImage(interpolatedGrayImage0);
      GrayImage grayImage1 = grayImage0.addbuffer(3, 7, (-14));
      // Undeclared exception!
      grayImage1.addbuffer(1389, 128, 255, 369, (-1031));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 8;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage0.clip(128, 6);
      ROI rOI0 = new ROI();
      GrayImage grayImage0 = new GrayImage(interpolatedGrayImage0);
      grayImage0.getJavaImage();
      int int1 = 3;
      grayImage0.addbuffer(3, 7, (-14));
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(grayImage0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.addbuffer(6, (-14), 1490, 86, 3121);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 307;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 307);
      interpolatedGrayImage0.clear();
      int[][] intArray0 = new int[0][5];
      GrayImage grayImage0 = new GrayImage(307, 307);
      int int1 = 5;
      // Undeclared exception!
      try { 
        grayImage0.multiply((-1749));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((GrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(33, 33);
      ROI rOI0 = new ROI();
      Integer integer0 = new Integer(33);
      rOI0.X();
      rOI0.Y();
      grayImage0.max();
      rOI0.ux();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      Integer integer1 = new Integer((-1180));
      Integer integer2 = JLayeredPane.PALETTE_LAYER;
      GrayImage grayImage1 = new GrayImage(interpolatedGrayImage0);
      // Undeclared exception!
      try { 
        grayImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 5);
      interpolatedGrayImage0.clear();
      GrayImage grayImage0 = interpolatedGrayImage0.copy();
      interpolatedGrayImage0.getJavaImage();
      grayImage0.absSum();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(6, 6);
      ROI rOI0 = new ROI(6, 6, 3, 6);
      rOI0.ux();
      Integer integer0 = new Integer(3);
      rOI0.ux();
      Integer integer1 = new Integer(6);
      int int0 = new Integer(3);
      rOI0.lx();
      Integer integer2 = new Integer(3);
      rOI0.ux();
      Integer integer3 = new Integer(3);
      Integer integer4 = new Integer((int) integer0);
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      Integer integer5 = new Integer(6);
      // Undeclared exception!
      try { 
        grayImage0.median(3, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)4173;
      GrayImage grayImage0 = new GrayImage(78, 0, shortArray0);
      grayImage0.subtract((Image<Integer>) null);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage0.clip(128, 6);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      rOI0.Y();
      interpolatedGrayImage0.multiply(8, 6, 0, rOI0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.median(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      interpolatedGrayImage0.clip(128, 8);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      interpolatedGrayImage0.clip(8, 1349, rOI0);
      GrayImage grayImage0 = interpolatedGrayImage0.multiply(image0);
      grayImage0.min(rOI0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      rOI0.Y();
      interpolatedGrayImage0.toString(rOI0);
      interpolatedGrayImage0.clip(128, 6);
      ROI rOI1 = new ROI();
      rOI1.uy();
      rOI1.X();
      rOI1.Y();
      interpolatedGrayImage0.multiply(8, 6, 0, rOI1);
      interpolatedGrayImage0.absSum();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(8, 8, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      GrayImage grayImage0 = interpolatedGrayImage0.multiply(10);
      interpolatedGrayImage0.toString();
      ROI rOI0 = new ROI();
      rOI0.setROI(8, 4060, (-3366), (-704));
      rOI0.uy();
      rOI0.X();
      ROI rOI1 = new ROI((-704), (-704), 6, (-137));
      rOI1.ux();
      rOI1.ly();
      rOI1.ux();
      rOI1.ly();
      rOI1.ux();
      rOI1.ux();
      rOI1.lx();
      rOI1.ux();
      rOI1.Y();
      // Undeclared exception!
      try { 
        grayImage0.byteSize(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -704
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      int int0 = 128;
      Integer integer0 = new Integer(8);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      rOI0.Y();
      rOI0.Y();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.multiply(2, (-16777216), 2, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      int int0 = (-14);
      interpolatedGrayImage0.clip(128, (-14));
      ROI rOI0 = new ROI();
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new InterpolatedGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      short[][] shortArray0 = new short[3][0];
      short[] shortArray1 = new short[0];
      shortArray0[0] = shortArray1;
      short[] shortArray2 = new short[4];
      shortArray2[0] = (short)85;
      shortArray2[1] = (short)802;
      shortArray2[2] = (short)2;
      shortArray2[3] = (short) (-2022);
      shortArray0[1] = shortArray2;
      short[] shortArray3 = new short[4];
      shortArray3[0] = (short) (-2022);
      shortArray3[1] = (short)85;
      shortArray3[2] = (short)85;
      shortArray3[3] = (short) (-2022);
      shortArray0[2] = shortArray3;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage0.clip(128, 8);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.X();
      rOI0.setROI(128, 128, 128, 1);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.clip(8, 1349, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 128
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(int1 == int0);
      
      ROI rOI1 = new ROI((-1792), 0, (-1792), (-1792));
      assertNotNull(rOI1);
      assertEquals((-1792), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1793, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals((-1792), rOI1.lx());
      assertEquals((-1792), rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int2 = rOI0.ly();
      assertEquals(0, int2);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertNotSame(rOI0, rOI1);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      
      int int3 = rOI0.ux();
      assertEquals(0, int3);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertNotSame(rOI0, rOI1);
      
      int int4 = rOI0.ux();
      assertEquals(0, int4);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertFalse(int4 == int1);
      assertNotSame(rOI0, rOI1);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedGrayImage0.setInterpolationMethod(interpolationMethod0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(InterpolationMethod.CUBIC, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      
      int int5 = rOI1.ux();
      assertEquals((-1792), int5);
      assertEquals((-1792), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1793, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals((-1792), rOI1.lx());
      assertEquals((-1792), rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertNotSame(rOI1, rOI0);
      
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int5));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int4));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int3));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int2));
      
      int int6 = integer1.intValue();
      assertEquals(100, int6);
      assertFalse(integer1.equals((Object)int5));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int4));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int3));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(int6 == int1);
      assertFalse(int6 == int4);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int3);
      assertFalse(int6 == int5);
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(InterpolationMethod.CUBIC, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(InterpolationMethod.CUBIC, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      GrayImage grayImage1 = interpolatedGrayImage0.addbuffer(51, 51, 0);
      assertNotNull(grayImage1);
      assertEquals(0, grayImage1.absSum());
      assertEquals(51, grayImage1.X());
      assertEquals(51, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(InterpolationMethod.CUBIC, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      
      int int7 = rOI1.lx();
      assertEquals((-1792), int7);
      assertEquals((-1792), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1793, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals((-1792), rOI1.lx());
      assertEquals((-1792), rOI1.ux());
      assertFalse(int7 == int1);
      assertFalse(int7 == int6);
      assertTrue(int7 == int5);
      assertFalse(int7 == int4);
      assertFalse(int7 == int3);
      assertFalse(int7 == int0);
      assertFalse(int7 == int2);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      
      grayImage1.multiply(27, 0, 1, rOI0);
      assertEquals(0, grayImage1.absSum());
      assertEquals(51, grayImage1.X());
      assertEquals(51, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(InterpolationMethod.CUBIC, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(rOI0, rOI1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      
      GrayImage grayImage2 = grayImage1.subtract(0);
      assertNotNull(grayImage2);
      assertEquals(0, grayImage1.absSum());
      assertEquals(51, grayImage1.X());
      assertEquals(51, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(51, grayImage2.Y());
      assertEquals(51, grayImage2.X());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(InterpolationMethod.CUBIC, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      
      GrayImage grayImage3 = grayImage0.add((-1792));
      assertNotNull(grayImage3);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage3.X());
      assertEquals(0, grayImage3.Y());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0, grayImage3.absSum());
      assertEquals(0L, grayImage3.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage3);
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage3, grayImage0);
      assertNotSame(grayImage3, grayImage2);
      assertNotSame(grayImage3, grayImage1);
      
      GrayImage grayImage4 = grayImage2.add((Image<Integer>) grayImage0);
      assertNotNull(grayImage4);
      assertEquals(0, grayImage1.absSum());
      assertEquals(51, grayImage1.X());
      assertEquals(51, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(51, grayImage2.Y());
      assertEquals(51, grayImage2.X());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage4.absSum());
      assertEquals(51, grayImage4.X());
      assertEquals(51, grayImage4.Y());
      assertEquals(0, grayImage4.addSum());
      assertEquals(0L, grayImage4.sqrSum());
      assertEquals(InterpolationMethod.CUBIC, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage1.equals((Object)grayImage3));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage2.equals((Object)grayImage3));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage4.equals((Object)grayImage3));
      assertFalse(grayImage4.equals((Object)grayImage0));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage3);
      assertSame(grayImage1, grayImage4);
      assertNotSame(grayImage0, grayImage4);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage3);
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage2, grayImage4);
      assertNotSame(grayImage2, grayImage3);
      assertSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage4, grayImage3);
      assertSame(grayImage4, grayImage1);
      assertSame(grayImage4, grayImage2);
      assertNotSame(grayImage4, grayImage0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      
      // Undeclared exception!
      try { 
        grayImage1.multiply(93, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1792
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int1 == int0);
      
      ROI rOI1 = new ROI(409, 0, 409, 409);
      assertNotNull(rOI1);
      assertEquals(410, rOI1.Y());
      assertEquals(409, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(409, rOI1.lx());
      assertEquals(0, rOI1.uy());
      assertEquals(409, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertNotSame(rOI0, rOI1);
      
      int int3 = rOI0.ly();
      assertEquals(0, int3);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertNotSame(rOI0, rOI1);
      
      int int4 = rOI1.ux();
      assertEquals(409, int4);
      assertEquals(410, rOI1.Y());
      assertEquals(409, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(409, rOI1.lx());
      assertEquals(0, rOI1.uy());
      assertEquals(409, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertNotSame(rOI1, rOI0);
      
      int int5 = rOI0.ly();
      assertEquals(0, int5);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int5 == int3);
      assertFalse(int5 == int1);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertFalse(int5 == int4);
      assertNotSame(rOI0, rOI1);
      
      int int6 = rOI0.ux();
      assertEquals(0, int6);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int6 == int5);
      assertTrue(int6 == int0);
      assertFalse(int6 == int1);
      assertTrue(int6 == int2);
      assertFalse(int6 == int4);
      assertTrue(int6 == int3);
      assertNotSame(rOI0, rOI1);
      
      int int7 = rOI0.ux();
      assertEquals(0, int7);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int7 == int6);
      assertTrue(int7 == int2);
      assertFalse(int7 == int4);
      assertTrue(int7 == int5);
      assertTrue(int7 == int0);
      assertTrue(int7 == int3);
      assertFalse(int7 == int1);
      assertNotSame(rOI0, rOI1);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedGrayImage1.setInterpolationMethod(interpolationMethod0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.CUBIC, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage2 = (InterpolatedGrayImage)interpolatedGrayImage1.divide(0);
      assertNotNull(interpolatedGrayImage2);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.CUBIC, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(InterpolationMethod.CUBIC, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.Y());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0, interpolatedGrayImage2.X());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      
      GrayImage grayImage1 = interpolatedGrayImage1.addbuffer(27, 51, 7229);
      assertNotNull(grayImage1);
      assertEquals(27, grayImage1.X());
      assertEquals(51, grayImage1.Y());
      assertEquals(71959873257L, grayImage1.sqrSum());
      assertEquals(9954333, grayImage1.absSum());
      assertEquals(9954333, grayImage1.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.CUBIC, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      
      int int8 = rOI0.lx();
      assertEquals(0, int8);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int8 == int3);
      assertFalse(int8 == int4);
      assertTrue(int8 == int6);
      assertTrue(int8 == int0);
      assertTrue(int8 == int7);
      assertFalse(int8 == int1);
      assertTrue(int8 == int5);
      assertTrue(int8 == int2);
      assertFalse(rOI0.equals((Object)rOI1));
      assertNotSame(rOI0, rOI1);
      
      // Undeclared exception!
      try { 
        grayImage1.multiply(7229, 7229, 60, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7229
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(int1 == int0);
      
      ROI rOI1 = new ROI(409, 0, 409, 409);
      assertNotNull(rOI1);
      assertEquals(409, rOI1.ly());
      assertEquals(409, rOI1.lx());
      assertEquals(410, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(409, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertNotSame(rOI0, rOI1);
      
      int int3 = rOI0.ly();
      assertEquals(0, int3);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertNotSame(rOI0, rOI1);
      
      int int4 = rOI1.ux();
      assertEquals(409, int4);
      assertEquals(409, rOI1.ly());
      assertEquals(409, rOI1.lx());
      assertEquals(410, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(409, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertNotSame(rOI1, rOI0);
      
      int int5 = rOI0.ly();
      assertEquals(0, int5);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int5 == int1);
      assertTrue(int5 == int3);
      assertFalse(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertNotSame(rOI0, rOI1);
      
      int int6 = rOI0.ux();
      assertEquals(0, int6);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int6 == int4);
      assertTrue(int6 == int3);
      assertFalse(int6 == int1);
      assertTrue(int6 == int5);
      assertTrue(int6 == int0);
      assertTrue(int6 == int2);
      assertNotSame(rOI0, rOI1);
      
      int int7 = rOI0.ux();
      assertEquals(0, int7);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int7 == int5);
      assertTrue(int7 == int2);
      assertFalse(int7 == int1);
      assertTrue(int7 == int6);
      assertFalse(int7 == int4);
      assertTrue(int7 == int0);
      assertTrue(int7 == int3);
      assertNotSame(rOI0, rOI1);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.Y());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedGrayImage1.setInterpolationMethod(interpolationMethod0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.CUBIC, interpolatedGrayImage1.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      
      int int8 = 47;
      ROI rOI2 = new ROI(0, 0, 47, 1627);
      assertNotNull(rOI2);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1628, rOI2.Y());
      assertEquals(1627, rOI2.ly());
      assertEquals(48, rOI2.X());
      assertEquals(47, rOI2.lx());
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      
      int int9 = rOI1.uy();
      assertEquals(0, int9);
      assertEquals(409, rOI1.ly());
      assertEquals(409, rOI1.lx());
      assertEquals(410, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(409, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertFalse(int9 == int1);
      assertFalse(int9 == int8);
      assertTrue(int9 == int7);
      assertTrue(int9 == int3);
      assertTrue(int9 == int0);
      assertFalse(int9 == int4);
      assertTrue(int9 == int5);
      assertTrue(int9 == int2);
      assertTrue(int9 == int6);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(rOI1.equals((Object)rOI2));
      assertNotSame(rOI1, rOI0);
      assertNotSame(rOI1, rOI2);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int5));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int8));
      assertFalse(integer0.equals((Object)int6));
      assertFalse(integer0.equals((Object)int9));
      assertFalse(integer0.equals((Object)int4));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int7));
      assertFalse(integer0.equals((Object)int3));
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.copy(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.subtract(8, 1036, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1036
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      assertNotNull(image0);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(8, image0.Y());
      assertEquals(10, image0.X());
      assertSame(interpolatedGrayImage0, image0);
      
      interpolatedGrayImage0.clip(128, 6);
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(1310720L, interpolatedGrayImage0.sqrSum());
      assertEquals(10240, interpolatedGrayImage0.addSum());
      assertEquals(10240, interpolatedGrayImage0.absSum());
      assertSame(interpolatedGrayImage0, image0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      interpolatedGrayImage0.clip(0, 128);
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(1310720L, interpolatedGrayImage0.sqrSum());
      assertEquals(10240, interpolatedGrayImage0.addSum());
      assertEquals(10240, interpolatedGrayImage0.absSum());
      assertSame(interpolatedGrayImage0, image0);
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertFalse(int1 == int0);
      
      interpolatedGrayImage0.clip(10, 3061, rOI0);
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(1310720L, interpolatedGrayImage0.sqrSum());
      assertEquals(10240, interpolatedGrayImage0.addSum());
      assertEquals(10240, interpolatedGrayImage0.absSum());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertSame(interpolatedGrayImage0, image0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(int1 == int0);
      
      ROI rOI1 = new ROI((-1792), 0, (-1792), (-1792));
      assertNotNull(rOI1);
      assertEquals(1, rOI1.X());
      assertEquals(1793, rOI1.Y());
      assertEquals((-1792), rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals((-1792), rOI1.ux());
      assertEquals((-1792), rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(rOI0, rOI1);
      
      int int3 = rOI0.ly();
      assertEquals(0, int3);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertNotSame(rOI0, rOI1);
      
      int int4 = rOI1.ux();
      assertEquals((-1792), int4);
      assertEquals(1, rOI1.X());
      assertEquals(1793, rOI1.Y());
      assertEquals((-1792), rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals((-1792), rOI1.ux());
      assertEquals((-1792), rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertNotSame(rOI1, rOI0);
      
      int int5 = rOI0.ly();
      assertEquals(0, int5);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertFalse(int5 == int1);
      assertTrue(int5 == int0);
      assertFalse(int5 == int4);
      assertNotSame(rOI0, rOI1);
      
      int int6 = rOI0.ux();
      assertEquals(0, int6);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int6 == int3);
      assertFalse(int6 == int1);
      assertTrue(int6 == int2);
      assertFalse(int6 == int4);
      assertTrue(int6 == int5);
      assertTrue(int6 == int0);
      assertNotSame(rOI0, rOI1);
      
      int int7 = rOI0.ux();
      assertEquals(0, int7);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int7 == int5);
      assertTrue(int7 == int3);
      assertFalse(int7 == int4);
      assertTrue(int7 == int6);
      assertTrue(int7 == int0);
      assertFalse(int7 == int1);
      assertTrue(int7 == int2);
      assertNotSame(rOI0, rOI1);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      String string0 = interpolatedGrayImage0.toString();
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      
      interpolatedGrayImage1.setInterpolationMethod(interpolationMethod0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.CUBIC, interpolatedGrayImage1.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      
      int int8 = rOI0.lx();
      assertEquals(0, int8);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int8 == int2);
      assertFalse(int8 == int4);
      assertFalse(int8 == int1);
      assertTrue(int8 == int7);
      assertTrue(int8 == int5);
      assertTrue(int8 == int0);
      assertTrue(int8 == int6);
      assertTrue(int8 == int3);
      assertFalse(rOI0.equals((Object)rOI1));
      assertNotSame(rOI0, rOI1);
      
      int int9 = rOI0.ux();
      assertEquals(0, int9);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int9 == int6);
      assertTrue(int9 == int0);
      assertTrue(int9 == int7);
      assertTrue(int9 == int3);
      assertTrue(int9 == int5);
      assertTrue(int9 == int8);
      assertTrue(int9 == int2);
      assertFalse(int9 == int4);
      assertFalse(int9 == int1);
      assertFalse(rOI0.equals((Object)rOI1));
      assertNotSame(rOI0, rOI1);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.add(0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1792
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 10);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(10, interpolatedGrayImage0.Y());
      
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      assertNotNull(image0);
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(10, interpolatedGrayImage0.Y());
      assertEquals(10, image0.X());
      assertEquals(10, image0.Y());
      assertSame(interpolatedGrayImage0, image0);
      
      interpolatedGrayImage0.clip(128, 8);
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(1638400L, interpolatedGrayImage0.sqrSum());
      assertEquals(10, interpolatedGrayImage0.Y());
      assertEquals(12800, interpolatedGrayImage0.addSum());
      assertEquals(12800, interpolatedGrayImage0.absSum());
      assertSame(interpolatedGrayImage0, image0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int1 == int0);
      
      rOI0.setROI(35, 10, 35, (-348));
      assertEquals(10, rOI0.ly());
      assertEquals(35, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals((-348), rOI0.uy());
      assertEquals(35, rOI0.lx());
      assertEquals(359, rOI0.Y());
      
      String string0 = interpolatedGrayImage0.toString();
      assertEquals("10:10\n128 128 128 128 128 128 128 128 128 128 \n128 128 128 128 128 128 128 128 128 128 \n128 128 128 128 128 128 128 128 128 128 \n128 128 128 128 128 128 128 128 128 128 \n128 128 128 128 128 128 128 128 128 128 \n128 128 128 128 128 128 128 128 128 128 \n128 128 128 128 128 128 128 128 128 128 \n128 128 128 128 128 128 128 128 128 128 \n128 128 128 128 128 128 128 128 128 128 \n128 128 128 128 128 128 128 128 128 128 \n", string0);
      assertNotNull(string0);
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(1638400L, interpolatedGrayImage0.sqrSum());
      assertEquals(10, interpolatedGrayImage0.Y());
      assertEquals(12800, interpolatedGrayImage0.addSum());
      assertEquals(12800, interpolatedGrayImage0.absSum());
      assertSame(interpolatedGrayImage0, image0);
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(1638400L, interpolatedGrayImage0.sqrSum());
      assertEquals(10, interpolatedGrayImage0.Y());
      assertEquals(12800, interpolatedGrayImage0.addSum());
      assertEquals(12800, interpolatedGrayImage0.absSum());
      assertEquals(12800, interpolatedGrayImage1.absSum());
      assertEquals(10, interpolatedGrayImage1.X());
      assertEquals(1638400L, interpolatedGrayImage1.sqrSum());
      assertEquals(12800, interpolatedGrayImage1.addSum());
      assertEquals(10, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)image0));
      
      InterpolatedGrayImage interpolatedGrayImage2 = (InterpolatedGrayImage)interpolatedGrayImage0.add((Image<Integer>) interpolatedGrayImage1);
      assertNotNull(interpolatedGrayImage2);
      assertEquals(25600, interpolatedGrayImage0.absSum());
      assertEquals(25600, interpolatedGrayImage0.addSum());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(10, interpolatedGrayImage0.Y());
      assertEquals(6553600L, interpolatedGrayImage0.sqrSum());
      assertEquals(12800, interpolatedGrayImage1.absSum());
      assertEquals(10, interpolatedGrayImage1.X());
      assertEquals(1638400L, interpolatedGrayImage1.sqrSum());
      assertEquals(12800, interpolatedGrayImage1.addSum());
      assertEquals(10, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(25600, interpolatedGrayImage2.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(6553600L, interpolatedGrayImage2.sqrSum());
      assertEquals(10, interpolatedGrayImage2.Y());
      assertEquals(10, interpolatedGrayImage2.X());
      assertEquals(25600, interpolatedGrayImage2.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)image0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertSame(interpolatedGrayImage0, image0);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, image0);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage2, image0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(33, 33);
      assertNotNull(grayImage0);
      assertEquals(33, grayImage0.X());
      assertEquals(33, grayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = grayImage0.max();
      assertNull(integer1);
      assertEquals(33, grayImage0.X());
      assertEquals(33, grayImage0.Y());
      
      // Undeclared exception!
      try { 
        grayImage0.clip(33, 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertFalse(int1 == int0);
      
      ROI rOI1 = new ROI((-1792), 0, (-1792), (-1792));
      assertNotNull(rOI1);
      assertEquals((-1792), rOI1.ux());
      assertEquals((-1792), rOI1.uy());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(1793, rOI1.Y());
      assertEquals((-1792), rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      
      rOI0.setROI(0, 0, 2311, 128);
      assertEquals(128, rOI0.ly());
      assertEquals(2312, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(2311, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(129, rOI0.Y());
      assertFalse(rOI0.equals((Object)rOI1));
      assertNotSame(rOI0, rOI1);
      
      ROI rOI2 = new ROI();
      assertNotNull(rOI2);
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      
      int int2 = rOI2.uy();
      assertEquals(0, int2);
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      
      int int3 = rOI2.X();
      assertEquals(1, int3);
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      
      int int4 = rOI2.Y();
      assertEquals(1, int4);
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      
      int int5 = rOI2.X();
      assertEquals(1, int5);
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertTrue(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      
      ROI rOI3 = new ROI(3, 3, 6, (-137));
      assertNotNull(rOI3);
      assertEquals(3, rOI3.ux());
      assertEquals(141, rOI3.Y());
      assertEquals((-137), rOI3.uy());
      assertEquals(4, rOI3.X());
      assertEquals(6, rOI3.lx());
      assertEquals(3, rOI3.ly());
      assertFalse(rOI3.equals((Object)rOI1));
      assertFalse(rOI3.equals((Object)rOI2));
      assertFalse(rOI3.equals((Object)rOI0));
      
      int int6 = rOI3.ux();
      assertEquals(3, int6);
      assertEquals(3, rOI3.ux());
      assertEquals(141, rOI3.Y());
      assertEquals((-137), rOI3.uy());
      assertEquals(4, rOI3.X());
      assertEquals(6, rOI3.lx());
      assertEquals(3, rOI3.ly());
      assertFalse(rOI3.equals((Object)rOI1));
      assertFalse(rOI3.equals((Object)rOI2));
      assertFalse(rOI3.equals((Object)rOI0));
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int4);
      assertFalse(int6 == int2);
      assertFalse(int6 == int0);
      assertFalse(int6 == int1);
      assertNotSame(rOI3, rOI1);
      assertNotSame(rOI3, rOI2);
      assertNotSame(rOI3, rOI0);
      
      int int7 = rOI3.ly();
      assertEquals(3, int7);
      assertEquals(3, rOI3.ux());
      assertEquals(141, rOI3.Y());
      assertEquals((-137), rOI3.uy());
      assertEquals(4, rOI3.X());
      assertEquals(6, rOI3.lx());
      assertEquals(3, rOI3.ly());
      assertFalse(rOI3.equals((Object)rOI1));
      assertFalse(rOI3.equals((Object)rOI2));
      assertFalse(rOI3.equals((Object)rOI0));
      assertFalse(int7 == int5);
      assertFalse(int7 == int1);
      assertFalse(int7 == int0);
      assertFalse(int7 == int3);
      assertTrue(int7 == int6);
      assertFalse(int7 == int2);
      assertFalse(int7 == int4);
      assertNotSame(rOI3, rOI1);
      assertNotSame(rOI3, rOI2);
      assertNotSame(rOI3, rOI0);
      
      int int8 = rOI3.ux();
      assertEquals(3, int8);
      assertEquals(3, rOI3.ux());
      assertEquals(141, rOI3.Y());
      assertEquals((-137), rOI3.uy());
      assertEquals(4, rOI3.X());
      assertEquals(6, rOI3.lx());
      assertEquals(3, rOI3.ly());
      assertFalse(rOI3.equals((Object)rOI1));
      assertFalse(rOI3.equals((Object)rOI2));
      assertFalse(rOI3.equals((Object)rOI0));
      assertFalse(int8 == int1);
      assertTrue(int8 == int7);
      assertTrue(int8 == int6);
      assertFalse(int8 == int0);
      assertFalse(int8 == int4);
      assertFalse(int8 == int2);
      assertFalse(int8 == int5);
      assertFalse(int8 == int3);
      assertNotSame(rOI3, rOI1);
      assertNotSame(rOI3, rOI2);
      assertNotSame(rOI3, rOI0);
      
      int int9 = rOI3.ly();
      assertEquals(3, int9);
      assertEquals(3, rOI3.ux());
      assertEquals(141, rOI3.Y());
      assertEquals((-137), rOI3.uy());
      assertEquals(4, rOI3.X());
      assertEquals(6, rOI3.lx());
      assertEquals(3, rOI3.ly());
      assertFalse(rOI3.equals((Object)rOI1));
      assertFalse(rOI3.equals((Object)rOI2));
      assertFalse(rOI3.equals((Object)rOI0));
      assertFalse(int9 == int4);
      assertFalse(int9 == int2);
      assertFalse(int9 == int0);
      assertFalse(int9 == int3);
      assertTrue(int9 == int6);
      assertTrue(int9 == int8);
      assertTrue(int9 == int7);
      assertFalse(int9 == int1);
      assertFalse(int9 == int5);
      assertNotSame(rOI3, rOI1);
      assertNotSame(rOI3, rOI2);
      assertNotSame(rOI3, rOI0);
      
      int int10 = rOI3.ux();
      assertEquals(3, int10);
      assertEquals(3, rOI3.ux());
      assertEquals(141, rOI3.Y());
      assertEquals((-137), rOI3.uy());
      assertEquals(4, rOI3.X());
      assertEquals(6, rOI3.lx());
      assertEquals(3, rOI3.ly());
      assertFalse(int10 == int2);
      assertTrue(int10 == int6);
      assertTrue(int10 == int7);
      assertFalse(int10 == int4);
      assertFalse(int10 == int0);
      assertTrue(int10 == int8);
      assertFalse(int10 == int3);
      assertFalse(int10 == int5);
      assertTrue(int10 == int9);
      assertFalse(int10 == int1);
      assertFalse(rOI3.equals((Object)rOI1));
      assertFalse(rOI3.equals((Object)rOI2));
      assertFalse(rOI3.equals((Object)rOI0));
      assertNotSame(rOI3, rOI1);
      assertNotSame(rOI3, rOI2);
      assertNotSame(rOI3, rOI0);
      
      int int11 = rOI3.ux();
      assertEquals(3, int11);
      assertEquals(3, rOI3.ux());
      assertEquals(141, rOI3.Y());
      assertEquals((-137), rOI3.uy());
      assertEquals(4, rOI3.X());
      assertEquals(6, rOI3.lx());
      assertEquals(3, rOI3.ly());
      assertFalse(int11 == int3);
      assertFalse(int11 == int0);
      assertTrue(int11 == int9);
      assertFalse(int11 == int2);
      assertTrue(int11 == int6);
      assertFalse(int11 == int5);
      assertTrue(int11 == int10);
      assertFalse(int11 == int4);
      assertFalse(int11 == int1);
      assertTrue(int11 == int8);
      assertTrue(int11 == int7);
      assertFalse(rOI3.equals((Object)rOI1));
      assertFalse(rOI3.equals((Object)rOI2));
      assertFalse(rOI3.equals((Object)rOI0));
      assertNotSame(rOI3, rOI1);
      assertNotSame(rOI3, rOI2);
      assertNotSame(rOI3, rOI0);
      
      int int12 = rOI3.lx();
      assertEquals(6, int12);
      assertEquals(3, rOI3.ux());
      assertEquals(141, rOI3.Y());
      assertEquals((-137), rOI3.uy());
      assertEquals(4, rOI3.X());
      assertEquals(6, rOI3.lx());
      assertEquals(3, rOI3.ly());
      assertFalse(int12 == int1);
      assertFalse(int12 == int6);
      assertFalse(int12 == int7);
      assertFalse(int12 == int8);
      assertFalse(int12 == int10);
      assertFalse(int12 == int11);
      assertFalse(int12 == int3);
      assertFalse(int12 == int0);
      assertFalse(int12 == int2);
      assertFalse(int12 == int5);
      assertFalse(int12 == int9);
      assertFalse(int12 == int4);
      assertFalse(rOI3.equals((Object)rOI1));
      assertFalse(rOI3.equals((Object)rOI2));
      assertFalse(rOI3.equals((Object)rOI0));
      assertNotSame(rOI3, rOI1);
      assertNotSame(rOI3, rOI2);
      assertNotSame(rOI3, rOI0);
      
      int int13 = rOI3.ux();
      assertEquals(3, int13);
      assertEquals(3, rOI3.ux());
      assertEquals(141, rOI3.Y());
      assertEquals((-137), rOI3.uy());
      assertEquals(4, rOI3.X());
      assertEquals(6, rOI3.lx());
      assertEquals(3, rOI3.ly());
      assertTrue(int13 == int9);
      assertFalse(int13 == int12);
      assertFalse(int13 == int0);
      assertTrue(int13 == int8);
      assertTrue(int13 == int7);
      assertFalse(int13 == int1);
      assertFalse(int13 == int5);
      assertTrue(int13 == int6);
      assertTrue(int13 == int11);
      assertFalse(int13 == int3);
      assertFalse(int13 == int4);
      assertTrue(int13 == int10);
      assertFalse(int13 == int2);
      assertFalse(rOI3.equals((Object)rOI1));
      assertFalse(rOI3.equals((Object)rOI2));
      assertFalse(rOI3.equals((Object)rOI0));
      assertNotSame(rOI3, rOI1);
      assertNotSame(rOI3, rOI2);
      assertNotSame(rOI3, rOI0);
      
      int int14 = rOI3.Y();
      assertEquals(141, int14);
      assertEquals(3, rOI3.ux());
      assertEquals(141, rOI3.Y());
      assertEquals((-137), rOI3.uy());
      assertEquals(4, rOI3.X());
      assertEquals(6, rOI3.lx());
      assertEquals(3, rOI3.ly());
      assertFalse(int14 == int4);
      assertFalse(int14 == int12);
      assertFalse(int14 == int7);
      assertFalse(int14 == int5);
      assertFalse(int14 == int11);
      assertFalse(int14 == int3);
      assertFalse(int14 == int9);
      assertFalse(int14 == int1);
      assertFalse(int14 == int10);
      assertFalse(int14 == int8);
      assertFalse(int14 == int0);
      assertFalse(int14 == int13);
      assertFalse(int14 == int6);
      assertFalse(int14 == int2);
      assertFalse(rOI3.equals((Object)rOI1));
      assertFalse(rOI3.equals((Object)rOI2));
      assertFalse(rOI3.equals((Object)rOI0));
      assertNotSame(rOI3, rOI1);
      assertNotSame(rOI3, rOI2);
      assertNotSame(rOI3, rOI0);
      
      // Undeclared exception!
      try { 
        grayImage0.clip(3, (-420), rOI3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -137
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(6, 6);
      assertNotNull(grayImage0);
      assertEquals(6, grayImage0.X());
      assertEquals(6, grayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = new Integer(0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      Integer integer0 = new Integer(6);
      assertEquals(6, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      
      int int3 = rOI0.ux();
      assertEquals(0, int3);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      
      int int4 = rOI0.lx();
      assertEquals(0, int4);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      
      Integer integer1 = new Integer(3);
      assertEquals(3, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int3));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int4));
      assertFalse(integer1.equals((Object)int2));
      
      int int5 = rOI0.ux();
      assertEquals(0, int5);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int5 == int2);
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int1);
      
      int int6 = new Integer(0);
      assertEquals(0, int6);
      assertTrue(int6 == int4);
      assertTrue(int6 == int1);
      assertTrue(int6 == int5);
      assertTrue(int6 == int0);
      assertTrue(int6 == int2);
      assertTrue(int6 == int3);
      
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)int1));
      assertTrue(integer2.equals((Object)int6));
      assertTrue(integer2.equals((Object)int3));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int5));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)int4));
      assertTrue(integer2.equals((Object)int2));
      assertFalse(integer2.equals((Object)integer0));
      
      int int7 = rOI0.ux();
      assertEquals(0, int7);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int7 == int6);
      assertTrue(int7 == int4);
      assertTrue(int7 == int1);
      assertTrue(int7 == int5);
      assertTrue(int7 == int3);
      assertTrue(int7 == int2);
      assertTrue(int7 == int0);
      
      int int8 = rOI0.lx();
      assertEquals(0, int8);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int8 == int0);
      assertTrue(int8 == int1);
      assertTrue(int8 == int4);
      assertTrue(int8 == int6);
      assertTrue(int8 == int7);
      assertTrue(int8 == int5);
      assertTrue(int8 == int3);
      assertTrue(int8 == int2);
      
      int int9 = rOI0.ux();
      assertEquals(0, int9);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int9 == int2);
      assertTrue(int9 == int7);
      assertTrue(int9 == int0);
      assertTrue(int9 == int6);
      assertTrue(int9 == int4);
      assertTrue(int9 == int1);
      assertTrue(int9 == int5);
      assertTrue(int9 == int3);
      assertTrue(int9 == int8);
      
      Integer integer3 = new Integer(6);
      assertEquals(6, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int3));
      assertFalse(integer3.equals((Object)int7));
      assertFalse(integer3.equals((Object)int2));
      assertFalse(integer3.equals((Object)int8));
      assertFalse(integer3.equals((Object)int6));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)int5));
      assertFalse(integer3.equals((Object)int9));
      assertFalse(integer3.equals((Object)int4));
      assertFalse(integer3.equals((Object)integer1));
      
      // Undeclared exception!
      try { 
        grayImage0.median(0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(10, interpolatedGrayImage0.X());
      
      interpolatedGrayImage0.median(45, rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(10, interpolatedGrayImage0.X());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.util.ArrayUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      
      GrayImage grayImage1 = new GrayImage(3, 0, (short[]) null);
      assertNotNull(grayImage1);
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(3, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      GrayImage grayImage2 = null;
      try {
        grayImage2 = new GrayImage(32767, 38, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(8, interpolatedGrayImage0.Y());
      
      interpolatedGrayImage0.median((-976));
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      
      String string0 = interpolatedGrayImage0.toString();
      assertEquals("10:8\n0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 \n", string0);
      assertNotNull(string0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 409;
      int int1 = (-25);
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(409, (-25), (short[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(8, 12);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      assertNotNull(image0);
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, image0.X());
      assertEquals(12, image0.Y());
      assertSame(interpolatedGrayImage0, image0);
      
      interpolatedGrayImage0.clip(37, 8);
      assertEquals(3552, interpolatedGrayImage0.addSum());
      assertEquals(3552, interpolatedGrayImage0.absSum());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(131424L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertSame(interpolatedGrayImage0, image0);
      
      Integer integer0 = new Integer(12);
      assertEquals(12, (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertFalse(int1 == int0);
      
      ROI rOI1 = new ROI((-1792), 0, (-1792), (-1792));
      assertNotNull(rOI1);
      assertEquals((-1792), rOI1.uy());
      assertEquals((-1792), rOI1.ux());
      assertEquals(1793, rOI1.Y());
      assertEquals((-1792), rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(rOI0, rOI1);
      
      int int3 = rOI0.ly();
      assertEquals(0, int3);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertNotSame(rOI0, rOI1);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int3));
      
      int int4 = rOI0.ux();
      assertEquals(0, int4);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int4 == int2);
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertNotSame(rOI0, rOI1);
      
      int int5 = rOI0.ux();
      assertEquals(0, int5);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertFalse(int5 == int1);
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertNotSame(rOI0, rOI1);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedGrayImage0.setInterpolationMethod(interpolationMethod0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.CUBIC, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      
      int int6 = rOI0.lx();
      assertEquals(0, int6);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int6 == int1);
      assertTrue(int6 == int4);
      assertTrue(int6 == int2);
      assertTrue(int6 == int0);
      assertTrue(int6 == int3);
      assertTrue(int6 == int5);
      assertNotSame(rOI0, rOI1);
      
      int int7 = rOI1.ux();
      assertEquals((-1792), int7);
      assertEquals((-1792), rOI1.uy());
      assertEquals((-1792), rOI1.ux());
      assertEquals(1793, rOI1.Y());
      assertEquals((-1792), rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int7 == int5);
      assertFalse(int7 == int6);
      assertFalse(int7 == int3);
      assertFalse(int7 == int1);
      assertFalse(int7 == int2);
      assertFalse(int7 == int0);
      assertFalse(int7 == int4);
      assertNotSame(rOI1, rOI0);
      
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int6));
      assertFalse(integer1.equals((Object)int3));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int7));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int4));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int5));
      
      int int8 = rOI1.uy();
      assertEquals((-1792), int8);
      assertEquals((-1792), rOI1.uy());
      assertEquals((-1792), rOI1.ux());
      assertEquals(1793, rOI1.Y());
      assertEquals((-1792), rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertFalse(int8 == int0);
      assertFalse(int8 == int3);
      assertFalse(int8 == int1);
      assertTrue(int8 == int7);
      assertFalse(int8 == int2);
      assertFalse(int8 == int4);
      assertFalse(int8 == int5);
      assertFalse(int8 == int6);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      
      int int9 = rOI0.X();
      assertEquals(1, int9);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int9 == int1);
      assertFalse(int9 == int6);
      assertFalse(int9 == int7);
      assertFalse(int9 == int2);
      assertFalse(int9 == int8);
      assertFalse(int9 == int0);
      assertFalse(int9 == int4);
      assertFalse(int9 == int3);
      assertFalse(int9 == int5);
      assertFalse(rOI0.equals((Object)rOI1));
      assertNotSame(rOI0, rOI1);
      
      int int10 = interpolatedGrayImage0.absSum();
      assertEquals(0, int10);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.CUBIC, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertTrue(int10 == int2);
      assertFalse(int10 == int1);
      assertTrue(int10 == int0);
      assertTrue(int10 == int4);
      assertTrue(int10 == int5);
      assertTrue(int10 == int3);
      assertFalse(int10 == int7);
      assertFalse(int10 == int9);
      assertFalse(int10 == int8);
      assertTrue(int10 == int6);
      
      // Undeclared exception!
      try { 
        grayImage0.multiply(0, (-521), 0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2313
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      assertNotNull(image0);
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(8, image0.Y());
      assertEquals(10, image0.X());
      assertSame(interpolatedGrayImage0, image0);
      
      ROI rOI0 = new ROI(53, 4173, 22, 22);
      assertNotNull(rOI0);
      assertEquals(4152, rOI0.Y());
      assertEquals(53, rOI0.lx());
      assertEquals(32, rOI0.X());
      assertEquals(4173, rOI0.ly());
      assertEquals(22, rOI0.uy());
      assertEquals(22, rOI0.ux());
      
      int int0 = rOI0.ly();
      assertEquals(4173, int0);
      assertEquals(4152, rOI0.Y());
      assertEquals(53, rOI0.lx());
      assertEquals(32, rOI0.X());
      assertEquals(4173, rOI0.ly());
      assertEquals(22, rOI0.uy());
      assertEquals(22, rOI0.ux());
      
      Integer integer0 = new Integer(8);
      assertEquals(8, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      int int1 = rOI0.ux();
      assertEquals(22, int1);
      assertEquals(4152, rOI0.Y());
      assertEquals(53, rOI0.lx());
      assertEquals(32, rOI0.X());
      assertEquals(4173, rOI0.ly());
      assertEquals(22, rOI0.uy());
      assertEquals(22, rOI0.ux());
      assertFalse(int1 == int0);
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(10, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertFalse(interpolatedGrayImage1.equals((Object)image0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      Integer integer1 = new Integer(1901);
      assertEquals(1901, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      
      Integer integer2 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int1));
      
      GrayImage grayImage0 = new GrayImage(interpolatedGrayImage0);
      assertNotNull(grayImage0);
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(8, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(10, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      
      Integer integer3 = interpolatedGrayImage1.min();
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(10, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)image0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)int0));
      assertSame(interpolatedGrayImage0, image0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, image0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int2 = rOI1.uy();
      assertEquals(0, int2);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(rOI1, rOI0);
      
      int int3 = rOI1.X();
      assertEquals(1, int3);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertNotSame(rOI1, rOI0);
      
      int int4 = rOI1.Y();
      assertEquals(1, int4);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertNotSame(rOI1, rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide((Image<Integer>) interpolatedGrayImage1, rOI1, rOI1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(6, 6);
      assertNotNull(grayImage0);
      assertEquals(6, grayImage0.Y());
      assertEquals(6, grayImage0.X());
      
      short[][] shortArray0 = new short[1][2];
      short[] shortArray1 = new short[3];
      shortArray1[1] = (short)1;
      shortArray0[0] = shortArray1;
      GrayImage grayImage1 = null;
      try {
        grayImage1 = new GrayImage(shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(33, 33);
      assertNotNull(grayImage0);
      assertEquals(33, grayImage0.Y());
      assertEquals(33, grayImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      Integer integer0 = new Integer(33);
      assertEquals(33, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int1 == int0);
      
      GrayImage grayImage1 = null;
      try {
        grayImage1 = new GrayImage((short[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(8, 12);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(12, interpolatedGrayImage0.Y());
      
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      assertNotNull(image0);
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(12, image0.Y());
      assertEquals(8, image0.X());
      assertSame(interpolatedGrayImage0, image0);
      
      interpolatedGrayImage0.clip(37, 8);
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(131424L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(3552, interpolatedGrayImage0.addSum());
      assertEquals(3552, interpolatedGrayImage0.absSum());
      assertSame(interpolatedGrayImage0, image0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      Integer integer0 = new Integer(12);
      assertEquals(12, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      interpolatedGrayImage0.clip((-187), 6, rOI0);
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(3521, interpolatedGrayImage0.addSum());
      assertEquals(130091L, interpolatedGrayImage0.sqrSum());
      assertEquals(3521, interpolatedGrayImage0.absSum());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertSame(interpolatedGrayImage0, image0);
      
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.multiply(image0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(178046591L, interpolatedGrayImage0.sqrSum());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(130091, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(130091, interpolatedGrayImage0.absSum());
      assertEquals(12, image0.Y());
      assertEquals(8, image0.X());
      assertEquals(130091, interpolatedGrayImage1.absSum());
      assertEquals(12, interpolatedGrayImage1.Y());
      assertEquals(130091, interpolatedGrayImage1.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage1.X());
      assertEquals(178046591L, interpolatedGrayImage1.sqrSum());
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, image0);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage1, image0);
      
      int int1 = interpolatedGrayImage1.min(rOI0);
      assertEquals(36, int1);
      assertEquals(178046591L, interpolatedGrayImage0.sqrSum());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(130091, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(130091, interpolatedGrayImage0.absSum());
      assertEquals(12, image0.Y());
      assertEquals(8, image0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(130091, interpolatedGrayImage1.absSum());
      assertEquals(12, interpolatedGrayImage1.Y());
      assertEquals(130091, interpolatedGrayImage1.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage1.X());
      assertEquals(178046591L, interpolatedGrayImage1.sqrSum());
      assertFalse(int1 == int0);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, image0);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage1, image0);
      
      GrayImage grayImage0 = interpolatedGrayImage1.addbuffer(0, 8, 252);
      assertNotNull(grayImage0);
      assertEquals(178046591L, interpolatedGrayImage0.sqrSum());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(130091, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(130091, interpolatedGrayImage0.absSum());
      assertEquals(12, image0.Y());
      assertEquals(8, image0.X());
      assertEquals(130091, interpolatedGrayImage1.absSum());
      assertEquals(12, interpolatedGrayImage1.Y());
      assertEquals(130091, interpolatedGrayImage1.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage1.X());
      assertEquals(178046591L, interpolatedGrayImage1.sqrSum());
      assertEquals(8, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, image0);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage1, image0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(8, 12);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      assertNotNull(image0);
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(12, image0.Y());
      assertEquals(8, image0.X());
      assertSame(interpolatedGrayImage0, image0);
      
      Image<Integer> image1 = image0.clear();
      assertNotNull(image1);
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(12, image0.Y());
      assertEquals(8, image0.X());
      assertEquals(12, image1.Y());
      assertEquals(8, image1.X());
      assertSame(interpolatedGrayImage0, image0);
      assertSame(interpolatedGrayImage0, image1);
      assertSame(image0, image1);
      assertSame(image1, image0);
      
      interpolatedGrayImage0.clip(37, 8);
      assertEquals(3552, interpolatedGrayImage0.addSum());
      assertEquals(3552, interpolatedGrayImage0.absSum());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(131424L, interpolatedGrayImage0.sqrSum());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertSame(interpolatedGrayImage0, image0);
      assertSame(interpolatedGrayImage0, image1);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      interpolatedGrayImage0.clip(8, 8, rOI0);
      assertEquals(130119L, interpolatedGrayImage0.sqrSum());
      assertEquals(3523, interpolatedGrayImage0.addSum());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(3523, interpolatedGrayImage0.absSum());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertSame(interpolatedGrayImage0, image0);
      assertSame(interpolatedGrayImage0, image1);
      
      interpolatedGrayImage0.clip(233, 9, rOI0);
      assertEquals(3748, interpolatedGrayImage0.addSum());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(3748, interpolatedGrayImage0.absSum());
      assertEquals(184344L, interpolatedGrayImage0.sqrSum());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertSame(interpolatedGrayImage0, image0);
      assertSame(interpolatedGrayImage0, image1);
      
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.subtract(image0, rOI0, rOI0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(130055L, interpolatedGrayImage0.sqrSum());
      assertEquals(3515, interpolatedGrayImage0.absSum());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(3515, interpolatedGrayImage0.addSum());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(12, image0.Y());
      assertEquals(8, image0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(3515, interpolatedGrayImage1.absSum());
      assertEquals(130055L, interpolatedGrayImage1.sqrSum());
      assertEquals(8, interpolatedGrayImage1.X());
      assertEquals(12, interpolatedGrayImage1.Y());
      assertEquals(3515, interpolatedGrayImage1.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, image0);
      assertSame(interpolatedGrayImage0, image1);
      assertSame(image0, image1);
      assertSame(interpolatedGrayImage1, image0);
      assertSame(interpolatedGrayImage1, image1);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage2 = (InterpolatedGrayImage)interpolatedGrayImage1.diff(image0);
      assertNotNull(interpolatedGrayImage2);
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(12, image0.Y());
      assertEquals(8, image0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(8, interpolatedGrayImage1.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(12, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(12, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage2.X());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, image0);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage0, image1);
      assertSame(image0, image1);
      assertSame(interpolatedGrayImage1, image0);
      assertSame(interpolatedGrayImage1, image1);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage2, image1);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage2, image0);
      
      InterpolatedGrayImage interpolatedGrayImage3 = (InterpolatedGrayImage)interpolatedGrayImage1.multiply(11, rOI0);
      assertNotNull(interpolatedGrayImage3);
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(12, image0.Y());
      assertEquals(8, image0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(8, interpolatedGrayImage1.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(12, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage3.addSum());
      assertEquals(12, interpolatedGrayImage3.Y());
      assertEquals(0L, interpolatedGrayImage3.sqrSum());
      assertEquals(8, interpolatedGrayImage3.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage3.absSum());
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, image0);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage0, image1);
      assertSame(image0, image1);
      assertSame(interpolatedGrayImage1, image0);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage1, image1);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage3, image1);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage3, image0);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage3.add((-727), (-842), 37, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -842
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.Y());
      
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      assertNotNull(image0);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(10, image0.X());
      assertEquals(8, image0.Y());
      assertSame(interpolatedGrayImage0, image0);
      
      interpolatedGrayImage0.clip(128, 6);
      assertEquals(1310720L, interpolatedGrayImage0.sqrSum());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(10240, interpolatedGrayImage0.absSum());
      assertEquals(10240, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertSame(interpolatedGrayImage0, image0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      GrayImage grayImage0 = new GrayImage(interpolatedGrayImage0);
      assertNotNull(grayImage0);
      assertEquals(1310720L, interpolatedGrayImage0.sqrSum());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(10240, interpolatedGrayImage0.absSum());
      assertEquals(10240, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(10240, grayImage0.addSum());
      assertEquals(8, grayImage0.Y());
      assertEquals(10240, grayImage0.absSum());
      assertEquals(1310720L, grayImage0.sqrSum());
      assertEquals(10, grayImage0.X());
      
      GrayImage grayImage1 = grayImage0.addbuffer(3, 7, (-14));
      assertNotNull(grayImage1);
      assertEquals(1310720L, interpolatedGrayImage0.sqrSum());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(10240, interpolatedGrayImage0.absSum());
      assertEquals(10240, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(10240, grayImage0.addSum());
      assertEquals(8, grayImage0.Y());
      assertEquals(10240, grayImage0.absSum());
      assertEquals(1310720L, grayImage0.sqrSum());
      assertEquals(10, grayImage0.X());
      assertEquals(344064L, grayImage1.sqrSum());
      assertEquals(2688, grayImage1.addSum());
      assertEquals(7, grayImage1.Y());
      assertEquals(3, grayImage1.X());
      assertEquals(2688, grayImage1.absSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertSame(interpolatedGrayImage0, image0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      
      GrayImage grayImage2 = grayImage0.divide(11);
      assertNotNull(grayImage2);
      assertEquals(1310720L, interpolatedGrayImage0.sqrSum());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(10240, interpolatedGrayImage0.absSum());
      assertEquals(10240, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(880, grayImage0.absSum());
      assertEquals(9680L, grayImage0.sqrSum());
      assertEquals(880, grayImage0.addSum());
      assertEquals(8, grayImage0.Y());
      assertEquals(10, grayImage0.X());
      assertEquals(10, grayImage2.X());
      assertEquals(8, grayImage2.Y());
      assertEquals(880, grayImage2.absSum());
      assertEquals(9680L, grayImage2.sqrSum());
      assertEquals(880, grayImage2.addSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertSame(interpolatedGrayImage0, image0);
      assertSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      
      GrayImage grayImage3 = grayImage1.multiply(4);
      assertNotNull(grayImage3);
      assertEquals(1310720L, interpolatedGrayImage0.sqrSum());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(10240, interpolatedGrayImage0.absSum());
      assertEquals(10240, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(880, grayImage0.absSum());
      assertEquals(9680L, grayImage0.sqrSum());
      assertEquals(880, grayImage0.addSum());
      assertEquals(8, grayImage0.Y());
      assertEquals(10, grayImage0.X());
      assertEquals(10752, grayImage1.addSum());
      assertEquals(5505024L, grayImage1.sqrSum());
      assertEquals(10752, grayImage1.absSum());
      assertEquals(7, grayImage1.Y());
      assertEquals(3, grayImage1.X());
      assertEquals(5505024L, grayImage3.sqrSum());
      assertEquals(7, grayImage3.Y());
      assertEquals(3, grayImage3.X());
      assertEquals(10752, grayImage3.addSum());
      assertEquals(10752, grayImage3.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertSame(interpolatedGrayImage0, image0);
      assertNotSame(grayImage0, grayImage3);
      assertSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertSame(grayImage1, grayImage3);
      assertSame(grayImage3, grayImage1);
      assertNotSame(grayImage3, grayImage0);
      assertNotSame(grayImage3, grayImage2);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 10);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(10, interpolatedGrayImage0.Y());
      assertEquals(10, interpolatedGrayImage0.X());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(17, 4);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(4, interpolatedGrayImage1.Y());
      assertEquals(17, interpolatedGrayImage1.X());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      Image<Integer> image0 = interpolatedGrayImage1.clear();
      assertNotNull(image0);
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(4, interpolatedGrayImage1.Y());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(17, interpolatedGrayImage1.X());
      assertEquals(4, image0.Y());
      assertEquals(17, image0.X());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage1, image0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertFalse(int1 == int0);
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int2 = rOI1.uy();
      assertEquals(0, int2);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(rOI1, rOI0);
      
      int int3 = rOI1.X();
      assertEquals(1, int3);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertNotSame(rOI1, rOI0);
      
      int int4 = rOI1.Y();
      assertEquals(1, int4);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertNotSame(rOI1, rOI0);
      
      interpolatedGrayImage1.clip(10, 128, rOI1);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(10, interpolatedGrayImage1.addSum());
      assertEquals(4, interpolatedGrayImage1.Y());
      assertEquals(17, interpolatedGrayImage1.X());
      assertEquals(100L, interpolatedGrayImage1.sqrSum());
      assertEquals(10, interpolatedGrayImage1.absSum());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage1, image0);
      assertNotSame(rOI1, rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.multiply((Image<Integer>) interpolatedGrayImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(8, 12);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(12, interpolatedGrayImage0.Y());
      
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      assertNotNull(image0);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(12, image0.Y());
      assertEquals(8, image0.X());
      assertSame(interpolatedGrayImage0, image0);
      
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.multiply(3952);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(12, interpolatedGrayImage1.Y());
      assertEquals(8, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertSame(interpolatedGrayImage0, image0);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, image0);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      
      String string0 = interpolatedGrayImage1.toString();
      assertEquals("8:12\n0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 \n", string0);
      assertNotNull(string0);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(12, interpolatedGrayImage1.Y());
      assertEquals(8, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertSame(interpolatedGrayImage0, image0);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, image0);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage2);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(8, interpolatedGrayImage2.X());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(12, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)image0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      
      int int0 = interpolatedGrayImage2.absSum();
      assertEquals(0, int0);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(8, interpolatedGrayImage2.X());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(12, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)image0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertSame(interpolatedGrayImage0, image0);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, image0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage3 = (InterpolatedGrayImage)interpolatedGrayImage0.subtract(image0, rOI0, rOI0);
      assertNotNull(interpolatedGrayImage3);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(12, image0.Y());
      assertEquals(8, image0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0L, interpolatedGrayImage3.sqrSum());
      assertEquals(0, interpolatedGrayImage3.addSum());
      assertEquals(12, interpolatedGrayImage3.Y());
      assertEquals(0, interpolatedGrayImage3.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage3.X());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertSame(interpolatedGrayImage0, image0);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage3, image0);
      
      interpolatedGrayImage2.add(0, 8, 28);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(784L, interpolatedGrayImage2.sqrSum());
      assertEquals(28, interpolatedGrayImage2.absSum());
      assertEquals(8, interpolatedGrayImage2.X());
      assertEquals(28, interpolatedGrayImage2.addSum());
      assertEquals(12, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)image0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertSame(interpolatedGrayImage0, image0);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, image0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      
      ROI rOI1 = new ROI(3, 3, 6, (-137));
      assertNotNull(rOI1);
      assertEquals((-137), rOI1.uy());
      assertEquals(4, rOI1.X());
      assertEquals(3, rOI1.ly());
      assertEquals(6, rOI1.lx());
      assertEquals(3, rOI1.ux());
      assertEquals(141, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int1 = rOI1.ux();
      assertEquals(3, int1);
      assertEquals((-137), rOI1.uy());
      assertEquals(4, rOI1.X());
      assertEquals(3, rOI1.ly());
      assertEquals(6, rOI1.lx());
      assertEquals(3, rOI1.ux());
      assertEquals(141, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int1 == int0);
      assertNotSame(rOI1, rOI0);
      
      int int2 = rOI1.ly();
      assertEquals(3, int2);
      assertEquals((-137), rOI1.uy());
      assertEquals(4, rOI1.X());
      assertEquals(3, rOI1.ly());
      assertEquals(6, rOI1.lx());
      assertEquals(3, rOI1.ux());
      assertEquals(141, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(rOI1, rOI0);
      
      int int3 = rOI1.ux();
      assertEquals(3, int3);
      assertEquals((-137), rOI1.uy());
      assertEquals(4, rOI1.X());
      assertEquals(3, rOI1.ly());
      assertEquals(6, rOI1.lx());
      assertEquals(3, rOI1.ux());
      assertEquals(141, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertNotSame(rOI1, rOI0);
      
      int int4 = rOI1.ly();
      assertEquals(3, int4);
      assertEquals((-137), rOI1.uy());
      assertEquals(4, rOI1.X());
      assertEquals(3, rOI1.ly());
      assertEquals(6, rOI1.lx());
      assertEquals(3, rOI1.ux());
      assertEquals(141, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertNotSame(rOI1, rOI0);
      
      int int5 = rOI1.ux();
      assertEquals(3, int5);
      assertEquals((-137), rOI1.uy());
      assertEquals(4, rOI1.X());
      assertEquals(3, rOI1.ly());
      assertEquals(6, rOI1.lx());
      assertEquals(3, rOI1.ux());
      assertEquals(141, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertFalse(int5 == int0);
      assertTrue(int5 == int1);
      assertNotSame(rOI1, rOI0);
      
      int int6 = rOI1.ux();
      assertEquals(3, int6);
      assertEquals((-137), rOI1.uy());
      assertEquals(4, rOI1.X());
      assertEquals(3, rOI1.ly());
      assertEquals(6, rOI1.lx());
      assertEquals(3, rOI1.ux());
      assertEquals(141, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int2);
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      assertFalse(int6 == int0);
      assertTrue(int6 == int5);
      assertTrue(int6 == int4);
      assertNotSame(rOI1, rOI0);
      
      int int7 = rOI1.lx();
      assertEquals(6, int7);
      assertEquals((-137), rOI1.uy());
      assertEquals(4, rOI1.X());
      assertEquals(3, rOI1.ly());
      assertEquals(6, rOI1.lx());
      assertEquals(3, rOI1.ux());
      assertEquals(141, rOI1.Y());
      assertFalse(int7 == int0);
      assertFalse(int7 == int5);
      assertFalse(int7 == int6);
      assertFalse(int7 == int3);
      assertFalse(int7 == int1);
      assertFalse(int7 == int2);
      assertFalse(int7 == int4);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      
      int int8 = rOI1.ux();
      assertEquals(3, int8);
      assertEquals((-137), rOI1.uy());
      assertEquals(4, rOI1.X());
      assertEquals(3, rOI1.ly());
      assertEquals(6, rOI1.lx());
      assertEquals(3, rOI1.ux());
      assertEquals(141, rOI1.Y());
      assertTrue(int8 == int1);
      assertTrue(int8 == int2);
      assertFalse(int8 == int7);
      assertTrue(int8 == int6);
      assertFalse(int8 == int0);
      assertTrue(int8 == int3);
      assertTrue(int8 == int5);
      assertTrue(int8 == int4);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      
      int int9 = rOI1.X();
      assertEquals(4, int9);
      assertEquals((-137), rOI1.uy());
      assertEquals(4, rOI1.X());
      assertEquals(3, rOI1.ly());
      assertEquals(6, rOI1.lx());
      assertEquals(3, rOI1.ux());
      assertEquals(141, rOI1.Y());
      assertFalse(int9 == int8);
      assertFalse(int9 == int7);
      assertFalse(int9 == int6);
      assertFalse(int9 == int2);
      assertFalse(int9 == int4);
      assertFalse(int9 == int3);
      assertFalse(int9 == int5);
      assertFalse(int9 == int0);
      assertFalse(int9 == int1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      
      interpolatedGrayImage3.clip((-831), 3, rOI0);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(12, image0.Y());
      assertEquals(8, image0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0L, interpolatedGrayImage3.sqrSum());
      assertEquals(0, interpolatedGrayImage3.addSum());
      assertEquals(12, interpolatedGrayImage3.Y());
      assertEquals(0, interpolatedGrayImage3.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage3.X());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertSame(interpolatedGrayImage0, image0);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(rOI0, rOI1);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage3, image0);
      
      InterpolatedGrayImage interpolatedGrayImage4 = (InterpolatedGrayImage)interpolatedGrayImage2.multiply((Image<Integer>) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage4);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage4.sqrSum());
      assertEquals(0, interpolatedGrayImage4.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage4.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage4.X());
      assertEquals(12, interpolatedGrayImage4.Y());
      assertEquals(0, interpolatedGrayImage4.addSum());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(8, interpolatedGrayImage2.X());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(12, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage4.equals((Object)image0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)image0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertSame(interpolatedGrayImage0, image0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage4, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage4, image0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, image0);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      
      int int10 = interpolatedGrayImage0.min(rOI0);
      assertEquals(0, int10);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int10 == int6);
      assertFalse(int10 == int3);
      assertFalse(int10 == int9);
      assertTrue(int10 == int0);
      assertFalse(int10 == int2);
      assertFalse(int10 == int8);
      assertFalse(int10 == int7);
      assertFalse(int10 == int1);
      assertFalse(int10 == int5);
      assertFalse(int10 == int4);
      assertSame(interpolatedGrayImage0, image0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(rOI0, rOI1);
      
      InterpolatedGrayImage interpolatedGrayImage5 = (InterpolatedGrayImage)interpolatedGrayImage3.clear();
      assertNotNull(interpolatedGrayImage5);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(12, image0.Y());
      assertEquals(8, image0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0L, interpolatedGrayImage5.sqrSum());
      assertEquals(0, interpolatedGrayImage5.addSum());
      assertEquals(12, interpolatedGrayImage5.Y());
      assertEquals(0, interpolatedGrayImage5.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage5.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage5.X());
      assertEquals(0L, interpolatedGrayImage3.sqrSum());
      assertEquals(0, interpolatedGrayImage3.addSum());
      assertEquals(12, interpolatedGrayImage3.Y());
      assertEquals(0, interpolatedGrayImage3.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage3.X());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage4));
      assertSame(interpolatedGrayImage0, image0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage5);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(rOI0, rOI1);
      assertSame(interpolatedGrayImage5, image0);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage5, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage5, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage5, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage4);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage5);
      assertSame(interpolatedGrayImage3, image0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertFalse(int1 == int0);
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int2 = rOI1.ux();
      assertEquals(0, int2);
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertNotSame(rOI1, rOI0);
      
      int int3 = rOI1.ly();
      assertEquals(0, int3);
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertNotSame(rOI1, rOI0);
      
      int int4 = rOI1.ux();
      assertEquals(0, int4);
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertFalse(int4 == int1);
      assertNotSame(rOI1, rOI0);
      
      int int5 = rOI0.ly();
      assertEquals(0, int5);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertFalse(int5 == int1);
      assertTrue(int5 == int2);
      assertNotSame(rOI0, rOI1);
      
      int int6 = rOI1.ux();
      assertEquals(0, int6);
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int5);
      assertTrue(int6 == int0);
      assertTrue(int6 == int4);
      assertTrue(int6 == int3);
      assertTrue(int6 == int2);
      assertFalse(int6 == int1);
      assertNotSame(rOI1, rOI0);
      
      int int7 = rOI0.ux();
      assertEquals(0, int7);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int7 == int1);
      assertTrue(int7 == int4);
      assertTrue(int7 == int6);
      assertTrue(int7 == int0);
      assertTrue(int7 == int2);
      assertTrue(int7 == int3);
      assertTrue(int7 == int5);
      assertNotSame(rOI0, rOI1);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 65);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(65, interpolatedGrayImage0.Y());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(65, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(65, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(4, 4);
      assertNotNull(grayImage0);
      assertEquals(4, grayImage0.X());
      assertEquals(4, grayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertFalse(int1 == int0);
      
      rOI0.setROI(1, 891, 6, (-857));
      assertEquals(6, rOI0.lx());
      assertEquals(6, rOI0.X());
      assertEquals(1749, rOI0.Y());
      assertEquals((-857), rOI0.uy());
      assertEquals(891, rOI0.ly());
      assertEquals(1, rOI0.ux());
      
      int int2 = rOI0.Y();
      assertEquals(1749, int2);
      assertEquals(6, rOI0.lx());
      assertEquals(6, rOI0.X());
      assertEquals(1749, rOI0.Y());
      assertEquals((-857), rOI0.uy());
      assertEquals(891, rOI0.ly());
      assertEquals(1, rOI0.ux());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      // Undeclared exception!
      try { 
        grayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -857
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      assertNotNull(image0);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, image0.Y());
      assertEquals(10, image0.X());
      assertSame(interpolatedGrayImage0, image0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      interpolatedGrayImage0.clip((-1194), 3, rOI0);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertSame(interpolatedGrayImage0, image0);
      
      interpolatedGrayImage0.clip(0, 26, rOI0);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertSame(interpolatedGrayImage0, image0);
      
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.subtract(image0, rOI0, rOI0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, image0.Y());
      assertEquals(10, image0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(10, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, image0);
      assertSame(interpolatedGrayImage1, image0);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(8, 12);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(8, interpolatedGrayImage0.X());
      
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      assertNotNull(image0);
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(8, image0.X());
      assertEquals(12, image0.Y());
      assertSame(interpolatedGrayImage0, image0);
      
      Image<Integer> image1 = image0.clear();
      assertNotNull(image1);
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(8, image0.X());
      assertEquals(12, image0.Y());
      assertEquals(8, image1.X());
      assertEquals(12, image1.Y());
      assertSame(interpolatedGrayImage0, image1);
      assertSame(interpolatedGrayImage0, image0);
      assertSame(image0, image1);
      assertSame(image1, image0);
      
      interpolatedGrayImage0.clip(37, 8);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(3552, interpolatedGrayImage0.absSum());
      assertEquals(3552, interpolatedGrayImage0.addSum());
      assertEquals(131424L, interpolatedGrayImage0.sqrSum());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(8, interpolatedGrayImage0.X());
      assertSame(interpolatedGrayImage0, image1);
      assertSame(interpolatedGrayImage0, image0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide(8, 0, (-4806));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      
      int int0 = new Integer(0);
      assertEquals(0, int0);
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertFalse(int1 == int0);
      
      ROI rOI1 = new ROI((-1792), 0, (-1792), (-1792));
      assertNotNull(rOI1);
      assertEquals((-1792), rOI1.ux());
      assertEquals((-1792), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1793, rOI1.Y());
      assertEquals((-1792), rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int2 = rOI0.ly();
      assertEquals(0, int2);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertNotSame(rOI0, rOI1);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)int0));
      
      int int3 = rOI0.ux();
      assertEquals(0, int3);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertNotSame(rOI0, rOI1);
      
      int int4 = rOI0.ux();
      assertEquals(0, int4);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      assertNotSame(rOI0, rOI1);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      int int5 = rOI1.ux();
      assertEquals((-1792), int5);
      assertEquals((-1792), rOI1.ux());
      assertEquals((-1792), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1793, rOI1.Y());
      assertEquals((-1792), rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertNotSame(rOI1, rOI0);
      
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int5));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int3));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int4));
      
      GrayImage grayImage1 = new GrayImage(interpolatedGrayImage0);
      assertNotNull(grayImage1);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      Integer integer2 = interpolatedGrayImage0.min();
      assertNull(integer2);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertNotSame(grayImage0, grayImage1);
      
      // Undeclared exception!
      try { 
        grayImage0.divide((Image<Integer>) grayImage1, rOI1, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(6, 0);
      assertNotNull(grayImage0);
      assertEquals(6, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      
      ROI rOI0 = new ROI(3, 3, 6, (-137));
      assertNotNull(rOI0);
      assertEquals(3, rOI0.ly());
      assertEquals((-137), rOI0.uy());
      assertEquals(4, rOI0.X());
      assertEquals(3, rOI0.ux());
      assertEquals(141, rOI0.Y());
      assertEquals(6, rOI0.lx());
      
      int int0 = rOI0.ux();
      assertEquals(3, int0);
      assertEquals(3, rOI0.ly());
      assertEquals((-137), rOI0.uy());
      assertEquals(4, rOI0.X());
      assertEquals(3, rOI0.ux());
      assertEquals(141, rOI0.Y());
      assertEquals(6, rOI0.lx());
      
      int int1 = rOI0.ly();
      assertEquals(3, int1);
      assertEquals(3, rOI0.ly());
      assertEquals((-137), rOI0.uy());
      assertEquals(4, rOI0.X());
      assertEquals(3, rOI0.ux());
      assertEquals(141, rOI0.Y());
      assertEquals(6, rOI0.lx());
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(3, int2);
      assertEquals(3, rOI0.ly());
      assertEquals((-137), rOI0.uy());
      assertEquals(4, rOI0.X());
      assertEquals(3, rOI0.ux());
      assertEquals(141, rOI0.Y());
      assertEquals(6, rOI0.lx());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.ly();
      assertEquals(3, int3);
      assertEquals(3, rOI0.ly());
      assertEquals((-137), rOI0.uy());
      assertEquals(4, rOI0.X());
      assertEquals(3, rOI0.ux());
      assertEquals(141, rOI0.Y());
      assertEquals(6, rOI0.lx());
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      
      int int4 = rOI0.ux();
      assertEquals(3, int4);
      assertEquals(3, rOI0.ly());
      assertEquals((-137), rOI0.uy());
      assertEquals(4, rOI0.X());
      assertEquals(3, rOI0.ux());
      assertEquals(141, rOI0.Y());
      assertEquals(6, rOI0.lx());
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      
      int int5 = rOI0.ux();
      assertEquals(3, int5);
      assertEquals(3, rOI0.ly());
      assertEquals((-137), rOI0.uy());
      assertEquals(4, rOI0.X());
      assertEquals(3, rOI0.ux());
      assertEquals(141, rOI0.Y());
      assertEquals(6, rOI0.lx());
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      
      int int6 = rOI0.lx();
      assertEquals(6, int6);
      assertEquals(3, rOI0.ly());
      assertEquals((-137), rOI0.uy());
      assertEquals(4, rOI0.X());
      assertEquals(3, rOI0.ux());
      assertEquals(141, rOI0.Y());
      assertEquals(6, rOI0.lx());
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertFalse(int6 == int1);
      assertFalse(int6 == int3);
      assertFalse(int6 == int5);
      assertFalse(int6 == int0);
      
      rOI0.setROI(46, 32767, 4973, (-542));
      assertEquals(4973, rOI0.lx());
      assertEquals(32767, rOI0.ly());
      assertEquals(33310, rOI0.Y());
      assertEquals((-542), rOI0.uy());
      assertEquals(4928, rOI0.X());
      assertEquals(46, rOI0.ux());
      
      Integer integer0 = new Integer(3);
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int5));
      assertFalse(integer0.equals((Object)int6));
      assertTrue(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)int4));
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int3));
      assertTrue(integer0.equals((Object)int0));
      
      int int7 = rOI0.ux();
      assertEquals(46, int7);
      assertEquals(4973, rOI0.lx());
      assertEquals(32767, rOI0.ly());
      assertEquals(33310, rOI0.Y());
      assertEquals((-542), rOI0.uy());
      assertEquals(4928, rOI0.X());
      assertEquals(46, rOI0.ux());
      assertFalse(int7 == int5);
      assertFalse(int7 == int1);
      assertFalse(int7 == int3);
      assertFalse(int7 == int0);
      assertFalse(int7 == int6);
      assertFalse(int7 == int4);
      assertFalse(int7 == int2);
      
      int int8 = rOI0.ly();
      assertEquals(32767, int8);
      assertEquals(4973, rOI0.lx());
      assertEquals(32767, rOI0.ly());
      assertEquals(33310, rOI0.Y());
      assertEquals((-542), rOI0.uy());
      assertEquals(4928, rOI0.X());
      assertEquals(46, rOI0.ux());
      assertFalse(int8 == int5);
      assertFalse(int8 == int1);
      assertFalse(int8 == int3);
      assertFalse(int8 == int7);
      assertFalse(int8 == int0);
      assertFalse(int8 == int6);
      assertFalse(int8 == int4);
      assertFalse(int8 == int2);
      
      Integer integer1 = new Integer(3);
      assertEquals(3, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int8));
      assertTrue(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)int3));
      assertTrue(integer1.equals((Object)int5));
      assertFalse(integer1.equals((Object)int6));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int2));
      assertTrue(integer1.equals((Object)int4));
      assertFalse(integer1.equals((Object)int7));
      
      int int9 = rOI0.ux();
      assertEquals(46, int9);
      assertEquals(4973, rOI0.lx());
      assertEquals(32767, rOI0.ly());
      assertEquals(33310, rOI0.Y());
      assertEquals((-542), rOI0.uy());
      assertEquals(4928, rOI0.X());
      assertEquals(46, rOI0.ux());
      assertFalse(int9 == int3);
      assertFalse(int9 == int5);
      assertFalse(int9 == int6);
      assertFalse(int9 == int4);
      assertTrue(int9 == int7);
      assertFalse(int9 == int8);
      assertFalse(int9 == int1);
      assertFalse(int9 == int2);
      assertFalse(int9 == int0);
      
      int int10 = rOI0.lx();
      assertEquals(4973, int10);
      assertEquals(4973, rOI0.lx());
      assertEquals(32767, rOI0.ly());
      assertEquals(33310, rOI0.Y());
      assertEquals((-542), rOI0.uy());
      assertEquals(4928, rOI0.X());
      assertEquals(46, rOI0.ux());
      assertFalse(int10 == int9);
      assertFalse(int10 == int5);
      assertFalse(int10 == int0);
      assertFalse(int10 == int7);
      assertFalse(int10 == int1);
      assertFalse(int10 == int3);
      assertFalse(int10 == int2);
      assertFalse(int10 == int8);
      assertFalse(int10 == int4);
      assertFalse(int10 == int6);
      
      int int11 = rOI0.ux();
      assertEquals(46, int11);
      assertEquals(4973, rOI0.lx());
      assertEquals(32767, rOI0.ly());
      assertEquals(33310, rOI0.Y());
      assertEquals((-542), rOI0.uy());
      assertEquals(4928, rOI0.X());
      assertEquals(46, rOI0.ux());
      assertFalse(int11 == int2);
      assertFalse(int11 == int1);
      assertFalse(int11 == int0);
      assertFalse(int11 == int4);
      assertFalse(int11 == int6);
      assertFalse(int11 == int3);
      assertFalse(int11 == int5);
      assertFalse(int11 == int10);
      assertFalse(int11 == int8);
      assertTrue(int11 == int9);
      assertTrue(int11 == int7);
      
      int int12 = rOI0.Y();
      assertEquals(33310, int12);
      assertEquals(4973, rOI0.lx());
      assertEquals(32767, rOI0.ly());
      assertEquals(33310, rOI0.Y());
      assertEquals((-542), rOI0.uy());
      assertEquals(4928, rOI0.X());
      assertEquals(46, rOI0.ux());
      assertFalse(int12 == int0);
      assertFalse(int12 == int6);
      assertFalse(int12 == int9);
      assertFalse(int12 == int1);
      assertFalse(int12 == int2);
      assertFalse(int12 == int11);
      assertFalse(int12 == int4);
      assertFalse(int12 == int8);
      assertFalse(int12 == int10);
      assertFalse(int12 == int5);
      assertFalse(int12 == int3);
      assertFalse(int12 == int7);
      
      // Undeclared exception!
      try { 
        grayImage0.median(46, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -542
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[][] intArray0 = new int[0][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
      try { 
        grayImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      assertNotNull(image0);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, image0.X());
      assertEquals(0, image0.Y());
      assertSame(interpolatedGrayImage0, image0);
      
      interpolatedGrayImage0.clip(2033, 6);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertSame(interpolatedGrayImage0, image0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      GrayImage grayImage0 = new GrayImage(interpolatedGrayImage0);
      assertNotNull(grayImage0);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      
      // Undeclared exception!
      grayImage0.addbuffer(128, 1820, 8);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertFalse(int1 == int0);
      
      ROI rOI1 = new ROI(409, 0, 409, 409);
      assertNotNull(rOI1);
      assertEquals(410, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(409, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(409, rOI1.lx());
      assertEquals(409, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertNotSame(rOI0, rOI1);
      
      int int3 = rOI0.ly();
      assertEquals(0, int3);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertNotSame(rOI0, rOI1);
      
      int int4 = rOI1.ux();
      assertEquals(409, int4);
      assertEquals(410, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(409, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(409, rOI1.lx());
      assertEquals(409, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertNotSame(rOI1, rOI0);
      
      int int5 = rOI0.ly();
      assertEquals(0, int5);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertNotSame(rOI0, rOI1);
      
      int int6 = rOI0.ux();
      assertEquals(0, int6);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int6 == int4);
      assertFalse(int6 == int1);
      assertTrue(int6 == int0);
      assertTrue(int6 == int5);
      assertTrue(int6 == int3);
      assertTrue(int6 == int2);
      assertNotSame(rOI0, rOI1);
      
      int int7 = rOI0.ux();
      assertEquals(0, int7);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int7 == int0);
      assertTrue(int7 == int6);
      assertTrue(int7 == int2);
      assertFalse(int7 == int4);
      assertTrue(int7 == int3);
      assertTrue(int7 == int5);
      assertFalse(int7 == int1);
      assertNotSame(rOI0, rOI1);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      String string0 = interpolatedGrayImage0.toString();
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      
      GrayImage grayImage1 = new GrayImage(grayImage0);
      assertNotNull(grayImage1);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertFalse(grayImage1.equals((Object)grayImage0));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.Y());
      
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      assertNotNull(image0);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(8, image0.Y());
      assertEquals(10, image0.X());
      assertSame(interpolatedGrayImage0, image0);
      
      interpolatedGrayImage0.clip(128, 6);
      assertEquals(10240, interpolatedGrayImage0.addSum());
      assertEquals(10240, interpolatedGrayImage0.absSum());
      assertEquals(1310720L, interpolatedGrayImage0.sqrSum());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertSame(interpolatedGrayImage0, image0);
      
      Integer integer0 = Integer.getInteger("", (-6506));
      assertEquals((-6506), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = integer0.intValue();
      assertEquals((-6506), int0);
      
      Image<Integer> image1 = interpolatedGrayImage0.clear((Integer) (-6506));
      assertNotNull(image1);
      assertEquals(520480, interpolatedGrayImage0.absSum());
      assertEquals(3386242880L, interpolatedGrayImage0.sqrSum());
      assertEquals((-520480), interpolatedGrayImage0.addSum());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(10, image1.X());
      assertEquals(8, image1.Y());
      assertSame(interpolatedGrayImage0, image1);
      assertSame(interpolatedGrayImage0, image0);
      assertSame(image1, image0);
      
      Integer integer1 = interpolatedGrayImage0.max();
      assertEquals((-6506), (int)integer1);
      assertNotNull(integer1);
      assertEquals(520480, interpolatedGrayImage0.absSum());
      assertEquals(3386242880L, interpolatedGrayImage0.sqrSum());
      assertEquals((-520480), interpolatedGrayImage0.addSum());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertSame(interpolatedGrayImage0, image1);
      assertSame(interpolatedGrayImage0, image0);
      
      int int1 = 388;
      int int2 = 422;
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.addbuffer(62, (-1660), 0, 422, 38);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int int0 = 33;
      GrayImage grayImage0 = new GrayImage(33, 33);
      assertNotNull(grayImage0);
      assertEquals(33, grayImage0.X());
      assertEquals(33, grayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      Integer integer0 = new Integer(33);
      assertEquals(33, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.Y();
      assertEquals(1, int2);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      Integer integer1 = grayImage0.max();
      assertNull(integer1);
      assertEquals(33, grayImage0.X());
      assertEquals(33, grayImage0.Y());
      
      int int3 = 6;
      GrayImage grayImage1 = grayImage0.addbuffer(388, 1, 6, 6, 388);
      assertNotNull(grayImage1);
      assertEquals(33, grayImage0.X());
      assertEquals(33, grayImage0.Y());
      assertEquals(58411072L, grayImage1.sqrSum());
      assertEquals(388, grayImage1.X());
      assertEquals(1, grayImage1.Y());
      assertEquals(150544, grayImage1.addSum());
      assertEquals(150544, grayImage1.absSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      
      String string0 = grayImage1.toString();
      assertNotNull(string0);
      assertEquals(33, grayImage0.X());
      assertEquals(33, grayImage0.Y());
      assertEquals(58411072L, grayImage1.sqrSum());
      assertEquals(388, grayImage1.X());
      assertEquals(1, grayImage1.Y());
      assertEquals(150544, grayImage1.addSum());
      assertEquals(150544, grayImage1.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      
      Integer integer2 = new Integer(1);
      assertEquals(1, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int3));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int1));
      assertTrue(integer2.equals((Object)int2));
      
      GrayImage grayImage2 = grayImage0.copy(rOI0);
      assertNotNull(grayImage2);
      assertEquals(33, grayImage0.X());
      assertEquals(33, grayImage0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, grayImage2.Y());
      assertEquals(1, grayImage2.X());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      
      String string1 = grayImage1.toString();
      assertNotNull(string1);
      assertEquals(33, grayImage0.X());
      assertEquals(33, grayImage0.Y());
      assertEquals(58411072L, grayImage1.sqrSum());
      assertEquals(388, grayImage1.X());
      assertEquals(1, grayImage1.Y());
      assertEquals(150544, grayImage1.addSum());
      assertEquals(150544, grayImage1.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      
      short[][] shortArray0 = new short[0][3];
      GrayImage grayImage3 = new GrayImage(shortArray0);
      assertNotNull(grayImage3);
      assertEquals(0, grayImage3.absSum());
      assertEquals(0, grayImage3.Y());
      assertEquals(0, grayImage3.X());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0, shortArray0.length);
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage0));
      
      Integer integer3 = grayImage1.min();
      assertEquals(388, (int)integer3);
      assertNotNull(integer3);
      assertEquals(33, grayImage0.X());
      assertEquals(33, grayImage0.Y());
      assertEquals(58411072L, grayImage1.sqrSum());
      assertEquals(388, grayImage1.X());
      assertEquals(1, grayImage1.Y());
      assertEquals(150544, grayImage1.addSum());
      assertEquals(150544, grayImage1.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage1.equals((Object)grayImage3));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int3));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)int2));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage1, grayImage3);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      
      int int4 = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        grayImage1.add((Image<Integer>) grayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 5);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(5, interpolatedGrayImage0.Y());
      
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      assertNotNull(image0);
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(5, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(5, image0.Y());
      assertEquals(10, image0.X());
      assertSame(interpolatedGrayImage0, image0);
      
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.copy();
      assertNotNull(interpolatedGrayImage1);
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(5, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(10, interpolatedGrayImage1.X());
      assertEquals(5, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertFalse(interpolatedGrayImage1.equals((Object)image0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertSame(interpolatedGrayImage0, image0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, image0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      
      MemoryImageSource memoryImageSource0 = (MemoryImageSource)interpolatedGrayImage0.getJavaImage();
      assertNotNull(memoryImageSource0);
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(5, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertSame(interpolatedGrayImage0, image0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      
      String string0 = interpolatedGrayImage1.toString();
      assertEquals("10:5\n0 0 0 0 0 \n0 0 0 0 0 \n0 0 0 0 0 \n0 0 0 0 0 \n0 0 0 0 0 \n0 0 0 0 0 \n0 0 0 0 0 \n0 0 0 0 0 \n0 0 0 0 0 \n0 0 0 0 0 \n", string0);
      assertNotNull(string0);
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(5, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(10, interpolatedGrayImage1.X());
      assertEquals(5, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)image0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertSame(interpolatedGrayImage0, image0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, image0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage2 = (InterpolatedGrayImage)interpolatedGrayImage0.subtract(1236);
      assertNotNull(interpolatedGrayImage2);
      assertEquals((-61800), interpolatedGrayImage0.addSum());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(61800, interpolatedGrayImage0.absSum());
      assertEquals(5, interpolatedGrayImage0.Y());
      assertEquals(76384800L, interpolatedGrayImage0.sqrSum());
      assertEquals(5, interpolatedGrayImage2.Y());
      assertEquals(76384800L, interpolatedGrayImage2.sqrSum());
      assertEquals(61800, interpolatedGrayImage2.absSum());
      assertEquals((-61800), interpolatedGrayImage2.addSum());
      assertEquals(10, interpolatedGrayImage2.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, image0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage2, image0);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.ly();
      assertEquals(0, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      
      ROI rOI1 = new ROI(3, 3, 6, (-137));
      assertNotNull(rOI1);
      assertEquals(3, rOI1.ly());
      assertEquals(6, rOI1.lx());
      assertEquals(3, rOI1.ux());
      assertEquals(141, rOI1.Y());
      assertEquals(4, rOI1.X());
      assertEquals((-137), rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int3 = rOI1.ux();
      assertEquals(3, int3);
      assertEquals(3, rOI1.ly());
      assertEquals(6, rOI1.lx());
      assertEquals(3, rOI1.ux());
      assertEquals(141, rOI1.Y());
      assertEquals(4, rOI1.X());
      assertEquals((-137), rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertNotSame(rOI1, rOI0);
      
      int int4 = rOI1.ly();
      assertEquals(3, int4);
      assertEquals(3, rOI1.ly());
      assertEquals(6, rOI1.lx());
      assertEquals(3, rOI1.ux());
      assertEquals(141, rOI1.Y());
      assertEquals(4, rOI1.X());
      assertEquals((-137), rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertNotSame(rOI1, rOI0);
      
      int int5 = rOI1.ux();
      assertEquals(3, int5);
      assertEquals(3, rOI1.ly());
      assertEquals(6, rOI1.lx());
      assertEquals(3, rOI1.ux());
      assertEquals(141, rOI1.Y());
      assertEquals(4, rOI1.X());
      assertEquals((-137), rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int3);
      assertFalse(int5 == int1);
      assertTrue(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertNotSame(rOI1, rOI0);
      
      int int6 = rOI1.ly();
      assertEquals(3, int6);
      assertEquals(3, rOI1.ly());
      assertEquals(6, rOI1.lx());
      assertEquals(3, rOI1.ux());
      assertEquals(141, rOI1.Y());
      assertEquals(4, rOI1.X());
      assertEquals((-137), rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int6 == int2);
      assertTrue(int6 == int3);
      assertTrue(int6 == int5);
      assertFalse(int6 == int1);
      assertTrue(int6 == int4);
      assertFalse(int6 == int0);
      assertNotSame(rOI1, rOI0);
      
      int int7 = rOI1.ux();
      assertEquals(3, int7);
      assertEquals(3, rOI1.ly());
      assertEquals(6, rOI1.lx());
      assertEquals(3, rOI1.ux());
      assertEquals(141, rOI1.Y());
      assertEquals(4, rOI1.X());
      assertEquals((-137), rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int7 == int0);
      assertTrue(int7 == int6);
      assertFalse(int7 == int2);
      assertTrue(int7 == int4);
      assertTrue(int7 == int5);
      assertFalse(int7 == int1);
      assertTrue(int7 == int3);
      assertNotSame(rOI1, rOI0);
      
      int int8 = rOI1.ux();
      assertEquals(3, int8);
      assertEquals(3, rOI1.ly());
      assertEquals(6, rOI1.lx());
      assertEquals(3, rOI1.ux());
      assertEquals(141, rOI1.Y());
      assertEquals(4, rOI1.X());
      assertEquals((-137), rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int8 == int6);
      assertFalse(int8 == int0);
      assertFalse(int8 == int1);
      assertTrue(int8 == int3);
      assertTrue(int8 == int7);
      assertTrue(int8 == int4);
      assertTrue(int8 == int5);
      assertFalse(int8 == int2);
      assertNotSame(rOI1, rOI0);
      
      int int9 = rOI1.lx();
      assertEquals(6, int9);
      assertEquals(3, rOI1.ly());
      assertEquals(6, rOI1.lx());
      assertEquals(3, rOI1.ux());
      assertEquals(141, rOI1.Y());
      assertEquals(4, rOI1.X());
      assertEquals((-137), rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int9 == int6);
      assertFalse(int9 == int2);
      assertFalse(int9 == int3);
      assertFalse(int9 == int5);
      assertFalse(int9 == int4);
      assertFalse(int9 == int0);
      assertFalse(int9 == int7);
      assertFalse(int9 == int8);
      assertFalse(int9 == int1);
      assertNotSame(rOI1, rOI0);
      
      int int10 = rOI1.ux();
      assertEquals(3, int10);
      assertEquals(3, rOI1.ly());
      assertEquals(6, rOI1.lx());
      assertEquals(3, rOI1.ux());
      assertEquals(141, rOI1.Y());
      assertEquals(4, rOI1.X());
      assertEquals((-137), rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int10 == int8);
      assertFalse(int10 == int0);
      assertTrue(int10 == int4);
      assertTrue(int10 == int6);
      assertTrue(int10 == int5);
      assertTrue(int10 == int3);
      assertFalse(int10 == int1);
      assertTrue(int10 == int7);
      assertFalse(int10 == int2);
      assertFalse(int10 == int9);
      assertNotSame(rOI1, rOI0);
      
      int int11 = rOI1.X();
      assertEquals(4, int11);
      assertEquals(3, rOI1.ly());
      assertEquals(6, rOI1.lx());
      assertEquals(3, rOI1.ux());
      assertEquals(141, rOI1.Y());
      assertEquals(4, rOI1.X());
      assertEquals((-137), rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int11 == int8);
      assertFalse(int11 == int6);
      assertFalse(int11 == int9);
      assertFalse(int11 == int4);
      assertFalse(int11 == int3);
      assertFalse(int11 == int2);
      assertFalse(int11 == int10);
      assertFalse(int11 == int7);
      assertFalse(int11 == int5);
      assertFalse(int11 == int0);
      assertFalse(int11 == int1);
      assertNotSame(rOI1, rOI0);
      
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.multiply((Image<Integer>) grayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(3, 4);
      assertNotNull(grayImage0);
      assertEquals(4, grayImage0.Y());
      assertEquals(3, grayImage0.X());
      
      ROI rOI0 = new ROI(3, 3, 6, (-137));
      assertNotNull(rOI0);
      assertEquals(3, rOI0.ux());
      assertEquals(141, rOI0.Y());
      assertEquals(4, rOI0.X());
      assertEquals((-137), rOI0.uy());
      assertEquals(3, rOI0.ly());
      assertEquals(6, rOI0.lx());
      
      rOI0.setROI((-2079), (-3), 3, (-709));
      assertEquals((-2079), rOI0.ux());
      assertEquals((-3), rOI0.ly());
      assertEquals(2083, rOI0.X());
      assertEquals(707, rOI0.Y());
      assertEquals((-709), rOI0.uy());
      assertEquals(3, rOI0.lx());
      
      rOI0.setROI(376, 357, 376, (-2079));
      assertEquals((-2079), rOI0.uy());
      assertEquals(376, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(376, rOI0.ux());
      assertEquals(2437, rOI0.Y());
      assertEquals(357, rOI0.ly());
      
      int int0 = rOI0.ux();
      assertEquals(376, int0);
      assertEquals((-2079), rOI0.uy());
      assertEquals(376, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(376, rOI0.ux());
      assertEquals(2437, rOI0.Y());
      assertEquals(357, rOI0.ly());
      
      int int1 = rOI0.ly();
      assertEquals(357, int1);
      assertEquals((-2079), rOI0.uy());
      assertEquals(376, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(376, rOI0.ux());
      assertEquals(2437, rOI0.Y());
      assertEquals(357, rOI0.ly());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(376, int2);
      assertEquals((-2079), rOI0.uy());
      assertEquals(376, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(376, rOI0.ux());
      assertEquals(2437, rOI0.Y());
      assertEquals(357, rOI0.ly());
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.ly();
      assertEquals(357, int3);
      assertEquals((-2079), rOI0.uy());
      assertEquals(376, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(376, rOI0.ux());
      assertEquals(2437, rOI0.Y());
      assertEquals(357, rOI0.ly());
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      
      int int4 = rOI0.ux();
      assertEquals(376, int4);
      assertEquals((-2079), rOI0.uy());
      assertEquals(376, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(376, rOI0.ux());
      assertEquals(2437, rOI0.Y());
      assertEquals(357, rOI0.ly());
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      
      int int5 = rOI0.ux();
      assertEquals(376, int5);
      assertEquals((-2079), rOI0.uy());
      assertEquals(376, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(376, rOI0.ux());
      assertEquals(2437, rOI0.Y());
      assertEquals(357, rOI0.ly());
      assertTrue(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      
      int int6 = rOI0.lx();
      assertEquals(376, int6);
      assertEquals((-2079), rOI0.uy());
      assertEquals(376, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(376, rOI0.ux());
      assertEquals(2437, rOI0.Y());
      assertEquals(357, rOI0.ly());
      assertTrue(int6 == int5);
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertFalse(int6 == int3);
      assertFalse(int6 == int1);
      assertTrue(int6 == int0);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(357, 376);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(357, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(376, interpolatedGrayImage0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.subtract((Image<Integer>) grayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 376
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(6, 0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(6, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      
      ROI rOI0 = new ROI(3, 3, 6, (-137));
      assertNotNull(rOI0);
      assertEquals((-137), rOI0.uy());
      assertEquals(4, rOI0.X());
      assertEquals(6, rOI0.lx());
      assertEquals(3, rOI0.ly());
      assertEquals(3, rOI0.ux());
      assertEquals(141, rOI0.Y());
      
      int int0 = rOI0.ux();
      assertEquals(3, int0);
      assertEquals((-137), rOI0.uy());
      assertEquals(4, rOI0.X());
      assertEquals(6, rOI0.lx());
      assertEquals(3, rOI0.ly());
      assertEquals(3, rOI0.ux());
      assertEquals(141, rOI0.Y());
      
      int int1 = rOI0.ly();
      assertEquals(3, int1);
      assertEquals((-137), rOI0.uy());
      assertEquals(4, rOI0.X());
      assertEquals(6, rOI0.lx());
      assertEquals(3, rOI0.ly());
      assertEquals(3, rOI0.ux());
      assertEquals(141, rOI0.Y());
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(3, int2);
      assertEquals((-137), rOI0.uy());
      assertEquals(4, rOI0.X());
      assertEquals(6, rOI0.lx());
      assertEquals(3, rOI0.ly());
      assertEquals(3, rOI0.ux());
      assertEquals(141, rOI0.Y());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.ly();
      assertEquals(3, int3);
      assertEquals((-137), rOI0.uy());
      assertEquals(4, rOI0.X());
      assertEquals(6, rOI0.lx());
      assertEquals(3, rOI0.ly());
      assertEquals(3, rOI0.ux());
      assertEquals(141, rOI0.Y());
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      
      int int4 = rOI0.ux();
      assertEquals(3, int4);
      assertEquals((-137), rOI0.uy());
      assertEquals(4, rOI0.X());
      assertEquals(6, rOI0.lx());
      assertEquals(3, rOI0.ly());
      assertEquals(3, rOI0.ux());
      assertEquals(141, rOI0.Y());
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      
      int int5 = rOI0.ux();
      assertEquals(3, int5);
      assertEquals((-137), rOI0.uy());
      assertEquals(4, rOI0.X());
      assertEquals(6, rOI0.lx());
      assertEquals(3, rOI0.ly());
      assertEquals(3, rOI0.ux());
      assertEquals(141, rOI0.Y());
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      
      int int6 = rOI0.lx();
      assertEquals(6, int6);
      assertEquals((-137), rOI0.uy());
      assertEquals(4, rOI0.X());
      assertEquals(6, rOI0.lx());
      assertEquals(3, rOI0.ly());
      assertEquals(3, rOI0.ux());
      assertEquals(141, rOI0.Y());
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int4);
      assertFalse(int6 == int2);
      
      GrayImage grayImage1 = new GrayImage(grayImage0);
      assertNotNull(grayImage1);
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(6, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(6, grayImage1.X());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      GrayImage grayImage2 = grayImage1.addbuffer(3, 3, (-16777216));
      assertNotNull(grayImage2);
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(6, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(6, grayImage1.X());
      assertEquals(150994944, grayImage2.absSum());
      assertEquals(3, grayImage2.X());
      assertEquals(3, grayImage2.Y());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals((-150994944), grayImage2.addSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      
      String string0 = grayImage0.toString();
      assertEquals("6:0\n\n\n\n\n\n\n", string0);
      assertNotNull(string0);
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(6, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(8, 12);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      assertNotNull(image0);
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(12, image0.Y());
      assertEquals(8, image0.X());
      assertSame(interpolatedGrayImage0, image0);
      
      interpolatedGrayImage0.clip(37, 8);
      assertEquals(3552, interpolatedGrayImage0.addSum());
      assertEquals(3552, interpolatedGrayImage0.absSum());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(131424L, interpolatedGrayImage0.sqrSum());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertSame(interpolatedGrayImage0, image0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      Integer integer0 = new Integer(12);
      assertEquals(12, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      interpolatedGrayImage0.clip(8, 8, rOI0);
      assertEquals(130119L, interpolatedGrayImage0.sqrSum());
      assertEquals(3523, interpolatedGrayImage0.addSum());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(3523, interpolatedGrayImage0.absSum());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertSame(interpolatedGrayImage0, image0);
      
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.add(233);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(6983581L, interpolatedGrayImage0.sqrSum());
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(25891, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(25891, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage1.X());
      assertEquals(6983581L, interpolatedGrayImage1.sqrSum());
      assertEquals(12, interpolatedGrayImage1.Y());
      assertEquals(25891, interpolatedGrayImage1.absSum());
      assertEquals(25891, interpolatedGrayImage1.addSum());
      assertSame(interpolatedGrayImage0, image0);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage1, image0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      assertNotNull(image0);
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(8, image0.Y());
      assertEquals(10, image0.X());
      assertSame(interpolatedGrayImage0, image0);
      
      interpolatedGrayImage0.clip(128, 6);
      assertEquals(10240, interpolatedGrayImage0.absSum());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(1310720L, interpolatedGrayImage0.sqrSum());
      assertEquals(10240, interpolatedGrayImage0.addSum());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertSame(interpolatedGrayImage0, image0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      GrayImage grayImage0 = new GrayImage(interpolatedGrayImage0);
      assertNotNull(grayImage0);
      assertEquals(10240, interpolatedGrayImage0.absSum());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(1310720L, interpolatedGrayImage0.sqrSum());
      assertEquals(10240, interpolatedGrayImage0.addSum());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(10, grayImage0.X());
      assertEquals(1310720L, grayImage0.sqrSum());
      assertEquals(8, grayImage0.Y());
      assertEquals(10240, grayImage0.addSum());
      assertEquals(10240, grayImage0.absSum());
      
      ImageProducer imageProducer0 = grayImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertEquals(10240, interpolatedGrayImage0.absSum());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(1310720L, interpolatedGrayImage0.sqrSum());
      assertEquals(10240, interpolatedGrayImage0.addSum());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(10, grayImage0.X());
      assertEquals(1310720L, grayImage0.sqrSum());
      assertEquals(8, grayImage0.Y());
      assertEquals(10240, grayImage0.addSum());
      assertEquals(10240, grayImage0.absSum());
      assertSame(interpolatedGrayImage0, image0);
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.lx();
      assertEquals(0, int1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.subtract(image0, rOI0, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int int0 = 472;
      int int1 = 4526;
      GrayImage grayImage0 = new GrayImage(472, 4526);
      assertNotNull(grayImage0);
      assertEquals(4526, grayImage0.Y());
      assertEquals(472, grayImage0.X());
      
      // Undeclared exception!
      grayImage0.copy();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.Y());
      
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      assertNotNull(image0);
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(8, image0.Y());
      assertEquals(10, image0.X());
      assertSame(interpolatedGrayImage0, image0);
      
      interpolatedGrayImage0.clip(128, 6);
      assertEquals(1310720L, interpolatedGrayImage0.sqrSum());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(10240, interpolatedGrayImage0.absSum());
      assertEquals(10240, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertSame(interpolatedGrayImage0, image0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      GrayImage grayImage0 = new GrayImage(interpolatedGrayImage0);
      assertNotNull(grayImage0);
      assertEquals(1310720L, interpolatedGrayImage0.sqrSum());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(10240, interpolatedGrayImage0.absSum());
      assertEquals(10240, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(1310720L, grayImage0.sqrSum());
      assertEquals(10, grayImage0.X());
      assertEquals(8, grayImage0.Y());
      assertEquals(10240, grayImage0.addSum());
      assertEquals(10240, grayImage0.absSum());
      
      // Undeclared exception!
      interpolatedGrayImage0.median(10);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(6, 0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(6, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short)1;
      GrayImage grayImage1 = grayImage0.multiply(6);
      assertNotNull(grayImage1);
      assertEquals(0, grayImage0.addSum());
      assertEquals(6, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(6, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      
      String string0 = grayImage1.toString();
      assertEquals("6:0\n\n\n\n\n\n\n", string0);
      assertNotNull(string0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(6, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(6, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      rOI0.setROI(0, (short)8, 65, 255);
      assertEquals(65, rOI0.lx());
      assertEquals(66, rOI0.X());
      assertEquals(8, rOI0.uy());
      assertEquals(255, rOI0.ly());
      assertEquals(248, rOI0.Y());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.uy();
      assertEquals(8, int0);
      assertEquals(65, rOI0.lx());
      assertEquals(66, rOI0.X());
      assertEquals(8, rOI0.uy());
      assertEquals(255, rOI0.ly());
      assertEquals(248, rOI0.Y());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.X();
      assertEquals(66, int1);
      assertEquals(65, rOI0.lx());
      assertEquals(66, rOI0.X());
      assertEquals(8, rOI0.uy());
      assertEquals(255, rOI0.ly());
      assertEquals(248, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.Y();
      assertEquals(248, int2);
      assertEquals(65, rOI0.lx());
      assertEquals(66, rOI0.X());
      assertEquals(8, rOI0.uy());
      assertEquals(255, rOI0.ly());
      assertEquals(248, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      // Undeclared exception!
      try { 
        grayImage0.byteSize(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertFalse(int1 == int0);
      
      ROI rOI1 = new ROI((-1792), 0, (-1792), (-1792));
      assertNotNull(rOI1);
      assertEquals((-1792), rOI1.uy());
      assertEquals((-1792), rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(1793, rOI1.Y());
      assertEquals((-1792), rOI1.lx());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(rOI0, rOI1);
      
      int int3 = rOI0.ly();
      assertEquals(0, int3);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertNotSame(rOI0, rOI1);
      
      int int4 = rOI1.ux();
      assertEquals((-1792), int4);
      assertEquals((-1792), rOI1.uy());
      assertEquals((-1792), rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(1793, rOI1.Y());
      assertEquals((-1792), rOI1.lx());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertNotSame(rOI1, rOI0);
      
      int int5 = rOI0.ly();
      assertEquals(0, int5);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertNotSame(rOI0, rOI1);
      
      int int6 = rOI0.ux();
      assertEquals(0, int6);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int6 == int2);
      assertFalse(int6 == int1);
      assertTrue(int6 == int5);
      assertFalse(int6 == int4);
      assertTrue(int6 == int3);
      assertTrue(int6 == int0);
      assertNotSame(rOI0, rOI1);
      
      int int7 = rOI0.ux();
      assertEquals(0, int7);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int7 == int6);
      assertFalse(int7 == int4);
      assertTrue(int7 == int5);
      assertTrue(int7 == int3);
      assertTrue(int7 == int2);
      assertFalse(int7 == int1);
      assertTrue(int7 == int0);
      assertNotSame(rOI0, rOI1);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedGrayImage1.setInterpolationMethod(interpolationMethod0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.CUBIC, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      
      int int8 = rOI0.lx();
      assertEquals(0, int8);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int8 == int4);
      assertTrue(int8 == int0);
      assertTrue(int8 == int5);
      assertTrue(int8 == int7);
      assertTrue(int8 == int2);
      assertFalse(int8 == int1);
      assertTrue(int8 == int6);
      assertTrue(int8 == int3);
      assertNotSame(rOI0, rOI1);
      
      int int9 = rOI0.ux();
      assertEquals(0, int9);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int9 == int2);
      assertFalse(int9 == int1);
      assertFalse(int9 == int4);
      assertTrue(int9 == int5);
      assertTrue(int9 == int8);
      assertTrue(int9 == int7);
      assertTrue(int9 == int3);
      assertTrue(int9 == int6);
      assertTrue(int9 == int0);
      assertFalse(rOI0.equals((Object)rOI1));
      assertNotSame(rOI0, rOI1);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.add(0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1792
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(10, interpolatedGrayImage0.X());
      
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      assertNotNull(image0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(10, image0.X());
      assertEquals(8, image0.Y());
      assertSame(interpolatedGrayImage0, image0);
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(10, 10);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(10, interpolatedGrayImage1.Y());
      assertEquals(10, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertFalse(interpolatedGrayImage1.equals((Object)image0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.addbuffer(10, (-2750), 2824);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 8);
      interpolatedGrayImage0.clear();
      GrayImage grayImage0 = new GrayImage(interpolatedGrayImage0);
      GrayImage grayImage1 = grayImage0.addbuffer(3, 7, (-14));
      assertEquals(7, grayImage1.Y());
      assertEquals(3, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      
      String string0 = grayImage0.toString();
      assertEquals("10:8\n0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 \n", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int[][] intArray0 = new int[3][7];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[2];
      intArray2[0] = 32767;
      intArray2[1] = 2626;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      intArray3[0] = 2626;
      intArray3[1] = 32767;
      intArray3[2] = 32767;
      intArray3[3] = 32767;
      intArray3[4] = 32767;
      intArray3[5] = 2626;
      intArray3[6] = 31;
      intArray0[2] = intArray3;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.util.ArrayUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int[][] intArray0 = new int[0][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      int int0 = grayImage0.absSum();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int int0 = 472;
      GrayImage grayImage0 = new GrayImage(472, 4526);
      GrayImage grayImage1 = new GrayImage(grayImage0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 07 13:15:25 GMT 2019
 */

package Newzgrabber;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Newzgrabber.SortFilterModel;
import java.awt.event.MouseEvent;
import java.util.Stack;
import java.util.Vector;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SortFilterModel_ESTest extends SortFilterModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 0);
      assertEquals(0, objectArray0.length);
      assertNotNull(defaultTableModel0);
      
      Stack<DefaultListCellRenderer> stack0 = new Stack<DefaultListCellRenderer>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      defaultTableModel0.addRow((Vector) stack0);
      assertEquals(0, objectArray0.length);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertEquals(0, objectArray0.length);
      assertNotNull(sortFilterModel0);
      
      boolean boolean0 = sortFilterModel0.isCellEditable(0, 23);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 0);
      assertEquals(0, objectArray0.length);
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertEquals(0, objectArray0.length);
      assertNotNull(sortFilterModel0);
      
      // Undeclared exception!
      try { 
        sortFilterModel0.isCellEditable(0, 23);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("Newzgrabber.SortFilterModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      Object object0 = sortFilterModel0.getValueAt(4041, 1137);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(1601, 1601);
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      int int0 = sortFilterModel0.getRowCount();
      assertEquals(1601, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(stack0, 1601);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(defaultTableModel0);
      assertFalse(stack0.contains(1601));
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(sortFilterModel0);
      assertFalse(stack0.contains(1601));
      
      String string0 = sortFilterModel0.getColumnName(1601);
      assertEquals("BIP", string0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(string0);
      assertFalse(stack0.contains(1601));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      int int0 = sortFilterModel0.getColumnCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, 30);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(defaultTableModel0);
      assertFalse(vector0.contains(30));
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(sortFilterModel0);
      assertFalse(vector0.contains(30));
      
      // Undeclared exception!
      try { 
        sortFilterModel0.sort((-1303));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      // Undeclared exception!
      try { 
        sortFilterModel0.setValueAt(defaultTableModel0, (-1685), (-1685));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1685
         //
         verifyException("Newzgrabber.SortFilterModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SortFilterModel sortFilterModel0 = null;
      try {
        sortFilterModel0 = new SortFilterModel((TableModel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      int int0 = sortFilterModel0.getRowCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(stack0, stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(sortFilterModel0);
      
      sortFilterModel0.sortTable((-948));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(1601, 1601);
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      sortFilterModel0.sort(59);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, 30);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(defaultTableModel0);
      assertFalse(vector0.contains(30));
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(sortFilterModel0);
      assertFalse(vector0.contains(30));
      
      Class class0 = sortFilterModel0.getColumnClass((-675));
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      assertFalse(vector0.contains(30));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      String string0 = sortFilterModel0.getColumnName((-2395));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((Object[]) null, 0);
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      sortFilterModel0.mouseReleased((MouseEvent) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(1601, 1601);
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      int int0 = sortFilterModel0.getColumnCount();
      assertEquals(1601, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 0);
      assertEquals(0, objectArray0.length);
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertEquals(0, objectArray0.length);
      assertNotNull(sortFilterModel0);
      
      sortFilterModel0.mouseEntered((MouseEvent) null);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(1601, 1601);
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      Object object0 = sortFilterModel0.getValueAt(1593, 1593);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector<SortFilterModel> vector0 = new Vector<SortFilterModel>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, 3);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(sortFilterModel0);
      assertFalse(vector0.contains(sortFilterModel0));
      
      sortFilterModel0.setSort(true);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(sortFilterModel0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector<SortFilterModel> vector0 = new Vector<SortFilterModel>(0, 0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertNotNull(vector0);
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertNotNull(sortFilterModel0);
      assertFalse(vector0.contains(sortFilterModel0));
      
      sortFilterModel0.mouseExited((MouseEvent) null);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertFalse(vector0.contains(sortFilterModel0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(1601, 1601);
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      JTable jTable0 = new JTable(stack0, stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertNotNull(jTable0);
      assertFalse(stack0.contains(1601));
      
      sortFilterModel0.setTable(jTable0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(stack0.contains(1601));
      
      // Undeclared exception!
      try { 
        sortFilterModel0.sortTable(1601);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.awt.event.MouseEvent
         //
         verifyException("Newzgrabber.SortFilterModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(1601, 1601);
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      sortFilterModel0.updateTable();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(1601, 1601);
      assertNotNull(defaultTableModel0);
      
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      assertNotNull(sortFilterModel0);
      
      sortFilterModel0.setValueAt(defaultTableModel0, 1596, 1600);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(stack0, 1601);
      SortFilterModel sortFilterModel0 = new SortFilterModel(defaultTableModel0);
      SortFilterModel sortFilterModel1 = new SortFilterModel(sortFilterModel0);
      int int0 = 23;
      sortFilterModel1.sort(int0);
      assertFalse(sortFilterModel0.equals((Object)sortFilterModel1));
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 07 13:11:35 GMT 2019
 */

package de.progra.charting.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.progra.charting.model.AbstractChartDataModel;
import de.progra.charting.model.DefaultChartDataModelConstraints;
import de.progra.charting.model.EditableChartDataModel;
import de.progra.charting.model.ObjectChartDataModel;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.util.Comparator;
import java.util.NoSuchElementException;
import java.util.TreeSet;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultChartDataModelConstraints_ESTest extends DefaultChartDataModelConstraints_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      objectChartDataModel0.setAutoScale(true);
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(objectChartDataModel0, 15);
      double double0 = defaultChartDataModelConstraints0.getMaximumColumnValue();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(objectChartDataModel0, 0);
      objectChartDataModel0.autoscale = true;
      double double0 = defaultChartDataModelConstraints0.getMinimumColumnValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(comparator0).compare(any() , any());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      TreeSet<Byte> treeSet1 = new TreeSet<Byte>();
      treeSet0.add((String) null);
      Byte byte0 = new Byte((byte)67);
      treeSet1.add(byte0);
      Byte byte1 = new Byte((byte)66);
      treeSet1.add(byte1);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(integer0, byte1).when(abstractChartDataModel0).getManualMaximumValue();
      doReturn(treeSet0, treeSet1, treeSet1).when(abstractChartDataModel0).getOrderedValues(anyInt());
      doReturn(true).when(abstractChartDataModel0).isAutoScale();
      doReturn(true, true, false).when(abstractChartDataModel0).isManualScale();
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, 1);
      defaultChartDataModelConstraints0.getMaximumValue();
      defaultChartDataModelConstraints0.getMaximumValue();
      Number number0 = defaultChartDataModelConstraints0.getMinimumValue();
      assertNotNull(number0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(comparator0).compare(any() , any());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      TreeSet<Byte> treeSet1 = new TreeSet<Byte>();
      treeSet0.add((String) null);
      Byte byte0 = new Byte((byte)67);
      treeSet1.add(byte0);
      Byte byte1 = new Byte((byte)66);
      treeSet1.add(byte1);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(integer0, byte1).when(abstractChartDataModel0).getManualMaximumValue();
      doReturn(treeSet0, treeSet1, treeSet1).when(abstractChartDataModel0).getOrderedValues(anyInt());
      doReturn(true).when(abstractChartDataModel0).isAutoScale();
      doReturn(true, true, false).when(abstractChartDataModel0).isManualScale();
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, 1);
      defaultChartDataModelConstraints0.getMaximumValue();
      defaultChartDataModelConstraints0.getMaximumValue();
      Number number0 = defaultChartDataModelConstraints0.getMaximumValue();
      assertEquals(200.0, number0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(comparator0).compare(any() , any());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      treeSet0.add((String) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(bigInteger0).when(abstractChartDataModel0).getManualMinimumValue();
      doReturn(treeSet0).when(abstractChartDataModel0).getOrderedValues(anyInt());
      doReturn(true).when(abstractChartDataModel0).isManualScale();
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, 1);
      Number number0 = defaultChartDataModelConstraints0.getMinimumValue();
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      TreeSet<Byte> treeSet1 = new TreeSet<Byte>();
      BigInteger bigInteger0 = BigInteger.ZERO;
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(bigInteger0).when(abstractChartDataModel0).getManualMinimumValue();
      doReturn(treeSet0, treeSet1).when(abstractChartDataModel0).getOrderedValues(anyInt());
      doReturn(true).when(abstractChartDataModel0).isManualScale();
      Byte byte0 = new Byte((byte) (-128));
      treeSet1.add(byte0);
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, 0);
      defaultChartDataModelConstraints0.getMaximumValue();
      Number number0 = defaultChartDataModelConstraints0.getMinimumValue();
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(comparator0).compare(any() , any());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      treeSet0.add((String) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte)101;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(bigInteger0).when(abstractChartDataModel0).getManualMinimumValue();
      doReturn(treeSet0).when(abstractChartDataModel0).getOrderedValues(anyInt());
      doReturn(true).when(abstractChartDataModel0).isManualScale();
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, 1);
      Number number0 = defaultChartDataModelConstraints0.getMinimumValue();
      assertEquals((byte)101, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn((-1877.56)).when(abstractChartDataModel0).getFirstColumnValue();
      doReturn(false).when(abstractChartDataModel0).isAutoScale();
      doReturn(false).when(abstractChartDataModel0).isManualScale();
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, 0);
      double double0 = defaultChartDataModelConstraints0.getMinimumColumnValue();
      assertEquals((-1877.56), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn((-1877.56)).when(abstractChartDataModel0).getLastColumnValue();
      doReturn(false).when(abstractChartDataModel0).isAutoScale();
      doReturn(false).when(abstractChartDataModel0).isManualScale();
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, 0);
      double double0 = defaultChartDataModelConstraints0.getMaximumColumnValue();
      assertEquals((-1877.56), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(comparator0).compare(any() , any());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      TreeSet<Byte> treeSet1 = new TreeSet<Byte>();
      treeSet0.add((String) null);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(abstractChartDataModel0).getManualMaximumValue();
      doReturn(treeSet0, treeSet1, treeSet0).when(abstractChartDataModel0).getOrderedValues(anyInt());
      doReturn(true).when(abstractChartDataModel0).isAutoScale();
      doReturn(true, false).when(abstractChartDataModel0).isManualScale();
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, 1);
      defaultChartDataModelConstraints0.getMaximumValue();
      defaultChartDataModelConstraints0.getMaximumValue();
      // Undeclared exception!
      try { 
        defaultChartDataModelConstraints0.getMinimumValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.model.DefaultChartDataModelConstraints", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TreeSet<RoundingMode> treeSet0 = new TreeSet<RoundingMode>();
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      treeSet0.add(roundingMode0);
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(treeSet0).when(abstractChartDataModel0).getOrderedValues(anyInt());
      doReturn(false).when(abstractChartDataModel0).isAutoScale();
      doReturn(false).when(abstractChartDataModel0).isManualScale();
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, 502);
      // Undeclared exception!
      try { 
        defaultChartDataModelConstraints0.getMinimumValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.math.RoundingMode cannot be cast to java.lang.Number
         //
         verifyException("de.progra.charting.model.DefaultChartDataModelConstraints", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(editableChartDataModel0, 0);
      // Undeclared exception!
      try { 
        defaultChartDataModelConstraints0.getMinimumColumnValue();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints((AbstractChartDataModel) null, 3);
      // Undeclared exception!
      try { 
        defaultChartDataModelConstraints0.getMinimumColumnValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.model.DefaultChartDataModelConstraints", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      TreeSet<Byte> treeSet1 = new TreeSet<Byte>();
      treeSet0.add((String) null);
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(33.062457814890074).when(abstractChartDataModel0).getManualMaximumColumnValue();
      doReturn((Number) null).when(abstractChartDataModel0).getManualMaximumValue();
      doReturn(treeSet0, treeSet1, treeSet0).when(abstractChartDataModel0).getOrderedValues(anyInt());
      doReturn(true).when(abstractChartDataModel0).isAutoScale();
      doReturn(true, true, false).when(abstractChartDataModel0).isManualScale();
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, 0);
      defaultChartDataModelConstraints0.getMaximumValue();
      defaultChartDataModelConstraints0.getMaximumColumnValue();
      defaultChartDataModelConstraints0.getMinimumValue();
      // Undeclared exception!
      try { 
        defaultChartDataModelConstraints0.getMaximumValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.model.DefaultChartDataModelConstraints", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TreeSet<RoundingMode> treeSet0 = new TreeSet<RoundingMode>();
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      treeSet0.add(roundingMode0);
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(treeSet0).when(abstractChartDataModel0).getOrderedValues(anyInt());
      doReturn(true).when(abstractChartDataModel0).isAutoScale();
      doReturn(false).when(abstractChartDataModel0).isManualScale();
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, 509);
      // Undeclared exception!
      try { 
        defaultChartDataModelConstraints0.getMaximumValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.math.RoundingMode cannot be cast to java.lang.Number
         //
         verifyException("de.progra.charting.model.DefaultChartDataModelConstraints", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(editableChartDataModel0, 0);
      // Undeclared exception!
      try { 
        defaultChartDataModelConstraints0.getMaximumColumnValue();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints((AbstractChartDataModel) null, 1849);
      // Undeclared exception!
      try { 
        defaultChartDataModelConstraints0.getMaximumColumnValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.model.DefaultChartDataModelConstraints", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(abstractChartDataModel0).getLastColumnValue();
      doReturn(false).when(abstractChartDataModel0).isAutoScale();
      doReturn(true).when(abstractChartDataModel0).isManualScale();
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, 0, false);
      double double0 = defaultChartDataModelConstraints0.getMaximumColumnValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(102261127).when(comparator0).compare(any() , any());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      TreeSet<Byte> treeSet1 = new TreeSet<Byte>();
      treeSet0.add((String) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(abstractChartDataModel0).getFirstColumnValue();
      doReturn(0.0).when(abstractChartDataModel0).getLastColumnValue();
      doReturn(bigInteger0, (Number) null).when(abstractChartDataModel0).getManualMaximumValue();
      doReturn(treeSet0, treeSet1).when(abstractChartDataModel0).getOrderedValues(anyInt());
      doReturn(true).when(abstractChartDataModel0).isAutoScale();
      doReturn(true, true, false).when(abstractChartDataModel0).isManualScale();
      Byte byte0 = new Byte((byte) (-31));
      treeSet1.add(byte0);
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, 0);
      defaultChartDataModelConstraints0.getMaximumValue();
      defaultChartDataModelConstraints0.getMaximumValue();
      // Undeclared exception!
      defaultChartDataModelConstraints0.getMaximumColumnValue();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(0.95).when(abstractChartDataModel0).getFirstColumnValue();
      doReturn(false).when(abstractChartDataModel0).isAutoScale();
      doReturn(false).when(abstractChartDataModel0).isManualScale();
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, 0);
      double double0 = defaultChartDataModelConstraints0.getMinimumColumnValue();
      assertEquals(0.95, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(abstractChartDataModel0).getFirstColumnValue();
      doReturn(false).when(abstractChartDataModel0).isAutoScale();
      doReturn(true).when(abstractChartDataModel0).isManualScale();
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, 0, false);
      defaultChartDataModelConstraints0.getMinimumColumnValue();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      TreeSet<Byte> treeSet1 = new TreeSet<Byte>();
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(abstractChartDataModel0).getFirstColumnValue();
      doReturn(33.062457814890074, 33.062457814890074).when(abstractChartDataModel0).getManualMaximumColumnValue();
      doReturn(treeSet0, treeSet1).when(abstractChartDataModel0).getOrderedValues(anyInt());
      doReturn(true, false).when(abstractChartDataModel0).isAutoScale();
      doReturn(true, true, false, false).when(abstractChartDataModel0).isManualScale();
      Byte byte0 = new Byte((byte) (-123));
      treeSet1.add(byte0);
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, (-5));
      defaultChartDataModelConstraints0.getMaximumValue();
      defaultChartDataModelConstraints0.getMaximumColumnValue();
      defaultChartDataModelConstraints0.getMaximumColumnValue();
      defaultChartDataModelConstraints0.getMinimumValue();
      defaultChartDataModelConstraints0.getMinimumColumnValue();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(comparator0).compare(any() , any());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      TreeSet<Byte> treeSet1 = new TreeSet<Byte>();
      treeSet0.add((String) null);
      Byte byte0 = new Byte((byte) (-43));
      treeSet1.add(byte0);
      Byte byte1 = new Byte((byte)64);
      treeSet1.add(byte1);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(abstractChartDataModel0).getManualMaximumValue();
      doReturn(treeSet0, treeSet1).when(abstractChartDataModel0).getOrderedValues(anyInt());
      doReturn(true).when(abstractChartDataModel0).isAutoScale();
      doReturn(true, false).when(abstractChartDataModel0).isManualScale();
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, 1);
      defaultChartDataModelConstraints0.getMaximumValue();
      Number number0 = defaultChartDataModelConstraints0.getMinimumValue();
      assertEquals((-100.0), number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(comparator0).compare(any() , any());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      TreeSet<Byte> treeSet1 = new TreeSet<Byte>();
      treeSet0.add((String) null);
      Byte byte0 = new Byte((byte)64);
      treeSet1.add(byte0);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(abstractChartDataModel0).getManualMaximumValue();
      doReturn(treeSet0, treeSet1, treeSet0).when(abstractChartDataModel0).getOrderedValues(anyInt());
      doReturn(true, false).when(abstractChartDataModel0).isAutoScale();
      doReturn(true, false, false).when(abstractChartDataModel0).isManualScale();
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, 1);
      defaultChartDataModelConstraints0.getMaximumValue();
      defaultChartDataModelConstraints0.getMaximumValue();
      Number number0 = defaultChartDataModelConstraints0.getMinimumValue();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(comparator0).compare(any() , any());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      TreeSet<Byte> treeSet1 = new TreeSet<Byte>();
      treeSet0.add((String) null);
      Byte byte0 = new Byte((byte)55);
      treeSet1.add(byte0);
      Byte byte1 = new Byte((byte)51);
      treeSet1.add(byte1);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(abstractChartDataModel0).getManualMaximumValue();
      doReturn(treeSet0, treeSet1).when(abstractChartDataModel0).getOrderedValues(anyInt());
      doReturn(true).when(abstractChartDataModel0).isAutoScale();
      doReturn(true, false).when(abstractChartDataModel0).isManualScale();
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, 1);
      defaultChartDataModelConstraints0.getMaximumValue();
      Number number0 = defaultChartDataModelConstraints0.getMaximumValue();
      assertEquals(55.0, number0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(treeSet0).when(abstractChartDataModel0).getOrderedValues(anyInt());
      doReturn(false).when(abstractChartDataModel0).isAutoScale();
      doReturn(false).when(abstractChartDataModel0).isManualScale();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      treeSet0.add(integer0);
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, 0);
      Number number0 = defaultChartDataModelConstraints0.getMaximumValue();
      assertEquals(300, number0);
      assertNotNull(number0);
  }
}

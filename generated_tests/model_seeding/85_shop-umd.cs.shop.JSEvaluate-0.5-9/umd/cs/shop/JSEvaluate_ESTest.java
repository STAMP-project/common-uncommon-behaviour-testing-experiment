/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 21:44:37 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import umd.cs.shop.JSEvaluate;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSEvaluate_ESTest extends JSEvaluate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.addsub((-2177.385F), 1555, (-1243));
      JSTerm jSTerm1 = JSEvaluate.ceil((-1613.15F));
      JSTerm jSTerm2 = JSEvaluate.applyOperator("*", jSTerm1, jSTerm0);
      assertEquals("[3.12122342E9]", jSTerm2.toString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.ceil(3.4028235E38F);
      JSTerm jSTerm1 = JSEvaluate.maxOf(3.4028235E38F, 3.4028235E38F);
      JSTerm jSTerm2 = JSEvaluate.applyOperator("-", jSTerm1, jSTerm0);
      assertEquals("[-2.14748365E9]", jSTerm0.toString());
      assertEquals("[3.4028235E38]", jSTerm2.toString());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor((-2781.6F));
      JSTerm jSTerm1 = JSEvaluate.minOf(2359.0F, 2359.0F);
      JSTerm jSTerm2 = JSEvaluate.applyOperator("+", jSTerm1, jSTerm0);
      assertEquals("[-422.0]", jSTerm2.toString());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.ceil((-388.52F));
      JSTerm jSTerm1 = JSEvaluate.applyOperator("ZQeIDL|R%C[yr|}SK", jSTerm0, jSTerm0);
      JSEvaluate.applyOperator("member", jSTerm0, jSTerm1);
      assertEquals("[-388.0]", jSTerm0.toString());
      assertTrue(jSTerm1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.maxOf((-1487.1335F), 1.0F);
      assertEquals("[1.0]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.minOf(353.5F, (-15.3F));
      assertEquals("[-15.3]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.notequal(1.4E-45F, 0.0F);
      assertEquals("[t]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.equal((-2918.606F), 1159.2914F);
      assertFalse(jSTerm0.isConstant());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.greaterequal(0.0F, (-1994.23F));
      assertEquals("[t]", jSTerm0.toString());
  }
}

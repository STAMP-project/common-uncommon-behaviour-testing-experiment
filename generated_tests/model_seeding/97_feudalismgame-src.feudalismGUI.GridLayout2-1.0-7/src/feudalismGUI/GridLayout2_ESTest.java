/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 05 16:18:50 GMT 2019
 */

package src.feudalismGUI;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.util.Stack;
import javax.swing.CellRendererPane;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JInternalFrame;
import javax.swing.JMenuItem;
import javax.swing.JRootPane;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.JToolBar;
import javax.swing.plaf.metal.MetalComboBoxUI;
import javax.swing.table.JTableHeader;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import src.feudalismGUI.GridLayout2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GridLayout2_ESTest extends GridLayout2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2((-1557), 1);
      JInternalFrame jInternalFrame0 = new JInternalFrame("|T#,c&9", true);
      Dimension dimension0 = gridLayout2_0.minimumLayoutSize(jInternalFrame0);
      assertEquals(67, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      JTable jTable0 = new JTable(stack0, stack0);
      JTableHeader jTableHeader0 = jTable0.getTableHeader();
      GridLayout2 gridLayout2_0 = new GridLayout2(0, 494);
      Dimension dimension0 = gridLayout2_0.minimumLayoutSize(jTableHeader0);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2((-1550), 1);
      JInternalFrame jInternalFrame0 = new JInternalFrame("", false);
      Dimension dimension0 = gridLayout2_0.preferredLayoutSize(jInternalFrame0);
      assertEquals(40, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      JTable jTable0 = new JTable(stack0, stack0);
      JTableHeader jTableHeader0 = jTable0.getTableHeader();
      CellRendererPane cellRendererPane0 = (CellRendererPane)jTableHeader0.getComponent(0);
      GridLayout2 gridLayout2_0 = new GridLayout2(1, (-986), 36, 11);
      Dimension dimension0 = gridLayout2_0.preferredLayoutSize(cellRendererPane0);
      assertEquals((-36), dimension0.width);
      assertEquals(0, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      Stack<Integer> stack0 = new Stack<Integer>();
      JTable jTable0 = new JTable(stack0, stack0);
      Dimension dimension0 = gridLayout2_0.preferredLayoutSize(jTable0);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction0 = new DefaultEditorKit.DefaultKeyTypedAction();
      JButton jButton0 = new JButton(defaultEditorKit_DefaultKeyTypedAction0);
      GridLayout2 gridLayout2_0 = new GridLayout2(34, 10, 34, (-789));
      Dimension dimension0 = gridLayout2_0.preferredLayoutSize(jButton0);
      assertEquals((-26027), dimension0.height);
      assertEquals(0, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      JTable jTable0 = new JTable(stack0, stack0);
      JTableHeader jTableHeader0 = jTable0.getTableHeader();
      CellRendererPane cellRendererPane0 = (CellRendererPane)jTableHeader0.getComponent(0);
      GridLayout2 gridLayout2_0 = new GridLayout2(1, (-986), 36, 11);
      Dimension dimension0 = gridLayout2_0.minimumLayoutSize(cellRendererPane0);
      assertEquals((-36), dimension0.width);
      assertEquals(0, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      Stack<Integer> stack0 = new Stack<Integer>();
      JTable jTable0 = new JTable(stack0, stack0);
      Dimension dimension0 = gridLayout2_0.minimumLayoutSize(jTable0);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(34, 10, 34, (-789));
      JRootPane jRootPane0 = new JRootPane();
      Dimension dimension0 = gridLayout2_0.minimumLayoutSize(jRootPane0);
      assertEquals((-26027), dimension0.height);
      assertEquals(10, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2((-1550), 1);
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction0 = new DefaultEditorKit.DefaultKeyTypedAction();
      JButton jButton0 = new JButton(defaultEditorKit_DefaultKeyTypedAction0);
      gridLayout2_0.setColumns(4328);
      gridLayout2_0.preferredLayoutSize(jButton0);
      gridLayout2_0.preferredLayoutSize(jButton0);
      // Undeclared exception!
      gridLayout2_0.preferredLayoutSize(jButton0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      // Undeclared exception!
      try { 
        gridLayout2_0.preferredLayoutSize((Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator();
      GridLayout2 gridLayout2_0 = new GridLayout2((-1550), (-1550), (-1550), (-2889));
      // Undeclared exception!
      try { 
        gridLayout2_0.preferredLayoutSize(jToolBar_Separator0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRootPane jRootPane0 = new JRootPane();
      GridLayout2 gridLayout2_0 = new GridLayout2();
      gridLayout2_0.setRows((-2289));
      // Undeclared exception!
      try { 
        gridLayout2_0.preferredLayoutSize(jRootPane0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      // Undeclared exception!
      try { 
        gridLayout2_0.minimumLayoutSize((Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRootPane jRootPane0 = new JRootPane();
      GridLayout2 gridLayout2_0 = new GridLayout2((-1401), (-1401));
      // Undeclared exception!
      try { 
        gridLayout2_0.minimumLayoutSize(jRootPane0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRootPane jRootPane0 = new JRootPane();
      GridLayout2 gridLayout2_0 = new GridLayout2();
      gridLayout2_0.setRows((-2216));
      // Undeclared exception!
      try { 
        gridLayout2_0.minimumLayoutSize(jRootPane0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(4405, 4405);
      JMenuItem jMenuItem0 = new JMenuItem((String) null, (Icon) null);
      JSpinner jSpinner0 = new JSpinner();
      jMenuItem0.add((Component) jSpinner0);
      gridLayout2_0.preferredLayoutSize(jSpinner0);
      gridLayout2_0.layoutContainer(jSpinner0);
      // Undeclared exception!
      gridLayout2_0.layoutContainer(jMenuItem0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2((-1550), 1);
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction0 = new DefaultEditorKit.DefaultKeyTypedAction();
      JButton jButton0 = new JButton(defaultEditorKit_DefaultKeyTypedAction0);
      JRootPane jRootPane0 = new JRootPane();
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager0 = metalComboBoxUI0.new MetalComboBoxLayoutManager();
      jRootPane0.setLayout(metalComboBoxUI_MetalComboBoxLayoutManager0);
      jButton0.add((Component) jRootPane0);
      // Undeclared exception!
      try { 
        gridLayout2_0.layoutContainer(jButton0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2((-1876), (-1876), (-1876), (-1876));
      JRootPane jRootPane0 = new JRootPane();
      // Undeclared exception!
      try { 
        gridLayout2_0.layoutContainer(jRootPane0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRootPane jRootPane0 = new JRootPane();
      GridLayout2 gridLayout2_0 = new GridLayout2();
      gridLayout2_0.setRows((-62));
      // Undeclared exception!
      try { 
        gridLayout2_0.layoutContainer(jRootPane0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GridLayout2 gridLayout2_0 = null;
      try {
        gridLayout2_0 = new GridLayout2(0, 0, 4094, 4094);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rows and cols cannot both be zero
         //
         verifyException("java.awt.GridLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GridLayout2 gridLayout2_0 = null;
      try {
        gridLayout2_0 = new GridLayout2(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rows and cols cannot both be zero
         //
         verifyException("java.awt.GridLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRootPane jRootPane0 = new JRootPane();
      GridLayout2 gridLayout2_0 = new GridLayout2();
      Dimension dimension0 = gridLayout2_0.preferredLayoutSize(jRootPane0);
      assertEquals(10, dimension0.width);
      assertEquals(10, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(0, 494);
      JInternalFrame jInternalFrame0 = new JInternalFrame((String) null, false);
      gridLayout2_0.layoutContainer(jInternalFrame0);
      assertEquals(494, gridLayout2_0.getColumns());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRootPane jRootPane0 = new JRootPane();
      GridLayout2 gridLayout2_0 = new GridLayout2();
      jRootPane0.setBounds(0, 0, 1365, 1365);
      gridLayout2_0.layoutContainer(jRootPane0);
      assertFalse(jRootPane0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2((-1550), 1);
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction0 = new DefaultEditorKit.DefaultKeyTypedAction();
      JButton jButton0 = new JButton(defaultEditorKit_DefaultKeyTypedAction0);
      gridLayout2_0.layoutContainer(jButton0);
      assertEquals(1, gridLayout2_0.getColumns());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRootPane jRootPane0 = new JRootPane();
      GridLayout2 gridLayout2_0 = new GridLayout2();
      Dimension dimension0 = gridLayout2_0.minimumLayoutSize(jRootPane0);
      assertEquals(10, dimension0.width);
      assertEquals(10, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      // Undeclared exception!
      try { 
        gridLayout2_0.layoutContainer((Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}

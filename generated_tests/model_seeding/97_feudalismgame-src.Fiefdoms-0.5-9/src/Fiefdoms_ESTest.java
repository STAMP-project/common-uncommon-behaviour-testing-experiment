/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 21:52:36 GMT 2019
 */

package src;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.ListIterator;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import src.Fiefdoms;
import src.Intruders;
import src.Knight;
import src.Mercenaries;
import src.Player;
import src.Retainers;
import src.Vassals;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Fiefdoms_ESTest extends Fiefdoms_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setMagyar((-1), true);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNotNull(fiefdoms0);
      
      Fiefdoms fiefdoms1 = new Fiefdoms();
      assertNull(fiefdoms1.getName());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertNotNull(fiefdoms1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      Fiefdoms fiefdoms2 = new Fiefdoms((ArrayList<String>) null, "magyar", "magyar", 20, false, (ArrayList<String>) null);
      assertEquals("magyar", fiefdoms2.getName());
      assertNull(fiefdoms2.getConqueror());
      assertEquals("magyar", fiefdoms2.getOwner());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals(20, fiefdoms2.getValue());
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNotNull(fiefdoms2);
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      
      fiefdoms2.setOwner("'wIDc,u)9Ht");
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNotSame(fiefdoms2, fiefdoms1);
      assertEquals("magyar", fiefdoms2.getName());
      assertNull(fiefdoms2.getConqueror());
      assertEquals("'wIDc,u)9Ht", fiefdoms2.getOwner());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals(20, fiefdoms2.getValue());
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setPersonalCastles(false);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      
      fiefdoms0.setPersonalCastles(true);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setViking((ArrayList<Intruders>) null);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      
      fiefdoms0.setPeasants(1992);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(1992, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      
      ArrayList<Player> arrayList0 = fiefdoms0.getVassalsList();
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(1992, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      
      int int0 = fiefdoms0.getPeasants();
      assertEquals(0, int0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setRebelliousVassals(0, false);
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      
      Knight knight0 = new Knight();
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getScore());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertNotNull(knight0);
      
      knight0.setName("You cannot buy more than a total of ");
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getScore());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("You cannot buy more than a total of ", knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      
      String string0 = knight0.getName();
      assertEquals("You cannot buy more than a total of ", string0);
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getScore());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("You cannot buy more than a total of ", knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertNotNull(string0);
      
      knight0.setTotalMoney(0);
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getScore());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("You cannot buy more than a total of ", knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      
      knight0.setRank("You cannot buy more than a total of ");
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getScore());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("You cannot buy more than a total of ", knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      
      String string1 = knight0.getName();
      assertEquals("You cannot buy more than a total of ", string1);
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getScore());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("You cannot buy more than a total of ", knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertNotNull(string1);
      
      knight0.addMercenaries(0);
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getScore());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("You cannot buy more than a total of ", knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      
      ArrayList<String> arrayList0 = knight0.conversation;
      assertFalse(arrayList0.contains(string0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add("~");
      assertTrue(arrayList0.contains("~"));
      assertFalse(arrayList0.contains(string0));
      assertTrue(boolean0);
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getScore());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("You cannot buy more than a total of ", knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      Predicate<String> predicate0 = Predicate.isEqual((Object) arrayList0);
      assertTrue(arrayList0.contains("~"));
      assertFalse(arrayList0.contains(string0));
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getScore());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("You cannot buy more than a total of ", knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotNull(predicate0);
      
      Predicate<String> predicate1 = predicate0.or(predicate0);
      assertTrue(arrayList0.contains("~"));
      assertFalse(arrayList0.contains(string0));
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getScore());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("You cannot buy more than a total of ", knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<String> predicate2 = predicate1.and(predicate0);
      assertTrue(arrayList0.contains("~"));
      assertFalse(arrayList0.contains(string0));
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getScore());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("You cannot buy more than a total of ", knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotNull(predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      Predicate<String> predicate3 = predicate2.negate();
      assertTrue(arrayList0.contains("~"));
      assertFalse(arrayList0.contains(string0));
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getScore());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("You cannot buy more than a total of ", knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotNull(predicate3);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      
      boolean boolean1 = arrayList0.removeIf(predicate3);
      assertFalse(arrayList0.contains(string0));
      assertTrue(boolean1);
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getScore());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("You cannot buy more than a total of ", knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertTrue(boolean1 == boolean0);
      
      Fiefdoms fiefdoms1 = new Fiefdoms(arrayList0, "You cannot buy more than a total of ", "qlnhtd[;zx-wk%#r", (-846), false, arrayList0);
      assertFalse(arrayList0.contains("qlnhtd[;zx-wk%#r"));
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals((-846), fiefdoms1.getValue());
      assertEquals("You cannot buy more than a total of ", fiefdoms1.getName());
      assertEquals("qlnhtd[;zx-wk%#r", fiefdoms1.getOwner());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getScore());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("You cannot buy more than a total of ", knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(fiefdoms1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      fiefdoms0.setRebelliousVassals((-1), false);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      
      ArrayList<String> arrayList1 = fiefdoms1.getNeighbors();
      assertFalse(arrayList1.contains("qlnhtd[;zx-wk%#r"));
      assertFalse(arrayList0.contains("qlnhtd[;zx-wk%#r"));
      assertNotSame(fiefdoms1, fiefdoms0);
      assertSame(arrayList1, arrayList0);
      assertSame(arrayList0, arrayList1);
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals((-846), fiefdoms1.getValue());
      assertEquals("You cannot buy more than a total of ", fiefdoms1.getName());
      assertEquals("qlnhtd[;zx-wk%#r", fiefdoms1.getOwner());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getScore());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("You cannot buy more than a total of ", knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      String string2 = fiefdoms0.getName();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(string2);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      
      ArrayList<String> arrayList2 = fiefdoms1.getNeighbors();
      assertFalse(arrayList2.contains("qlnhtd[;zx-wk%#r"));
      assertFalse(arrayList0.contains("qlnhtd[;zx-wk%#r"));
      assertNotSame(fiefdoms1, fiefdoms0);
      assertSame(arrayList2, arrayList0);
      assertSame(arrayList2, arrayList1);
      assertSame(arrayList0, arrayList2);
      assertSame(arrayList0, arrayList1);
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals((-846), fiefdoms1.getValue());
      assertEquals("You cannot buy more than a total of ", fiefdoms1.getName());
      assertEquals("qlnhtd[;zx-wk%#r", fiefdoms1.getOwner());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getScore());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("You cannot buy more than a total of ", knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList2);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      float[] floatArray0 = fiefdoms0.getShaderColor();
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertEquals(2, floatArray0.length);
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNotNull(floatArray0);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms((ArrayList<String>) null, " castles for ", " castles for ", 2, false, (ArrayList<String>) null);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(2, fiefdoms0.getValue());
      assertEquals(" castles for ", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(" castles for ", fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 2;
      fiefdoms0.shaderColor = null;
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(2, fiefdoms0.getValue());
      assertEquals(" castles for ", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(" castles for ", fiefdoms0.getOwner());
      
      floatArray0[3] = (float) 2;
      fiefdoms0.setPersonalCastles(false);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(2, fiefdoms0.getValue());
      assertEquals(" castles for ", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertEquals(" castles for ", fiefdoms0.getOwner());
      
      fiefdoms0.setInvaderType((ArrayList<String>) null);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(2, fiefdoms0.getValue());
      assertEquals(" castles for ", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertEquals(" castles for ", fiefdoms0.getOwner());
      
      fiefdoms0.setShaderColor((float[]) null);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(2, fiefdoms0.getValue());
      assertEquals(" castles for ", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertEquals(" castles for ", fiefdoms0.getOwner());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMagyar();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(2, fiefdoms0.getValue());
      assertEquals(" castles for ", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertEquals(" castles for ", fiefdoms0.getOwner());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      fiefdoms0.setMuslim(arrayList0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(2, fiefdoms0.getValue());
      assertEquals(" castles for ", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertEquals(" castles for ", fiefdoms0.getOwner());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      fiefdoms0.setFiefdomCastles(false);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(2, fiefdoms0.getValue());
      assertEquals(" castles for ", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertEquals(" castles for ", fiefdoms0.getOwner());
      
      floatArray0[4] = (float) 2;
      Intruders intruders0 = new Intruders();
      assertNull(intruders0.getType());
      assertNull(intruders0.getRank());
      assertNull(intruders0.getLocation());
      assertNotNull(intruders0);
      
      boolean boolean0 = arrayList0.add(intruders0);
      assertTrue(arrayList0.contains(intruders0));
      assertTrue(boolean0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(2, fiefdoms0.getValue());
      assertEquals(" castles for ", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertEquals(" castles for ", fiefdoms0.getOwner());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(intruders0.getType());
      assertNull(intruders0.getRank());
      assertNull(intruders0.getLocation());
      
      fiefdoms0.setShaderColor(floatArray0);
      assertArrayEquals(new float[] {2.0F, 2.0F, 2.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(2, fiefdoms0.getValue());
      assertEquals(" castles for ", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertEquals(" castles for ", fiefdoms0.getOwner());
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getMuslim();
      assertTrue(arrayList1.contains(intruders0));
      assertSame(arrayList1, arrayList0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(2, fiefdoms0.getValue());
      assertEquals(" castles for ", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertEquals(" castles for ", fiefdoms0.getOwner());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      fiefdoms0.setRebelliousVassals(2, false);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(2, fiefdoms0.getValue());
      assertEquals(" castles for ", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertEquals(" castles for ", fiefdoms0.getOwner());
      
      fiefdoms0.setViking(arrayList0);
      assertTrue(arrayList0.contains(intruders0));
      assertSame(arrayList0, arrayList1);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(2, fiefdoms0.getValue());
      assertEquals(" castles for ", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertEquals(" castles for ", fiefdoms0.getOwner());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setMagyar(1266, false);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setMagyar(5, false);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      
      fiefdoms0.setMuslim(5, false);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.loyalVassals;
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      fiefdoms0.setRebelliousVassals(arrayList0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Intruders intruders0 = new Intruders();
      assertNull(intruders0.getLocation());
      assertNull(intruders0.getType());
      assertNull(intruders0.getRank());
      assertNotNull(intruders0);
      
      int int0 = fiefdoms0.getFiefdomCastles();
      assertEquals(0, int0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      
      fiefdoms0.setName("");
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      
      String string0 = fiefdoms0.getName();
      assertEquals("", string0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNotNull(fiefdoms0);
      
      ArrayList<String> arrayList0 = fiefdoms0.getInvaderType();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(arrayList0);
      
      Fiefdoms fiefdoms1 = new Fiefdoms((ArrayList<String>) null, "src.Knight", ">@`ZDfL10BaS7kC)5NG", 2959, false, (ArrayList<String>) null);
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(">@`ZDfL10BaS7kC)5NG", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(2959, fiefdoms1.getValue());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals("src.Knight", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNotNull(fiefdoms1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      fiefdoms1.setFiefdomCastles(2959);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(2959, fiefdoms1.getFiefdomCastles());
      assertEquals(">@`ZDfL10BaS7kC)5NG", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(2959, fiefdoms1.getValue());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals("src.Knight", fiefdoms1.getName());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      fiefdoms1.setMuslim(2959, false);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(2959, fiefdoms1.getFiefdomCastles());
      assertEquals(">@`ZDfL10BaS7kC)5NG", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(2959, fiefdoms1.getValue());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals("src.Knight", fiefdoms1.getName());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      fiefdoms1.setOwner("%EnjM6T3e)T_f>b;:");
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(2959, fiefdoms1.getFiefdomCastles());
      assertEquals("%EnjM6T3e)T_f>b;:", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(2959, fiefdoms1.getValue());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals("src.Knight", fiefdoms1.getName());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getMuslim();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      
      fiefdoms0.setMagyar(arrayList1);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      
      ArrayList<String> arrayList2 = new ArrayList<String>();
      assertFalse(arrayList2.contains("%EnjM6T3e)T_f>b;:"));
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertNotNull(arrayList2);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Fiefdoms fiefdoms2 = new Fiefdoms(arrayList2, "duke", "src.Knight", 2959, true, arrayList2);
      assertFalse(arrayList2.contains("%EnjM6T3e)T_f>b;:"));
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertEquals("duke", fiefdoms2.getName());
      assertEquals(2959, fiefdoms2.getValue());
      assertEquals("src.Knight", fiefdoms2.getOwner());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertTrue(fiefdoms2.isKingdom());
      assertNull(fiefdoms2.getConqueror());
      assertNotNull(fiefdoms2);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      
      ArrayList<Vassals> arrayList3 = fiefdoms0.getLoyalVassals();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms0, fiefdoms2);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, arrayList3.size());
      assertTrue(arrayList3.isEmpty());
      assertNotNull(arrayList3);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      
      fiefdoms0.setLoyalVassals(fiefdoms2.loyalVassals);
      assertFalse(arrayList2.contains("%EnjM6T3e)T_f>b;:"));
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms0, fiefdoms2);
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertEquals("duke", fiefdoms2.getName());
      assertEquals(2959, fiefdoms2.getValue());
      assertEquals("src.Knight", fiefdoms2.getOwner());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertTrue(fiefdoms2.isKingdom());
      assertNull(fiefdoms2.getConqueror());
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      
      fiefdoms1.setLoyalVassals(2959, true);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotSame(fiefdoms1, fiefdoms2);
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(2959, fiefdoms1.getFiefdomCastles());
      assertEquals("%EnjM6T3e)T_f>b;:", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(2959, fiefdoms1.getValue());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals("src.Knight", fiefdoms1.getName());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(fiefdoms1.equals((Object)fiefdoms2));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setKingdom(true);
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setName((String) null);
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      
      Knight knight0 = new Knight((String) null, (String) null, "}'1j9}5BcdI.z:");
      assertEquals(0, knight0.getTotalMoney());
      assertNull(knight0.getRank());
      assertEquals(0, knight0.getRebellionCounter());
      assertFalse(knight0.isDead());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("}'1j9}5BcdI.z:", knight0.getPassword());
      assertFalse(knight0.getDead());
      assertNotNull(knight0);
      
      String string0 = knight0.getLocation();
      assertEquals("Ile-De-France", string0);
      assertEquals(0, knight0.getTotalMoney());
      assertNull(knight0.getRank());
      assertEquals(0, knight0.getRebellionCounter());
      assertFalse(knight0.isDead());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("}'1j9}5BcdI.z:", knight0.getPassword());
      assertFalse(knight0.getDead());
      assertNotNull(string0);
      
      int int0 = knight0.getTotalMoney();
      assertEquals(0, int0);
      assertEquals(0, knight0.getTotalMoney());
      assertNull(knight0.getRank());
      assertEquals(0, knight0.getRebellionCounter());
      assertFalse(knight0.isDead());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("}'1j9}5BcdI.z:", knight0.getPassword());
      assertFalse(knight0.getDead());
      
      knight0.setTotalMoney(0);
      assertEquals(0, knight0.getTotalMoney());
      assertNull(knight0.getRank());
      assertEquals(0, knight0.getRebellionCounter());
      assertFalse(knight0.isDead());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("}'1j9}5BcdI.z:", knight0.getPassword());
      assertFalse(knight0.getDead());
      
      String string1 = knight0.getName();
      assertEquals(0, knight0.getTotalMoney());
      assertNull(knight0.getRank());
      assertEquals(0, knight0.getRebellionCounter());
      assertFalse(knight0.isDead());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("}'1j9}5BcdI.z:", knight0.getPassword());
      assertFalse(knight0.getDead());
      assertNull(string1);
      
      Knight knight1 = new Knight();
      assertNull(knight1.getPassword());
      assertFalse(knight1.isDead());
      assertEquals(0, knight1.getKill());
      assertEquals("Ile-De-France", knight1.getLocation());
      assertEquals("", knight1.getOrder());
      assertEquals(0, knight1.getHitsCounter());
      assertNull(knight1.getName());
      assertEquals(0, knight1.getKills());
      assertEquals(0, knight1.getWounds());
      assertEquals(0, knight1.getTotalMoney());
      assertEquals(0, knight1.getRebellionCounter());
      assertFalse(knight1.getDead());
      assertEquals("knight", knight1.getRank());
      assertEquals(0, knight1.getwound());
      assertEquals(0, knight1.getScore());
      assertNotNull(knight1);
      assertFalse(knight1.equals((Object)knight0));
      
      String string2 = knight1.getRank();
      assertNotSame(knight1, knight0);
      assertEquals("knight", string2);
      assertNull(knight1.getPassword());
      assertFalse(knight1.isDead());
      assertEquals(0, knight1.getKill());
      assertEquals("Ile-De-France", knight1.getLocation());
      assertEquals("", knight1.getOrder());
      assertEquals(0, knight1.getHitsCounter());
      assertNull(knight1.getName());
      assertEquals(0, knight1.getKills());
      assertEquals(0, knight1.getWounds());
      assertEquals(0, knight1.getTotalMoney());
      assertEquals(0, knight1.getRebellionCounter());
      assertFalse(knight1.getDead());
      assertEquals("knight", knight1.getRank());
      assertEquals(0, knight1.getwound());
      assertEquals(0, knight1.getScore());
      assertNotNull(string2);
      assertFalse(knight1.equals((Object)knight0));
      assertFalse(string2.equals((Object)string0));
      
      Knight knight2 = new Knight();
      assertEquals(0, knight2.getwound());
      assertEquals("", knight2.getOrder());
      assertNull(knight2.getName());
      assertEquals("Ile-De-France", knight2.getLocation());
      assertEquals(0, knight2.getWounds());
      assertEquals(0, knight2.getRebellionCounter());
      assertEquals(0, knight2.getKills());
      assertEquals(0, knight2.getKill());
      assertEquals(0, knight2.getHitsCounter());
      assertFalse(knight2.isDead());
      assertNull(knight2.getPassword());
      assertEquals(0, knight2.getScore());
      assertEquals("knight", knight2.getRank());
      assertEquals(0, knight2.getTotalMoney());
      assertFalse(knight2.getDead());
      assertNotNull(knight2);
      assertFalse(knight2.equals((Object)knight1));
      assertFalse(knight2.equals((Object)knight0));
      
      boolean boolean0 = knight0.isFiefdomMine("king");
      assertNotSame(knight0, knight2);
      assertNotSame(knight0, knight1);
      assertFalse(boolean0);
      assertEquals(0, knight0.getTotalMoney());
      assertNull(knight0.getRank());
      assertEquals(0, knight0.getRebellionCounter());
      assertFalse(knight0.isDead());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("}'1j9}5BcdI.z:", knight0.getPassword());
      assertFalse(knight0.getDead());
      assertFalse(knight0.equals((Object)knight2));
      assertFalse(knight0.equals((Object)knight1));
      
      knight2.setTotalMoney(0);
      assertNotSame(knight2, knight1);
      assertNotSame(knight2, knight0);
      assertEquals(0, knight2.getwound());
      assertEquals("", knight2.getOrder());
      assertNull(knight2.getName());
      assertEquals("Ile-De-France", knight2.getLocation());
      assertEquals(0, knight2.getWounds());
      assertEquals(0, knight2.getRebellionCounter());
      assertEquals(0, knight2.getKills());
      assertEquals(0, knight2.getKill());
      assertEquals(0, knight2.getHitsCounter());
      assertFalse(knight2.isDead());
      assertNull(knight2.getPassword());
      assertEquals(0, knight2.getScore());
      assertEquals("knight", knight2.getRank());
      assertEquals(0, knight2.getTotalMoney());
      assertFalse(knight2.getDead());
      assertFalse(knight2.equals((Object)knight1));
      assertFalse(knight2.equals((Object)knight0));
      
      ArrayList<String> arrayList0 = knight2.getConversation();
      assertFalse(arrayList0.contains(string2));
      assertNotSame(knight2, knight1);
      assertNotSame(knight2, knight0);
      assertEquals(0, knight2.getwound());
      assertEquals("", knight2.getOrder());
      assertNull(knight2.getName());
      assertEquals("Ile-De-France", knight2.getLocation());
      assertEquals(0, knight2.getWounds());
      assertEquals(0, knight2.getRebellionCounter());
      assertEquals(0, knight2.getKills());
      assertEquals(0, knight2.getKill());
      assertEquals(0, knight2.getHitsCounter());
      assertFalse(knight2.isDead());
      assertNull(knight2.getPassword());
      assertEquals(0, knight2.getScore());
      assertEquals("knight", knight2.getRank());
      assertEquals(0, knight2.getTotalMoney());
      assertFalse(knight2.getDead());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(knight2.equals((Object)knight1));
      assertFalse(knight2.equals((Object)knight0));
      
      Fiefdoms fiefdoms1 = new Fiefdoms(arrayList0, "Ile-De-France", "dlVUH0HfB&]m:b$h", (-115), true, arrayList0);
      assertFalse(arrayList0.contains("dlVUH0HfB&]m:b$h"));
      assertEquals(0, knight2.getwound());
      assertEquals("", knight2.getOrder());
      assertNull(knight2.getName());
      assertEquals("Ile-De-France", knight2.getLocation());
      assertEquals(0, knight2.getWounds());
      assertEquals(0, knight2.getRebellionCounter());
      assertEquals(0, knight2.getKills());
      assertEquals(0, knight2.getKill());
      assertEquals(0, knight2.getHitsCounter());
      assertFalse(knight2.isDead());
      assertNull(knight2.getPassword());
      assertEquals(0, knight2.getScore());
      assertEquals("knight", knight2.getRank());
      assertEquals(0, knight2.getTotalMoney());
      assertFalse(knight2.getDead());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals("dlVUH0HfB&]m:b$h", fiefdoms1.getOwner());
      assertEquals((-115), fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("Ile-De-France", fiefdoms1.getName());
      assertNotNull(fiefdoms1);
      assertFalse(knight2.equals((Object)knight1));
      assertFalse(knight2.equals((Object)knight0));
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      ArrayList<Vassals> arrayList1 = fiefdoms1.getRebelliousVassals();
      assertFalse(arrayList0.contains("dlVUH0HfB&]m:b$h"));
      assertNotSame(knight2, knight1);
      assertNotSame(knight2, knight0);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals(0, knight2.getwound());
      assertEquals("", knight2.getOrder());
      assertNull(knight2.getName());
      assertEquals("Ile-De-France", knight2.getLocation());
      assertEquals(0, knight2.getWounds());
      assertEquals(0, knight2.getRebellionCounter());
      assertEquals(0, knight2.getKills());
      assertEquals(0, knight2.getKill());
      assertEquals(0, knight2.getHitsCounter());
      assertFalse(knight2.isDead());
      assertNull(knight2.getPassword());
      assertEquals(0, knight2.getScore());
      assertEquals("knight", knight2.getRank());
      assertEquals(0, knight2.getTotalMoney());
      assertFalse(knight2.getDead());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals("dlVUH0HfB&]m:b$h", fiefdoms1.getOwner());
      assertEquals((-115), fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("Ile-De-France", fiefdoms1.getName());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      assertFalse(knight2.equals((Object)knight1));
      assertFalse(knight2.equals((Object)knight0));
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      fiefdoms0.setRebelliousVassals(arrayList1);
      assertFalse(arrayList0.contains("dlVUH0HfB&]m:b$h"));
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(knight2, knight1);
      assertNotSame(knight2, knight0);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, knight2.getwound());
      assertEquals("", knight2.getOrder());
      assertNull(knight2.getName());
      assertEquals("Ile-De-France", knight2.getLocation());
      assertEquals(0, knight2.getWounds());
      assertEquals(0, knight2.getRebellionCounter());
      assertEquals(0, knight2.getKills());
      assertEquals(0, knight2.getKill());
      assertEquals(0, knight2.getHitsCounter());
      assertFalse(knight2.isDead());
      assertNull(knight2.getPassword());
      assertEquals(0, knight2.getScore());
      assertEquals("knight", knight2.getRank());
      assertEquals(0, knight2.getTotalMoney());
      assertFalse(knight2.getDead());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals("dlVUH0HfB&]m:b$h", fiefdoms1.getOwner());
      assertEquals((-115), fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("Ile-De-France", fiefdoms1.getName());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(knight2.equals((Object)knight1));
      assertFalse(knight2.equals((Object)knight0));
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setViking(0, false);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setKingdom(true);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setOwner("");
      assertEquals("", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMuslim();
      assertEquals("", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      fiefdoms0.setMagyar(arrayList0);
      assertEquals("", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertFalse(arrayList1.contains(""));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Fiefdoms fiefdoms1 = new Fiefdoms(arrayList1, "", "", 4586, true, arrayList1);
      assertFalse(arrayList1.contains(""));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals("", fiefdoms1.getName());
      assertEquals("", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(4586, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertTrue(fiefdoms1.isKingdom());
      assertNotNull(fiefdoms1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      ArrayList<Vassals> arrayList2 = fiefdoms1.getLoyalVassals();
      assertFalse(arrayList1.contains(""));
      assertNotSame(fiefdoms1, fiefdoms0);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals("", fiefdoms1.getName());
      assertEquals("", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(4586, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertNotNull(arrayList2);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      fiefdoms0.setLoyalVassals(arrayList2);
      assertFalse(arrayList1.contains(""));
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals("", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals("", fiefdoms1.getName());
      assertEquals("", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(4586, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setOwner("");
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      
      fiefdoms0.setOwner((String) null);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setPeasants(1);
      assertEquals(1, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Mercenaries mercenaries0 = new Mercenaries();
      assertNull(mercenaries0.getLord());
      assertEquals("vassal", mercenaries0.getRank());
      assertNull(mercenaries0.getLocation());
      assertNull(mercenaries0.getFiefdom());
      assertNotNull(mercenaries0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) mercenaries0);
      assertNull(mercenaries0.getLord());
      assertEquals("vassal", mercenaries0.getRank());
      assertNull(mercenaries0.getLocation());
      assertNull(mercenaries0.getFiefdom());
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertNull(mercenaries0.getLord());
      assertEquals("vassal", mercenaries0.getRank());
      assertNull(mercenaries0.getLocation());
      assertNull(mercenaries0.getFiefdom());
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      boolean boolean0 = arrayList0.removeIf(predicate1);
      assertFalse(boolean0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(mercenaries0.getLord());
      assertEquals("vassal", mercenaries0.getRank());
      assertNull(mercenaries0.getLocation());
      assertNull(mercenaries0.getFiefdom());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      fiefdoms0.setInvaderType(arrayList0);
      assertEquals(1, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string0 = fiefdoms0.getConqueror();
      assertEquals(1, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.buyPersonalCastles(0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      
      fiefdoms0.setRebelliousVassals(0, true);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      
      fiefdoms0.setMuslim(723, true);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      
      fiefdoms0.setMuslim(1, false);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      
      fiefdoms0.setLoyalVassals((-663), true);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNotNull(fiefdoms0);
      
      byte[] byteArray0 = fiefdoms0.getSelectioncolor();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setSelectioncolor((byte[]) null);
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getLoyalVassals();
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ArrayList<Player> arrayList1 = fiefdoms0.getVassalsList();
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(arrayList1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      
      ArrayList<Intruders> arrayList0 = new ArrayList<Intruders>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      fiefdoms0.setMagyar(arrayList0);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.buyPersonalCastles(2);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMuslim();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms((ArrayList<String>) null, "_HUAGXDa'I#eG", "muslim", 599, true, (ArrayList<String>) null);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(599, fiefdoms0.getValue());
      assertEquals("_HUAGXDa'I#eG", fiefdoms0.getName());
      assertEquals("muslim", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNotNull(fiefdoms0);
      
      float[] floatArray0 = fiefdoms0.getShaderColor();
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(599, fiefdoms0.getValue());
      assertEquals("_HUAGXDa'I#eG", fiefdoms0.getName());
      assertEquals("muslim", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      boolean boolean0 = fiefdoms0.loyalVassals.add((Vassals) null);
      assertTrue(boolean0);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setOwner("Q\"t");
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("Q\"t", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setConqueror(" #E");
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(" #E", fiefdoms0.getConqueror());
      assertEquals("Q\"t", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      byte[] byteArray0 = fiefdoms0.selectioncolor;
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArray0);
      
      int int0 = fiefdoms0.getPeasants();
      assertEquals(0, int0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(" #E", fiefdoms0.getConqueror());
      assertEquals("Q\"t", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      byte[] byteArray1 = fiefdoms0.getSelectioncolor();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(3, byteArray1.length);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(" #E", fiefdoms0.getConqueror());
      assertEquals("Q\"t", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(byteArray1);
      
      fiefdoms0.setOwner(".");
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(" #E", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(".", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setRebelliousVassals(0, true);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(" #E", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(".", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setRebelliousVassals(1749, true);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(" #E", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(".", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getRebelliousVassals();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(" #E", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(".", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setKingdom(false);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setLoyalVassals((-1), false);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add("");
      assertTrue(arrayList0.contains(""));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, (String) null, (String) null, (-627), false, arrayList0);
      assertTrue(arrayList0.contains(""));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-627), fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      boolean boolean1 = true;
      fiefdoms0.setViking((-627), true);
      assertTrue(arrayList0.contains(""));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-627), fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      Knight knight0 = new Knight();
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertNull(knight0.getName());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getwound());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertFalse(knight0.getDead());
      assertNotNull(knight0);
      
      knight0.setName("kY`2#a\">rbvsV/");
      assertEquals("kY`2#a\">rbvsV/", knight0.getName());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getwound());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertFalse(knight0.getDead());
      
      String string0 = knight0.getName();
      assertEquals("kY`2#a\">rbvsV/", string0);
      assertEquals("kY`2#a\">rbvsV/", knight0.getName());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getwound());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertFalse(knight0.getDead());
      assertNotNull(string0);
      
      String string1 = knight0.getPassword();
      assertEquals("kY`2#a\">rbvsV/", knight0.getName());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getwound());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertFalse(knight0.getDead());
      assertNull(string1);
      
      ArrayList<Vassals> arrayList1 = knight0.getMovingVassals();
      assertEquals("kY`2#a\">rbvsV/", knight0.getName());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getwound());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertFalse(knight0.getDead());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      fiefdoms0.setLoyalVassals(arrayList1);
      assertTrue(arrayList0.contains(""));
      assertFalse(arrayList0.contains(string0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-627), fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals("kY`2#a\">rbvsV/", knight0.getName());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getwound());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertFalse(knight0.getDead());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      fiefdoms0.setPersonalCastles((-627));
      assertTrue(arrayList0.contains(""));
      assertFalse(arrayList0.contains(string0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-627), fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-627), fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      int int0 = (-2986);
      // Undeclared exception!
      try { 
        arrayList0.set((-3854), "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setMagyar((ArrayList<Intruders>) null);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setFiefdomCastles(true);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      fiefdoms0.setConqueror("_qFllSH0BPUHpx:tcI:");
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("_qFllSH0BPUHpx:tcI:", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getViking();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("_qFllSH0BPUHpx:tcI:", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Iterator<Intruders> iterator0 = arrayList0.iterator();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("_qFllSH0BPUHpx:tcI:", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(iterator0);
      
      Iterator<Intruders> iterator1 = arrayList0.iterator();
      assertNotSame(iterator1, iterator0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("_qFllSH0BPUHpx:tcI:", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(iterator1);
      assertFalse(iterator1.equals((Object)iterator0));
      
      fiefdoms0.setViking(arrayList0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("_qFllSH0BPUHpx:tcI:", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      fiefdoms0.setRebelliousVassals(435, true);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("_qFllSH0BPUHpx:tcI:", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      fiefdoms0.setRebelliousVassals(435, false);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("_qFllSH0BPUHpx:tcI:", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_qFllSH0BPUHpx:tcI:");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.getRebelliousVassals();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("_qFllSH0BPUHpx:tcI:", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      int int0 = fiefdoms0.getPeasants();
      assertEquals(0, int0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("_qFllSH0BPUHpx:tcI:", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      
      ArrayList<Vassals> arrayList2 = fiefdoms0.getRebelliousVassals();
      assertSame(arrayList2, arrayList1);
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("_qFllSH0BPUHpx:tcI:", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(arrayList2);
      
      ArrayList<Intruders> arrayList3 = fiefdoms0.getMuslim();
      assertNotSame(arrayList3, arrayList0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("_qFllSH0BPUHpx:tcI:", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertTrue(arrayList3.isEmpty());
      assertEquals(0, arrayList3.size());
      assertNotNull(arrayList3);
      assertTrue(arrayList3.equals((Object)arrayList0));
      
      ArrayList<String> arrayList4 = fiefdoms0.getNeighbors();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("_qFllSH0BPUHpx:tcI:", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(arrayList4);
      
      ArrayList<Intruders> arrayList5 = fiefdoms0.getViking();
      assertNotSame(arrayList5, arrayList3);
      assertSame(arrayList5, arrayList0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("_qFllSH0BPUHpx:tcI:", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, arrayList5.size());
      assertTrue(arrayList5.isEmpty());
      assertNotNull(arrayList5);
      assertTrue(arrayList5.equals((Object)arrayList3));
      
      ArrayList<Intruders> arrayList6 = fiefdoms0.getMagyar();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("_qFllSH0BPUHpx:tcI:", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(arrayList6);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setKingdom(true);
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      
      fiefdoms0.setPeasants(0);
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      
      fiefdoms0.setPeasants(0);
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      
      float[] floatArray0 = fiefdoms0.getShaderColor();
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(floatArray0);
      
      fiefdoms0.setFiefdomCastles(true);
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-67);
      fiefdoms0.setSelectioncolor(byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-24), (byte) (-1), (byte)2, (byte)0, (byte) (-67)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getViking();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      fiefdoms0.setViking(arrayList0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayList<Player> arrayList1 = fiefdoms0.getVassalsList();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(arrayList1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2441.617F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1.0F);
      fiefdoms0.setShaderColor(floatArray0);
      assertArrayEquals(new float[] {(-2441.617F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getRebelliousVassals();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.getLoyalVassals();
      assertNotSame(arrayList1, arrayList0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      Fiefdoms fiefdoms1 = new Fiefdoms();
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertNotNull(fiefdoms1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      ArrayList<Intruders> arrayList2 = fiefdoms1.getMuslim();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertNotNull(arrayList2);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      Fiefdoms fiefdoms2 = new Fiefdoms();
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getConqueror());
      assertNull(fiefdoms2.getOwner());
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getValue());
      assertNotNull(fiefdoms2);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      
      fiefdoms0.setViking(0, true);
      assertNotSame(fiefdoms0, fiefdoms2);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      
      ArrayList<Intruders> arrayList3 = fiefdoms2.getMagyar();
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNotSame(arrayList3, arrayList2);
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getConqueror());
      assertNull(fiefdoms2.getOwner());
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getValue());
      assertTrue(arrayList3.isEmpty());
      assertEquals(0, arrayList3.size());
      assertNotNull(arrayList3);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertTrue(arrayList3.equals((Object)arrayList2));
      
      ArrayList<Intruders> arrayList4 = fiefdoms0.getMagyar();
      assertNotSame(fiefdoms0, fiefdoms2);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(arrayList4, arrayList2);
      assertNotSame(arrayList4, arrayList3);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, arrayList4.size());
      assertTrue(arrayList4.isEmpty());
      assertNotNull(arrayList4);
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertTrue(arrayList4.equals((Object)arrayList3));
      assertTrue(arrayList4.equals((Object)arrayList2));
      
      ArrayList<Intruders> arrayList5 = fiefdoms1.getMagyar();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotSame(fiefdoms1, fiefdoms2);
      assertNotSame(arrayList5, arrayList3);
      assertNotSame(arrayList5, arrayList2);
      assertNotSame(arrayList5, arrayList4);
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertTrue(arrayList5.isEmpty());
      assertEquals(0, arrayList5.size());
      assertNotNull(arrayList5);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(fiefdoms1.equals((Object)fiefdoms2));
      assertTrue(arrayList5.equals((Object)arrayList2));
      assertTrue(arrayList5.equals((Object)arrayList4));
      assertTrue(arrayList5.equals((Object)arrayList3));
      
      Fiefdoms fiefdoms3 = new Fiefdoms();
      assertEquals(0, fiefdoms3.getValue());
      assertNull(fiefdoms3.getName());
      assertEquals(0, fiefdoms3.getPersonalCastles());
      assertEquals(0, fiefdoms3.getPeasants());
      assertEquals(0, fiefdoms3.getFiefdomCastles());
      assertNull(fiefdoms3.getOwner());
      assertNull(fiefdoms3.getConqueror());
      assertFalse(fiefdoms3.isKingdom());
      assertNotNull(fiefdoms3);
      assertFalse(fiefdoms3.equals((Object)fiefdoms0));
      assertFalse(fiefdoms3.equals((Object)fiefdoms2));
      assertFalse(fiefdoms3.equals((Object)fiefdoms1));
      
      String string0 = fiefdoms2.getName();
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms3);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getConqueror());
      assertNull(fiefdoms2.getOwner());
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getValue());
      assertNull(string0);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms3));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      
      fiefdoms3.setOwner("");
      assertNotSame(fiefdoms3, fiefdoms0);
      assertNotSame(fiefdoms3, fiefdoms2);
      assertNotSame(fiefdoms3, fiefdoms1);
      assertEquals(0, fiefdoms3.getValue());
      assertNull(fiefdoms3.getName());
      assertEquals(0, fiefdoms3.getPersonalCastles());
      assertEquals(0, fiefdoms3.getPeasants());
      assertEquals(0, fiefdoms3.getFiefdomCastles());
      assertEquals("", fiefdoms3.getOwner());
      assertNull(fiefdoms3.getConqueror());
      assertFalse(fiefdoms3.isKingdom());
      assertFalse(fiefdoms3.equals((Object)fiefdoms0));
      assertFalse(fiefdoms3.equals((Object)fiefdoms2));
      assertFalse(fiefdoms3.equals((Object)fiefdoms1));
      
      ArrayList<String> arrayList6 = fiefdoms3.getInvaderType();
      assertNotSame(fiefdoms3, fiefdoms0);
      assertNotSame(fiefdoms3, fiefdoms2);
      assertNotSame(fiefdoms3, fiefdoms1);
      assertEquals(0, fiefdoms3.getValue());
      assertNull(fiefdoms3.getName());
      assertEquals(0, fiefdoms3.getPersonalCastles());
      assertEquals(0, fiefdoms3.getPeasants());
      assertEquals(0, fiefdoms3.getFiefdomCastles());
      assertEquals("", fiefdoms3.getOwner());
      assertNull(fiefdoms3.getConqueror());
      assertFalse(fiefdoms3.isKingdom());
      assertNull(arrayList6);
      assertFalse(fiefdoms3.equals((Object)fiefdoms0));
      assertFalse(fiefdoms3.equals((Object)fiefdoms2));
      assertFalse(fiefdoms3.equals((Object)fiefdoms1));
      
      Fiefdoms fiefdoms4 = new Fiefdoms((ArrayList<String>) null, (String) null, "muslim", 0, true, (ArrayList<String>) null);
      assertNull(fiefdoms4.getConqueror());
      assertEquals(0, fiefdoms4.getPersonalCastles());
      assertEquals(0, fiefdoms4.getFiefdomCastles());
      assertEquals("muslim", fiefdoms4.getOwner());
      assertEquals(0, fiefdoms4.getPeasants());
      assertNull(fiefdoms4.getName());
      assertEquals(0, fiefdoms4.getValue());
      assertTrue(fiefdoms4.isKingdom());
      assertNotNull(fiefdoms4);
      assertFalse(fiefdoms4.equals((Object)fiefdoms3));
      assertFalse(fiefdoms4.equals((Object)fiefdoms0));
      assertFalse(fiefdoms4.equals((Object)fiefdoms2));
      assertFalse(fiefdoms4.equals((Object)fiefdoms1));
      
      fiefdoms4.setValue(0);
      assertNotSame(fiefdoms4, fiefdoms3);
      assertNotSame(fiefdoms4, fiefdoms0);
      assertNotSame(fiefdoms4, fiefdoms2);
      assertNotSame(fiefdoms4, fiefdoms1);
      assertNull(fiefdoms4.getConqueror());
      assertEquals(0, fiefdoms4.getPersonalCastles());
      assertEquals(0, fiefdoms4.getFiefdomCastles());
      assertEquals("muslim", fiefdoms4.getOwner());
      assertEquals(0, fiefdoms4.getPeasants());
      assertNull(fiefdoms4.getName());
      assertEquals(0, fiefdoms4.getValue());
      assertTrue(fiefdoms4.isKingdom());
      assertFalse(fiefdoms4.equals((Object)fiefdoms3));
      assertFalse(fiefdoms4.equals((Object)fiefdoms0));
      assertFalse(fiefdoms4.equals((Object)fiefdoms2));
      assertFalse(fiefdoms4.equals((Object)fiefdoms1));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setFiefdomCastles(1224);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(1224, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      
      float[] floatArray0 = fiefdoms0.getShaderColor();
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(1224, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMagyar();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getMagyar();
      assertSame(arrayList1, arrayList0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      ArrayList<Intruders> arrayList2 = fiefdoms0.getMuslim();
      assertNotSame(arrayList2, arrayList1);
      assertNotSame(arrayList2, arrayList0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertNotNull(arrayList2);
      assertTrue(arrayList2.equals((Object)arrayList1));
      assertTrue(arrayList2.equals((Object)arrayList0));
      
      ArrayList<Intruders> arrayList3 = fiefdoms0.getMuslim();
      assertNotSame(arrayList3, arrayList0);
      assertSame(arrayList3, arrayList2);
      assertNotSame(arrayList3, arrayList1);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, arrayList3.size());
      assertTrue(arrayList3.isEmpty());
      assertNotNull(arrayList3);
      assertTrue(arrayList3.equals((Object)arrayList1));
      assertTrue(arrayList3.equals((Object)arrayList0));
      
      int int0 = fiefdoms0.getFiefdomCastles();
      assertEquals(0, int0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      
      fiefdoms0.setFiefdomCastles(false);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      
      int int1 = fiefdoms0.getFiefdomCastles();
      assertEquals((-1), int1);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(int1 == int0);
      
      ArrayList<String> arrayList4 = fiefdoms0.getNeighbors();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertNull(arrayList4);
      
      Fiefdoms fiefdoms1 = new Fiefdoms((ArrayList<String>) null, "muslim", "muslim", (-1), true, (ArrayList<String>) null);
      assertEquals("muslim", fiefdoms1.getName());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals("muslim", fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertEquals((-1), fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNotNull(fiefdoms1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      fiefdoms1.setMagyar(0, true);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals("muslim", fiefdoms1.getName());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals("muslim", fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertEquals((-1), fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      ArrayList<Intruders> arrayList5 = fiefdoms1.getMagyar();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotSame(arrayList5, arrayList1);
      assertNotSame(arrayList5, arrayList2);
      assertNotSame(arrayList5, arrayList3);
      assertNotSame(arrayList5, arrayList0);
      assertEquals("muslim", fiefdoms1.getName());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals("muslim", fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertEquals((-1), fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, arrayList5.size());
      assertTrue(arrayList5.isEmpty());
      assertNotNull(arrayList5);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertTrue(arrayList5.equals((Object)arrayList0));
      assertTrue(arrayList5.equals((Object)arrayList2));
      assertTrue(arrayList5.equals((Object)arrayList1));
      assertTrue(arrayList5.equals((Object)arrayList3));
      
      ArrayList<Vassals> arrayList6 = fiefdoms0.getRebelliousVassals();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(arrayList6.isEmpty());
      assertEquals(0, arrayList6.size());
      assertNotNull(arrayList6);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setViking((-1), false);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setNeighbors((ArrayList<String>) null);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMagyar();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setMuslim(2312, true);
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Knight knight0 = new Knight();
      assertEquals("", knight0.getOrder());
      assertFalse(knight0.isDead());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getHitsCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertFalse(knight0.getDead());
      assertNull(knight0.getPassword());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertNotNull(knight0);
      
      ArrayList<String> arrayList0 = knight0.getFiefdoms();
      assertEquals("", knight0.getOrder());
      assertFalse(knight0.isDead());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getHitsCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertFalse(knight0.getDead());
      assertNull(knight0.getPassword());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, "viking", "viking", (-2833), true, arrayList0);
      assertFalse(arrayList0.contains("viking"));
      assertEquals("", knight0.getOrder());
      assertFalse(knight0.isDead());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getHitsCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertFalse(knight0.getDead());
      assertNull(knight0.getPassword());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("viking", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("viking", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals((-2833), fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNotNull(fiefdoms0);
      
      byte[] byteArray0 = fiefdoms0.getSelectioncolor();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(arrayList0.contains("viking"));
      assertEquals(3, byteArray0.length);
      assertEquals("", knight0.getOrder());
      assertFalse(knight0.isDead());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getHitsCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertFalse(knight0.getDead());
      assertNull(knight0.getPassword());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("viking", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("viking", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals((-2833), fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setFiefdomCastles(1224);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1224, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setMuslim((-1), false);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1224, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      fiefdoms0.setOwner("dzu}WR;D95(|a8:");
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1224, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals("dzu}WR;D95(|a8:", fiefdoms0.getOwner());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMuslim();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1224, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals("dzu}WR;D95(|a8:", fiefdoms0.getOwner());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Fiefdoms fiefdoms1 = new Fiefdoms((ArrayList<String>) null, ",9.e=_", "magyar", (-177), false, (ArrayList<String>) null);
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals((-177), fiefdoms1.getValue());
      assertEquals(",9.e=_", fiefdoms1.getName());
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals("magyar", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNotNull(fiefdoms1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      Fiefdoms fiefdoms2 = new Fiefdoms();
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getValue());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getConqueror());
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getOwner());
      assertNotNull(fiefdoms2);
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      
      fiefdoms2.loyalVassals = fiefdoms1.loyalVassals;
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals((-177), fiefdoms1.getValue());
      assertEquals(",9.e=_", fiefdoms1.getName());
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals("magyar", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getValue());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getConqueror());
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getOwner());
      assertEquals(0, fiefdoms2.loyalVassals.size());
      assertTrue(fiefdoms2.loyalVassals.isEmpty());
      
      Fiefdoms fiefdoms3 = new Fiefdoms();
      assertEquals(0, fiefdoms3.getValue());
      assertEquals(0, fiefdoms3.getPeasants());
      assertNull(fiefdoms3.getName());
      assertFalse(fiefdoms3.isKingdom());
      assertEquals(0, fiefdoms3.getFiefdomCastles());
      assertNull(fiefdoms3.getOwner());
      assertEquals(0, fiefdoms3.getPersonalCastles());
      assertNull(fiefdoms3.getConqueror());
      assertNotNull(fiefdoms3);
      assertFalse(fiefdoms3.equals((Object)fiefdoms1));
      assertFalse(fiefdoms3.equals((Object)fiefdoms0));
      assertFalse(fiefdoms3.equals((Object)fiefdoms2));
      
      fiefdoms3.setOwner("duke");
      assertNotSame(fiefdoms3, fiefdoms1);
      assertNotSame(fiefdoms3, fiefdoms0);
      assertNotSame(fiefdoms3, fiefdoms2);
      assertEquals(0, fiefdoms3.getValue());
      assertEquals(0, fiefdoms3.getPeasants());
      assertEquals("duke", fiefdoms3.getOwner());
      assertNull(fiefdoms3.getName());
      assertFalse(fiefdoms3.isKingdom());
      assertEquals(0, fiefdoms3.getFiefdomCastles());
      assertEquals(0, fiefdoms3.getPersonalCastles());
      assertNull(fiefdoms3.getConqueror());
      assertFalse(fiefdoms3.equals((Object)fiefdoms1));
      assertFalse(fiefdoms3.equals((Object)fiefdoms0));
      assertFalse(fiefdoms3.equals((Object)fiefdoms2));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Knight knight0 = new Knight();
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getScore());
      assertEquals("knight", knight0.getRank());
      assertFalse(knight0.getDead());
      assertNull(knight0.getName());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertNotNull(knight0);
      
      ArrayList<String> arrayList0 = knight0.getVotes();
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getScore());
      assertEquals("knight", knight0.getRank());
      assertFalse(knight0.getDead());
      assertNull(knight0.getName());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = arrayList0.add("unknown rank");
      assertTrue(arrayList0.contains("unknown rank"));
      assertTrue(boolean1);
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getScore());
      assertEquals("knight", knight0.getRank());
      assertFalse(knight0.getDead());
      assertNull(knight0.getName());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(boolean1 == boolean0);
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, "viking", "unknown rank", (-1955870171), false, arrayList0);
      assertFalse(arrayList0.contains("viking"));
      assertTrue(arrayList0.contains("unknown rank"));
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getScore());
      assertEquals("knight", knight0.getRank());
      assertFalse(knight0.getDead());
      assertNull(knight0.getName());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1955870171), fiefdoms0.getValue());
      assertEquals("unknown rank", fiefdoms0.getOwner());
      assertEquals("viking", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setRebelliousVassals((-879), true);
      assertFalse(arrayList0.contains("viking"));
      assertTrue(arrayList0.contains("unknown rank"));
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getScore());
      assertEquals("knight", knight0.getRank());
      assertFalse(knight0.getDead());
      assertNull(knight0.getName());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1955870171), fiefdoms0.getValue());
      assertEquals("unknown rank", fiefdoms0.getOwner());
      assertEquals("viking", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      ArrayList<String> arrayList1 = fiefdoms0.getNeighbors();
      assertFalse(arrayList0.contains("viking"));
      assertTrue(arrayList0.contains("unknown rank"));
      assertTrue(arrayList1.contains("unknown rank"));
      assertFalse(arrayList1.contains("viking"));
      assertSame(arrayList0, arrayList1);
      assertSame(arrayList1, arrayList0);
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getScore());
      assertEquals("knight", knight0.getRank());
      assertFalse(knight0.getDead());
      assertNull(knight0.getName());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1955870171), fiefdoms0.getValue());
      assertEquals("unknown rank", fiefdoms0.getOwner());
      assertEquals("viking", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      String string0 = fiefdoms0.getName();
      assertFalse(arrayList0.contains(string0));
      assertTrue(arrayList0.contains("unknown rank"));
      assertSame(arrayList0, arrayList1);
      assertEquals("viking", string0);
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getScore());
      assertEquals("knight", knight0.getRank());
      assertFalse(knight0.getDead());
      assertNull(knight0.getName());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1955870171), fiefdoms0.getValue());
      assertEquals("unknown rank", fiefdoms0.getOwner());
      assertEquals("viking", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(string0);
      
      ArrayList<String> arrayList2 = fiefdoms0.getNeighbors();
      assertFalse(arrayList0.contains(string0));
      assertTrue(arrayList0.contains("unknown rank"));
      assertFalse(arrayList2.contains(string0));
      assertTrue(arrayList2.contains("unknown rank"));
      assertSame(arrayList0, arrayList1);
      assertSame(arrayList0, arrayList2);
      assertSame(arrayList2, arrayList1);
      assertSame(arrayList2, arrayList0);
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getScore());
      assertEquals("knight", knight0.getRank());
      assertFalse(knight0.getDead());
      assertNull(knight0.getName());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1955870171), fiefdoms0.getValue());
      assertEquals("unknown rank", fiefdoms0.getOwner());
      assertEquals("viking", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(arrayList2.isEmpty());
      assertEquals(1, arrayList2.size());
      assertNotNull(arrayList2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setLoyalVassals(0, false);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNotNull(fiefdoms0);
      
      ArrayList<Vassals> arrayList0 = new ArrayList<Vassals>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      fiefdoms0.setLoyalVassals(arrayList0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      fiefdoms0.buyPersonalCastles(0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      
      fiefdoms0.setKingdom(false);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      
      fiefdoms0.setKingdom(false);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      
      fiefdoms0.setKingdom(true);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      
      fiefdoms0.setFiefdomCastles(false);
      assertNull(fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      
      String string0 = fiefdoms0.getName();
      assertNull(fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(string0);
      
      byte[] byteArray0 = new byte[5];
      fiefdoms0.buyPersonalCastles(0);
      assertNull(fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      
      byteArray0[0] = (byte)63;
      fiefdoms0.setPeasants((-678));
      assertEquals((-678), fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-91);
      fiefdoms0.setSelectioncolor(byteArray0);
      assertArrayEquals(new byte[] {(byte)63, (byte)87, (byte) (-44), (byte)76, (byte) (-91)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((-678), fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      
      fiefdoms0.buyPersonalCastles(5);
      assertEquals(5, fiefdoms0.getPersonalCastles());
      assertEquals((-678), fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.buyFiefdomCastles(456);
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      byte[] byteArray0 = fiefdoms0.getSelectioncolor();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setPeasants(3);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(3, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      
      ArrayList<Intruders> arrayList0 = new ArrayList<Intruders>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Intruders intruders0 = new Intruders("utWIBG{h-Q>", " allies");
      assertNull(intruders0.getRank());
      assertNull(intruders0.getType());
      assertNull(intruders0.getLocation());
      assertNotNull(intruders0);
      
      intruders0.setLocation("muslim");
      assertNull(intruders0.getRank());
      assertNull(intruders0.getType());
      assertEquals("muslim", intruders0.getLocation());
      
      boolean boolean0 = arrayList0.add(intruders0);
      assertTrue(arrayList0.contains(intruders0));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(intruders0.getRank());
      assertNull(intruders0.getType());
      assertEquals("muslim", intruders0.getLocation());
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 3;
      fiefdoms0.setShaderColor(floatArray0);
      assertArrayEquals(new float[] {3.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(3, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setName("'HtN$Vc@");
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(3, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("'HtN$Vc@", fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      
      Intruders intruders1 = new Intruders("Please input the number of vassals you \nyou desire to take with you:", "Ddp+Q*=!/");
      assertNull(intruders1.getLocation());
      assertNull(intruders1.getType());
      assertNull(intruders1.getRank());
      assertNotNull(intruders1);
      assertFalse(intruders1.equals((Object)intruders0));
      
      boolean boolean1 = arrayList0.add(intruders1);
      assertTrue(arrayList0.contains(intruders0));
      assertNotSame(intruders1, intruders0);
      assertTrue(boolean1);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(intruders1.getLocation());
      assertNull(intruders1.getType());
      assertNull(intruders1.getRank());
      assertFalse(intruders1.equals((Object)intruders0));
      assertTrue(boolean1 == boolean0);
      
      fiefdoms0.setViking(arrayList0);
      assertTrue(arrayList0.contains(intruders0));
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(3, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("'HtN$Vc@", fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      fiefdoms0.setName("Ddp+Q*=!/");
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("Ddp+Q*=!/", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(3, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getViking();
      assertTrue(arrayList1.contains(intruders0));
      assertSame(arrayList1, arrayList0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("Ddp+Q*=!/", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(3, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(2, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      Retainers[] retainersArray0 = new Retainers[2];
      Retainers retainers0 = mock(Retainers.class, new ViolatedAssumptionAnswer());
      retainersArray0[0] = retainers0;
      Retainers retainers1 = new Retainers("", "");
      assertEquals("vassal", retainers1.getRank());
      assertEquals("", retainers1.getLocation());
      assertNull(retainers1.getFiefdom());
      assertEquals("", retainers1.getLord());
      assertNotNull(retainers1);
      assertFalse(retainers1.equals((Object)retainers0));
      
      String string0 = retainers1.getLocation();
      assertEquals("", string0);
      assertEquals("vassal", retainers1.getRank());
      assertEquals("", retainers1.getLocation());
      assertNull(retainers1.getFiefdom());
      assertEquals("", retainers1.getLord());
      assertNotNull(string0);
      assertFalse(retainers1.equals((Object)retainers0));
      
      retainersArray0[1] = retainers1;
      // Undeclared exception!
      try { 
        arrayList1.toArray(retainersArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNotNull(fiefdoms0);
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMuslim();
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Intruders intruders0 = new Intruders();
      assertNull(intruders0.getLocation());
      assertNull(intruders0.getType());
      assertNull(intruders0.getRank());
      assertNotNull(intruders0);
      
      boolean boolean0 = arrayList0.add(intruders0);
      assertTrue(arrayList0.contains(intruders0));
      assertTrue(boolean0);
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(intruders0.getLocation());
      assertNull(intruders0.getType());
      assertNull(intruders0.getRank());
      
      Intruders intruders1 = new Intruders();
      assertNull(intruders1.getType());
      assertNull(intruders1.getRank());
      assertNull(intruders1.getLocation());
      assertNotNull(intruders1);
      assertFalse(intruders1.equals((Object)intruders0));
      
      boolean boolean1 = arrayList0.add(intruders1);
      assertTrue(arrayList0.contains(intruders0));
      assertNotSame(intruders1, intruders0);
      assertTrue(boolean1);
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(intruders1.getType());
      assertNull(intruders1.getRank());
      assertNull(intruders1.getLocation());
      assertFalse(intruders1.equals((Object)intruders0));
      assertTrue(boolean1 == boolean0);
      
      fiefdoms0.setMagyar(arrayList0);
      assertTrue(arrayList0.contains(intruders0));
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      fiefdoms0.setMagyar(1, false);
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      
      Fiefdoms fiefdoms1 = new Fiefdoms();
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getValue());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertFalse(fiefdoms1.isKingdom());
      assertNotNull(fiefdoms1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Knight knight0 = new Knight();
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.getDead());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertNull(knight0.getName());
      assertNotNull(knight0);
      
      String string0 = knight0.getLocation();
      assertEquals("Ile-De-France", string0);
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.getDead());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertNull(knight0.getName());
      assertNotNull(string0);
      
      String string1 = knight0.getName();
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.getDead());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertNull(knight0.getName());
      assertNull(string1);
      
      String string2 = knight0.getName();
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.getDead());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertNull(knight0.getName());
      assertNull(string2);
      
      ArrayList<String> arrayList0 = knight0.getFiefdoms();
      assertFalse(arrayList0.contains(string0));
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.getDead());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertNull(knight0.getName());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Knight knight1 = new Knight();
      assertEquals(0, knight1.getHitsCounter());
      assertFalse(knight1.getDead());
      assertEquals("knight", knight1.getRank());
      assertEquals(0, knight1.getWounds());
      assertEquals(0, knight1.getRebellionCounter());
      assertEquals(0, knight1.getKills());
      assertEquals(0, knight1.getTotalMoney());
      assertNull(knight1.getName());
      assertEquals("", knight1.getOrder());
      assertEquals("Ile-De-France", knight1.getLocation());
      assertEquals(0, knight1.getwound());
      assertEquals(0, knight1.getScore());
      assertNull(knight1.getPassword());
      assertEquals(0, knight1.getKill());
      assertFalse(knight1.isDead());
      assertNotNull(knight1);
      assertFalse(knight1.equals((Object)knight0));
      
      ArrayList<String> arrayList1 = knight1.getConversation();
      assertFalse(arrayList1.contains(string0));
      assertNotSame(knight1, knight0);
      assertNotSame(arrayList1, arrayList0);
      assertEquals(0, knight1.getHitsCounter());
      assertFalse(knight1.getDead());
      assertEquals("knight", knight1.getRank());
      assertEquals(0, knight1.getWounds());
      assertEquals(0, knight1.getRebellionCounter());
      assertEquals(0, knight1.getKills());
      assertEquals(0, knight1.getTotalMoney());
      assertNull(knight1.getName());
      assertEquals("", knight1.getOrder());
      assertEquals("Ile-De-France", knight1.getLocation());
      assertEquals(0, knight1.getwound());
      assertEquals(0, knight1.getScore());
      assertNull(knight1.getPassword());
      assertEquals(0, knight1.getKill());
      assertFalse(knight1.isDead());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      assertFalse(knight1.equals((Object)knight0));
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList1, "", "", 1618, false, arrayList0);
      assertFalse(arrayList0.contains(""));
      assertFalse(arrayList1.contains(""));
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.getDead());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertNull(knight0.getName());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, knight1.getHitsCounter());
      assertFalse(knight1.getDead());
      assertEquals("knight", knight1.getRank());
      assertEquals(0, knight1.getWounds());
      assertEquals(0, knight1.getRebellionCounter());
      assertEquals(0, knight1.getKills());
      assertEquals(0, knight1.getTotalMoney());
      assertNull(knight1.getName());
      assertEquals("", knight1.getOrder());
      assertEquals("Ile-De-France", knight1.getLocation());
      assertEquals(0, knight1.getwound());
      assertEquals(0, knight1.getScore());
      assertNull(knight1.getPassword());
      assertEquals(0, knight1.getKill());
      assertFalse(knight1.isDead());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1618, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("", fiefdoms0.getName());
      assertEquals("", fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      assertFalse(knight0.equals((Object)knight1));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertFalse(knight1.equals((Object)knight0));
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      int int0 = fiefdoms0.getPeasants();
      assertFalse(arrayList0.contains(""));
      assertFalse(arrayList1.contains(""));
      assertNotSame(knight0, knight1);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(knight1, knight0);
      assertNotSame(arrayList1, arrayList0);
      assertEquals(0, int0);
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.getDead());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertNull(knight0.getName());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, knight1.getHitsCounter());
      assertFalse(knight1.getDead());
      assertEquals("knight", knight1.getRank());
      assertEquals(0, knight1.getWounds());
      assertEquals(0, knight1.getRebellionCounter());
      assertEquals(0, knight1.getKills());
      assertEquals(0, knight1.getTotalMoney());
      assertNull(knight1.getName());
      assertEquals("", knight1.getOrder());
      assertEquals("Ile-De-France", knight1.getLocation());
      assertEquals(0, knight1.getwound());
      assertEquals(0, knight1.getScore());
      assertNull(knight1.getPassword());
      assertEquals(0, knight1.getKill());
      assertFalse(knight1.isDead());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1618, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("", fiefdoms0.getName());
      assertEquals("", fiefdoms0.getOwner());
      assertFalse(knight0.equals((Object)knight1));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertFalse(knight1.equals((Object)knight0));
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      boolean boolean0 = arrayList1.add((String) null);
      assertFalse(arrayList1.contains(""));
      assertNotSame(knight1, knight0);
      assertNotSame(arrayList1, arrayList0);
      assertTrue(boolean0);
      assertEquals(0, knight1.getHitsCounter());
      assertFalse(knight1.getDead());
      assertEquals("knight", knight1.getRank());
      assertEquals(0, knight1.getWounds());
      assertEquals(0, knight1.getRebellionCounter());
      assertEquals(0, knight1.getKills());
      assertEquals(0, knight1.getTotalMoney());
      assertNull(knight1.getName());
      assertEquals("", knight1.getOrder());
      assertEquals("Ile-De-France", knight1.getLocation());
      assertEquals(0, knight1.getwound());
      assertEquals(0, knight1.getScore());
      assertNull(knight1.getPassword());
      assertEquals(0, knight1.getKill());
      assertFalse(knight1.isDead());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertFalse(knight1.equals((Object)knight0));
      assertFalse(arrayList1.equals((Object)arrayList0));
      
      Fiefdoms fiefdoms1 = new Fiefdoms(arrayList1, "", "", 2407, false, arrayList1);
      assertFalse(arrayList1.contains(string0));
      assertEquals(0, knight1.getHitsCounter());
      assertFalse(knight1.getDead());
      assertEquals("knight", knight1.getRank());
      assertEquals(0, knight1.getWounds());
      assertEquals(0, knight1.getRebellionCounter());
      assertEquals(0, knight1.getKills());
      assertEquals(0, knight1.getTotalMoney());
      assertNull(knight1.getName());
      assertEquals("", knight1.getOrder());
      assertEquals("Ile-De-France", knight1.getLocation());
      assertEquals(0, knight1.getwound());
      assertEquals(0, knight1.getScore());
      assertNull(knight1.getPassword());
      assertEquals(0, knight1.getKill());
      assertFalse(knight1.isDead());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(2407, fiefdoms1.getValue());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals("", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNotNull(fiefdoms1);
      assertFalse(knight1.equals((Object)knight0));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)103;
      byteArray0[7] = (byte)2;
      fiefdoms1.setSelectioncolor(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-115), (byte)103, (byte)5, (byte)0, (byte)5, (byte)103, (byte)2, (byte)0}, byteArray0);
      assertFalse(arrayList1.contains(string0));
      assertNotSame(knight1, knight0);
      assertNotSame(arrayList1, arrayList0);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, knight1.getHitsCounter());
      assertFalse(knight1.getDead());
      assertEquals("knight", knight1.getRank());
      assertEquals(0, knight1.getWounds());
      assertEquals(0, knight1.getRebellionCounter());
      assertEquals(0, knight1.getKills());
      assertEquals(0, knight1.getTotalMoney());
      assertNull(knight1.getName());
      assertEquals("", knight1.getOrder());
      assertEquals("Ile-De-France", knight1.getLocation());
      assertEquals(0, knight1.getwound());
      assertEquals(0, knight1.getScore());
      assertNull(knight1.getPassword());
      assertEquals(0, knight1.getKill());
      assertFalse(knight1.isDead());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(2407, fiefdoms1.getValue());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals("", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertFalse(knight1.equals((Object)knight0));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      ArrayList<Intruders> arrayList2 = fiefdoms0.getViking();
      assertFalse(arrayList0.contains(string0));
      assertFalse(arrayList1.contains(string0));
      assertNotSame(knight0, knight1);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(knight1, knight0);
      assertNotSame(arrayList1, arrayList0);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.getDead());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertNull(knight0.getName());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertEquals(0, knight1.getHitsCounter());
      assertFalse(knight1.getDead());
      assertEquals("knight", knight1.getRank());
      assertEquals(0, knight1.getWounds());
      assertEquals(0, knight1.getRebellionCounter());
      assertEquals(0, knight1.getKills());
      assertEquals(0, knight1.getTotalMoney());
      assertNull(knight1.getName());
      assertEquals("", knight1.getOrder());
      assertEquals("Ile-De-France", knight1.getLocation());
      assertEquals(0, knight1.getwound());
      assertEquals(0, knight1.getScore());
      assertNull(knight1.getPassword());
      assertEquals(0, knight1.getKill());
      assertFalse(knight1.isDead());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1618, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("", fiefdoms0.getName());
      assertEquals("", fiefdoms0.getOwner());
      assertNotNull(arrayList2);
      assertFalse(knight0.equals((Object)knight1));
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertFalse(knight1.equals((Object)knight0));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      
      fiefdoms1.setFiefdomCastles(0);
      assertFalse(arrayList1.contains(string0));
      assertNotSame(knight1, knight0);
      assertNotSame(arrayList1, arrayList0);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals(0, knight1.getHitsCounter());
      assertFalse(knight1.getDead());
      assertEquals("knight", knight1.getRank());
      assertEquals(0, knight1.getWounds());
      assertEquals(0, knight1.getRebellionCounter());
      assertEquals(0, knight1.getKills());
      assertEquals(0, knight1.getTotalMoney());
      assertNull(knight1.getName());
      assertEquals("", knight1.getOrder());
      assertEquals("Ile-De-France", knight1.getLocation());
      assertEquals(0, knight1.getwound());
      assertEquals(0, knight1.getScore());
      assertNull(knight1.getPassword());
      assertEquals(0, knight1.getKill());
      assertFalse(knight1.isDead());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(2407, fiefdoms1.getValue());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals("", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertFalse(knight1.equals((Object)knight0));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      fiefdoms0.buyFiefdomCastles((byte)103);
      assertFalse(arrayList0.contains(string0));
      assertFalse(arrayList1.contains(string0));
      assertNotSame(knight0, knight1);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(knight1, knight0);
      assertNotSame(arrayList1, arrayList0);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.getDead());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertNull(knight0.getName());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, knight1.getHitsCounter());
      assertFalse(knight1.getDead());
      assertEquals("knight", knight1.getRank());
      assertEquals(0, knight1.getWounds());
      assertEquals(0, knight1.getRebellionCounter());
      assertEquals(0, knight1.getKills());
      assertEquals(0, knight1.getTotalMoney());
      assertNull(knight1.getName());
      assertEquals("", knight1.getOrder());
      assertEquals("Ile-De-France", knight1.getLocation());
      assertEquals(0, knight1.getwound());
      assertEquals(0, knight1.getScore());
      assertNull(knight1.getPassword());
      assertEquals(0, knight1.getKill());
      assertFalse(knight1.isDead());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(1618, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("", fiefdoms0.getName());
      assertEquals(103, fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getOwner());
      assertFalse(knight0.equals((Object)knight1));
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertFalse(knight1.equals((Object)knight0));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setViking(0, false);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setKingdom(true);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setOwner("");
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("", fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMuslim();
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("", fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      fiefdoms0.setMagyar(arrayList0);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("", fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertFalse(arrayList1.contains(""));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      Fiefdoms fiefdoms1 = new Fiefdoms(arrayList1, "", "", 0, true, arrayList1);
      assertFalse(arrayList1.contains(""));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals("", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getConqueror());
      assertEquals("", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertTrue(fiefdoms1.isKingdom());
      assertNotNull(fiefdoms1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      fiefdoms1.buyPersonalCastles((-99));
      assertFalse(arrayList1.contains(""));
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals("", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getConqueror());
      assertEquals("", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertTrue(fiefdoms1.isKingdom());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      fiefdoms1.setNeighbors(arrayList1);
      assertFalse(arrayList1.contains(""));
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals("", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getConqueror());
      assertEquals("", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertTrue(fiefdoms1.isKingdom());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setViking((-1), true);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getRebelliousVassals();
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.getLoyalVassals();
      assertNotSame(arrayList1, arrayList0);
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      Fiefdoms fiefdoms1 = new Fiefdoms();
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNotNull(fiefdoms1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      Fiefdoms fiefdoms2 = new Fiefdoms();
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals(0, fiefdoms2.getValue());
      assertNull(fiefdoms2.getOwner());
      assertNull(fiefdoms2.getConqueror());
      assertFalse(fiefdoms2.isKingdom());
      assertNotNull(fiefdoms2);
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      
      fiefdoms0.setViking(0, true);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms0, fiefdoms2);
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      
      ArrayList<Intruders> arrayList2 = fiefdoms2.getMagyar();
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNotSame(fiefdoms2, fiefdoms1);
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals(0, fiefdoms2.getValue());
      assertNull(fiefdoms2.getOwner());
      assertNull(fiefdoms2.getConqueror());
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertNotNull(arrayList2);
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      
      String string0 = fiefdoms2.getName();
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNotSame(fiefdoms2, fiefdoms1);
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals(0, fiefdoms2.getValue());
      assertNull(fiefdoms2.getOwner());
      assertNull(fiefdoms2.getConqueror());
      assertFalse(fiefdoms2.isKingdom());
      assertNull(string0);
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      
      fiefdoms1.setRebelliousVassals((-879), true);
      assertNotSame(fiefdoms1, fiefdoms2);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertFalse(fiefdoms1.equals((Object)fiefdoms2));
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      Fiefdoms fiefdoms3 = new Fiefdoms();
      assertEquals(0, fiefdoms3.getValue());
      assertNull(fiefdoms3.getOwner());
      assertEquals(0, fiefdoms3.getFiefdomCastles());
      assertFalse(fiefdoms3.isKingdom());
      assertNull(fiefdoms3.getConqueror());
      assertEquals(0, fiefdoms3.getPersonalCastles());
      assertEquals(0, fiefdoms3.getPeasants());
      assertNull(fiefdoms3.getName());
      assertNotNull(fiefdoms3);
      assertFalse(fiefdoms3.equals((Object)fiefdoms2));
      assertFalse(fiefdoms3.equals((Object)fiefdoms0));
      assertFalse(fiefdoms3.equals((Object)fiefdoms1));
      
      ArrayList<Intruders> arrayList3 = fiefdoms3.getViking();
      assertNotSame(fiefdoms3, fiefdoms2);
      assertNotSame(fiefdoms3, fiefdoms0);
      assertNotSame(fiefdoms3, fiefdoms1);
      assertNotSame(arrayList3, arrayList2);
      assertEquals(0, fiefdoms3.getValue());
      assertNull(fiefdoms3.getOwner());
      assertEquals(0, fiefdoms3.getFiefdomCastles());
      assertFalse(fiefdoms3.isKingdom());
      assertNull(fiefdoms3.getConqueror());
      assertEquals(0, fiefdoms3.getPersonalCastles());
      assertEquals(0, fiefdoms3.getPeasants());
      assertNull(fiefdoms3.getName());
      assertTrue(arrayList3.isEmpty());
      assertEquals(0, arrayList3.size());
      assertNotNull(arrayList3);
      assertFalse(fiefdoms3.equals((Object)fiefdoms2));
      assertFalse(fiefdoms3.equals((Object)fiefdoms0));
      assertFalse(fiefdoms3.equals((Object)fiefdoms1));
      assertTrue(arrayList3.equals((Object)arrayList2));
      
      Fiefdoms fiefdoms4 = new Fiefdoms();
      assertEquals(0, fiefdoms4.getPeasants());
      assertNull(fiefdoms4.getName());
      assertFalse(fiefdoms4.isKingdom());
      assertNull(fiefdoms4.getConqueror());
      assertEquals(0, fiefdoms4.getValue());
      assertEquals(0, fiefdoms4.getFiefdomCastles());
      assertEquals(0, fiefdoms4.getPersonalCastles());
      assertNull(fiefdoms4.getOwner());
      assertNotNull(fiefdoms4);
      assertFalse(fiefdoms4.equals((Object)fiefdoms1));
      assertFalse(fiefdoms4.equals((Object)fiefdoms0));
      assertFalse(fiefdoms4.equals((Object)fiefdoms2));
      assertFalse(fiefdoms4.equals((Object)fiefdoms3));
      
      fiefdoms3.setMagyar((-920), false);
      assertNotSame(fiefdoms3, fiefdoms2);
      assertNotSame(fiefdoms3, fiefdoms0);
      assertNotSame(fiefdoms3, fiefdoms1);
      assertNotSame(fiefdoms3, fiefdoms4);
      assertEquals(0, fiefdoms3.getValue());
      assertNull(fiefdoms3.getOwner());
      assertEquals(0, fiefdoms3.getFiefdomCastles());
      assertFalse(fiefdoms3.isKingdom());
      assertNull(fiefdoms3.getConqueror());
      assertEquals(0, fiefdoms3.getPersonalCastles());
      assertEquals(0, fiefdoms3.getPeasants());
      assertNull(fiefdoms3.getName());
      assertFalse(fiefdoms3.equals((Object)fiefdoms2));
      assertFalse(fiefdoms3.equals((Object)fiefdoms0));
      assertFalse(fiefdoms3.equals((Object)fiefdoms1));
      assertFalse(fiefdoms3.equals((Object)fiefdoms4));
      
      ArrayList<Intruders> arrayList4 = fiefdoms4.getMuslim();
      assertNotSame(fiefdoms4, fiefdoms1);
      assertNotSame(fiefdoms4, fiefdoms0);
      assertNotSame(fiefdoms4, fiefdoms2);
      assertNotSame(fiefdoms4, fiefdoms3);
      assertNotSame(arrayList4, arrayList3);
      assertNotSame(arrayList4, arrayList2);
      assertEquals(0, fiefdoms4.getPeasants());
      assertNull(fiefdoms4.getName());
      assertFalse(fiefdoms4.isKingdom());
      assertNull(fiefdoms4.getConqueror());
      assertEquals(0, fiefdoms4.getValue());
      assertEquals(0, fiefdoms4.getFiefdomCastles());
      assertEquals(0, fiefdoms4.getPersonalCastles());
      assertNull(fiefdoms4.getOwner());
      assertEquals(0, arrayList4.size());
      assertTrue(arrayList4.isEmpty());
      assertNotNull(arrayList4);
      assertFalse(fiefdoms4.equals((Object)fiefdoms1));
      assertFalse(fiefdoms4.equals((Object)fiefdoms0));
      assertFalse(fiefdoms4.equals((Object)fiefdoms2));
      assertFalse(fiefdoms4.equals((Object)fiefdoms3));
      assertTrue(arrayList4.equals((Object)arrayList2));
      assertTrue(arrayList4.equals((Object)arrayList3));
      
      ArrayList<Intruders> arrayList5 = fiefdoms3.getMuslim();
      assertNotSame(fiefdoms3, fiefdoms2);
      assertNotSame(fiefdoms3, fiefdoms0);
      assertNotSame(fiefdoms3, fiefdoms1);
      assertNotSame(fiefdoms3, fiefdoms4);
      assertNotSame(arrayList5, arrayList3);
      assertNotSame(arrayList5, arrayList4);
      assertNotSame(arrayList5, arrayList2);
      assertEquals(0, fiefdoms3.getValue());
      assertNull(fiefdoms3.getOwner());
      assertEquals(0, fiefdoms3.getFiefdomCastles());
      assertFalse(fiefdoms3.isKingdom());
      assertNull(fiefdoms3.getConqueror());
      assertEquals(0, fiefdoms3.getPersonalCastles());
      assertEquals(0, fiefdoms3.getPeasants());
      assertNull(fiefdoms3.getName());
      assertTrue(arrayList5.isEmpty());
      assertEquals(0, arrayList5.size());
      assertNotNull(arrayList5);
      assertFalse(fiefdoms3.equals((Object)fiefdoms2));
      assertFalse(fiefdoms3.equals((Object)fiefdoms0));
      assertFalse(fiefdoms3.equals((Object)fiefdoms1));
      assertFalse(fiefdoms3.equals((Object)fiefdoms4));
      assertTrue(arrayList5.equals((Object)arrayList3));
      assertTrue(arrayList5.equals((Object)arrayList2));
      assertTrue(arrayList5.equals((Object)arrayList4));
      
      String string1 = fiefdoms3.getName();
      assertNotSame(fiefdoms3, fiefdoms2);
      assertNotSame(fiefdoms3, fiefdoms0);
      assertNotSame(fiefdoms3, fiefdoms1);
      assertNotSame(fiefdoms3, fiefdoms4);
      assertEquals(0, fiefdoms3.getValue());
      assertNull(fiefdoms3.getOwner());
      assertEquals(0, fiefdoms3.getFiefdomCastles());
      assertFalse(fiefdoms3.isKingdom());
      assertNull(fiefdoms3.getConqueror());
      assertEquals(0, fiefdoms3.getPersonalCastles());
      assertEquals(0, fiefdoms3.getPeasants());
      assertNull(fiefdoms3.getName());
      assertNull(string1);
      assertFalse(fiefdoms3.equals((Object)fiefdoms2));
      assertFalse(fiefdoms3.equals((Object)fiefdoms0));
      assertFalse(fiefdoms3.equals((Object)fiefdoms1));
      assertFalse(fiefdoms3.equals((Object)fiefdoms4));
      
      fiefdoms4.setOwner("");
      assertNotSame(fiefdoms4, fiefdoms1);
      assertNotSame(fiefdoms4, fiefdoms0);
      assertNotSame(fiefdoms4, fiefdoms2);
      assertNotSame(fiefdoms4, fiefdoms3);
      assertEquals(0, fiefdoms4.getPeasants());
      assertNull(fiefdoms4.getName());
      assertFalse(fiefdoms4.isKingdom());
      assertNull(fiefdoms4.getConqueror());
      assertEquals(0, fiefdoms4.getValue());
      assertEquals(0, fiefdoms4.getFiefdomCastles());
      assertEquals(0, fiefdoms4.getPersonalCastles());
      assertEquals("", fiefdoms4.getOwner());
      assertFalse(fiefdoms4.equals((Object)fiefdoms1));
      assertFalse(fiefdoms4.equals((Object)fiefdoms0));
      assertFalse(fiefdoms4.equals((Object)fiefdoms2));
      assertFalse(fiefdoms4.equals((Object)fiefdoms3));
      
      ArrayList<String> arrayList6 = fiefdoms4.getNeighbors();
      assertNotSame(fiefdoms4, fiefdoms1);
      assertNotSame(fiefdoms4, fiefdoms0);
      assertNotSame(fiefdoms4, fiefdoms2);
      assertNotSame(fiefdoms4, fiefdoms3);
      assertEquals(0, fiefdoms4.getPeasants());
      assertNull(fiefdoms4.getName());
      assertFalse(fiefdoms4.isKingdom());
      assertNull(fiefdoms4.getConqueror());
      assertEquals(0, fiefdoms4.getValue());
      assertEquals(0, fiefdoms4.getFiefdomCastles());
      assertEquals(0, fiefdoms4.getPersonalCastles());
      assertEquals("", fiefdoms4.getOwner());
      assertNull(arrayList6);
      assertFalse(fiefdoms4.equals((Object)fiefdoms1));
      assertFalse(fiefdoms4.equals((Object)fiefdoms0));
      assertFalse(fiefdoms4.equals((Object)fiefdoms2));
      assertFalse(fiefdoms4.equals((Object)fiefdoms3));
      
      String string2 = fiefdoms4.getName();
      assertNotSame(fiefdoms4, fiefdoms1);
      assertNotSame(fiefdoms4, fiefdoms0);
      assertNotSame(fiefdoms4, fiefdoms2);
      assertNotSame(fiefdoms4, fiefdoms3);
      assertEquals(0, fiefdoms4.getPeasants());
      assertNull(fiefdoms4.getName());
      assertFalse(fiefdoms4.isKingdom());
      assertNull(fiefdoms4.getConqueror());
      assertEquals(0, fiefdoms4.getValue());
      assertEquals(0, fiefdoms4.getFiefdomCastles());
      assertEquals(0, fiefdoms4.getPersonalCastles());
      assertEquals("", fiefdoms4.getOwner());
      assertNull(string2);
      assertFalse(fiefdoms4.equals((Object)fiefdoms1));
      assertFalse(fiefdoms4.equals((Object)fiefdoms0));
      assertFalse(fiefdoms4.equals((Object)fiefdoms2));
      assertFalse(fiefdoms4.equals((Object)fiefdoms3));
      
      fiefdoms0.setMuslim(1959, true);
      assertNotSame(fiefdoms0, fiefdoms3);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms0, fiefdoms2);
      assertNotSame(fiefdoms0, fiefdoms4);
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.equals((Object)fiefdoms3));
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      assertFalse(fiefdoms0.equals((Object)fiefdoms4));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setConqueror("j3l@n+");
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("j3l@n+", fiefdoms0.getConqueror());
      
      String string0 = fiefdoms0.getConqueror();
      assertEquals("j3l@n+", string0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("j3l@n+", fiefdoms0.getConqueror());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setMagyar((-2028178998), false);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setPersonalCastles(0);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      ArrayList<Intruders> arrayList0 = fiefdoms0.getViking();
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      fiefdoms0.setMagyar(arrayList0);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      fiefdoms0.setSelectioncolor(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.getLoyalVassals();
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      fiefdoms0.setLoyalVassals(arrayList1);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      fiefdoms0.setMuslim(0, true);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setPeasants(1530);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1530, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      
      ArrayList<String> arrayList0 = fiefdoms0.getNeighbors();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1530, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(arrayList0);
      
      String string0 = fiefdoms0.getConqueror();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1530, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setLoyalVassals((-2101), false);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getViking();
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      fiefdoms0.setMuslim(arrayList0);
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getMuslim();
      assertSame(arrayList1, arrayList0);
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Intruders intruders0 = new Intruders();
      assertNull(intruders0.getLocation());
      assertNull(intruders0.getRank());
      assertNull(intruders0.getType());
      assertNotNull(intruders0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = arrayList1.add(intruders0);
      assertTrue(arrayList1.contains(intruders0));
      assertSame(arrayList1, arrayList0);
      assertTrue(boolean0);
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertNull(intruders0.getLocation());
      assertNull(intruders0.getRank());
      assertNull(intruders0.getType());
      
      fiefdoms0.setMagyar(arrayList1);
      assertTrue(arrayList1.contains(intruders0));
      assertSame(arrayList1, arrayList0);
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      
      fiefdoms0.setLoyalVassals(0, false);
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setViking(0, false);
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setLoyalVassals(0, true);
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setShaderColor((float[]) null);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      
      boolean boolean0 = NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "{_X6iCrS");
      assertFalse(boolean0);
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getLoyalVassals();
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Knight knight0 = new Knight(" castles for ", "", "Invalid number");
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.getDead());
      assertEquals(" castles for ", knight0.getName());
      assertEquals(0, knight0.getwound());
      assertEquals("Invalid number", knight0.getPassword());
      assertEquals("", knight0.getRank());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getRebellionCounter());
      assertNotNull(knight0);
      
      ArrayList<String> arrayList1 = knight0.getConversation();
      assertFalse(arrayList1.contains("Invalid number"));
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.getDead());
      assertEquals(" castles for ", knight0.getName());
      assertEquals(0, knight0.getwound());
      assertEquals("Invalid number", knight0.getPassword());
      assertEquals("", knight0.getRank());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      fiefdoms0.setInvaderType(arrayList1);
      assertFalse(arrayList1.contains("Invalid number"));
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.getDead());
      assertEquals(" castles for ", knight0.getName());
      assertEquals(0, knight0.getwound());
      assertEquals("Invalid number", knight0.getPassword());
      assertEquals("", knight0.getRank());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      fiefdoms0.shaderColor = null;
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setRebelliousVassals(arrayList0);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      fiefdoms0.setShaderColor((float[]) null);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      
      ArrayList<Intruders> arrayList2 = fiefdoms0.getViking();
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertNotNull(arrayList2);
      
      float[] floatArray0 = fiefdoms0.getShaderColor();
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(floatArray0);
      
      ArrayList<String> arrayList3 = fiefdoms0.getInvaderType();
      assertFalse(arrayList3.contains("Invalid number"));
      assertSame(arrayList3, arrayList1);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(arrayList3.isEmpty());
      assertEquals(0, arrayList3.size());
      assertNotNull(arrayList3);
      
      ArrayList<Intruders> arrayList4 = fiefdoms0.getViking();
      assertSame(arrayList4, arrayList2);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(arrayList4.isEmpty());
      assertEquals(0, arrayList4.size());
      assertNotNull(arrayList4);
      
      float[] floatArray1 = fiefdoms0.getShaderColor();
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(floatArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)70;
      boolean boolean1 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte)91, (byte)0, (byte)70}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ArrayList<Vassals> arrayList5 = fiefdoms0.getRebelliousVassals();
      assertSame(arrayList5, arrayList0);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, arrayList5.size());
      assertTrue(arrayList5.isEmpty());
      assertNotNull(arrayList5);
      
      ArrayList<Vassals> arrayList6 = fiefdoms0.getRebelliousVassals();
      assertSame(arrayList6, arrayList0);
      assertSame(arrayList6, arrayList5);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, arrayList6.size());
      assertTrue(arrayList6.isEmpty());
      assertNotNull(arrayList6);
      
      ArrayList<Intruders> arrayList7 = fiefdoms0.getViking();
      assertSame(arrayList7, arrayList4);
      assertSame(arrayList7, arrayList2);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(arrayList7.isEmpty());
      assertEquals(0, arrayList7.size());
      assertNotNull(arrayList7);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setFiefdomCastles(true);
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setRebelliousVassals(1406, false);
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setMagyar(0, true);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMuslim();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string0 = fiefdoms0.getName();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(string0);
      
      fiefdoms0.setLoyalVassals(0, false);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      
      fiefdoms0.setName("knightsSax.xml");
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("knightsSax.xml", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      
      fiefdoms0.setMagyar(0, false);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("knightsSax.xml", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      
      fiefdoms0.setLoyalVassals(0, false);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("knightsSax.xml", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setPersonalCastles(695);
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(695, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      
      int int0 = fiefdoms0.getPeasants();
      assertEquals(0, int0);
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(695, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "18";
      Fiefdoms fiefdoms0 = new Fiefdoms((ArrayList<String>) null, "18", "18", (-1249), false, (ArrayList<String>) null);
      assertEquals("18", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals((-1249), fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("18", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.loyalVassals = null;
      assertEquals("18", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals((-1249), fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("18", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setKingdom(false);
      assertEquals("18", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals((-1249), fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("18", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      
      // Undeclared exception!
      try { 
        fiefdoms0.setRebelliousVassals(932, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.Fiefdoms", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms((ArrayList<String>) null, "18", "18", (-1249), false, (ArrayList<String>) null);
      assertEquals("18", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("18", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1249), fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Knight knight0 = new Knight();
      assertEquals(0, knight0.getHitsCounter());
      assertFalse(knight0.getDead());
      assertNull(knight0.getPassword());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getKills());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertNotNull(knight0);
      
      ArrayList<String> arrayList0 = knight0.getVotes();
      assertEquals(0, knight0.getHitsCounter());
      assertFalse(knight0.getDead());
      assertNull(knight0.getPassword());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getKills());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = arrayList0.add("unknown rank");
      assertTrue(arrayList0.contains("unknown rank"));
      assertTrue(boolean1);
      assertEquals(0, knight0.getHitsCounter());
      assertFalse(knight0.getDead());
      assertNull(knight0.getPassword());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getKills());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(boolean1 == boolean0);
      
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNotNull(fiefdoms0);
      
      int int0 = fiefdoms0.getValue();
      assertEquals(0, int0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      fiefdoms0.setRebelliousVassals(0, true);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      String string0 = fiefdoms0.getName();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(string0);
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getMuslim();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Fiefdoms fiefdoms1 = new Fiefdoms();
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getValue());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNotNull(fiefdoms1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      String string1 = fiefdoms1.getName();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getValue());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(string1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      int int1 = fiefdoms1.getPeasants();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals(0, int1);
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getValue());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertTrue(int1 == int0);
      
      boolean boolean2 = fiefdoms1.isKingdom();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(boolean2);
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getValue());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = fiefdoms1.isKingdom();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(boolean3);
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getValue());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      ArrayList<String> arrayList2 = fiefdoms1.getNeighbors();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getValue());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(arrayList2);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      ArrayList<String> arrayList3 = fiefdoms0.getNeighbors();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(arrayList3);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      
      Fiefdoms fiefdoms2 = new Fiefdoms();
      assertEquals(0, fiefdoms2.getValue());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getName());
      assertFalse(fiefdoms2.isKingdom());
      assertNull(fiefdoms2.getOwner());
      assertNull(fiefdoms2.getConqueror());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNotNull(fiefdoms2);
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      
      fiefdoms2.setOwner("8kW9L;J");
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNotSame(fiefdoms2, fiefdoms1);
      assertEquals(0, fiefdoms2.getValue());
      assertEquals("8kW9L;J", fiefdoms2.getOwner());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getName());
      assertFalse(fiefdoms2.isKingdom());
      assertNull(fiefdoms2.getConqueror());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      
      ArrayList<String> arrayList4 = fiefdoms1.getInvaderType();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotSame(fiefdoms1, fiefdoms2);
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getValue());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(arrayList4);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(fiefdoms1.equals((Object)fiefdoms2));
      
      Fiefdoms fiefdoms3 = new Fiefdoms((ArrayList<String>) null, (String) null, "viking", 0, false, (ArrayList<String>) null);
      assertNull(fiefdoms3.getName());
      assertEquals(0, fiefdoms3.getFiefdomCastles());
      assertEquals(0, fiefdoms3.getPeasants());
      assertEquals(0, fiefdoms3.getPersonalCastles());
      assertFalse(fiefdoms3.isKingdom());
      assertEquals("viking", fiefdoms3.getOwner());
      assertEquals(0, fiefdoms3.getValue());
      assertNull(fiefdoms3.getConqueror());
      assertNotNull(fiefdoms3);
      assertFalse(fiefdoms3.equals((Object)fiefdoms2));
      assertFalse(fiefdoms3.equals((Object)fiefdoms1));
      assertFalse(fiefdoms3.equals((Object)fiefdoms0));
      
      Fiefdoms fiefdoms4 = new Fiefdoms();
      assertNull(fiefdoms4.getOwner());
      assertEquals(0, fiefdoms4.getFiefdomCastles());
      assertNull(fiefdoms4.getName());
      assertEquals(0, fiefdoms4.getValue());
      assertNull(fiefdoms4.getConqueror());
      assertEquals(0, fiefdoms4.getPersonalCastles());
      assertFalse(fiefdoms4.isKingdom());
      assertEquals(0, fiefdoms4.getPeasants());
      assertNotNull(fiefdoms4);
      assertFalse(fiefdoms4.equals((Object)fiefdoms2));
      assertFalse(fiefdoms4.equals((Object)fiefdoms3));
      assertFalse(fiefdoms4.equals((Object)fiefdoms0));
      assertFalse(fiefdoms4.equals((Object)fiefdoms1));
      
      fiefdoms4.setValue(0);
      assertNotSame(fiefdoms4, fiefdoms2);
      assertNotSame(fiefdoms4, fiefdoms3);
      assertNotSame(fiefdoms4, fiefdoms0);
      assertNotSame(fiefdoms4, fiefdoms1);
      assertNull(fiefdoms4.getOwner());
      assertEquals(0, fiefdoms4.getFiefdomCastles());
      assertNull(fiefdoms4.getName());
      assertEquals(0, fiefdoms4.getValue());
      assertNull(fiefdoms4.getConqueror());
      assertEquals(0, fiefdoms4.getPersonalCastles());
      assertFalse(fiefdoms4.isKingdom());
      assertEquals(0, fiefdoms4.getPeasants());
      assertFalse(fiefdoms4.equals((Object)fiefdoms2));
      assertFalse(fiefdoms4.equals((Object)fiefdoms3));
      assertFalse(fiefdoms4.equals((Object)fiefdoms0));
      assertFalse(fiefdoms4.equals((Object)fiefdoms1));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.loyalVassals;
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      fiefdoms0.loyalVassals = arrayList0;
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(fiefdoms0.loyalVassals.isEmpty());
      assertEquals(0, fiefdoms0.loyalVassals.size());
      
      byte[] byteArray0 = new byte[0];
      fiefdoms0.selectioncolor = byteArray0;
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setFiefdomCastles(2253);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(2253, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setValue(723);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(723, fiefdoms0.getValue());
      assertEquals(2253, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setName("#.&e");
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(723, fiefdoms0.getValue());
      assertEquals(2253, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("#.&e", fiefdoms0.getName());
      
      float[] floatArray0 = new float[2];
      fiefdoms0.setOwner("#.&e");
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("#.&e", fiefdoms0.getOwner());
      assertEquals(723, fiefdoms0.getValue());
      assertEquals(2253, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("#.&e", fiefdoms0.getName());
      
      floatArray0[0] = 778.1F;
      floatArray0[1] = (-1.0F);
      fiefdoms0.setShaderColor(floatArray0);
      assertArrayEquals(new float[] {778.1F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("#.&e", fiefdoms0.getOwner());
      assertEquals(723, fiefdoms0.getValue());
      assertEquals(2253, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("#.&e", fiefdoms0.getName());
      
      fiefdoms0.setMuslim(723, true);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("#.&e", fiefdoms0.getOwner());
      assertEquals(723, fiefdoms0.getValue());
      assertEquals(2253, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("#.&e", fiefdoms0.getName());
      
      Vassals vassals0 = new Vassals("#.&e", "#.&e");
      assertEquals("vassal", vassals0.getRank());
      assertEquals("#.&e", vassals0.getFiefdom());
      assertNull(vassals0.getLocation());
      assertEquals("#.&e", vassals0.getLord());
      assertNotNull(vassals0);
      
      vassals0.setLord("#.&e");
      assertEquals("vassal", vassals0.getRank());
      assertEquals("#.&e", vassals0.getFiefdom());
      assertNull(vassals0.getLocation());
      assertEquals("#.&e", vassals0.getLord());
      
      boolean boolean0 = arrayList0.add(vassals0);
      assertTrue(arrayList0.contains(vassals0));
      assertTrue(boolean0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("#.&e", fiefdoms0.getOwner());
      assertEquals(723, fiefdoms0.getValue());
      assertEquals(2253, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("#.&e", fiefdoms0.getName());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("vassal", vassals0.getRank());
      assertEquals("#.&e", vassals0.getFiefdom());
      assertNull(vassals0.getLocation());
      assertEquals("#.&e", vassals0.getLord());
      
      int int0 = fiefdoms0.getPersonalCastles();
      assertEquals(0, int0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("#.&e", fiefdoms0.getOwner());
      assertEquals(723, fiefdoms0.getValue());
      assertEquals(2253, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("#.&e", fiefdoms0.getName());
      
      boolean boolean1 = fiefdoms0.isKingdom();
      assertFalse(boolean1);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("#.&e", fiefdoms0.getOwner());
      assertEquals(723, fiefdoms0.getValue());
      assertEquals(2253, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("#.&e", fiefdoms0.getName());
      assertFalse(boolean1 == boolean0);
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.getRebelliousVassals();
      assertFalse(arrayList1.contains(vassals0));
      assertNotSame(arrayList1, arrayList0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("#.&e", fiefdoms0.getOwner());
      assertEquals(723, fiefdoms0.getValue());
      assertEquals(2253, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("#.&e", fiefdoms0.getName());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      assertFalse(arrayList1.equals((Object)arrayList0));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNotNull(fiefdoms0);
      
      ArrayList<String> arrayList0 = fiefdoms0.getNeighbors();
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setMuslim((ArrayList<Intruders>) null);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      
      String string0 = fiefdoms0.getConqueror();
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(string0);
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMagyar();
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Intruders intruders0 = new Intruders();
      assertNull(intruders0.getLocation());
      assertNull(intruders0.getType());
      assertNull(intruders0.getRank());
      assertNotNull(intruders0);
      
      intruders0.setLocation("");
      assertEquals("", intruders0.getLocation());
      assertNull(intruders0.getType());
      assertNull(intruders0.getRank());
      
      boolean boolean0 = arrayList0.add(intruders0);
      assertTrue(arrayList0.contains(intruders0));
      assertTrue(boolean0);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("", intruders0.getLocation());
      assertNull(intruders0.getType());
      assertNull(intruders0.getRank());
      
      fiefdoms0.setViking(arrayList0);
      assertTrue(arrayList0.contains(intruders0));
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      fiefdoms0.setOwner((String) null);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      
      Knight knight0 = new Knight((String) null, (String) null, (String) null);
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertNull(knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getRank());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getHitsCounter());
      assertNull(knight0.getName());
      assertNotNull(knight0);
      
      knight0.setHitsCounter((-992));
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertNull(knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getRank());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals((-992), knight0.getHitsCounter());
      assertNull(knight0.getName());
      
      ArrayList<String> arrayList1 = knight0.getConversation();
      assertFalse(arrayList1.contains(""));
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertNull(knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getRank());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals((-992), knight0.getHitsCounter());
      assertNull(knight0.getName());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      fiefdoms0.setNeighbors(arrayList1);
      assertFalse(arrayList1.contains(""));
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertNull(knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getRank());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals((-992), knight0.getHitsCounter());
      assertNull(knight0.getName());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      String string1 = fiefdoms0.getConqueror();
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(string1);
      
      fiefdoms0.setPersonalCastles((-897));
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals((-897), fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      
      boolean boolean1 = arrayList0.add(intruders0);
      assertTrue(arrayList0.contains(intruders0));
      assertTrue(boolean1);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals((-897), fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals("", intruders0.getLocation());
      assertNull(intruders0.getType());
      assertNull(intruders0.getRank());
      assertTrue(boolean1 == boolean0);
      
      int int0 = fiefdoms0.getPersonalCastles();
      assertEquals((-897), int0);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals((-897), fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      
      fiefdoms0.setOwner((String) null);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals((-897), fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      
      fiefdoms0.setMagyar(arrayList0);
      assertTrue(arrayList0.contains(intruders0));
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals((-897), fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      
      ArrayList<String> arrayList2 = fiefdoms0.getInvaderType();
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals((-897), fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(arrayList2);
      
      ArrayList<Vassals> arrayList3 = fiefdoms0.getLoyalVassals();
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals((-897), fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertTrue(arrayList3.isEmpty());
      assertEquals(0, arrayList3.size());
      assertNotNull(arrayList3);
      
      ArrayList<Vassals> arrayList4 = fiefdoms0.getRebelliousVassals();
      assertNotSame(arrayList4, arrayList3);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals((-897), fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertTrue(arrayList4.isEmpty());
      assertEquals(0, arrayList4.size());
      assertNotNull(arrayList4);
      assertTrue(arrayList4.equals((Object)arrayList3));
      
      float[] floatArray0 = fiefdoms0.getShaderColor();
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals((-897), fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertNotNull(floatArray0);
      
      ArrayList<String> arrayList5 = fiefdoms0.getNeighbors();
      assertFalse(arrayList5.contains(""));
      assertSame(arrayList5, arrayList1);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals((-897), fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, arrayList5.size());
      assertTrue(arrayList5.isEmpty());
      assertNotNull(arrayList5);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms((ArrayList<String>) null, "", "", (-1213), true, (ArrayList<String>) null);
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals((-1213), fiefdoms0.getValue());
      assertEquals("", fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setOwner("");
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals((-1213), fiefdoms0.getValue());
      assertEquals("", fiefdoms0.getOwner());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Knight knight0 = new Knight();
      assertFalse(knight0.getDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertNotNull(knight0);
      
      knight0.setName((String) null);
      assertFalse(knight0.getDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      
      String string0 = knight0.getName();
      assertFalse(knight0.getDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertNull(string0);
      
      ArrayList<String> arrayList0 = knight0.getFiefdoms();
      assertFalse(knight0.getDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ArrayList<Mercenaries> arrayList1 = new ArrayList<Mercenaries>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      knight0.setMercenaries(arrayList1);
      assertFalse(knight0.getDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, "src.Mercenaries", (String) null, 2, false, arrayList0);
      assertFalse(arrayList0.contains("src.Mercenaries"));
      assertFalse(knight0.getDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("src.Mercenaries", fiefdoms0.getName());
      assertEquals(2, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setLoyalVassals(2680, true);
      assertFalse(arrayList0.contains("src.Mercenaries"));
      assertFalse(knight0.getDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("src.Mercenaries", fiefdoms0.getName());
      assertEquals(2, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      
      Fiefdoms fiefdoms1 = new Fiefdoms(arrayList0, "DZ'Wr", ";*h&v8k", 2, false, arrayList0);
      assertFalse(arrayList0.contains("DZ'Wr"));
      assertFalse(knight0.getDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("DZ'Wr", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(2, fiefdoms1.getValue());
      assertEquals(";*h&v8k", fiefdoms1.getOwner());
      assertNotNull(fiefdoms1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      ArrayList<Intruders> arrayList2 = fiefdoms0.getMagyar();
      assertFalse(arrayList0.contains("DZ'Wr"));
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(knight0.getDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("src.Mercenaries", fiefdoms0.getName());
      assertEquals(2, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertNotNull(arrayList2);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      
      fiefdoms0.setInvaderType(arrayList0);
      assertFalse(arrayList0.contains("DZ'Wr"));
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(knight0.getDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("src.Mercenaries", fiefdoms0.getName());
      assertEquals(2, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      
      fiefdoms1.setRebelliousVassals(fiefdoms0.loyalVassals);
      assertFalse(arrayList0.contains("DZ'Wr"));
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(knight0.getDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("src.Mercenaries", fiefdoms0.getName());
      assertEquals(2, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("DZ'Wr", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(2, fiefdoms1.getValue());
      assertEquals(";*h&v8k", fiefdoms1.getOwner());
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      knight0.promote((String) null, "src.Mercenaries");
      assertFalse(knight0.getDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      
      fiefdoms0.setRebelliousVassals(2, false);
      assertFalse(arrayList0.contains("src.Mercenaries"));
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(knight0.getDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("src.Mercenaries", fiefdoms0.getName());
      assertEquals(2, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      
      fiefdoms1.setOwner((String) null);
      assertFalse(arrayList0.contains("src.Mercenaries"));
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(knight0.getDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("DZ'Wr", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(2, fiefdoms1.getValue());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      ArrayList<Intruders> arrayList3 = fiefdoms1.getMuslim();
      assertFalse(arrayList0.contains("src.Mercenaries"));
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotSame(arrayList3, arrayList2);
      assertFalse(knight0.getDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("DZ'Wr", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(2, fiefdoms1.getValue());
      assertEquals(0, arrayList3.size());
      assertTrue(arrayList3.isEmpty());
      assertNotNull(arrayList3);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertTrue(arrayList3.equals((Object)arrayList2));
      
      // Undeclared exception!
      try { 
        fiefdoms1.setRebelliousVassals(2680, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      
      int int0 = fiefdoms0.getValue();
      assertEquals(0, int0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setPeasants((-1));
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals((-1), fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getRebelliousVassals();
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals((-1), fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      int int0 = fiefdoms0.getPeasants();
      assertEquals((-1), int0);
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals((-1), fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setRebelliousVassals(0, false);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      
      Knight knight0 = new Knight();
      assertEquals(0, knight0.getHitsCounter());
      assertFalse(knight0.getDead());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getTotalMoney());
      assertNull(knight0.getPassword());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertNotNull(knight0);
      
      knight0.setTotalMoney(351);
      assertEquals(0, knight0.getHitsCounter());
      assertFalse(knight0.getDead());
      assertFalse(knight0.isDead());
      assertEquals(351, knight0.getTotalMoney());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      
      ArrayList<Vassals> arrayList0 = knight0.getMovingVassals();
      assertEquals(0, knight0.getHitsCounter());
      assertFalse(knight0.getDead());
      assertFalse(knight0.isDead());
      assertEquals(351, knight0.getTotalMoney());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      fiefdoms0.setLoyalVassals(arrayList0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, knight0.getHitsCounter());
      assertFalse(knight0.getDead());
      assertFalse(knight0.isDead());
      assertEquals(351, knight0.getTotalMoney());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      fiefdoms0.setConqueror("muslim");
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("muslim", fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setKingdom(true);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals("muslim", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      ArrayList<String> arrayList1 = fiefdoms0.getInvaderType();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals("muslim", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(arrayList1);
      
      ArrayList<String> arrayList2 = fiefdoms0.getNeighbors();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals("muslim", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(arrayList2);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setInvaderType((ArrayList<String>) null);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      
      Fiefdoms fiefdoms1 = new Fiefdoms();
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getValue());
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNotNull(fiefdoms1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      ArrayList<Intruders> arrayList0 = fiefdoms1.getMagyar();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getValue());
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      ArrayList<Vassals> arrayList1 = fiefdoms1.getRebelliousVassals();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getValue());
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Knight knight0 = new Knight();
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getwound());
      assertNotNull(knight0);
      
      String string0 = knight0.getLocation();
      assertEquals("Ile-De-France", string0);
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getwound());
      assertNotNull(string0);
      
      String string1 = knight0.getName();
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getwound());
      assertNull(string1);
      
      String string2 = knight0.getName();
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getwound());
      assertNull(string2);
      
      ArrayList<String> arrayList0 = knight0.getFiefdoms();
      assertFalse(arrayList0.contains(string0));
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getwound());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Knight knight1 = new Knight();
      assertNull(knight1.getPassword());
      assertEquals("knight", knight1.getRank());
      assertEquals("", knight1.getOrder());
      assertEquals(0, knight1.getScore());
      assertFalse(knight1.getDead());
      assertEquals(0, knight1.getTotalMoney());
      assertEquals("Ile-De-France", knight1.getLocation());
      assertNull(knight1.getName());
      assertEquals(0, knight1.getwound());
      assertEquals(0, knight1.getRebellionCounter());
      assertEquals(0, knight1.getKills());
      assertEquals(0, knight1.getWounds());
      assertFalse(knight1.isDead());
      assertEquals(0, knight1.getHitsCounter());
      assertEquals(0, knight1.getKill());
      assertNotNull(knight1);
      assertFalse(knight1.equals((Object)knight0));
      
      ArrayList<String> arrayList1 = knight1.getConversation();
      assertFalse(arrayList1.contains(string0));
      assertNotSame(knight1, knight0);
      assertNotSame(arrayList1, arrayList0);
      assertNull(knight1.getPassword());
      assertEquals("knight", knight1.getRank());
      assertEquals("", knight1.getOrder());
      assertEquals(0, knight1.getScore());
      assertFalse(knight1.getDead());
      assertEquals(0, knight1.getTotalMoney());
      assertEquals("Ile-De-France", knight1.getLocation());
      assertNull(knight1.getName());
      assertEquals(0, knight1.getwound());
      assertEquals(0, knight1.getRebellionCounter());
      assertEquals(0, knight1.getKills());
      assertEquals(0, knight1.getWounds());
      assertFalse(knight1.isDead());
      assertEquals(0, knight1.getHitsCounter());
      assertEquals(0, knight1.getKill());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      assertFalse(knight1.equals((Object)knight0));
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList1, "", "", 1618, false, arrayList0);
      assertFalse(arrayList0.contains(""));
      assertFalse(arrayList1.contains(""));
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getwound());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(knight1.getPassword());
      assertEquals("knight", knight1.getRank());
      assertEquals("", knight1.getOrder());
      assertEquals(0, knight1.getScore());
      assertFalse(knight1.getDead());
      assertEquals(0, knight1.getTotalMoney());
      assertEquals("Ile-De-France", knight1.getLocation());
      assertNull(knight1.getName());
      assertEquals(0, knight1.getwound());
      assertEquals(0, knight1.getRebellionCounter());
      assertEquals(0, knight1.getKills());
      assertEquals(0, knight1.getWounds());
      assertFalse(knight1.isDead());
      assertEquals(0, knight1.getHitsCounter());
      assertEquals(0, knight1.getKill());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(1618, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNotNull(fiefdoms0);
      assertFalse(knight0.equals((Object)knight1));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertFalse(knight1.equals((Object)knight0));
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      int int0 = fiefdoms0.getPeasants();
      assertFalse(arrayList0.contains(""));
      assertFalse(arrayList1.contains(""));
      assertNotSame(knight0, knight1);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(knight1, knight0);
      assertNotSame(arrayList1, arrayList0);
      assertEquals(0, int0);
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getwound());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(knight1.getPassword());
      assertEquals("knight", knight1.getRank());
      assertEquals("", knight1.getOrder());
      assertEquals(0, knight1.getScore());
      assertFalse(knight1.getDead());
      assertEquals(0, knight1.getTotalMoney());
      assertEquals("Ile-De-France", knight1.getLocation());
      assertNull(knight1.getName());
      assertEquals(0, knight1.getwound());
      assertEquals(0, knight1.getRebellionCounter());
      assertEquals(0, knight1.getKills());
      assertEquals(0, knight1.getWounds());
      assertFalse(knight1.isDead());
      assertEquals(0, knight1.getHitsCounter());
      assertEquals(0, knight1.getKill());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(1618, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(knight0.equals((Object)knight1));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertFalse(knight1.equals((Object)knight0));
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      boolean boolean0 = arrayList1.add((String) null);
      assertFalse(arrayList1.contains(""));
      assertNotSame(knight1, knight0);
      assertNotSame(arrayList1, arrayList0);
      assertTrue(boolean0);
      assertNull(knight1.getPassword());
      assertEquals("knight", knight1.getRank());
      assertEquals("", knight1.getOrder());
      assertEquals(0, knight1.getScore());
      assertFalse(knight1.getDead());
      assertEquals(0, knight1.getTotalMoney());
      assertEquals("Ile-De-France", knight1.getLocation());
      assertNull(knight1.getName());
      assertEquals(0, knight1.getwound());
      assertEquals(0, knight1.getRebellionCounter());
      assertEquals(0, knight1.getKills());
      assertEquals(0, knight1.getWounds());
      assertFalse(knight1.isDead());
      assertEquals(0, knight1.getHitsCounter());
      assertEquals(0, knight1.getKill());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertFalse(knight1.equals((Object)knight0));
      assertFalse(arrayList1.equals((Object)arrayList0));
      
      Fiefdoms fiefdoms1 = new Fiefdoms(arrayList1, "", "", 2407, false, arrayList1);
      assertFalse(arrayList1.contains(""));
      assertNull(knight1.getPassword());
      assertEquals("knight", knight1.getRank());
      assertEquals("", knight1.getOrder());
      assertEquals(0, knight1.getScore());
      assertFalse(knight1.getDead());
      assertEquals(0, knight1.getTotalMoney());
      assertEquals("Ile-De-France", knight1.getLocation());
      assertNull(knight1.getName());
      assertEquals(0, knight1.getwound());
      assertEquals(0, knight1.getRebellionCounter());
      assertEquals(0, knight1.getKills());
      assertEquals(0, knight1.getWounds());
      assertFalse(knight1.isDead());
      assertEquals(0, knight1.getHitsCounter());
      assertEquals(0, knight1.getKill());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("", fiefdoms1.getName());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals("", fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(2407, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNotNull(fiefdoms1);
      assertFalse(knight1.equals((Object)knight0));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)103;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)103;
      fiefdoms1.setSelectioncolor(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-115), (byte)103, (byte)5, (byte)0, (byte)5, (byte)103, (byte)2, (byte)103}, byteArray0);
      assertFalse(arrayList1.contains(""));
      assertNotSame(knight1, knight0);
      assertNotSame(arrayList1, arrayList0);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals(9, byteArray0.length);
      assertNull(knight1.getPassword());
      assertEquals("knight", knight1.getRank());
      assertEquals("", knight1.getOrder());
      assertEquals(0, knight1.getScore());
      assertFalse(knight1.getDead());
      assertEquals(0, knight1.getTotalMoney());
      assertEquals("Ile-De-France", knight1.getLocation());
      assertNull(knight1.getName());
      assertEquals(0, knight1.getwound());
      assertEquals(0, knight1.getRebellionCounter());
      assertEquals(0, knight1.getKills());
      assertEquals(0, knight1.getWounds());
      assertFalse(knight1.isDead());
      assertEquals(0, knight1.getHitsCounter());
      assertEquals(0, knight1.getKill());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("", fiefdoms1.getName());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals("", fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(2407, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertFalse(knight1.equals((Object)knight0));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      ArrayList<Intruders> arrayList2 = fiefdoms1.getViking();
      assertFalse(arrayList1.contains(""));
      assertNotSame(knight1, knight0);
      assertNotSame(arrayList1, arrayList0);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNull(knight1.getPassword());
      assertEquals("knight", knight1.getRank());
      assertEquals("", knight1.getOrder());
      assertEquals(0, knight1.getScore());
      assertFalse(knight1.getDead());
      assertEquals(0, knight1.getTotalMoney());
      assertEquals("Ile-De-France", knight1.getLocation());
      assertNull(knight1.getName());
      assertEquals(0, knight1.getwound());
      assertEquals(0, knight1.getRebellionCounter());
      assertEquals(0, knight1.getKills());
      assertEquals(0, knight1.getWounds());
      assertFalse(knight1.isDead());
      assertEquals(0, knight1.getHitsCounter());
      assertEquals(0, knight1.getKill());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("", fiefdoms1.getName());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals("", fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(2407, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNotNull(arrayList2);
      assertFalse(knight1.equals((Object)knight0));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      fiefdoms1.setFiefdomCastles((int) (byte)2);
      assertFalse(arrayList1.contains(""));
      assertNotSame(knight1, knight0);
      assertNotSame(arrayList1, arrayList0);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNull(knight1.getPassword());
      assertEquals("knight", knight1.getRank());
      assertEquals("", knight1.getOrder());
      assertEquals(0, knight1.getScore());
      assertFalse(knight1.getDead());
      assertEquals(0, knight1.getTotalMoney());
      assertEquals("Ile-De-France", knight1.getLocation());
      assertNull(knight1.getName());
      assertEquals(0, knight1.getwound());
      assertEquals(0, knight1.getRebellionCounter());
      assertEquals(0, knight1.getKills());
      assertEquals(0, knight1.getWounds());
      assertFalse(knight1.isDead());
      assertEquals(0, knight1.getHitsCounter());
      assertEquals(0, knight1.getKill());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("", fiefdoms1.getName());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(2, fiefdoms1.getFiefdomCastles());
      assertEquals("", fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(2407, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertFalse(knight1.equals((Object)knight0));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      fiefdoms0.buyFiefdomCastles(1618);
      assertFalse(arrayList0.contains(""));
      assertFalse(arrayList1.contains(""));
      assertNotSame(knight0, knight1);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(knight1, knight0);
      assertNotSame(arrayList1, arrayList0);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getwound());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(knight1.getPassword());
      assertEquals("knight", knight1.getRank());
      assertEquals("", knight1.getOrder());
      assertEquals(0, knight1.getScore());
      assertFalse(knight1.getDead());
      assertEquals(0, knight1.getTotalMoney());
      assertEquals("Ile-De-France", knight1.getLocation());
      assertNull(knight1.getName());
      assertEquals(0, knight1.getwound());
      assertEquals(0, knight1.getRebellionCounter());
      assertEquals(0, knight1.getKills());
      assertEquals(0, knight1.getWounds());
      assertFalse(knight1.isDead());
      assertEquals(0, knight1.getHitsCounter());
      assertEquals(0, knight1.getKill());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertEquals(1618, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(knight0.equals((Object)knight1));
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertFalse(knight1.equals((Object)knight0));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Knight knight0 = new Knight();
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertFalse(knight0.getDead());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertNull(knight0.getPassword());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals("", knight0.getOrder());
      assertNull(knight0.getName());
      assertNotNull(knight0);
      
      String string0 = null;
      ArrayList<String> arrayList0 = knight0.getFiefdoms();
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertFalse(knight0.getDead());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertNull(knight0.getPassword());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals("", knight0.getOrder());
      assertNull(knight0.getName());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = 13;
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, (String) null, (String) null, 13, true, arrayList0);
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertFalse(knight0.getDead());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertNull(knight0.getPassword());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals("", knight0.getOrder());
      assertNull(knight0.getName());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(13, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setInvaderType(arrayList0);
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertFalse(knight0.getDead());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertNull(knight0.getPassword());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals("", knight0.getOrder());
      assertNull(knight0.getName());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(13, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      
      fiefdoms0.setRebelliousVassals(fiefdoms0.loyalVassals);
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertFalse(knight0.getDead());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertNull(knight0.getPassword());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals("", knight0.getOrder());
      assertNull(knight0.getName());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(13, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      
      knight0.promote("magyar", "magyar");
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertFalse(knight0.getDead());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertNull(knight0.getPassword());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals("", knight0.getOrder());
      assertNull(knight0.getName());
      
      // Undeclared exception!
      try { 
        fiefdoms0.setRebelliousVassals(13, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Size: 6
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      ArrayList<Vassals> arrayList0 = new ArrayList<Vassals>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      fiefdoms0.setLoyalVassals(arrayList0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ArrayList<String> arrayList1 = fiefdoms0.getInvaderType();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(arrayList1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNotNull(fiefdoms0);
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMuslim();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      fiefdoms0.setMuslim(arrayList0);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getMuslim();
      assertSame(arrayList1, arrayList0);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms((ArrayList<String>) null, (String) null, (String) null, 2, false, (ArrayList<String>) null);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(2, fiefdoms0.getValue());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setViking((-2942), false);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(2, fiefdoms0.getValue());
      
      String string0 = fiefdoms0.getConqueror();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(2, fiefdoms0.getValue());
      assertNull(string0);
      
      fiefdoms0.setMuslim(0, false);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(2, fiefdoms0.getValue());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setLoyalVassals(87, true);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMuslim();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Intruders intruders0 = new Intruders();
      assertNull(intruders0.getRank());
      assertNull(intruders0.getType());
      assertNull(intruders0.getLocation());
      assertNotNull(intruders0);
      
      intruders0.setType(" castles for ");
      assertEquals(" castles for ", intruders0.getType());
      assertNull(intruders0.getRank());
      assertNull(intruders0.getLocation());
      
      intruders0.setLocation("");
      assertEquals(" castles for ", intruders0.getType());
      assertNull(intruders0.getRank());
      assertEquals("", intruders0.getLocation());
      
      intruders0.setType("");
      assertNull(intruders0.getRank());
      assertEquals("", intruders0.getType());
      assertEquals("", intruders0.getLocation());
      
      intruders0.setType("src.Fiefdoms");
      assertNull(intruders0.getRank());
      assertEquals("", intruders0.getLocation());
      assertEquals("src.Fiefdoms", intruders0.getType());
      
      arrayList0.add(0, intruders0);
      assertTrue(arrayList0.contains(intruders0));
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(intruders0.getRank());
      assertEquals("", intruders0.getLocation());
      assertEquals("src.Fiefdoms", intruders0.getType());
      
      fiefdoms0.setViking(arrayList0);
      assertTrue(arrayList0.contains(intruders0));
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      fiefdoms0.setFiefdomCastles(false);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      
      fiefdoms0.setKingdom(false);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      
      fiefdoms0.setViking(659, true);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      
      int int0 = fiefdoms0.getPeasants();
      assertEquals(0, int0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, (String) null, (String) null, 807, true, arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(807, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setRebelliousVassals(1746, true);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 16:24:53 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.ImageProducer;
import jigl.image.ROI;
import jigl.image.types.ComplexImage;
import jigl.image.types.RealGrayImage;
import jigl.math.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ComplexImage_ESTest extends ComplexImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.divide(complexImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      rOI0.setROI(1, (-2319), 0, (-475));
      assertEquals(2, rOI0.X());
      assertEquals(1845, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals((-2319), rOI0.uy());
      assertEquals((-475), rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(complexImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(complexImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI(0, 0, 0, 2);
      assertEquals(3, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(2, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI();
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(complexImage0, rOI0, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      rOI0.setROI(0, 2532, 2532, (-1));
      assertEquals((-1), rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(2534, rOI0.Y());
      assertEquals(2532, rOI0.ly());
      assertEquals(2532, rOI0.lx());
      assertEquals(2533, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.divide((float) (-1240), 38.8F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 621);
      assertEquals(1, complexImage0.X());
      assertEquals(621, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI(1, 771, 129, (-1));
      assertEquals(771, rOI0.ly());
      assertEquals(773, rOI0.Y());
      assertEquals(1, rOI0.ux());
      assertEquals((-1), rOI0.uy());
      assertEquals(129, rOI0.X());
      assertEquals(129, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(0.0F, 2213.759F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.add(0.0F, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI(828, (-1917), (-16777216), 828);
      assertEquals((-16777216), rOI0.ux());
      assertEquals(2746, rOI0.Y());
      assertEquals((-1917), rOI0.uy());
      assertEquals(16778045, rOI0.X());
      assertEquals(828, rOI0.lx());
      assertEquals(828, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.setReal(802, 805, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ComplexImage complexImage2 = complexImage0.multiply(0.0F, (float) 829);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotNull(complexImage2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(822, 829);
      assertEquals(829, complexImage0.Y());
      assertEquals(822, complexImage0.X());
      assertNotNull(complexImage0);
      
      complexImage0.setReal(16, 16, 651.0F);
      assertEquals(829, complexImage0.Y());
      assertEquals(822, complexImage0.X());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      ComplexImage complexImage0 = new ComplexImage(754, 1230);
      assertEquals(1230, complexImage0.Y());
      assertEquals(754, complexImage0.X());
      assertNotNull(complexImage0);
      
      complexImage0.setImag(0, 1, (-1.0F), rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1230, complexImage0.Y());
      assertEquals(754, complexImage0.X());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      String string0 = complexImage0.toString(rOI0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(string0);
      assertEquals("1:1\nnull \n1:1\nnull \n", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertNotNull(string0);
      assertEquals("1:1\nnull \n1:1\nnull \n", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(22, 0);
      assertEquals(22, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.subtract(104.5F, (float) 22);
      assertEquals(22, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(22, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(22, 22);
      assertEquals(22, complexImage0.X());
      assertEquals(22, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertEquals(22, complexImage0.X());
      assertEquals(22, complexImage0.Y());
      assertEquals(22, realGrayImage0.Y());
      assertEquals(22, realGrayImage0.X());
      assertNotNull(realGrayImage0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotNull(realGrayImage0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      RealGrayImage realGrayImage0 = complexImage1.phaseImage();
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(realGrayImage0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.multiply((float) (-4), (float) (-4));
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.addbuffer(829, 1, (-987), 1, (float) (-987), (float) 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(829, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      Complex complex0 = complexImage1.min();
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(829, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(987L, complex0.longValue());
      assertEquals(987, complex0.intValue());
      assertEquals(987.000506585483, complex0.magnitude(), 0.01);
      assertEquals(987.000506585483, complex0.doubleValue(), 0.01);
      assertEquals((byte) (-37), complex0.byteValue());
      assertEquals(987.0005F, complex0.floatValue(), 0.01F);
      assertEquals((-987.0), complex0.real(), 0.01);
      assertEquals(1.0, complex0.imaginary(), 0.01);
      assertEquals((short)987, complex0.shortValue());
      assertEquals(3.1405794827105344, complex0.arg(), 0.01);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complex0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      RealGrayImage realGrayImage0 = complexImage1.magnitudeImage();
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(1, realGrayImage0.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(realGrayImage0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.imag();
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(realGrayImage0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.imag();
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      assertNotNull(realGrayImage0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertNotNull(realGrayImage0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      
      ImageProducer imageProducer0 = complexImage0.getJavaImage();
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertSame(complexImage0, complexImage1);
      assertNotNull(imageProducer0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      ComplexImage complexImage1 = complexImage0.copy(rOI0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.copy();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.copy();
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      Complex complex0 = new Complex();
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertNotNull(complex0);
      
      ComplexImage complexImage1 = complexImage0.clear(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, 0, 0, 2620.765F, (-1742.307F));
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, (float) 1, 0.0F);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.addbuffer(700, 1, (-1.0F), 3590.4937F);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(700, complexImage1.X());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int0 = complexImage0.Y();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertNotNull(complexImage0);
      
      int int0 = complexImage0.X();
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(198, 1);
      assertEquals(198, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI(1083, 1083, 1083, 1083);
      assertEquals(1, rOI0.X());
      assertEquals(1083, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1083, rOI0.lx());
      assertEquals(1083, rOI0.uy());
      assertEquals(1083, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1083
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(51, 51);
      assertEquals(51, complexImage0.Y());
      assertEquals(51, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(51, complexImage0.Y());
      assertEquals(51, complexImage0.X());
      assertEquals(51, complexImage1.X());
      assertEquals(51, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      // Undeclared exception!
      complexImage1.toString();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.addbuffer(829, 0, 0, (-1240), (-1426.3004F), (float) 0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(829, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(complexImage1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(800, 1, (float) 0, 1.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI(1, 826, 1, 826);
      assertEquals(826, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(826, rOI0.uy());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(0.0F, (float) 1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 826
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI(0, 0, 0, 2);
      assertEquals(0, rOI0.ux());
      assertEquals(2, rOI0.ly());
      assertEquals(3, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.setReal(255, 0, 2425.6846F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 255
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.setReal(16, 1, (float) 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(667, 1166);
      assertEquals(1166, complexImage0.Y());
      assertEquals(667, complexImage0.X());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(667, 1166, (float) 1166);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1166
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(194, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(194, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI(1076, 1076, (-100), 1076);
      assertEquals(1076, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1076, rOI0.lx());
      assertEquals((-100), rOI0.ux());
      assertEquals(1177, rOI0.X());
      assertEquals(1076, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.setImag(194, 1, 2069.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1077
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.setImag(1, 1, 32767.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertNotNull(complexImage0);
      
      Complex complex0 = new Complex();
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertNotNull(complex0);
      
      // Undeclared exception!
      try { 
        complexImage0.set(1857, 1, complex0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(4603, 4603);
      assertEquals(4603, complexImage0.Y());
      assertEquals(4603, complexImage0.X());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.set(4603, 4603, (float) 4603, (float) 4603);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4603
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }
}

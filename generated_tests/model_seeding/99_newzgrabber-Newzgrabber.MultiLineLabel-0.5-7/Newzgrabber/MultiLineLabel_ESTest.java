/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 20:27:27 GMT 2019
 */

package Newzgrabber;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Newzgrabber.MultiLineLabel;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.SystemColor;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeListener;
import java.text.AttributedCharacterIterator;
import java.util.HashMap;
import java.util.Map;
import javax.swing.DebugGraphics;
import javax.swing.JSlider;
import javax.swing.plaf.basic.BasicLabelUI;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.LabelView;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiLineLabel_ESTest extends MultiLineLabel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DebugGraphics debugGraphics0 = new DebugGraphics();
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("DE`,/=ezzH", 1, 2, 2);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      Element element0 = defaultStyledDocument0.getDefaultRootElement();
      LabelView labelView0 = new LabelView(element0);
      Font font0 = labelView0.getFont();
      multiLineLabel0.setFont(font0);
      // Undeclared exception!
      try { 
        multiLineLabel0.paint(debugGraphics0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DebugGraphics debugGraphics0 = new DebugGraphics();
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("South", 2);
      // Undeclared exception!
      try { 
        multiLineLabel0.paint(debugGraphics0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DebugGraphics debugGraphics0 = new DebugGraphics();
      Font font0 = Font.decode("mQ3R@");
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("TR", 1718, 1718, (-2343));
      multiLineLabel0.setFont(font0);
      // Undeclared exception!
      try { 
        multiLineLabel0.paint(debugGraphics0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("P=[o_J;x7sV4hd", (-651), 2);
      // Undeclared exception!
      try { 
        multiLineLabel0.paint((Graphics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Newzgrabber.MultiLineLabel", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      Element element0 = defaultStyledDocument0.getDefaultRootElement();
      LabelView labelView0 = new LabelView(element0);
      Font font0 = labelView0.getFont();
      MultiLineLabel multiLineLabel0 = new MultiLineLabel(">>|P!v('<Z;:US");
      multiLineLabel0.setFont(font0);
      BufferedImage bufferedImage0 = new BufferedImage(56, 30, 1);
      Graphics graphics0 = bufferedImage0.getGraphics();
      DebugGraphics debugGraphics0 = new DebugGraphics(graphics0);
      multiLineLabel0.paint(debugGraphics0);
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(10, multiLineLabel0.getMarginHeight());
      assertEquals(10, multiLineLabel0.getMarginWidth());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DebugGraphics debugGraphics0 = new DebugGraphics();
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("~Cance");
      multiLineLabel0.num_lines = (int) (byte) (-20);
      multiLineLabel0.paint(debugGraphics0);
      assertEquals(10, multiLineLabel0.getMarginHeight());
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(10, multiLineLabel0.getMarginWidth());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("\n");
      DebugGraphics debugGraphics0 = new DebugGraphics();
      multiLineLabel0.paint(debugGraphics0);
      assertEquals(10, multiLineLabel0.getMarginHeight());
      assertEquals(10, multiLineLabel0.getMarginWidth());
      assertEquals(0, multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("", (-3987), (-3987));
      Dimension dimension0 = multiLineLabel0.getMinimumSize();
      assertEquals(0, dimension0.width);
      assertEquals((-3987), multiLineLabel0.getMarginHeight());
      assertEquals((-3987), multiLineLabel0.getMarginWidth());
      assertEquals(0, multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("", 3413);
      Dimension dimension0 = multiLineLabel0.getPreferredSize();
      assertEquals(20, dimension0.width);
      assertEquals(3413, multiLineLabel0.getAlignment());
      assertEquals(20, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("P=[o_J;x7sV4hd", (-651), 2);
      Dimension dimension0 = multiLineLabel0.getPreferredSize();
      assertEquals(4, dimension0.height);
      assertEquals((-1302), dimension0.width);
      assertEquals(0, multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("DX#79Ca[`b:>OmzF^_@");
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      AttributeSet attributeSet0 = styleContext0.addAttributes(styleContext_NamedStyle0, styleContext_NamedStyle0);
      Font font0 = styleContext0.getFont(attributeSet0);
      multiLineLabel0.setFont(font0);
      Dimension dimension0 = multiLineLabel0.getPreferredSize();
      assertEquals(153, dimension0.width);
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(35, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("ERROR: ", (-3329));
      assertEquals(10, multiLineLabel0.getMarginHeight());
      
      multiLineLabel0.setMarginHeight(0);
      assertEquals((-3329), multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("[Up to parent directory]", 268, 0, 3);
      Font font0 = new Font("[Up to parent directory]", 0, (-195));
      multiLineLabel0.setFont(font0);
      assertEquals(0, multiLineLabel0.getMarginHeight());
      assertEquals(268, multiLineLabel0.getMarginWidth());
      assertEquals(3, multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("mhp@OE7b(-&75eozjm", 1685, 197, 1685);
      multiLineLabel0.newLabel("mhp@OE7b(-&75eozjm");
      assertEquals(1685, multiLineLabel0.getAlignment());
      assertEquals(197, multiLineLabel0.getMarginHeight());
      assertEquals(1685, multiLineLabel0.getMarginWidth());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Font font0 = Font.decode("mQ3R@");
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("TR", 1718, 1718, (-2343));
      multiLineLabel0.setFont(font0);
      multiLineLabel0.measure();
      assertEquals((-2343), multiLineLabel0.getAlignment());
      assertEquals(1718, multiLineLabel0.getMarginWidth());
      assertEquals(1718, multiLineLabel0.getMarginHeight());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("mhp@OE7b(-&75eozjm", 1685, 197, 1685);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      AttributeSet attributeSet0 = styleContext0.getEmptySet();
      Font font0 = styleContext0.getFont(attributeSet0);
      multiLineLabel0.setFont(font0);
      multiLineLabel0.addNotify();
      assertEquals(1685, multiLineLabel0.getAlignment());
      assertEquals(1685, multiLineLabel0.getMarginWidth());
      assertEquals(197, multiLineLabel0.getMarginHeight());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("VvJ-A1fuL0bk2%BqJ@", 0, 0, 3);
      HashMap<AttributedCharacterIterator.Attribute, JSlider> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, JSlider>();
      Font font0 = Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashMap0);
      multiLineLabel0.setFont(font0);
      multiLineLabel0.setLabel("\"IH");
      assertEquals(0, multiLineLabel0.getMarginWidth());
      assertEquals(3, multiLineLabel0.getAlignment());
      assertEquals(0, multiLineLabel0.getMarginHeight());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("VvJ-A1fuL0bk2%BqJ@", 0, 0, 3);
      Dimension dimension0 = multiLineLabel0.getPreferredSize();
      assertEquals(0, dimension0.width);
      assertEquals(3, multiLineLabel0.getAlignment());
      assertEquals(0, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("P=[o_J;x7sV4hd", (-651), (-651));
      Dimension dimension0 = multiLineLabel0.getPreferredSize();
      assertEquals((-1302), dimension0.height);
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals((-1302), dimension0.width);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("DX#79Ca[`b:>OmzF^_@");
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      AttributeSet attributeSet0 = styleContext0.addAttributes(styleContext_NamedStyle0, styleContext_NamedStyle0);
      Font font0 = styleContext0.getFont(attributeSet0);
      multiLineLabel0.setFont(font0);
      Dimension dimension0 = multiLineLabel0.getMinimumSize();
      assertEquals(133, dimension0.width);
      assertEquals(10, multiLineLabel0.getMarginWidth());
      assertEquals(15, dimension0.height);
      assertEquals(10, multiLineLabel0.getMarginHeight());
      assertEquals(0, multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("VvJ-A1fuL0bk2%BqJ@", 0, 0, 3);
      int int0 = multiLineLabel0.getMarginWidth();
      assertEquals(0, multiLineLabel0.getMarginHeight());
      assertEquals(0, int0);
      assertEquals(3, multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("[Up to parent directory]", (-329), 874);
      int int0 = multiLineLabel0.getMarginWidth();
      assertEquals((-329), int0);
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(874, multiLineLabel0.getMarginHeight());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("South", (-3167), 0, (-3167));
      int int0 = multiLineLabel0.getMarginHeight();
      assertEquals(0, int0);
      assertEquals((-3167), multiLineLabel0.getMarginWidth());
      assertEquals((-3167), multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("P=[o_J;x7sV4hd", 1);
      int int0 = multiLineLabel0.getMarginHeight();
      assertEquals(1, multiLineLabel0.getAlignment());
      assertEquals(10, multiLineLabel0.getMarginWidth());
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("VvJ-A1fuL0bk2%BqJ@", 0, 0, 3);
      int int0 = multiLineLabel0.getAlignment();
      assertEquals(0, multiLineLabel0.getMarginHeight());
      assertEquals(0, multiLineLabel0.getMarginWidth());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("", (-1259), (-519), (-519));
      int int0 = multiLineLabel0.getAlignment();
      assertEquals((-1259), multiLineLabel0.getMarginWidth());
      assertEquals((-519), int0);
      assertEquals((-519), multiLineLabel0.getMarginHeight());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("B6CUc");
      // Undeclared exception!
      try { 
        multiLineLabel0.setFont((Font) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<AttributedCharacterIterator.Attribute, JSlider> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, JSlider>();
      Font font0 = Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashMap0);
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("j*r$4'DBC&'", 300, 143);
      BasicLabelUI basicLabelUI0 = new BasicLabelUI();
      multiLineLabel0.addPropertyChangeListener((PropertyChangeListener) basicLabelUI0);
      // Undeclared exception!
      try { 
        multiLineLabel0.setFont(font0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Newzgrabber.MultiLineLabel cannot be cast to javax.swing.JLabel
         //
         verifyException("javax.swing.plaf.basic.BasicLabelUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("\n");
      // Undeclared exception!
      try { 
        multiLineLabel0.newLabel((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("");
      // Undeclared exception!
      try { 
        multiLineLabel0.measure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = null;
      try {
        multiLineLabel0 = new MultiLineLabel((String) null, 29, 29, 369);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = null;
      try {
        multiLineLabel0 = new MultiLineLabel((String) null, (-651), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = null;
      try {
        multiLineLabel0 = new MultiLineLabel((String) null, 903);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = null;
      try {
        multiLineLabel0 = new MultiLineLabel((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DebugGraphics debugGraphics0 = new DebugGraphics();
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("Cancel", 1);
      // Undeclared exception!
      try { 
        multiLineLabel0.paint(debugGraphics0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("^|");
      Font font0 = new Font("^|", 1, 0);
      multiLineLabel0.setFont(font0);
      assertEquals(10, multiLineLabel0.getMarginWidth());
      assertEquals(10, multiLineLabel0.getMarginHeight());
      assertEquals(0, multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("1*");
      multiLineLabel0.setAlignment((-3876));
      assertEquals((-3876), multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("ERROR: ");
      int int0 = multiLineLabel0.getAlignment();
      assertEquals(10, multiLineLabel0.getMarginHeight());
      assertEquals(10, multiLineLabel0.getMarginWidth());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("P=[o_J;x7sV4hd", (-651), (-651));
      int int0 = multiLineLabel0.getMarginHeight();
      assertEquals((-651), multiLineLabel0.getMarginWidth());
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals((-651), int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("VvJ-A1fuL0bk2%BqJ@", 0, 0, 3);
      // Undeclared exception!
      try { 
        multiLineLabel0.setLabel("\"IH");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("b\"7a|Nro6D");
      multiLineLabel0.setMarginWidth((-1));
      assertEquals((-1), multiLineLabel0.getMarginWidth());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel(">>|P!v('<Z;:US", (-639), (-494));
      multiLineLabel0.num_lines = 56;
      Font font0 = new Font(">>|P!v('<Z;:US", 0, 12);
      // Undeclared exception!
      try { 
        multiLineLabel0.setFont(font0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("Newzgrabber.MultiLineLabel", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("DX#79Ca[`b:>OmzF^_@");
      // Undeclared exception!
      try { 
        multiLineLabel0.addNotify();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("ERROR: ");
      int int0 = multiLineLabel0.getMarginWidth();
      assertEquals(10, multiLineLabel0.getMarginHeight());
      assertEquals(10, int0);
      assertEquals(0, multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("Q-DdU1y", (-1375));
      SystemColor systemColor0 = SystemColor.textHighlightText;
      multiLineLabel0.setForeground(systemColor0);
      assertEquals((-1375), multiLineLabel0.getAlignment());
      assertEquals(10, multiLineLabel0.getMarginHeight());
      assertEquals(10, multiLineLabel0.getMarginWidth());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("", (-1));
      multiLineLabel0.setMarginHeight((-1));
      assertEquals((-1), multiLineLabel0.getMarginHeight());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 18:20:00 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.filters.unsupervised.attribute.ClassAssigner;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassAssigner_ESTest extends ClassAssigner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.m_ClassIndex = (-967);
      String[] stringArray0 = classAssigner0.getOptions();
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.setClassIndex("");
      assertFalse(classAssigner0.isFirstBatchDone());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      Instance instance0 = classAssigner0.process((Instance) null);
      assertNull(instance0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-549.0646);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-549.0646), doubleArray0);
      Instance instance0 = classAssigner0.process(binarySparseInstance0);
      assertEquals(1, instance0.numValues());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      DenseInstance denseInstance0 = new DenseInstance(0);
      DenseInstance denseInstance1 = (DenseInstance)classAssigner0.process(denseInstance0);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 0);
      Attribute attribute0 = new Attribute("h4/1?/@}SG");
      arrayList0.add(attribute0);
      Instances instances1 = classAssigner0.determineOutputFormat(instances0);
      assertEquals(0, instances1.classIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      String[] stringArray0 = new String[3];
      try { 
        classAssigner0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      // Undeclared exception!
      try { 
        classAssigner0.setClassIndex((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      try { 
        classAssigner0.determineOutputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      String string0 = classAssigner0.getClassIndex();
      assertEquals("last", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.setClassIndex("last");
      assertTrue(classAssigner0.isNewBatch());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.setOptions((String[]) null);
      assertEquals("Filter that can set and unset the class index.", classAssigner0.globalInfo());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      Enumeration enumeration0 = classAssigner0.listOptions();
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("last", arrayList0, 0);
      Instances instances1 = classAssigner0.determineOutputFormat(instances0);
      assertNotSame(instances1, instances0);
      assertEquals((-1), instances1.classIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.m_ClassIndex = 2;
      String string0 = classAssigner0.getClassIndex();
      assertEquals("3", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.m_ClassIndex = 0;
      String[] stringArray0 = classAssigner0.getOptions();
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.setClassIndex("0");
      assertEquals(0, ClassAssigner.FIRST);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.setClassIndex("3");
      assertEquals("The index of the class attribute, starts with 1, 'first' and 'last' are accepted as well, '0' unsets the class index.", classAssigner0.classIndexTipText());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.setClassIndex("first");
      assertEquals(0, ClassAssigner.FIRST);
  }
}

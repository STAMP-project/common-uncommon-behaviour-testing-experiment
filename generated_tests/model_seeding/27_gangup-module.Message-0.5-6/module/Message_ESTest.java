/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 19:25:12 GMT 2019
 */

package module;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import javax.swing.JPasswordField;
import javax.swing.table.DefaultTableModel;
import module.Kernel;
import module.Message;
import module.MessageFactory;
import module.Module;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import state.Action;
import state.ActionFactory;
import util.ObjectManager;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Message_ESTest extends Message_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Message message0 = new Message();
      try { 
        message0.send();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // modnull,msg=Message[id=0,session=0,head=null,recip=null,sender=null,state=0,ttl=0,time=0,body=null]: no source module
         //
         verifyException("module.Message", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Message message0 = MessageFactory.createUnloadMessage("=lqqz/i");
      message0.messageID = 993L;
      message0.toString();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Message message0 = new Message();
      message0.setDelivered(false);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Message message0 = MessageFactory.createWarningMessage((String) null, objectArray0);
      message0.setDelivered(true);
      message0.setDelivered(true);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(557, "UQ%N}5%4&@y.HjLD");
      Kernel kernel0 = new Kernel();
      message0.sendTo(kernel0);
      assertEquals("*", message0.getRecipient());
      assertEquals("DROPPED", message0.getHeader());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals(3000L, message0.getTTL());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Message message0 = MessageFactory.createConnectionDroppedMessage(2, "");
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(3000, 2);
      Message message1 = message0.reply(defaultTableModel0);
      assertEquals("DROPPED", message1.getHeader());
      assertEquals(0L, message1.getSID());
      assertEquals(1, message1.getState());
      assertEquals(3000L, message1.getTTL());
      assertEquals(1, message0.getState());
      assertEquals(3000L, message0.getTTL());
      assertEquals("*", message0.getRecipient());
      assertEquals(1L, message1.getID());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      Message message0 = new Message("rHMN^1G8R", "", "rHMN^1G8R");
      Message message1 = message0.reply((Object) null);
      assertEquals("", message0.getRecipient());
      assertEquals(3000L, message1.getTTL());
      assertEquals("rHMN^1G8R", message1.getHeader());
      assertEquals(0L, message1.getSID());
      assertEquals(1, message1.getState());
      assertEquals(1L, message1.getID());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(603, "");
      message0.set("", "", (Object) null);
      Object object0 = new Object();
      message0.reply(object0);
      assertEquals(1L, message0.getID());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Message message0 = MessageFactory.createErrorMessage(",head=", objectArray0);
      assertEquals(0L, message0.getSID());
      
      message0.sessionID = (-1L);
      message0.reply(objectArray0[4]);
      assertEquals(3000L, message0.getTTL());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Message message0 = new Message();
      Object object0 = new Object();
      Message message1 = message0.reply(object0);
      assertEquals(3000L, message1.getTTL());
      assertEquals(1, message1.getState());
      assertEquals(0L, message1.getID());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Message message0 = new Message();
      long long0 = message0.getTimeStamp();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Message message0 = MessageFactory.createUnloadMessage("");
      message0.timestamp = (-5487L);
      long long0 = message0.getTimeStamp();
      assertEquals((-5487L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Message message0 = new Message();
      long long0 = message0.getTTL();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(568, "*7WmG?6u5M$%4uny^");
      message0.timetolive = (-2703L);
      long long0 = message0.getTTL();
      assertEquals((-2703L), long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Message message0 = new Message();
      int int0 = message0.getState();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Message message0 = new Message();
      message0.state = (-654);
      int int0 = message0.getState();
      assertEquals((-654), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Message message0 = MessageFactory.createMessage("", "", (Object) "");
      message0.setSender("TextMessage[");
      String string0 = message0.getSender();
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals("TextMessage[", string0);
      assertNotNull(string0);
      assertEquals(3000L, message0.getTTL());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Message message0 = new Message();
      message0.setSender("");
      String string0 = message0.getSender();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(603, "");
      message0.set("", "", (Object) null);
      long long0 = message0.getSID();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Message message0 = MessageFactory.createErrorMessage(",head=", objectArray0);
      message0.sessionID = (-1L);
      long long0 = message0.getSID();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Message message0 = MessageFactory.createMessage("", "", (Object) "");
      JPasswordField jPasswordField0 = new JPasswordField("(yMp~WiE8r");
      message0.set("TextMessage[", "UNLOAD ", jPasswordField0);
      message0.getRecipient();
      assertEquals("TextMessage[", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(603, "");
      message0.set("", "", (Object) null);
      message0.getRecipient();
      assertEquals(1L, message0.getID());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Message message0 = new Message();
      message0.messageID = 221L;
      long long0 = message0.getID();
      assertEquals(221L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Message message0 = new Message();
      message0.messageID = (-381L);
      long long0 = message0.getID();
      assertEquals((-381L), long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Message message0 = new Message();
      Message message1 = message0.clone();
      assertEquals(0, message1.getRefCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Message message0 = new Message();
      // Undeclared exception!
      try { 
        message0.sendFrom((Module) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("module.Message", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Message message0 = MessageFactory.createMessage("", "", (Object) "");
      message0.setBody(message0.UNDEFINED);
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals(3000L, message0.getTTL());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Message message0 = new Message((ObjectManager) null);
      assertTrue(message0.getIsConsumed());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Message message0 = MessageFactory.createMessage("OVa<]l", "OVa<]l", (Object) "OVa<]l");
      ActionFactory actionFactory0 = ActionFactory.getInstance();
      Action action0 = actionFactory0.createMoveAction(800, (byte) (-55), (byte) (-116), (byte) (-77));
      message0.setBody(action0);
      assertEquals(2, action0.getRefCount());
      
      message0.consume();
      assertEquals("OVa<]l", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Message message0 = MessageFactory.createErrorMessage((String) null, objectArray0);
      message0.consume();
      assertEquals(3000L, message0.getTTL());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals("*", message0.getRecipient());
      assertEquals("ERROR", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Message message0 = new Message();
      assertFalse(message0.received());
      
      message0.state = (-1626);
      boolean boolean0 = message0.received();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Message message0 = MessageFactory.createErrorMessage((String) null, objectArray0);
      boolean boolean0 = message0.received();
      assertEquals("*", message0.getRecipient());
      assertEquals("ERROR", message0.getHeader());
      assertEquals(3000L, message0.getTTL());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Message message0 = new Message();
      message0.setDelivered(true);
      boolean boolean0 = message0.delivered();
      assertEquals(4, message0.getState());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(568, "*7WmG?6u5M$%4uny^");
      boolean boolean0 = message0.delivered();
      assertEquals("*", message0.getRecipient());
      assertFalse(boolean0);
      assertEquals(3000L, message0.getTTL());
      assertEquals("DROPPED", message0.getHeader());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(568, "*7WmG?6u5M$%4uny^");
      message0.setDelivered(false);
      assertEquals(3000L, message0.getTTL());
      assertEquals("*", message0.getRecipient());
      assertEquals("DROPPED", message0.getHeader());
      assertEquals(1, message0.getState());
      assertEquals(0L, message0.getSID());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Message message0 = MessageFactory.createErrorMessage((String) null, objectArray0);
      Message message1 = message0.clone();
      Object object0 = message1.getBody();
      assertNotNull(object0);
      assertEquals("ERROR", message0.getHeader());
      assertEquals("*", message0.getRecipient());
      assertEquals(3000L, message0.getTTL());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(568, "*7WmG?6u5M$%4uny^");
      Object object0 = message0.getBody();
      assertEquals(3000L, message0.getTTL());
      assertEquals("ID: 568 IP: *7WmG?6u5M$%4uny^", object0);
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals("DROPPED", message0.getHeader());
      assertEquals("*", message0.getRecipient());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Message message0 = new Message();
      String string0 = message0.getHeader();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(568, "*7WmG?6u5M$%4uny^");
      String string0 = message0.getHeader();
      assertEquals("*", message0.getRecipient());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals("DROPPED", string0);
      assertEquals(3000L, message0.getTTL());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(568, "*7WmG?6u5M$%4uny^");
      long long0 = message0.getTTL();
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals("DROPPED", message0.getHeader());
      assertEquals("*", message0.getRecipient());
      assertEquals(3000L, long0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Message message0 = new Message();
      message0.setRecipient("");
      assertEquals(0, Message.UNDEFINED);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Message message0 = new Message((String) null, (Object) null);
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals(3000L, message0.getTTL());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Message message0 = new Message();
      String string0 = message0.getRecipient();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Message message0 = new Message("vCp+)=", "vCp+)=", "vCp+)=");
      Module module0 = mock(Module.class, new ViolatedAssumptionAnswer());
      message0.send(module0);
      assertEquals(3000L, message0.getTTL());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals("vCp+)=", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(568, "*7WmG?6u5M$%4uny^");
      assertEquals("DROPPED", message0.getHeader());
      
      message0.setHeader("");
      assertEquals("", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Message message0 = new Message();
      long long0 = message0.getID();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Message message0 = new Message();
      // Undeclared exception!
      try { 
        message0.sendTo((Module) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("module.Message", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Message message0 = MessageFactory.createUnloadMessage("");
      long long0 = message0.getSID();
      assertEquals(0L, long0);
      assertEquals("*", message0.getRecipient());
      assertEquals("KERNEL", message0.getHeader());
      assertEquals(1, message0.getState());
      assertEquals(3000L, message0.getTTL());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Message message0 = MessageFactory.createUnloadMessage("");
      int int0 = message0.getState();
      assertEquals(0L, message0.getSID());
      assertEquals(3000L, message0.getTTL());
      assertEquals(1, int0);
      assertEquals("KERNEL", message0.getHeader());
      assertEquals("*", message0.getRecipient());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Message message0 = new Message();
      String string0 = message0.getSender();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Message message0 = MessageFactory.createUnloadMessage("");
      long long0 = message0.getTimeStamp();
      assertEquals("KERNEL", message0.getHeader());
      assertEquals("*", message0.getRecipient());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals(1392409281320L, long0);
      assertEquals(3000L, message0.getTTL());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Message message0 = new Message();
      Kernel kernel0 = new Kernel();
      try { 
        message0.sendFrom(kernel0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("module.Kernel", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 17:12:50 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;
import weka.clusterers.Clusterer;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.DenseInstance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.filters.unsupervised.attribute.AddCluster;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AddCluster_ESTest extends AddCluster_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null, protectedProperties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("Z2n+f32]_j-K?\"S-", arrayList0, 0);
      Instances instances1 = addCluster0.removeIgnored(instances0);
      assertEquals(0, instances1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      String string0 = addCluster0.getClustererSpec();
      assertEquals("weka.clusterers.SimpleKMeans -N 2 -A \"weka.core.EuclideanDistance -R first-last\" -I 500 -S 10", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "1L_uUm}pNQbIlGqWR5#";
      stringArray0[2] = "E3,3cYQB\"\"";
      try { 
        addCluster0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Illegal options: 1L_uUm}pNQbIlGqWR5# E3,3cYQB\"\" 
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      try { 
        addCluster0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      addCluster0.setSerializedClustererFile((File) null);
      assertFalse(addCluster0.isOutputFormatDefined());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      addCluster0.setIgnoredAttributeIndices("");
      assertEquals("A file containing the serialized model of a built clusterer.", addCluster0.serializedClustererFileTipText());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      String string0 = addCluster0.getIgnoredAttributeIndices();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      addCluster0.setOptions((String[]) null);
      assertEquals("A filter that adds a new nominal attribute representing the cluster assigned to each instance by the specified clustering algorithm.\nEither the clustering algorithm gets built with the first batch of data or one specifies are serialized clusterer model file to use instead.", addCluster0.globalInfo());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      Enumeration enumeration0 = addCluster0.listOptions();
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      // Undeclared exception!
      try { 
        addCluster0.getCapabilities();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // weka/core/WekaPackageManager
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      File file0 = addCluster0.getSerializedClustererFile();
      assertTrue(file0.canWrite());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      Clusterer clusterer0 = mock(Clusterer.class, new ViolatedAssumptionAnswer());
      addCluster0.setClusterer(clusterer0);
      assertEquals("A filter that adds a new nominal attribute representing the cluster assigned to each instance by the specified clustering algorithm.\nEither the clustering algorithm gets built with the first batch of data or one specifies are serialized clusterer model file to use instead.", addCluster0.globalInfo());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      SimpleKMeans simpleKMeans0 = (SimpleKMeans)addCluster0.getClusterer();
      assertFalse(simpleKMeans0.getPreserveInstancesOrder());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 0);
      // Undeclared exception!
      try { 
        addCluster0.getCapabilities(instances0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // weka/core/WekaPackageManager
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      MockFile mockFile0 = new MockFile("*;bL^");
      addCluster0.setSerializedClustererFile(mockFile0);
      assertFalse(mockFile0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      MockFile mockFile0 = (MockFile)addCluster0.m_SerializedClustererFile;
      addCluster0.setSerializedClustererFile(mockFile0);
      assertTrue(mockFile0.exists());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance((-372.8203901465944), doubleArray0);
      AddCluster addCluster0 = new AddCluster();
      try { 
        addCluster0.input(denseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.AddCluster", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      try { 
        addCluster0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.AddCluster", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Training header of clusterer and filter dataset don't match:\n", arrayList0, 214);
      Instances instances1 = addCluster0.removeIgnored(instances0);
      assertSame(instances1, instances0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      String string0 = addCluster0.serializedClustererFileTipText();
      assertEquals("A file containing the serialized model of a built clusterer.", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AddCluster addCluster0 = new AddCluster();
      String string0 = addCluster0.ignoredAttributeIndicesTipText();
      assertEquals("The range of attributes to be ignored by the clusterer. eg: first-3,5,9-last", string0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 04 00:15:40 GMT 2020
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.DefaultDateTypeAdapter;
import com.google.gson.FieldNamingPolicy;
import com.google.gson.FieldNamingStrategy;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.InstanceCreator;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.LongSerializationPolicy;
import com.google.gson.MockExclusionStrategy;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.Excluder;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URISyntaxException;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.time.chrono.ChronoLocalDate;
import java.util.Date;
import java.util.HashMap;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicLongArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Gson_ESTest extends Gson_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = "";
      StringWriter stringWriter0 = new StringWriter(0);
      gson0.newJsonWriter(stringWriter0);
      int int0 = 1710;
      try { 
        Long.valueOf("", 1710);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 1710 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeToken<Object> typeToken0 = (TypeToken<Object>) mock(TypeToken.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        gson0.toJson((Object) typeToken0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: com.google.gson.reflect.TypeToken. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Gson gson0 = new Gson();
      byte byte0 = (byte)61;
      Byte byte1 = new Byte((byte)61);
      Class<Long> class0 = Long.class;
      try { 
        gson0.fromJson("feZ4ltt}`Gb4sD?", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"feZ4ltt\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Character> class0 = Character.TYPE;
      gson0.toJsonTree((Object) null, (Type) class0);
      TypeToken<Excluder> typeToken0 = (TypeToken<Excluder>) mock(TypeToken.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(typeToken0).getRawType();
      // Undeclared exception!
      try { 
        gson0.getAdapter(typeToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.newJsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      TypeToken<HashMap<DefaultDateTypeAdapter, Object>> typeToken0 = (TypeToken<HashMap<DefaultDateTypeAdapter, Object>>) mock(TypeToken.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(typeToken0).getRawType();
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Float> class0 = Float.class;
      TypeToken<Float> typeToken0 = TypeToken.get(class0);
      gson0.getDelegateAdapter((TypeAdapterFactory) null, typeToken0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      Class<Object> class0 = Object.class;
      TypeAdapter<Object> typeAdapter0 = gson0.getAdapter(class0);
      gson_FutureTypeAdapter0.setDelegate(typeAdapter0);
      gson_FutureTypeAdapter0.toJson((Object) gson0);
      gson0.newBuilder();
      gson0.serializeNulls();
      gson0.toString();
      try { 
        MockURI.URI("", "", "|9gkGW^a", (String) null, "N's4R9u'11Oh5`6");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ://%7C9gkGW%5Ea#N's4R9u'11Oh5%606
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = (TypeToken<Object>) mock(TypeToken.class, new ViolatedAssumptionAnswer());
      Class<Excluder> class1 = Excluder.class;
      gson0.fromJson("", class1);
      gson0.toString();
      String string0 = "\\[y";
      StringReader stringReader0 = new StringReader("[y");
      stringReader0.read();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      gson0.getAdapter(class0);
      String string0 = gson0.toString();
      MockFileWriter mockFileWriter0 = new MockFileWriter("DefaultDateTypeAdapter");
      MockFileWriter mockFileWriter1 = new MockFileWriter("DefaultDateTypeAdapter");
      gson0.newJsonWriter(mockFileWriter1);
      Boolean boolean0 = new Boolean("com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$C$JsonAdapterFactory");
      System.setCurrentTimeMillis(0L);
      try { 
        gson0.fromJson(string0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Unterminated array at line 1 column 42 path $.factories[1]
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Float> class0 = Float.TYPE;
      Gson gson1 = new Gson();
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      gson1.fromJson("", (Type) class0);
      // Undeclared exception!
      try { 
        gson1.fromJson(jsonElement0, (Type) class0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // AssertionError (GSON 2.8.7-SNAPSHOT): null
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, (TypeToken<Gson.FutureTypeAdapter<Excluder>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Gson gson0 = new Gson();
      LongSerializationPolicy longSerializationPolicy0 = LongSerializationPolicy.STRING;
      Long long0 = new Long((-2342L));
      JsonElement jsonElement0 = longSerializationPolicy0.serialize(long0);
      // Undeclared exception!
      try { 
        gson0.fromJson(jsonElement0, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      gson0.toJson((Object) excluder0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Gson gson0 = new Gson();
      FieldNamingStrategy fieldNamingStrategy0 = gson0.fieldNamingStrategy();
      Excluder excluder0 = new Excluder();
      Excluder excluder1 = excluder0.withVersion(0.0);
      int[] intArray0 = new int[0];
      excluder1.withModifiers(intArray0);
      FieldNamingPolicy fieldNamingPolicy0 = FieldNamingPolicy.LOWER_CASE_WITH_DOTS;
      excluder1.excludeFieldsWithoutExposeAnnotation();
      HashMap<Type, InstanceCreator<Double>> hashMap0 = new HashMap<Type, InstanceCreator<Double>>();
      MockExclusionStrategy mockExclusionStrategy0 = new MockExclusionStrategy(false, false);
      excluder0.withExclusionStrategy(mockExclusionStrategy0, true, false);
      excluder1.withExclusionStrategy(mockExclusionStrategy0, false, false);
      Class<Excluder> class0 = Excluder.class;
      excluder0.withModifiers(intArray0);
      excluder0.excludeFieldsWithoutExposeAnnotation();
      TypeToken<Excluder> typeToken0 = TypeToken.get(class0);
      TypeToken.get((Type) class0);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder1, typeToken0);
      gson0.toJson((Object) fieldNamingStrategy0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) fieldNamingStrategy0, (Type) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      MockFileWriter mockFileWriter0 = new MockFileWriter("_A g", false);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0, (Type) class0, (Appendable) mockFileWriter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.lang.Object. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = (TypeToken<Object>) mock(TypeToken.class, new ViolatedAssumptionAnswer());
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.fromJsonTree(jsonNull0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      System.setCurrentTimeMillis((-2006L));
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.newJsonWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // out == null
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Gson.checkValidFloatingPoint(0.0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(824);
      JsonWriter jsonWriter0 = new JsonWriter(charArrayWriter0);
      jsonWriter0.setIndent("PxB");
      jsonWriter0.setSerializeNulls(true);
      Class<Integer> class1 = Integer.class;
      gson0.getAdapter(class1);
      jsonWriter0.setLenient(true);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      JsonWriter jsonWriter2 = jsonWriter0.value(106.5);
      jsonWriter2.endArray();
      jsonWriter1.setLenient(true);
      JsonWriter jsonWriter3 = new JsonWriter(charArrayWriter0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0, (Type) class0, jsonWriter3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.lang.Object. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.close();
      Class<Long> class0 = Long.TYPE;
      try { 
        gson0.fromJson((Reader) pipedReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.serializeNulls();
      String string0 = "Expected END_ARRAY but was ";
      Class<Double> class0 = Double.class;
      TypeToken<Double> typeToken0 = TypeToken.get(class0);
      Class<? super Double> class1 = typeToken0.getRawType();
      // Undeclared exception!
      try { 
        gson0.fromJson("Expected END_ARRAY but was ", (Type) class1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      gson0.fromJson("", (Type) class0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Gson gson0 = new Gson();
      Boolean.parseBoolean(")T");
      Boolean boolean0 = Boolean.valueOf("GSON cannot serialize ");
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      JsonPrimitive jsonPrimitive1 = jsonPrimitive0.deepCopy();
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive1, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was BOOLEAN at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Float> class0 = Float.TYPE;
      Gson gson1 = new Gson();
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        gson1.fromJson(jsonElement0, (Class<?>) class1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // AssertionError (GSON 2.8.7-SNAPSHOT): null
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Gson gson0 = new Gson();
      FileSystemHandling.shouldAllThrowIOExceptions();
      gson0.serializeNulls();
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("bar");
      Class<AtomicLong> class1 = AtomicLong.class;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"bar\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeAdapterFactory typeAdapterFactory0 = null;
      Class<Float> class0 = Float.class;
      TypeToken.get(class0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) null, (Type) class0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      gson0.fromJson("com.google.gson.Gson$5", class0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("com.google.gson.Gson$4", class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("Non-log field of type ", (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.FutureTypeAdapter<AtomicLong> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<AtomicLong>();
      gson0.toJsonTree((Object) gson_FutureTypeAdapter0);
      gson0.excluder();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Gson gson0 = new Gson();
      Short short0 = new Short((short)34);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) short0);
      // Undeclared exception!
      try { 
        gson0.fromJson(jsonElement0, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Excluder> class0 = Excluder.class;
      Gson gson0 = new Gson();
      gson0.toString();
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) null, (Type) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Gson.FutureTypeAdapter<Byte> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Byte>();
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.equals("ng~U!n3VA:Nk");
      jsonObject0.remove("ng~U!n3VA:Nk");
      gson0.toJson((JsonElement) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      int int0 = (-76);
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-76));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      gson0.getAdapter(class0);
      gson0.toString();
      MockFileWriter mockFileWriter0 = new MockFileWriter(" as a @JsonAdapter for ");
      gson0.newJsonWriter(mockFileWriter0);
      Boolean boolean0 = new Boolean(" as a @JsonAdapter for ");
      BigDecimal bigDecimal0 = new BigDecimal((-1303L));
      gson0.toJson((Object) bigDecimal0, (Type) class0, (Appendable) mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.getAdapter((TypeToken<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$35", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      TypeToken<Gson.FutureTypeAdapter<Excluder>> typeToken0 = (TypeToken<Gson.FutureTypeAdapter<Excluder>>) mock(TypeToken.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null, (Class) null, (Class) null, (Class) null, (Class) null).when(typeToken0).getRawType();
      // Undeclared exception!
      try { 
        gson1.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLong> class0 = AtomicLong.class;
      TypeToken<AtomicLong> typeToken0 = TypeToken.get(class0);
      Class<? super AtomicLong> class1 = typeToken0.getRawType();
      try { 
        gson0.fromJson("JSON document was not fully consumed.", (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"JSON\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      Excluder excluder0 = new Excluder();
      int[] intArray0 = new int[3];
      intArray0[0] = (-392);
      intArray0[1] = 721;
      intArray0[2] = 0;
      Excluder excluder1 = excluder0.withModifiers(intArray0);
      Class<Object> class1 = Object.class;
      excluder1.excludeClass(class1, false);
      excluder1.excludeClass(class1, true);
      Excluder excluder2 = excluder1.excludeFieldsWithoutExposeAnnotation();
      Excluder excluder3 = excluder2.withVersion((-392));
      gson0.toJsonTree((Object) excluder3, (Type) class0);
      Class<AtomicLongArray> class2 = AtomicLongArray.class;
      TypeToken<AtomicLongArray> typeToken0 = TypeToken.get(class2);
      Gson gson1 = new Gson();
      Gson gson2 = new Gson();
      Gson gson3 = new Gson();
      Boolean boolean0 = Boolean.valueOf(";CD>ujjl|V");
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      gson2.toJson((JsonElement) jsonPrimitive0);
      Gson gson4 = new Gson();
      gson2.toJson((JsonElement) jsonPrimitive0);
      Gson gson5 = new Gson();
      gson4.newBuilder();
      Gson gson6 = new Gson();
      gson6.getAdapter(typeToken0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader();
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      gson0.toJson((Object) pipedReader0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Float> class0 = Float.TYPE;
      StringReader stringReader0 = new StringReader("");
      Class<Float> class1 = Float.class;
      gson0.fromJson((Reader) stringReader0, class1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.class;
      TypeToken<Long> typeToken0 = TypeToken.get(class0);
      gson0.getAdapter(typeToken0);
      Integer integer0 = new Integer(3639);
      Integer.getInteger("{serializeNulls:", 3639);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("y^]Z{");
      mockPrintWriter0.print('9');
      gson0.toJson((Object) integer0, (Appendable) mockPrintWriter0);
      gson0.toJsonTree((Object) "{serializeNulls:");
      Class<Float> class1 = Float.class;
      gson0.getAdapter(class1);
      Class<Character> class2 = Character.TYPE;
      gson0.toJson((Object) null, (Type) class2);
      Class<Object> class3 = Object.class;
      TypeToken<Float> typeToken1 = (TypeToken<Float>) mock(TypeToken.class, new ViolatedAssumptionAnswer());
      doReturn(class3, (Class) null, (Class) null).when(typeToken1).getRawType();
      gson0.toJsonTree((Object) null, (Type) class3);
      gson0.toJson((Object) null);
      // Undeclared exception!
      try { 
        gson0.getAdapter(typeToken1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Gson.FutureTypeAdapter<AtomicLongArray> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<AtomicLongArray>();
      Gson gson0 = new Gson();
      gson0.serializeNulls();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-450));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Gson.checkValidFloatingPoint(1121.3);
      Gson.checkValidFloatingPoint(0.0);
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      gson0.getAdapter(class0);
      gson0.htmlSafe();
      Gson.checkValidFloatingPoint(0.0);
      Long long0 = new Long((-1194L));
      gson0.toJsonTree((Object) long0, (Type) class0);
      MockFile mockFile0 = new MockFile("com.google.gson.internal.bind.TypeAdapters$20", "-Sw~z3mZ");
      MockFile mockFile1 = new MockFile(mockFile0, "com.google.gson.internal.bind.TypeAdapters$20");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("}", "com.google.gson.internal.bind.TypeAdapters$20", (File) mockFile1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      gson0.fromJson("D", class0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Gson gson0 = new Gson();
      JsonElement jsonElement0 = null;
      Class<Byte> class0 = Byte.TYPE;
      gson0.fromJson((JsonElement) null, (Type) class0);
      String string0 = "";
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("");
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = (TypeToken<Object>) mock(TypeToken.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(typeToken0).getRawType();
      MockFileWriter mockFileWriter0 = new MockFileWriter("Expected END_ARRAY but was ", false);
      AtomicLong atomicLong0 = new AtomicLong(2925L);
      Excluder excluder0 = Excluder.DEFAULT;
      Excluder excluder1 = excluder0.disableInnerClassSerialization();
      MockExclusionStrategy mockExclusionStrategy0 = new MockExclusionStrategy(false, false);
      Excluder excluder2 = excluder1.withExclusionStrategy(mockExclusionStrategy0, false, false);
      Excluder excluder3 = excluder2.withVersion((-1.0));
      Class<Byte> class1 = Byte.class;
      excluder1.excludeClass(class1, false);
      Class<Object> class2 = Object.class;
      excluder3.excludeClass(class2, true);
      Class<Byte> class3 = Byte.class;
      excluder0.excludeClass(class3, true);
      Excluder excluder4 = new Excluder();
      Excluder excluder5 = new Excluder();
      Excluder excluder6 = new Excluder();
      excluder4.excludeClass(class2, false);
      Excluder excluder7 = excluder6.withExclusionStrategy(mockExclusionStrategy0, false, false);
      gson0.toJson((Object) excluder7, (Type) class0, (Appendable) mockFileWriter0);
      gson0.toJson((Object) atomicLong0, (Type) class0, (Appendable) mockFileWriter0);
      TypeToken.get(class0);
      // Undeclared exception!
      try { 
        gson0.getAdapter(typeToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.class;
      try { 
        gson0.fromJson("^(rr7!F/", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"^(rr7!F\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      JsonNull jsonNull1 = jsonNull0.deepCopy();
      jsonNull1.toString();
      // Undeclared exception!
      try { 
        jsonNull1.getAsInt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // JsonNull
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Gson.FutureTypeAdapter<Byte> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Byte>();
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.equals("ng~U!n3VA:Nk");
      jsonObject0.remove("ng~U!n3VA:Nk");
      gson0.toJson((JsonElement) null);
      Excluder excluder0 = new Excluder();
      Excluder excluder1 = excluder0.withVersion(0.0);
      FieldNamingPolicy fieldNamingPolicy0 = FieldNamingPolicy.LOWER_CASE_WITH_DOTS;
      HashMap<Type, InstanceCreator<Double>> hashMap0 = new HashMap<Type, InstanceCreator<Double>>();
      Class<Long> class0 = Long.TYPE;
      TypeToken<Long> typeToken0 = TypeToken.get(class0);
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter((TypeAdapterFactory) excluder1, typeToken0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // GSON cannot serialize long
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.isJsonNull();
      jsonObject0.isJsonPrimitive();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "KECX3c+dP");
      jsonObject0.isJsonArray();
      jsonObject0.isJsonObject();
      JsonObject jsonObject1 = jsonObject0.getAsJsonObject();
      jsonObject1.getAsJsonObject("");
      jsonObject1.entrySet();
      JsonObject jsonObject2 = new JsonObject();
      jsonObject2.getAsJsonArray("4rx");
      MockFile mockFile0 = new MockFile((File) null, "com.google.gson.internal.bind.ArrayTypeAdapter$1");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Appendable appendable0 = mockPrintStream0.append('N');
      gson0.toJson((JsonElement) null, appendable0);
      gson0.toJsonTree((Object) jsonObject2);
      gson0.newBuilder();
      StringReader stringReader0 = new StringReader("KECX3c+dP");
      gson0.newJsonReader(stringReader0);
      Gson.FutureTypeAdapter<BigDecimal> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<BigDecimal>();
      Excluder excluder0 = new Excluder();
      Excluder excluder1 = new Excluder();
      Class<BigDecimal> class0 = BigDecimal.class;
      TypeToken<BigDecimal> typeToken0 = TypeToken.get(class0);
      excluder1.create(gson0, typeToken0);
      gson_FutureTypeAdapter0.setDelegate((TypeAdapter<BigDecimal>) null);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Gson.FutureTypeAdapter<Excluder> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Excluder>();
      JsonWriter jsonWriter0 = mock(JsonWriter.class, new ViolatedAssumptionAnswer());
      Excluder excluder0 = new Excluder();
      Excluder excluder1 = new Excluder();
      Excluder excluder2 = new Excluder();
      Class<Integer> class0 = Integer.class;
      excluder1.excludeClass(class0, false);
      Excluder excluder3 = new Excluder();
      Excluder excluder4 = new Excluder();
      Excluder excluder5 = new Excluder();
      Class<Long> class1 = Long.class;
      excluder4.excludeClass(class1, false);
      excluder2.excludeClass(class0, false);
      excluder5.excludeClass(class0, false);
      int[] intArray0 = new int[6];
      intArray0[0] = (-576);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      excluder5.withModifiers(intArray0);
      Class<BigDecimal> class2 = BigDecimal.class;
      excluder5.excludeClass(class2, true);
      Excluder excluder6 = new Excluder();
      Excluder excluder7 = excluder6.withVersion(4069.2899);
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.write(jsonWriter0, excluder7);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      Excluder excluder0 = new Excluder();
      int[] intArray0 = new int[3];
      intArray0[0] = (-392);
      intArray0[1] = 721;
      intArray0[2] = 0;
      Excluder excluder1 = excluder0.withModifiers(intArray0);
      Class<Object> class1 = Object.class;
      excluder1.excludeClass(class1, false);
      excluder1.excludeClass(class1, false);
      Excluder excluder2 = excluder1.excludeFieldsWithoutExposeAnnotation();
      Excluder excluder3 = excluder2.withVersion((-392));
      JsonElement jsonElement0 = gson0.toJsonTree((Object) excluder3, (Type) class0);
      Class<AtomicLongArray> class2 = AtomicLongArray.class;
      TypeToken.get(class2);
      Gson gson1 = new Gson();
      Gson gson2 = new Gson();
      Gson gson3 = new Gson();
      Boolean boolean0 = Boolean.valueOf(";CD>ujjl|V");
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      gson2.toJson((JsonElement) jsonPrimitive0);
      Gson gson4 = new Gson();
      gson2.toJson((JsonElement) jsonPrimitive0);
      gson4.toString();
      Class<Date> class3 = Date.class;
      try { 
        gson0.fromJson(jsonElement0, class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected STRING but was BEGIN_OBJECT at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.toJson((Object) gson0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) null, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = (TypeToken<Object>) mock(TypeToken.class, new ViolatedAssumptionAnswer());
      try { 
        gson0.fromJson("Expected END_ARRAY but was ", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 11 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Gson.FutureTypeAdapter<Byte> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Byte>();
      Gson gson0 = new Gson();
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.equals("ng~U!n3VA:Nk");
      jsonObject0.remove("ng~U!n3VA:Nk");
      gson0.toJson((JsonElement) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Excluder excluder0 = new Excluder();
      Excluder excluder1 = excluder0.withVersion(0.0);
      FieldNamingPolicy fieldNamingPolicy0 = FieldNamingPolicy.LOWER_CASE_WITH_DOTS;
      HashMap<Type, InstanceCreator<Double>> hashMap0 = new HashMap<Type, InstanceCreator<Double>>();
      Class<Long> class0 = Long.TYPE;
      TypeToken<Long> typeToken0 = TypeToken.get(class0);
      // Undeclared exception!
      try { 
        gson0.getDelegateAdapter((TypeAdapterFactory) excluder1, typeToken0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // GSON cannot serialize long
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.serializeNulls();
      JsonArray jsonArray0 = new JsonArray();
      JsonArray jsonArray1 = jsonArray0.getAsJsonArray();
      Class<Double> class0 = Double.TYPE;
      try { 
        gson0.fromJson((JsonElement) jsonArray1, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected NUMBER but was BEGIN_ARRAY at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Gson.FutureTypeAdapter<Byte> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Byte>();
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      Gson gson2 = new Gson();
      TypeToken<Integer> typeToken0 = (TypeToken<Integer>) mock(TypeToken.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(typeToken0).getRawType();
      // Undeclared exception!
      try { 
        gson0.getAdapter((TypeToken<?>) typeToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Class<Character> class0 = Character.TYPE;
      gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      gson0.htmlSafe();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      JsonElement jsonElement0 = null;
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      JsonElement jsonElement1 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      Class<Long> class0 = Long.class;
      // Undeclared exception!
      try { 
        gson1.fromJson(jsonElement1, (Class<?>) class0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // AssertionError (GSON 2.8.7-SNAPSHOT): null
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Gson gson0 = new Gson();
      BigInteger bigInteger0 = BigInteger.TEN;
      gson0.toJsonTree((Object) bigInteger0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("GSON (2.8.7-SNAPSHOT) cannot handle ");
      stringReader0.read();
      StringReader stringReader1 = new StringReader("GSON (2.8.7-SNAPSHOT) cannot handle ");
      gson0.newJsonReader(stringReader1);
      Class<Float> class0 = Float.TYPE;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(charArrayWriter0);
      jsonWriter0.setIndent(">E,H>Bw/=1V>AO");
      jsonWriter0.setSerializeNulls(true);
      jsonWriter0.setLenient(true);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      jsonWriter1.value(809.72610994726);
      jsonWriter0.endArray();
      jsonWriter1.setLenient(true);
      JsonWriter jsonWriter2 = new JsonWriter(charArrayWriter0);
      Class<Character> class1 = Character.TYPE;
      gson0.toJson((Object) null, (Type) class1, jsonWriter1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      TypeToken.get(class0);
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(3124);
      String string0 = "Q";
      MockFileWriter mockFileWriter0 = new MockFileWriter("Q", false);
      try { 
        gson0.toJson((Object) atomicLongArray0, (Type) class0, (Appendable) mockFileWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Simulated IOException
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      Class<Float> class0 = Float.class;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Gson gson0 = new Gson();
      gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
      // Undeclared exception!
      try { 
        gson0.fromJson("xu,K~a", (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<String> class0 = String.class;
      Class<Integer> class1 = Integer.class;
      gson0.getAdapter(class1);
      gson0.fromJson("D", class0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) null, (Type) class0, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicLong atomicLong0 = new AtomicLong(0L);
      gson0.toJson((Object) atomicLong0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = new Excluder();
      gson0.toJson((Object) excluder0);
      gson0.serializeNulls();
      JsonElement jsonElement0 = gson0.toJsonTree((Object) excluder0);
      // Undeclared exception!
      try { 
        gson0.toJson(jsonElement0, (JsonWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      gson0.fromJson((String) null, (Type) class0);
      Class<Object> class1 = Object.class;
      TypeToken.get(class1);
      // Undeclared exception!
      try { 
        gson0.newJsonWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // out == null
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toJson((Object) null);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) null, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("");
      Class<AtomicLongArray> class0 = AtomicLongArray.class;
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_ARRAY but was STRING at path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Type> class0 = Type.class;
      TypeToken<Type> typeToken0 = TypeToken.get(class0);
      Class<? super Type> class1 = typeToken0.getRawType();
      // Undeclared exception!
      try { 
        gson0.fromJson("x$XG*_KwC^k3t!{", (Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.lang.reflect.Type. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Gson.checkValidFloatingPoint((-539.59233726394));
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      Class<Object> class0 = Object.class;
      TypeToken.get(class0);
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      doReturn((JsonArray) null).when(jsonElement0).getAsJsonArray();
      doReturn(true).when(jsonElement0).isJsonArray();
      doReturn(false).when(jsonElement0).isJsonNull();
      doReturn(false).when(jsonElement0).isJsonPrimitive();
      // Undeclared exception!
      try { 
        gson1.toJson(jsonElement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$29", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      Excluder excluder1 = excluder0.disableInnerClassSerialization();
      MockExclusionStrategy mockExclusionStrategy0 = new MockExclusionStrategy(false, false);
      Excluder excluder2 = excluder1.withExclusionStrategy(mockExclusionStrategy0, false, false);
      Excluder excluder3 = excluder2.withVersion((-1.0));
      Class<Byte> class0 = Byte.class;
      excluder1.excludeClass(class0, false);
      Class<Object> class1 = Object.class;
      excluder3.excludeClass(class1, true);
      excluder0.excludeClass(class0, true);
      Excluder excluder4 = new Excluder();
      Excluder excluder5 = new Excluder();
      Excluder excluder6 = new Excluder();
      excluder4.excludeClass(class1, false);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = (-1);
      intArray0[3] = (-2771);
      intArray0[4] = (-171);
      intArray0[5] = 46;
      intArray0[6] = 2;
      Excluder excluder7 = excluder6.withExclusionStrategy(mockExclusionStrategy0, false, false);
      TypeToken<Object> typeToken0 = TypeToken.get(class1);
      TypeAdapter<Object> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder7, typeToken0);
      gson_FutureTypeAdapter0.setDelegate(typeAdapter0);
      StringWriter stringWriter0 = new StringWriter();
      Integer integer0 = new Integer(3972);
      try { 
        gson_FutureTypeAdapter0.fromJson("Z4U6p8IEDhS9UG+O=");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<AtomicLong> class0 = AtomicLong.class;
      TypeToken.get(class0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0, (Type) class0, (Appendable) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.util.concurrent.atomic.AtomicLong
         //
         verifyException("com.google.gson.Gson$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      gson0.toJson((Object) "_A g", (Type) class0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Gson gson0 = new Gson();
      Short short0 = new Short((short)34);
      JsonElement jsonElement0 = gson0.toJsonTree((Object) short0);
      gson0.htmlSafe();
      StringWriter stringWriter0 = new StringWriter(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Long> class0 = Long.class;
      Gson.FutureTypeAdapter<Byte> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Byte>();
      Byte.compare((byte)76, (byte)1);
      Byte.toUnsignedInt((byte)1);
      gson0.toJson((Object) jsonElement0);
      gson0.fieldNamingStrategy();
      gson0.serializeNulls();
      try { 
        gson0.fromJson("vE?Tq|76l:[U[^v5|=", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"vE?Tq|76l\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.TYPE;
      Gson gson1 = new Gson();
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonElement0).isJsonArray();
      doReturn(false).when(jsonElement0).isJsonNull();
      doReturn(false).when(jsonElement0).isJsonObject();
      doReturn(false).when(jsonElement0).isJsonPrimitive();
      // Undeclared exception!
      try { 
        gson1.toJson(jsonElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Couldn't write class com.google.gson.JsonElement$MockitoMock$1931121267
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$29", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      gson0.toJson((JsonElement) jsonNull0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      Class<Float> class0 = Float.class;
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Gson gson0 = new Gson();
      gson0.fromJson((JsonElement) jsonNull0, (Type) class0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Excluder> class0 = Excluder.class;
      try { 
        gson0.fromJson("{gmJNuWeU><&G", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.EOFException: End of input at line 1 column 14 path $.gmJNuWeU><&G
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("[y");
      stringReader0.read();
      gson0.newJsonReader(stringReader0);
      Class<Float> class0 = Float.TYPE;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(824);
      JsonWriter jsonWriter0 = new JsonWriter(charArrayWriter0);
      jsonWriter0.setIndent("PxB");
      jsonWriter0.setSerializeNulls(true);
      jsonWriter0.setLenient(false);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      jsonWriter1.value(0.0);
      jsonWriter0.endArray();
      jsonWriter0.setLenient(false);
      JsonWriter jsonWriter2 = new JsonWriter(charArrayWriter0);
      BigInteger bigInteger0 = BigInteger.TEN;
      gson0.toJson((Object) bigInteger0, (Type) class0, jsonWriter0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Gson gson0 = new Gson();
      String string0 = "|9|c(YYq>v8{";
      Character character0 = Character.valueOf('T');
      Character.isIdeographic(43);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Short> class0 = Short.class;
      gson0.fromJson((JsonElement) null, (Class<?>) class0);
      gson0.fromJson("", (Type) class0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toString();
      gson0.newBuilder();
      Class<AtomicLong> class0 = AtomicLong.class;
      Long long0 = new Long(0L);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(long0);
      gson0.fromJson((JsonElement) jsonPrimitive0, class0);
      gson0.newBuilder();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.checkValidFloatingPoint(1.0);
      Class<Float> class0 = Float.TYPE;
      gson0.toJsonTree((Object) null, (Type) class0);
      TypeAdapterFactory typeAdapterFactory0 = null;
      PipedReader pipedReader0 = new PipedReader(2098);
      char[] charArray0 = new char[8];
      charArray0[0] = '/';
      charArray0[1] = '{';
      charArray0[2] = ';';
      charArray0[3] = 'K';
      charArray0[4] = '&';
      charArray0[5] = '/';
      charArray0[6] = '#';
      charArray0[7] = '>';
      try { 
        pipedReader0.read(charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(1454);
      gson0.toJson((Object) atomicLongArray0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Short short0 = new Short((short)34);
      String string0 = "^{";
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader();
      Class<Float> class0 = Float.class;
      try { 
        gson0.fromJson((Reader) pipedReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      Gson.FutureTypeAdapter<AtomicLong> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<AtomicLong>();
      gson0.toJsonTree((Object) null);
      gson0.excluder();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("[y");
      stringReader0.read();
      gson0.newJsonReader(stringReader0);
      Class<Float> class0 = Float.TYPE;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(824);
      JsonWriter jsonWriter0 = new JsonWriter(charArrayWriter0);
      jsonWriter0.setIndent("PxB");
      jsonWriter0.setSerializeNulls(true);
      jsonWriter0.setLenient(true);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      JsonWriter jsonWriter2 = jsonWriter0.value(106.5);
      jsonWriter2.endArray();
      jsonWriter1.setLenient(true);
      JsonWriter jsonWriter3 = new JsonWriter(charArrayWriter0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) "[y", (Type) class0, jsonWriter3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.Gson$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Gson gson0 = new Gson();
      MockFileWriter mockFileWriter0 = new MockFileWriter("V&kLCH{=8h^T", true);
      gson0.newJsonWriter(mockFileWriter0);
      // Undeclared exception!
      try { 
        gson0.getAdapter((TypeToken<Excluder>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Gson gson0 = new Gson();
      TypeToken<Object> typeToken0 = (TypeToken<Object>) mock(TypeToken.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(typeToken0).getRawType();
      // Undeclared exception!
      try { 
        gson0.getAdapter(typeToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      Excluder excluder1 = excluder0.disableInnerClassSerialization();
      MockExclusionStrategy mockExclusionStrategy0 = new MockExclusionStrategy(false, false);
      Excluder excluder2 = excluder1.withExclusionStrategy(mockExclusionStrategy0, false, false);
      Excluder excluder3 = excluder2.withVersion((-1.0));
      Class<Byte> class0 = Byte.class;
      excluder1.excludeClass(class0, false);
      Class<Object> class1 = Object.class;
      excluder3.excludeClass(class1, true);
      Class<Byte> class2 = Byte.class;
      excluder0.excludeClass(class2, true);
      Excluder excluder4 = new Excluder();
      Excluder excluder5 = new Excluder();
      Excluder excluder6 = new Excluder();
      excluder4.excludeClass(class1, false);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = (-1);
      intArray0[3] = (-2771);
      intArray0[4] = (-171);
      intArray0[5] = 46;
      intArray0[6] = 2;
      Excluder excluder7 = excluder6.withModifiers(intArray0);
      Excluder excluder8 = excluder7.withExclusionStrategy(mockExclusionStrategy0, false, false);
      TypeToken<Object> typeToken0 = TypeToken.get(class1);
      TypeAdapter<Object> typeAdapter0 = gson0.getDelegateAdapter((TypeAdapterFactory) excluder8, typeToken0);
      gson_FutureTypeAdapter0.setDelegate(typeAdapter0);
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 3972;
      Integer integer0 = new Integer(3972);
      try { 
        gson_FutureTypeAdapter0.fromJson("Z4U6p8IEDhS9UG+O=");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Gson gson0 = new Gson();
      int int0 = 3639;
      Class<Long> class0 = Long.class;
      TypeToken<Long> typeToken0 = TypeToken.get(class0);
      gson0.getAdapter(typeToken0);
      Integer integer0 = new Integer(3639);
      Integer.getInteger("{serializeNulls:", 3639);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("y^]Z{");
      mockPrintWriter0.print('9');
      gson0.toJson((Object) integer0, (Appendable) mockPrintWriter0);
      gson0.toJsonTree((Object) "{serializeNulls:");
      Class<Float> class1 = Float.class;
      gson0.getAdapter(class1);
      Class<Character> class2 = Character.TYPE;
      gson0.toJson((Object) null, (Type) class2);
      TypeToken<Float> typeToken1 = (TypeToken<Float>) mock(TypeToken.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(typeToken1).getRawType();
      // Undeclared exception!
      try { 
        gson0.getAdapter(typeToken1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Gson gson0 = new Gson();
      GsonBuilder gsonBuilder0 = gson0.newBuilder();
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
      
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) gsonBuilder0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.gson.GsonBuilder cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.Gson$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Gson gson0 = new Gson();
      float float0 = (-0.66065544F);
      Float float1 = new Float((-0.66065544F));
      char[] charArray0 = new char[6];
      charArray0[0] = '$';
      charArray0[1] = 'v';
      charArray0[2] = '_';
      charArray0[3] = '';
      charArray0[4] = '$';
      charArray0[5] = '4';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) float1, (Appendable) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeToken.get(class0);
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader(446);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      try { 
        gson0.fromJson(jsonReader0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Gson gson0 = new Gson();
      StringReader stringReader0 = new StringReader("[y");
      stringReader0.read();
      gson0.newJsonReader(stringReader0);
      Class<Float> class0 = Float.TYPE;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(824);
      JsonWriter jsonWriter0 = new JsonWriter(charArrayWriter0);
      jsonWriter0.setIndent("PxB");
      jsonWriter0.setSerializeNulls(true);
      jsonWriter0.setLenient(true);
      jsonWriter0.beginArray();
      JsonWriter jsonWriter1 = jsonWriter0.value(106.5);
      jsonWriter1.endArray();
      Class<AtomicLongArray> class1 = AtomicLongArray.class;
      TypeToken<AtomicLongArray> typeToken0 = TypeToken.get(class1);
      gson0.getAdapter(typeToken0);
      gson0.excluder();
      Gson.checkValidFloatingPoint(824);
      gson0.htmlSafe();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.close();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      try { 
        gson0.fromJson(jsonReader0, (Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      gson0.toJsonTree((Object) pipedReader0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) class0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.Gson$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Gson gson0 = new Gson();
      Float float0 = new Float(167.53040266);
      gson0.toJson((Object) float0);
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      Float.sum(0.0F, 0.0F);
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0, (Appendable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.lang.Object. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Gson gson0 = new Gson();
      gson0.toJsonTree((Object) null);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(3147);
      MockFileWriter mockFileWriter0 = new MockFileWriter("  ", true);
      gson0.toJson((Object) atomicLongArray0, (Type) class0, (Appendable) mockFileWriter0);
      typeToken0.toString();
      gson0.getAdapter(typeToken0);
      Class<Short> class1 = Short.class;
      try { 
        gson0.fromJson("I(,", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"I(\"
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$6", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      gson0.getAdapter(class0);
      String string0 = gson0.toString();
      MockFileWriter mockFileWriter0 = new MockFileWriter(" as a @JsonAdapter for ");
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.fromJson(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson((JsonReader) null, (Type) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = null;
      try {
        defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 3296, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 3296
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader();
      Class<Float> class0 = Float.TYPE;
      try { 
        gson0.fromJson((Reader) pipedReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Gson gson0 = new Gson();
      Float float0 = new Float(1.0F);
      Float.max((-5897.668F), 1.0F);
      Float.sum((-389.096F), (-5897.668F));
      // Undeclared exception!
      try { 
        gson0.toJson((Object) null, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Double> class0 = Double.class;
      gson0.fromJson((String) null, class0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Long> class0 = Long.class;
      TypeToken<Long> typeToken0 = TypeToken.get(class0);
      gson0.getAdapter(typeToken0);
      Integer integer0 = new Integer(3639);
      Integer integer1 = new Integer(3639);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("y^]Z{");
      mockPrintWriter0.print('9');
      gson0.toJson((Object) integer0, (Appendable) mockPrintWriter0);
      gson0.toJsonTree((Object) "{serializeNulls:");
      Class<Float> class1 = Float.class;
      gson0.getAdapter(class1);
      Class<Character> class2 = Character.TYPE;
      gson0.toJson((Object) null, (Type) class2);
      Class<Float> class3 = Float.class;
      TypeToken<Float> typeToken1 = (TypeToken<Float>) mock(TypeToken.class, new ViolatedAssumptionAnswer());
      doReturn(class3, (Class) null, (Class) null).when(typeToken1).getRawType();
      // Undeclared exception!
      try { 
        gson0.getAdapter(typeToken1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Gson gson0 = new Gson();
      boolean boolean0 = gson0.htmlSafe();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        gson0.toJson((Object) null, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.fromJson("com.google.gson.internal.bind.DateTypeAdapter$1", (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Gson gson0 = new Gson();
      byte byte0 = (byte)84;
      Byte byte1 = new Byte((byte)84);
      gson0.toJson((Object) byte1);
      JsonArray jsonArray0 = new JsonArray();
      Excluder excluder0 = new Excluder();
      Class<Excluder> class0 = Excluder.class;
      TypeToken<Excluder> typeToken0 = TypeToken.get(class0);
      Class<Float> class1 = Float.class;
      TypeToken.get(class1);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      JsonPrimitive jsonPrimitive0 = null;
      try {
        jsonPrimitive0 = new JsonPrimitive((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Gson gson0 = new Gson();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) class0, (Type) class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.Number
         //
         verifyException("com.google.gson.Gson$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedWriter pipedWriter0 = new PipedWriter();
      char[] charArray0 = new char[7];
      Class<AtomicLong> class0 = AtomicLong.class;
      gson0.fromJson((JsonElement) null, class0);
      charArray0[0] = '=';
      charArray0[1] = '&';
      char char0 = 'm';
      // Undeclared exception!
      try { 
        pipedWriter0.write("=#vNo%'blFlO|", 10, (-370));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      gson0.getAdapter(typeToken0);
      Excluder excluder0 = new Excluder();
      // Undeclared exception!
      try { 
        gson0.toJson((Object) excluder0, (Type) class0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = (TypeToken<Object>) mock(TypeToken.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(typeToken0).getRawType();
      Gson gson0 = new Gson();
      long[] longArray0 = new long[0];
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(longArray0);
      gson0.toJsonTree((Object) atomicLongArray0);
      Gson gson1 = new Gson();
      // Undeclared exception!
      try { 
        gson1.getAdapter(typeToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Byte> class0 = Byte.TYPE;
      gson0.fromJson((JsonElement) null, (Type) class0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = (TypeToken<Object>) mock(TypeToken.class, new ViolatedAssumptionAnswer());
      doReturn(class0, (Class) null, (Class) null).when(typeToken0).getRawType();
      Gson gson1 = new Gson();
      long[] longArray0 = new long[0];
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(longArray0);
      gson1.toJsonTree((Object) atomicLongArray0);
      Gson gson2 = new Gson();
      // Undeclared exception!
      try { 
        gson2.getAdapter(typeToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      Excluder excluder0 = new Excluder();
      int[] intArray0 = new int[3];
      intArray0[0] = (-392);
      int int0 = 721;
      intArray0[1] = 721;
      intArray0[2] = 0;
      Excluder excluder1 = excluder0.withModifiers(intArray0);
      Class<Object> class1 = Object.class;
      excluder1.excludeClass(class1, false);
      excluder1.excludeClass(class1, false);
      Excluder excluder2 = excluder1.excludeFieldsWithoutExposeAnnotation();
      Excluder excluder3 = excluder2.withVersion((-392));
      gson0.toJsonTree((Object) excluder3, (Type) class0);
      Class<AtomicLongArray> class2 = AtomicLongArray.class;
      TypeToken.get(class2);
      Gson gson1 = new Gson();
      Class<Float> class3 = Float.class;
      // Undeclared exception!
      try { 
        gson0.fromJson(". ", class3);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Gson gson0 = new Gson();
      Gson gson1 = new Gson();
      gson1.excluder();
      FieldNamingStrategy fieldNamingStrategy0 = gson1.fieldNamingStrategy();
      assertNotNull(fieldNamingStrategy0);
      
      boolean boolean0 = gson1.serializeNulls();
      assertTrue(gson1.htmlSafe());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Gson gson0 = new Gson();
      AtomicLongArray atomicLongArray0 = new AtomicLongArray(1454);
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      typeToken0.toString();
      TypeAdapter<Object> typeAdapter0 = gson0.getAdapter(typeToken0);
      assertNotNull(typeAdapter0);
      
      Gson.checkValidFloatingPoint((-2618.9137));
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.getAsJsonPrimitive("java.lang.Object");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(824);
      JsonWriter jsonWriter0 = new JsonWriter(charArrayWriter0);
      jsonWriter0.setIndent("PxB");
      jsonWriter0.setSerializeNulls(true);
      jsonWriter0.setLenient(true);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      JsonWriter jsonWriter2 = jsonWriter0.value(106.5);
      jsonWriter2.endArray();
      jsonWriter1.setLenient(true);
      JsonWriter jsonWriter3 = new JsonWriter(charArrayWriter0);
      gson0.toJson((JsonElement) null, jsonWriter3);
      assertTrue(gson0.htmlSafe());
      assertFalse(jsonWriter3.isLenient());
      assertTrue(jsonWriter3.getSerializeNulls());
      assertFalse(gson0.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Object> class0 = Object.class;
      try { 
        gson0.fromJson("_A g", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 5 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Gson gson0 = new Gson();
      JsonArray jsonArray0 = new JsonArray(3127);
      jsonArray0.add("");
      // Undeclared exception!
      try { 
        gson0.toJson((JsonElement) jsonArray0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = gson0.excluder();
      assertNotNull(excluder0);
      assertFalse(gson0.serializeNulls());
      assertTrue(gson0.htmlSafe());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Gson gson0 = new Gson();
      Float float0 = new Float((-1.0F));
      Float.max((-1.0F), (-1.0F));
      Float.sum((-1.0F), (-1.0F));
      // Undeclared exception!
      try { 
        gson0.toJson((Object) float0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.Streams$AppendableWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader();
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      gson0.getAdapter(typeToken0);
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        gson0.fromJson("Expected ':'", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to invoke no-args constructor for interface java.time.chrono.ChronoLocalDate. Registering an InstanceCreator with Gson for this type may fix this problem.
         //
         verifyException("com.google.gson.internal.ConstructorConstructor$14", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Gson gson0 = new Gson();
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeToken<Integer> typeToken0 = TypeToken.get(class0);
      Gson gson0 = new Gson();
      gson0.getAdapter(typeToken0);
      // Undeclared exception!
      try { 
        gson0.toJsonTree((Object) class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Attempted to serialize java.lang.Class: java.lang.Integer. Forgot to register a type adapter?
         //
         verifyException("com.google.gson.internal.bind.TypeAdapters$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Gson gson0 = new Gson();
      PipedReader pipedReader0 = new PipedReader();
      Class<Float> class0 = Float.class;
      StringReader stringReader0 = new StringReader("|<]Lbr=wGH_^Z3U*G");
      // Undeclared exception!
      try { 
        gson0.fromJson((Reader) stringReader0, class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 16:29:16 GMT 2019
 */

package src;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import src.Fiefdoms;
import src.Intruders;
import src.Knight;
import src.Mercenaries;
import src.Player;
import src.Vassals;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Fiefdoms_ESTest extends Fiefdoms_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Intruders intruders0 = new Intruders();
      Fiefdoms fiefdoms0 = new Fiefdoms((ArrayList<String>) null, (String) null, "muslim", 2, false, (ArrayList<String>) null);
      Fiefdoms fiefdoms1 = new Fiefdoms();
      fiefdoms1.getMuslim();
      fiefdoms1.getMuslim();
      Fiefdoms fiefdoms2 = new Fiefdoms((ArrayList<String>) null, "", "", 1032, false, (ArrayList<String>) null);
      fiefdoms2.getPeasants();
      fiefdoms2.setLoyalVassals(3, false);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      fiefdoms0.getShaderColor();
      fiefdoms0.setPersonalCastles(true);
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMagyar();
      Intruders intruders0 = new Intruders("There's ", "knight");
      arrayList0.add(intruders0);
      Intruders intruders1 = new Intruders("There's ", " allies");
      intruders1.setType("There's ");
      intruders1.setType("There's ");
      arrayList0.add(intruders1);
      fiefdoms0.setMagyar(arrayList0);
      fiefdoms0.getInvaderType();
      fiefdoms0.getName();
      fiefdoms0.setViking(0, true);
      fiefdoms0.setName("g");
      fiefdoms0.setShaderColor((float[]) null);
      fiefdoms0.getPersonalCastles();
      fiefdoms0.getConqueror();
      fiefdoms0.getSelectioncolor();
      fiefdoms0.setViking(0, false);
      fiefdoms0.getInvaderType();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, ".", ".", 4853, false, arrayList0);
      fiefdoms0.buyPersonalCastles(4853);
      fiefdoms0.setOwner(".");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      fiefdoms0.setFiefdomCastles(false);
      fiefdoms0.setViking((-1), false);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      fiefdoms0.getShaderColor();
      fiefdoms0.setPersonalCastles(true);
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMagyar();
      Intruders intruders0 = new Intruders("There's ", "knight");
      arrayList0.add(intruders0);
      Intruders intruders1 = new Intruders("There's ", " allies");
      intruders1.setType("There's ");
      intruders1.setType("There's ");
      arrayList0.add(intruders1);
      fiefdoms0.setMagyar(arrayList0);
      fiefdoms0.getInvaderType();
      fiefdoms0.getName();
      fiefdoms0.setViking(0, true);
      fiefdoms0.setName("g");
      fiefdoms0.setShaderColor((float[]) null);
      fiefdoms0.buyPersonalCastles((-140));
      fiefdoms0.getPersonalCastles();
      fiefdoms0.getConqueror();
      fiefdoms0.getSelectioncolor();
      fiefdoms0.setViking(0, false);
      fiefdoms0.getInvaderType();
      fiefdoms0.getFiefdomCastles();
      fiefdoms0.buyPersonalCastles(1376);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      Fiefdoms fiefdoms1 = new Fiefdoms();
      fiefdoms1.setMagyar(0, true);
      fiefdoms1.getMuslim();
      fiefdoms1.getMuslim();
      fiefdoms1.getName();
      fiefdoms1.getValue();
      fiefdoms1.setRebelliousVassals(0, true);
      fiefdoms1.getLoyalVassals();
      Fiefdoms fiefdoms2 = new Fiefdoms();
      fiefdoms1.getLoyalVassals();
      fiefdoms2.getMagyar();
      Fiefdoms fiefdoms3 = new Fiefdoms();
      fiefdoms2.getMagyar();
      fiefdoms3.getMagyar();
      fiefdoms3.getMuslim();
      fiefdoms1.getName();
      fiefdoms2.getRebelliousVassals();
      Fiefdoms fiefdoms4 = new Fiefdoms();
      fiefdoms4.buyFiefdomCastles(1);
      fiefdoms1.getOwner();
      ArrayList<Intruders> arrayList0 = fiefdoms4.getViking();
      fiefdoms0.setMuslim(arrayList0);
      fiefdoms0.setMagyar(1, true);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      fiefdoms0.setFiefdomCastles(false);
      ArrayList<Vassals> arrayList0 = fiefdoms0.getRebelliousVassals();
      Vassals vassals0 = new Vassals("magyar", "D)~5g0");
      arrayList0.add(vassals0);
      fiefdoms0.setRebelliousVassals(arrayList0);
      fiefdoms0.getVassalsList();
      fiefdoms0.setConqueror("MAX calculated: ");
      fiefdoms0.getNeighbors();
      fiefdoms0.setPeasants((-2439));
      fiefdoms0.setFiefdomCastles(true);
      fiefdoms0.setRebelliousVassals(0, false);
      fiefdoms0.setRebelliousVassals(arrayList0);
      fiefdoms0.getMagyar();
      fiefdoms0.setKingdom(false);
      fiefdoms0.getLoyalVassals();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      fiefdoms0.setRebelliousVassals(219, true);
      fiefdoms0.setLoyalVassals(219, true);
      fiefdoms0.getInvaderType();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      fiefdoms0.setMagyar((-153), false);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms((ArrayList<String>) null, "", "muslim", 1391, false, (ArrayList<String>) null);
      fiefdoms0.setConqueror("}S;d7TSC?EQ#R7?");
      fiefdoms0.setLoyalVassals(1391, true);
      fiefdoms0.getConqueror();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      fiefdoms0.setRebelliousVassals(1375, false);
      fiefdoms0.setMagyar((-1), false);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte)0;
      fiefdoms0.selectioncolor = byteArray0;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      arrayList0.add("(xH9<2");
      arrayList0.listIterator((int) (byte)0);
      fiefdoms0.setInvaderType(arrayList0);
      arrayList0.clear();
      ArrayList<Vassals> arrayList1 = fiefdoms0.loyalVassals;
      fiefdoms0.setMuslim(2231, true);
      fiefdoms0.setMagyar(383, true);
      fiefdoms0.setPersonalCastles(false);
      fiefdoms0.buyFiefdomCastles(2702);
      fiefdoms0.getMagyar();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMuslim();
      assertNotNull(arrayList0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      fiefdoms0.setMuslim(arrayList0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayList<String> arrayList1 = fiefdoms0.getNeighbors();
      assertNull(arrayList1);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      
      ArrayList<Vassals> arrayList2 = fiefdoms0.getRebelliousVassals();
      assertNotNull(arrayList2);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      fiefdoms0.setLoyalVassals(1020, false);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      fiefdoms0.setRebelliousVassals((-1093), true);
      fiefdoms0.getMagyar();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      fiefdoms0.setLoyalVassals(0, true);
      ArrayList<Intruders> arrayList0 = new ArrayList<Intruders>();
      ArrayList<Intruders> arrayList1 = fiefdoms0.getViking();
      Intruders intruders0 = new Intruders();
      arrayList0.add(intruders0);
      // Undeclared exception!
      try { 
        arrayList0.addAll(2, (Collection<? extends Intruders>) arrayList1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      Knight knight0 = new Knight("There's ", "-Uic%9<?NP|ELXrg/", "-Uic%9<?NP|ELXrg/");
      ArrayList<Player> arrayList0 = knight0.getAllies();
      fiefdoms0.setVassalsList(arrayList0);
      fiefdoms0.setLoyalVassals(3, false);
      fiefdoms0.getVassalsList();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Knight knight0 = new Knight("There's ", "Invalid origin fiefdom", (String) null);
      ArrayList<String> arrayList0 = knight0.conversation;
      knight0.conversation = arrayList0;
      ArrayList<String> arrayList1 = knight0.getFiefdoms();
      knight0.setConversation(arrayList0);
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList1, "Invalid origin fiefdom", "You are allowed to take up to ", 1758, false, arrayList1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ArrayList<Intruders> arrayList2 = new ArrayList<Intruders>();
      Intruders intruders0 = new Intruders();
      arrayList2.add(intruders0);
      fiefdoms0.setMuslim(arrayList2);
      fiefdoms0.getLoyalVassals();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)0;
      fiefdoms0.selectioncolor = byteArray0;
      fiefdoms0.setViking((-2021), true);
      fiefdoms0.getValue();
      fiefdoms0.getMagyar();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, "", "", (-15), true, arrayList0);
      fiefdoms0.setOwner("");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      
      ArrayList<String> arrayList0 = fiefdoms0.getInvaderType();
      assertNull(arrayList0);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.getMagyar();
      int int0 = 3317;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      fiefdoms0.setFiefdomCastles(false);
      fiefdoms0.setValue(0);
      fiefdoms0.setValue(1031);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 3317;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 1031;
      floatArray0[3] = (float) 3317;
      floatArray0[4] = (float) 1031;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (float) 0;
      fiefdoms0.shaderColor = floatArray0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "VP|~C?qRmntU");
      fiefdoms0.setRebelliousVassals((ArrayList<Vassals>) null);
      fiefdoms0.loyalVassals = null;
      int int1 = (-519);
      // Undeclared exception!
      try { 
        fiefdoms0.setRebelliousVassals((-519), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.Fiefdoms", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      Fiefdoms fiefdoms1 = new Fiefdoms((ArrayList<String>) null, "muslim", "muslim", 5, false, (ArrayList<String>) null);
      fiefdoms1.setOwner("{tSpL~");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Knight knight0 = new Knight();
      knight0.getName();
      knight0.addMercenaries(1);
      ArrayList<String> arrayList0 = knight0.conversation;
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, "vassal", (String) null, 1, true, arrayList0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-2);
      byteArray0[8] = (byte)0;
      fiefdoms0.setSelectioncolor(byteArray0);
      floatArray0[1] = (float) 1;
      fiefdoms0.shaderColor = floatArray0;
      fiefdoms0.setKingdom(true);
      fiefdoms0.setFiefdomCastles(true);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      fiefdoms0.getRebelliousVassals();
      fiefdoms0.setPersonalCastles(1508);
      byte[] byteArray0 = new byte[0];
      fiefdoms0.selectioncolor = byteArray0;
      fiefdoms0.setFiefdomCastles(true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      fiefdoms0.setViking(1589, true);
      fiefdoms0.getShaderColor();
      ArrayList<Intruders> arrayList0 = fiefdoms0.getViking();
      arrayList0.iterator();
      arrayList0.clone();
      fiefdoms0.setMagyar(arrayList0);
      fiefdoms0.getMuslim();
      fiefdoms0.getSelectioncolor();
      fiefdoms0.setViking(2438, false);
      fiefdoms0.setMagyar(1508, true);
      fiefdoms0.getViking();
      fiefdoms0.getNeighbors();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Knight knight0 = new Knight();
      knight0.setScore((-3429));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      knight0.getLocation();
      knight0.isFiefdomMine("Ile-De-France");
      knight0.setRank("There's ");
      knight0.setTotalMoney(0);
      ArrayList<String> arrayList0 = knight0.getConversation();
      arrayList0.add("Ile-De-France");
      arrayList0.parallelStream();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, "Ile-De-France", "kdn|u?&}0il)sk~o)4", 0, false, arrayList0);
      fiefdoms0.getFiefdomCastles();
      fiefdoms0.getRebelliousVassals();
      fiefdoms0.setPeasants(2);
      arrayList0.add("q~y%");
      fiefdoms0.getSelectioncolor();
      fiefdoms0.setMagyar(0, false);
      fiefdoms0.setMagyar((-1632), true);
      fiefdoms0.getVassalsList();
      fiefdoms0.setViking((-1632), true);
      fiefdoms0.getNeighbors();
      fiefdoms0.getFiefdomCastles();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      fiefdoms0.getConqueror();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, ".", ".", 4843, false, arrayList0);
      fiefdoms0.buyFiefdomCastles(3942);
      fiefdoms0.setOwner(".");
      fiefdoms0.getNeighbors();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, ".", ".", 4861, false, arrayList0);
      fiefdoms0.setNeighbors(arrayList0);
      fiefdoms0.setOwner(".");
      fiefdoms0.setMagyar(4861, true);
      fiefdoms0.getPeasants();
      fiefdoms0.getRebelliousVassals();
      fiefdoms0.setMagyar(0, false);
      fiefdoms0.setOwner("m)0!rPgdojhI=a*_q");
      arrayList0.add("m)0!rPgdojhI=a*_q");
      fiefdoms0.setMagyar(1104, false);
      fiefdoms0.getRebelliousVassals();
      fiefdoms0.getMagyar();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      ArrayList<Intruders> arrayList0 = fiefdoms0.getViking();
      Intruders intruders0 = new Intruders();
      arrayList0.add(intruders0);
      fiefdoms0.setMagyar(arrayList0);
      ArrayList<Player> arrayList1 = new ArrayList<Player>();
      fiefdoms0.setVassalsList(arrayList1);
      fiefdoms0.setMagyar((-519), false);
      fiefdoms0.buyFiefdomCastles(3);
      fiefdoms0.getSelectioncolor();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-3662.185F);
      floatArray0[1] = 3732.371F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1302.498F);
      floatArray0[4] = 0.0F;
      fiefdoms0.shaderColor = floatArray0;
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      int int0 = fiefdoms0.getFiefdomCastles();
      assertEquals(0, int0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setKingdom(false);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMuslim();
      assertNotNull(arrayList0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ListIterator<Intruders> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      Intruders intruders0 = new Intruders();
      assertNotNull(intruders0);
      assertNull(intruders0.getType());
      assertNull(intruders0.getLocation());
      assertNull(intruders0.getRank());
      
      boolean boolean0 = arrayList0.add(intruders0);
      assertTrue(boolean0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(intruders0.getType());
      assertNull(intruders0.getLocation());
      assertNull(intruders0.getRank());
      assertTrue(arrayList0.contains(intruders0));
      
      Iterator<Intruders> iterator0 = arrayList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(intruders0));
      
      fiefdoms0.setViking(arrayList0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(intruders0));
      
      intruders0.setType("Hf#u(ri");
      assertNull(intruders0.getLocation());
      assertNull(intruders0.getRank());
      assertEquals("Hf#u(ri", intruders0.getType());
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.getLoyalVassals();
      assertNotNull(arrayList1);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      String string0 = fiefdoms0.getConqueror();
      assertNull(string0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setPeasants(2);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(2, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      fiefdoms0.setShaderColor(floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-3662.185F), 3732.371F, 0.0F, (-1302.498F), 0.0F}, floatArray0, 0.01F);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(2, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      fiefdoms0.setPersonalCastles(0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(2, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      int int1 = fiefdoms0.getValue();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(2, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      int int2 = fiefdoms0.getPeasants();
      assertEquals(2, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(2, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      fiefdoms0.setViking(0, true);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(2, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      fiefdoms0.setLoyalVassals((-1446), true);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      fiefdoms0.setLoyalVassals((-2028), true);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      fiefdoms0.setViking(3, true);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      fiefdoms0.getInvaderType();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)95;
      fiefdoms0.selectioncolor = byteArray0;
      Fiefdoms fiefdoms1 = new Fiefdoms((ArrayList<String>) null, "You cannot have more than a total of ", "Ile-De-France", 0, true, (ArrayList<String>) null);
      fiefdoms1.setOwner("; -4tsI");
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMuslim();
      fiefdoms1.setMagyar(arrayList0);
      fiefdoms1.setRebelliousVassals(0, true);
      fiefdoms1.setRebelliousVassals(0, true);
      fiefdoms0.setValue(648);
      fiefdoms1.getInvaderType();
      fiefdoms0.setName("You cannot have more than a total of ");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      fiefdoms0.setFiefdomCastles(true);
      ArrayList<Vassals> arrayList0 = fiefdoms0.getRebelliousVassals();
      Vassals vassals0 = new Vassals((String) null, "Invalid destination fiefdom");
      arrayList0.add(vassals0);
      fiefdoms0.getVassalsList();
      fiefdoms0.setConqueror("CL+");
      fiefdoms0.getNeighbors();
      fiefdoms0.setPeasants(2);
      fiefdoms0.setFiefdomCastles(true);
      fiefdoms0.setRebelliousVassals(1, false);
      fiefdoms0.setRebelliousVassals(arrayList0);
      fiefdoms0.getMuslim();
      fiefdoms0.setKingdom(false);
      fiefdoms0.getLoyalVassals();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      fiefdoms0.setConqueror((String) null);
      fiefdoms0.getNeighbors();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      fiefdoms0.setConqueror(" @1#\"%Ji{g@JWy");
      fiefdoms0.setLoyalVassals(3, true);
      fiefdoms0.setInvaderType((ArrayList<String>) null);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      fiefdoms0.setName(" @1#\"%Ji{g@JWy");
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-1416.5F);
      floatArray0[6] = (float) 0;
      fiefdoms0.setShaderColor(floatArray0);
      fiefdoms0.setViking(0, false);
      fiefdoms0.setName("");
      fiefdoms0.setMuslim((ArrayList<Intruders>) null);
      fiefdoms0.getOwner();
      fiefdoms0.setShaderColor(floatArray0);
      fiefdoms0.getFiefdomCastles();
      fiefdoms0.setInvaderType((ArrayList<String>) null);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      fiefdoms0.setFiefdomCastles(false);
      ArrayList<Vassals> arrayList0 = fiefdoms0.getRebelliousVassals();
      Vassals vassals0 = new Vassals("magyar", "D)~5g0");
      arrayList0.add(vassals0);
      Fiefdoms fiefdoms1 = new Fiefdoms();
      fiefdoms0.getPeasants();
      fiefdoms0.isKingdom();
      fiefdoms1.getLoyalVassals();
      fiefdoms1.getMagyar();
      fiefdoms0.getFiefdomCastles();
      fiefdoms0.getLoyalVassals();
      fiefdoms0.getFiefdomCastles();
      fiefdoms1.getInvaderType();
      fiefdoms0.getInvaderType();
      fiefdoms1.setViking(140, false);
      fiefdoms0.buyFiefdomCastles((-951));
      fiefdoms1.getSelectioncolor();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      fiefdoms0.getInvaderType();
      fiefdoms0.setInvaderType((ArrayList<String>) null);
      fiefdoms0.setMagyar((-1580), false);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      Fiefdoms fiefdoms1 = new Fiefdoms();
      assertNotNull(fiefdoms1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getValue());
      
      fiefdoms0.setRebelliousVassals(fiefdoms1.loyalVassals);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getValue());
      
      ArrayList<Player> arrayList0 = fiefdoms0.getVassalsList();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNull(arrayList0);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      fiefdoms0.setConqueror("3cR!");
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("3cR!", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.getRebelliousVassals();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotNull(arrayList1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("3cR!", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      fiefdoms0.setViking(508, false);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("3cR!", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      ArrayList<Player> arrayList2 = fiefdoms0.getVassalsList();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNull(arrayList2);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("3cR!", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      LinkedList<Intruders> linkedList0 = new LinkedList<Intruders>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ArrayList<Intruders> arrayList3 = new ArrayList<Intruders>(linkedList0);
      assertNotNull(arrayList3);
      assertEquals(0, linkedList0.size());
      assertTrue(arrayList3.isEmpty());
      assertEquals(0, arrayList3.size());
      
      fiefdoms0.setMuslim(arrayList3);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("3cR!", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, linkedList0.size());
      assertTrue(arrayList3.isEmpty());
      assertEquals(0, arrayList3.size());
      
      fiefdoms0.setMuslim((-1), false);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("3cR!", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      fiefdoms0.setViking(1389, true);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("3cR!", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      ArrayList<String> arrayList4 = new ArrayList<String>();
      assertNotNull(arrayList4);
      assertTrue(arrayList4.isEmpty());
      assertEquals(0, arrayList4.size());
      assertFalse(arrayList4.contains("3cR!"));
      
      Vassals vassals0 = new Vassals("Invalid number", "<");
      assertNotNull(vassals0);
      assertEquals("<", vassals0.getFiefdom());
      assertEquals("Invalid number", vassals0.getLord());
      assertNull(vassals0.getLocation());
      assertEquals("vassal", vassals0.getRank());
      
      boolean boolean0 = arrayList4.remove((Object) vassals0);
      assertFalse(boolean0);
      assertTrue(arrayList4.isEmpty());
      assertEquals(0, arrayList4.size());
      assertEquals("<", vassals0.getFiefdom());
      assertEquals("Invalid number", vassals0.getLord());
      assertNull(vassals0.getLocation());
      assertEquals("vassal", vassals0.getRank());
      assertFalse(arrayList4.contains("<"));
      
      Fiefdoms fiefdoms2 = new Fiefdoms(arrayList4, "<", "viking", 1389, false, arrayList4);
      assertNotNull(fiefdoms2);
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals(1389, fiefdoms2.getValue());
      assertEquals("viking", fiefdoms2.getOwner());
      assertEquals("<", fiefdoms2.getName());
      assertNull(fiefdoms2.getConqueror());
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertTrue(arrayList4.isEmpty());
      assertEquals(0, arrayList4.size());
      assertFalse(arrayList4.contains("<"));
      
      fiefdoms2.buyFiefdomCastles(1389);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNotSame(fiefdoms2, fiefdoms1);
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals(1389, fiefdoms2.getValue());
      assertEquals("viking", fiefdoms2.getOwner());
      assertEquals("<", fiefdoms2.getName());
      assertNull(fiefdoms2.getConqueror());
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertTrue(arrayList4.isEmpty());
      assertEquals(0, arrayList4.size());
      assertFalse(arrayList4.contains("<"));
      
      ArrayList<Intruders> arrayList5 = fiefdoms0.getMuslim();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms0, fiefdoms2);
      assertSame(arrayList5, arrayList3);
      assertNotNull(arrayList5);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("3cR!", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertTrue(arrayList5.isEmpty());
      assertEquals(0, arrayList5.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      ArrayList<String> arrayList0 = fiefdoms0.getNeighbors();
      assertNull(arrayList0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      
      fiefdoms0.setViking((ArrayList<Intruders>) null);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      
      Fiefdoms fiefdoms1 = new Fiefdoms();
      assertNotNull(fiefdoms1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      
      String string0 = fiefdoms1.getName();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNull(string0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      
      fiefdoms1.setName("7faL|Yi]pb}:pj5E");
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getValue());
      assertEquals("7faL|Yi]pb}:pj5E", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      
      ArrayList<String> arrayList0 = fiefdoms1.getNeighbors();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNull(arrayList0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getValue());
      assertEquals("7faL|Yi]pb}:pj5E", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      
      String string1 = fiefdoms1.getOwner();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNull(string1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getValue());
      assertEquals("7faL|Yi]pb}:pj5E", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      
      fiefdoms1.setName(",$jS=1,}c?ut");
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(",$jS=1,}c?ut", fiefdoms1.getName());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      
      ArrayList<String> arrayList1 = fiefdoms1.getNeighbors();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNull(arrayList1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(",$jS=1,}c?ut", fiefdoms1.getName());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      
      fiefdoms0.setNeighbors((ArrayList<String>) null);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      
      int int0 = 2;
      // Undeclared exception!
      try { 
        fiefdoms0.setViking(2, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.Fiefdoms", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setViking((-594), false);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getLoyalVassals();
      assertNotNull(arrayList0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Vassals vassals0 = new Vassals();
      assertNotNull(vassals0);
      assertNull(vassals0.getLocation());
      assertNull(vassals0.getFiefdom());
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getLord());
      
      boolean boolean0 = arrayList0.add(vassals0);
      assertTrue(boolean0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(vassals0.getLocation());
      assertNull(vassals0.getFiefdom());
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getLord());
      assertTrue(arrayList0.contains(vassals0));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      arrayList0.clear();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(vassals0));
      
      fiefdoms0.setRebelliousVassals(arrayList0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(vassals0));
      
      fiefdoms0.setLoyalVassals((-2127), false);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      
      fiefdoms0.setRebelliousVassals((-1183), true);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      
      float[] floatArray0 = fiefdoms0.getShaderColor();
      assertEquals(2, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      
      fiefdoms0.buyPersonalCastles(3013);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte)0;
      fiefdoms0.selectioncolor = byteArray0;
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add("");
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(""));
      
      boolean boolean1 = arrayList0.add("(xH9<2");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains("(xH9<2"));
      
      ListIterator<String> listIterator0 = arrayList0.listIterator((int) (byte)0);
      assertNotNull(listIterator0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(arrayList0.contains("(xH9<2"));
      
      fiefdoms0.setInvaderType(arrayList0);
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains("(xH9<2"));
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.loyalVassals;
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      fiefdoms0.setLoyalVassals(arrayList1);
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      byte[] byteArray1 = fiefdoms0.getSelectioncolor();
      assertEquals(6, byteArray1.length);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)107, (byte)0, (byte) (-87), (byte)1, (byte) (-25), (byte)0}, byteArray1);
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setLoyalVassals((int) (byte)0, false);
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.buyFiefdomCastles((byte)107);
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms((ArrayList<String>) null, "", (String) null, 2663, false, (ArrayList<String>) null);
      assertNotNull(fiefdoms0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(2663, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      
      ArrayList<String> arrayList0 = fiefdoms0.getNeighbors();
      assertNull(arrayList0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(2663, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      
      ArrayList<String> arrayList1 = fiefdoms0.getNeighbors();
      assertNull(arrayList1);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(2663, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      
      Fiefdoms fiefdoms1 = new Fiefdoms((ArrayList<String>) null, "", "", 3134, false, (ArrayList<String>) null);
      assertNotNull(fiefdoms1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(3134, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals("", fiefdoms1.getName());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals("", fiefdoms1.getOwner());
      
      fiefdoms0.setValue(2663);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(2663, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      
      fiefdoms1.setOwner("MzE");
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(3134, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals("", fiefdoms1.getName());
      assertEquals("MzE", fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      
      ArrayList<Intruders> arrayList2 = fiefdoms1.getMuslim();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotNull(arrayList2);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(3134, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals("", fiefdoms1.getName());
      assertEquals("MzE", fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      
      String string0 = fiefdoms1.getOwner();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals("MzE", string0);
      assertNotNull(string0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(3134, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals("", fiefdoms1.getName());
      assertEquals("MzE", fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      ArrayList<String> arrayList0 = fiefdoms0.getInvaderType();
      assertNull(arrayList0);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)95;
      fiefdoms0.selectioncolor = byteArray0;
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      Fiefdoms fiefdoms1 = new Fiefdoms((ArrayList<String>) null, "You cannot have more than a total of ", "Ile-De-France", 0, true, (ArrayList<String>) null);
      assertNotNull(fiefdoms1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertTrue(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getValue());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals("You cannot have more than a total of ", fiefdoms1.getName());
      assertEquals("Ile-De-France", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPeasants());
      
      String string0 = fiefdoms0.getName();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNull(string0);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      Fiefdoms fiefdoms2 = new Fiefdoms();
      assertNotNull(fiefdoms2);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertNull(fiefdoms2.getConqueror());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals(0, fiefdoms2.getValue());
      assertNull(fiefdoms2.getName());
      assertFalse(fiefdoms2.isKingdom());
      assertNull(fiefdoms2.getOwner());
      
      ArrayList<Vassals> arrayList1 = fiefdoms2.getRebelliousVassals();
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNotNull(arrayList1);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNull(fiefdoms2.getConqueror());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals(0, fiefdoms2.getValue());
      assertNull(fiefdoms2.getName());
      assertFalse(fiefdoms2.isKingdom());
      assertNull(fiefdoms2.getOwner());
      
      Fiefdoms fiefdoms3 = new Fiefdoms();
      assertNotNull(fiefdoms3);
      assertFalse(fiefdoms3.equals((Object)fiefdoms0));
      assertFalse(fiefdoms3.equals((Object)fiefdoms2));
      assertFalse(fiefdoms3.equals((Object)fiefdoms1));
      assertEquals(0, fiefdoms3.getPersonalCastles());
      assertNull(fiefdoms3.getConqueror());
      assertEquals(0, fiefdoms3.getValue());
      assertNull(fiefdoms3.getOwner());
      assertEquals(0, fiefdoms3.getPeasants());
      assertNull(fiefdoms3.getName());
      assertFalse(fiefdoms3.isKingdom());
      assertEquals(0, fiefdoms3.getFiefdomCastles());
      
      fiefdoms2.buyFiefdomCastles((byte)0);
      assertNotSame(fiefdoms2, fiefdoms3);
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertFalse(fiefdoms2.equals((Object)fiefdoms3));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertNull(fiefdoms2.getConqueror());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals(0, fiefdoms2.getValue());
      assertNull(fiefdoms2.getName());
      assertFalse(fiefdoms2.isKingdom());
      assertNull(fiefdoms2.getOwner());
      
      String string1 = fiefdoms2.getOwner();
      assertNotSame(fiefdoms2, fiefdoms3);
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNull(string1);
      assertFalse(fiefdoms2.equals((Object)fiefdoms3));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertNull(fiefdoms2.getConqueror());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals(0, fiefdoms2.getValue());
      assertNull(fiefdoms2.getName());
      assertFalse(fiefdoms2.isKingdom());
      assertNull(fiefdoms2.getOwner());
      
      ArrayList<Intruders> arrayList2 = fiefdoms0.getViking();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms0, fiefdoms2);
      assertNotSame(fiefdoms0, fiefdoms3);
      assertNotNull(arrayList2);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      assertFalse(fiefdoms0.equals((Object)fiefdoms3));
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      
      fiefdoms3.setMuslim(arrayList2);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms0, fiefdoms2);
      assertNotSame(fiefdoms0, fiefdoms3);
      assertNotSame(fiefdoms3, fiefdoms0);
      assertNotSame(fiefdoms3, fiefdoms2);
      assertNotSame(fiefdoms3, fiefdoms1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      assertFalse(fiefdoms0.equals((Object)fiefdoms3));
      assertFalse(fiefdoms3.equals((Object)fiefdoms0));
      assertFalse(fiefdoms3.equals((Object)fiefdoms2));
      assertFalse(fiefdoms3.equals((Object)fiefdoms1));
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms3.getPersonalCastles());
      assertNull(fiefdoms3.getConqueror());
      assertEquals(0, fiefdoms3.getValue());
      assertNull(fiefdoms3.getOwner());
      assertEquals(0, fiefdoms3.getPeasants());
      assertNull(fiefdoms3.getName());
      assertFalse(fiefdoms3.isKingdom());
      assertEquals(0, fiefdoms3.getFiefdomCastles());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      Intruders intruders0 = new Intruders();
      assertNotNull(intruders0);
      assertNull(intruders0.getType());
      assertNull(intruders0.getRank());
      assertNull(intruders0.getLocation());
      
      ArrayList<Player> arrayList0 = new ArrayList<Player>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      fiefdoms0.setMagyar((-519), false);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.buyFiefdomCastles(3);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      byte[] byteArray0 = fiefdoms0.getSelectioncolor();
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setMuslim(258, false);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      float[] floatArray0 = fiefdoms0.getShaderColor();
      assertEquals(2, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      
      fiefdoms0.loyalVassals = null;
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      
      // Undeclared exception!
      try { 
        fiefdoms0.setLoyalVassals((-1), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.Fiefdoms", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, ".", ".", (-1), false, arrayList0);
      assertNotNull(fiefdoms0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(".", fiefdoms0.getName());
      assertEquals(".", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals((-1), fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(arrayList0.contains("."));
      
      fiefdoms0.setOwner(".");
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(".", fiefdoms0.getName());
      assertEquals(".", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals((-1), fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(arrayList0.contains("."));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      
      ArrayList<Player> arrayList0 = new ArrayList<Player>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      fiefdoms0.setVassalsList(arrayList0);
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      fiefdoms0.setOwner("jbr<]#?imt?n");
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("jbr<]#?imt?n", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      
      int int0 = fiefdoms0.getPeasants();
      assertEquals(0, int0);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("jbr<]#?imt?n", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      
      ArrayList<Player> arrayList1 = new ArrayList<Player>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      boolean boolean0 = arrayList1.remove((Object) null);
      assertNotSame(arrayList1, arrayList0);
      assertFalse(boolean0);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      Mercenaries mercenaries0 = new Mercenaries();
      assertNotNull(mercenaries0);
      assertNull(mercenaries0.getLord());
      assertNull(mercenaries0.getFiefdom());
      assertEquals("vassal", mercenaries0.getRank());
      assertNull(mercenaries0.getLocation());
      
      boolean boolean1 = arrayList1.add((Player) mercenaries0);
      assertNotSame(arrayList1, arrayList0);
      assertTrue(boolean1);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertFalse(boolean1 == boolean0);
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertNull(mercenaries0.getLord());
      assertNull(mercenaries0.getFiefdom());
      assertEquals("vassal", mercenaries0.getRank());
      assertNull(mercenaries0.getLocation());
      
      boolean boolean2 = arrayList1.add((Player) mercenaries0);
      assertNotSame(arrayList1, arrayList0);
      assertTrue(boolean2);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(arrayList1.isEmpty());
      assertEquals(2, arrayList1.size());
      assertNull(mercenaries0.getLord());
      assertNull(mercenaries0.getFiefdom());
      assertEquals("vassal", mercenaries0.getRank());
      assertNull(mercenaries0.getLocation());
      
      fiefdoms0.setVassalsList(arrayList1);
      assertNotSame(arrayList1, arrayList0);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("jbr<]#?imt?n", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(arrayList1.isEmpty());
      assertEquals(2, arrayList1.size());
      
      fiefdoms0.setViking((-1885), false);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("jbr<]#?imt?n", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      
      ArrayList<String> arrayList2 = fiefdoms0.getInvaderType();
      assertNull(arrayList2);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("jbr<]#?imt?n", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      
      ArrayList<Player> arrayList3 = fiefdoms0.getVassalsList();
      assertSame(arrayList3, arrayList1);
      assertNotSame(arrayList3, arrayList0);
      assertNotNull(arrayList3);
      assertFalse(arrayList3.equals((Object)arrayList0));
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("jbr<]#?imt?n", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(arrayList3.isEmpty());
      assertEquals(2, arrayList3.size());
      
      ArrayList<String> arrayList4 = fiefdoms0.getInvaderType();
      assertNull(arrayList4);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("jbr<]#?imt?n", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setLoyalVassals(1, true);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Knight knight0 = new Knight();
      assertNotNull(knight0);
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      
      knight0.setName("9p/f'CSr8a8v!");
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getKills());
      assertEquals("9p/f'CSr8a8v!", knight0.getName());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      
      ArrayList<String> arrayList0 = knight0.getConversation();
      assertNotNull(arrayList0);
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getKills());
      assertEquals("9p/f'CSr8a8v!", knight0.getName());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("9p/f'CSr8a8v!"));
      
      boolean boolean0 = arrayList0.add("9p/f'CSr8a8v!");
      assertTrue(boolean0);
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getKills());
      assertEquals("9p/f'CSr8a8v!", knight0.getName());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains("9p/f'CSr8a8v!"));
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, "1", "*nlc3,)k[+u~vqvgcs#", 0, false, arrayList0);
      assertNotNull(fiefdoms0);
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getKills());
      assertEquals("9p/f'CSr8a8v!", knight0.getName());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("1", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("*nlc3,)k[+u~vqvgcs#", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(arrayList0.contains("1"));
      assertTrue(arrayList0.contains("9p/f'CSr8a8v!"));
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.getLoyalVassals();
      assertNotNull(arrayList1);
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getKills());
      assertEquals("9p/f'CSr8a8v!", knight0.getName());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("1", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("*nlc3,)k[+u~vqvgcs#", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(arrayList0.contains("1"));
      assertTrue(arrayList0.contains("9p/f'CSr8a8v!"));
      
      fiefdoms0.loyalVassals = arrayList1;
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getKills());
      assertEquals("9p/f'CSr8a8v!", knight0.getName());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("1", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("*nlc3,)k[+u~vqvgcs#", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, fiefdoms0.loyalVassals.size());
      assertTrue(fiefdoms0.loyalVassals.isEmpty());
      
      fiefdoms0.setMagyar(0, true);
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getKills());
      assertEquals("9p/f'CSr8a8v!", knight0.getName());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("1", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("*nlc3,)k[+u~vqvgcs#", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(arrayList0.contains("1"));
      assertTrue(arrayList0.contains("9p/f'CSr8a8v!"));
      
      ArrayList<String> arrayList2 = fiefdoms0.getInvaderType();
      assertSame(arrayList0, arrayList2);
      assertSame(arrayList2, arrayList0);
      assertNotNull(arrayList2);
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getKills());
      assertEquals("9p/f'CSr8a8v!", knight0.getName());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("1", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("*nlc3,)k[+u~vqvgcs#", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(arrayList2.isEmpty());
      assertEquals(1, arrayList2.size());
      assertFalse(arrayList0.contains("1"));
      assertTrue(arrayList0.contains("9p/f'CSr8a8v!"));
      assertFalse(arrayList2.contains("1"));
      assertTrue(arrayList2.contains("9p/f'CSr8a8v!"));
      
      ArrayList<Vassals> arrayList3 = fiefdoms0.getLoyalVassals();
      assertSame(arrayList0, arrayList2);
      assertSame(arrayList3, arrayList1);
      assertNotNull(arrayList3);
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getKills());
      assertEquals("9p/f'CSr8a8v!", knight0.getName());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("1", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("*nlc3,)k[+u~vqvgcs#", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, arrayList3.size());
      assertTrue(arrayList3.isEmpty());
      assertFalse(arrayList0.contains("1"));
      assertTrue(arrayList0.contains("9p/f'CSr8a8v!"));
      
      ArrayList<Intruders> arrayList4 = fiefdoms0.getMagyar();
      assertSame(arrayList0, arrayList2);
      assertNotNull(arrayList4);
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getKills());
      assertEquals("9p/f'CSr8a8v!", knight0.getName());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("1", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("*nlc3,)k[+u~vqvgcs#", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, arrayList4.size());
      assertTrue(arrayList4.isEmpty());
      assertFalse(arrayList0.contains("1"));
      assertTrue(arrayList0.contains("9p/f'CSr8a8v!"));
      
      fiefdoms0.setOwner("lpj[,pat8ywdd");
      assertSame(arrayList0, arrayList2);
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getKills());
      assertEquals("9p/f'CSr8a8v!", knight0.getName());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("1", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("lpj[,pat8ywdd", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(arrayList0.contains("1"));
      assertTrue(arrayList0.contains("9p/f'CSr8a8v!"));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setPersonalCastles(false);
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setOwner("(iFT@2@>F5_)X?");
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      
      ArrayList<Player> arrayList0 = fiefdoms0.getVassalsList();
      assertNull(arrayList0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      
      fiefdoms0.setVassalsList((ArrayList<Player>) null);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      
      boolean boolean0 = fiefdoms0.isKingdom();
      assertFalse(boolean0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms((ArrayList<String>) null, "", "muslim", 1391, false, (ArrayList<String>) null);
      assertNotNull(fiefdoms0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("muslim", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("", fiefdoms0.getName());
      assertEquals(1391, fiefdoms0.getValue());
      
      String string0 = fiefdoms0.getOwner();
      assertEquals("muslim", string0);
      assertNotNull(string0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("muslim", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("", fiefdoms0.getName());
      assertEquals(1391, fiefdoms0.getValue());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getViking();
      assertNotNull(arrayList0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("muslim", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("", fiefdoms0.getName());
      assertEquals(1391, fiefdoms0.getValue());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ArrayList<Intruders> arrayList1 = new ArrayList<Intruders>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      Fiefdoms fiefdoms1 = new Fiefdoms((ArrayList<String>) null, "raeS]h]-", "", 1391, true, (ArrayList<String>) null);
      assertNotNull(fiefdoms1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertTrue(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(1391, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getConqueror());
      assertEquals("", fiefdoms1.getOwner());
      assertEquals("raeS]h]-", fiefdoms1.getName());
      
      fiefdoms1.setMuslim(arrayList0);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("muslim", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("", fiefdoms0.getName());
      assertEquals(1391, fiefdoms0.getValue());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(1391, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getConqueror());
      assertEquals("", fiefdoms1.getOwner());
      assertEquals("raeS]h]-", fiefdoms1.getName());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setViking(698, true);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getViking();
      assertNotNull(arrayList0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(arrayList0.isEmpty());
      assertEquals(698, arrayList0.size());
      
      Knight knight0 = new Knight();
      assertNotNull(knight0);
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getTotalMoney());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getwound());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getPassword());
      
      ArrayList<String> arrayList1 = knight0.conversation;
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      fiefdoms0.setNeighbors(arrayList1);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getTotalMoney());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getwound());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getPassword());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      ArrayList<Player> arrayList2 = new ArrayList<Player>();
      assertNotNull(arrayList2);
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      
      knight0.setAllies(arrayList2);
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getTotalMoney());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getwound());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getPassword());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      
      fiefdoms0.setPeasants(137);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(137, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      
      fiefdoms0.setInvaderType(arrayList1);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(137, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getTotalMoney());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getwound());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getPassword());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      float[] floatArray0 = fiefdoms0.getShaderColor();
      assertEquals(2, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(137, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      
      ArrayList<String> arrayList3 = fiefdoms0.getInvaderType();
      assertSame(arrayList3, arrayList1);
      assertNotNull(arrayList3);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(137, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertTrue(arrayList3.isEmpty());
      assertEquals(0, arrayList3.size());
      
      ArrayList<Intruders> arrayList4 = fiefdoms0.getMuslim();
      assertNotSame(arrayList4, arrayList0);
      assertNotNull(arrayList4);
      assertFalse(arrayList4.equals((Object)arrayList0));
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(137, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertTrue(arrayList4.isEmpty());
      assertEquals(0, arrayList4.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      Fiefdoms fiefdoms1 = new Fiefdoms();
      assertNotNull(fiefdoms1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      
      int int0 = fiefdoms1.getValue();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals(0, int0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      
      ArrayList<Vassals> arrayList0 = fiefdoms1.getRebelliousVassals();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotNull(arrayList0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ArrayList<Vassals> arrayList1 = fiefdoms1.getLoyalVassals();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotSame(arrayList1, arrayList0);
      assertNotNull(arrayList1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      fiefdoms0.buyPersonalCastles((-123));
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      ArrayList<Intruders> arrayList2 = fiefdoms1.getMagyar();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotNull(arrayList2);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      
      Fiefdoms fiefdoms2 = new Fiefdoms();
      assertNotNull(fiefdoms2);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertNull(fiefdoms2.getOwner());
      assertNull(fiefdoms2.getConqueror());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getValue());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getName());
      
      String string0 = fiefdoms2.getName();
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNull(string0);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertNull(fiefdoms2.getOwner());
      assertNull(fiefdoms2.getConqueror());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getValue());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getName());
      
      fiefdoms1.setFiefdomCastles(false);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotSame(fiefdoms1, fiefdoms2);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(fiefdoms1.equals((Object)fiefdoms2));
      assertEquals((-1), fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      
      fiefdoms2.setName("");
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertNull(fiefdoms2.getOwner());
      assertNull(fiefdoms2.getConqueror());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getValue());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals("", fiefdoms2.getName());
      
      ArrayList<Vassals> arrayList3 = fiefdoms2.getLoyalVassals();
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNotSame(arrayList3, arrayList1);
      assertNotSame(arrayList3, arrayList0);
      assertNotNull(arrayList3);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertTrue(arrayList3.equals((Object)arrayList1));
      assertTrue(arrayList3.equals((Object)arrayList0));
      assertNull(fiefdoms2.getOwner());
      assertNull(fiefdoms2.getConqueror());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getValue());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals("", fiefdoms2.getName());
      assertTrue(arrayList3.isEmpty());
      assertEquals(0, arrayList3.size());
      
      fiefdoms0.loyalVassals = arrayList3;
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms2.getOwner());
      assertNull(fiefdoms2.getConqueror());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getValue());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals("", fiefdoms2.getName());
      assertTrue(arrayList3.isEmpty());
      assertEquals(0, arrayList3.size());
      assertTrue(fiefdoms0.loyalVassals.isEmpty());
      assertEquals(0, fiefdoms0.loyalVassals.size());
      
      Vassals vassals0 = new Vassals();
      assertNotNull(vassals0);
      assertNull(vassals0.getFiefdom());
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getLord());
      assertNull(vassals0.getLocation());
      
      vassals0.setLocation(" castles  for ");
      assertNull(vassals0.getFiefdom());
      assertEquals("vassal", vassals0.getRank());
      assertEquals(" castles  for ", vassals0.getLocation());
      assertNull(vassals0.getLord());
      
      boolean boolean0 = arrayList3.add(vassals0);
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNotSame(arrayList3, arrayList1);
      assertNotSame(arrayList3, arrayList0);
      assertTrue(boolean0);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(arrayList3.equals((Object)arrayList1));
      assertFalse(arrayList3.equals((Object)arrayList0));
      assertNull(fiefdoms2.getOwner());
      assertNull(fiefdoms2.getConqueror());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getValue());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals("", fiefdoms2.getName());
      assertFalse(arrayList3.isEmpty());
      assertEquals(1, arrayList3.size());
      assertNull(vassals0.getFiefdom());
      assertEquals("vassal", vassals0.getRank());
      assertEquals(" castles  for ", vassals0.getLocation());
      assertNull(vassals0.getLord());
      assertTrue(arrayList3.contains(vassals0));
      
      fiefdoms0.setMagyar((-2977), false);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms0, fiefdoms2);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      fiefdoms0.buyFiefdomCastles(4840);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms0, fiefdoms2);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      fiefdoms2.setRebelliousVassals(3542, true);
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertNull(fiefdoms2.getOwner());
      assertNull(fiefdoms2.getConqueror());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getValue());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals("", fiefdoms2.getName());
      
      ArrayList<Player> arrayList4 = fiefdoms0.getVassalsList();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms0, fiefdoms2);
      assertNull(arrayList4);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      ArrayList<Vassals> arrayList5 = fiefdoms0.getLoyalVassals();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms0, fiefdoms2);
      assertNotSame(arrayList5, arrayList0);
      assertNotSame(arrayList5, arrayList1);
      assertSame(arrayList5, arrayList3);
      assertNotNull(arrayList5);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      assertTrue(arrayList5.equals((Object)arrayList0));
      assertTrue(arrayList5.equals((Object)arrayList1));
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertTrue(arrayList5.isEmpty());
      assertEquals(0, arrayList5.size());
      assertFalse(arrayList5.contains(vassals0));
      
      ArrayList<Intruders> arrayList6 = fiefdoms0.getViking();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms0, fiefdoms2);
      assertNotSame(arrayList6, arrayList2);
      assertNotNull(arrayList6);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      assertTrue(arrayList6.equals((Object)arrayList2));
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertTrue(arrayList6.isEmpty());
      assertEquals(0, arrayList6.size());
      
      float[] floatArray0 = fiefdoms1.getShaderColor();
      assertEquals(2, floatArray0.length);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotSame(fiefdoms1, fiefdoms2);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(fiefdoms1.equals((Object)fiefdoms2));
      assertEquals((-1), fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      
      ArrayList<Player> arrayList7 = fiefdoms2.getVassalsList();
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNull(arrayList7);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertNull(fiefdoms2.getOwner());
      assertNull(fiefdoms2.getConqueror());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getValue());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals("", fiefdoms2.getName());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      
      Fiefdoms fiefdoms1 = new Fiefdoms();
      assertNotNull(fiefdoms1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      
      fiefdoms1.setMagyar(0, true);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getLoyalVassals();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotNull(arrayList0);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getMagyar();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotNull(arrayList1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      int int0 = fiefdoms0.getFiefdomCastles();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertEquals(0, int0);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      
      ArrayList<Vassals> arrayList2 = fiefdoms0.getLoyalVassals();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertSame(arrayList2, arrayList0);
      assertNotNull(arrayList2);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      
      int int1 = fiefdoms0.getFiefdomCastles();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertEquals(0, int1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertTrue(int1 == int0);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      
      ArrayList<String> arrayList3 = fiefdoms1.getInvaderType();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNull(arrayList3);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      
      ArrayList<String> arrayList4 = fiefdoms1.getInvaderType();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNull(arrayList4);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      
      fiefdoms0.setViking((-1929), false);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setName("kI]8::']+/.7?gy");
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("kI]8::']+/.7?gy", fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setShaderColor((float[]) null);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("kI]8::']+/.7?gy", fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      
      int int2 = fiefdoms0.getPersonalCastles();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertEquals(0, int2);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("kI]8::']+/.7?gy", fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      
      Fiefdoms fiefdoms2 = new Fiefdoms();
      assertNotNull(fiefdoms2);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getOwner());
      assertEquals(0, fiefdoms2.getValue());
      assertFalse(fiefdoms2.isKingdom());
      assertNull(fiefdoms2.getConqueror());
      
      fiefdoms2.buyPersonalCastles(0);
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getOwner());
      assertEquals(0, fiefdoms2.getValue());
      assertFalse(fiefdoms2.isKingdom());
      assertNull(fiefdoms2.getConqueror());
      
      String string0 = fiefdoms2.getOwner();
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNull(string0);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getOwner());
      assertEquals(0, fiefdoms2.getValue());
      assertFalse(fiefdoms2.isKingdom());
      assertNull(fiefdoms2.getConqueror());
      
      String string1 = fiefdoms2.getName();
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNull(string1);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getOwner());
      assertEquals(0, fiefdoms2.getValue());
      assertFalse(fiefdoms2.isKingdom());
      assertNull(fiefdoms2.getConqueror());
      
      String string2 = fiefdoms2.getName();
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNull(string2);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getOwner());
      assertEquals(0, fiefdoms2.getValue());
      assertFalse(fiefdoms2.isKingdom());
      assertNull(fiefdoms2.getConqueror());
      
      String string3 = fiefdoms2.getConqueror();
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNull(string3);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getOwner());
      assertEquals(0, fiefdoms2.getValue());
      assertFalse(fiefdoms2.isKingdom());
      assertNull(fiefdoms2.getConqueror());
      
      fiefdoms0.setViking((-1929), false);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms0, fiefdoms2);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("kI]8::']+/.7?gy", fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      
      ArrayList<String> arrayList5 = fiefdoms1.getInvaderType();
      assertNotSame(fiefdoms1, fiefdoms2);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNull(arrayList5);
      assertFalse(fiefdoms1.equals((Object)fiefdoms2));
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, "viking", "viking", 3, false, arrayList0);
      assertNotNull(fiefdoms0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(3, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("viking", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("viking", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(arrayList0.contains("viking"));
      
      fiefdoms0.setOwner((String) null);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(3, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("viking", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(arrayList0.contains("viking"));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getLoyalVassals();
      assertNotNull(arrayList0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Vassals vassals0 = new Vassals();
      assertNotNull(vassals0);
      assertNull(vassals0.getLord());
      assertNull(vassals0.getLocation());
      assertNull(vassals0.getFiefdom());
      assertEquals("vassal", vassals0.getRank());
      
      boolean boolean0 = arrayList0.add(vassals0);
      assertTrue(boolean0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(vassals0.getLord());
      assertNull(vassals0.getLocation());
      assertNull(vassals0.getFiefdom());
      assertEquals("vassal", vassals0.getRank());
      assertTrue(arrayList0.contains(vassals0));
      
      boolean boolean1 = arrayList0.add(vassals0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(vassals0.getLord());
      assertNull(vassals0.getLocation());
      assertNull(vassals0.getFiefdom());
      assertEquals("vassal", vassals0.getRank());
      assertTrue(arrayList0.contains(vassals0));
      
      arrayList0.clear();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(vassals0));
      
      fiefdoms0.setRebelliousVassals(arrayList0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(vassals0));
      
      fiefdoms0.setLoyalVassals((-2127), false);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      
      fiefdoms0.setRebelliousVassals((-1183), true);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      
      float[] floatArray0 = fiefdoms0.getShaderColor();
      assertEquals(2, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      
      String string0 = fiefdoms0.getName();
      assertNull(string0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, "'T%V%_.`4", "magyar", 10, true, arrayList0);
      assertNotNull(fiefdoms0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(10, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("'T%V%_.`4", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("magyar", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(arrayList0.contains("'T%V%_.`4"));
      
      fiefdoms0.setOwner("'T%V%_.`4");
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(10, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("'T%V%_.`4", fiefdoms0.getOwner());
      assertEquals("'T%V%_.`4", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(arrayList0.contains("'T%V%_.`4"));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      
      fiefdoms0.setPeasants((-217));
      assertEquals((-217), fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      
      String string0 = fiefdoms0.getConqueror();
      assertNull(string0);
      assertEquals((-217), fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)107;
      byteArray0[1] = (byte)0;
      Fiefdoms fiefdoms1 = new Fiefdoms((ArrayList<String>) null, "fiefdomssax.xml", "fiefdomssax.xml", 1069, true, (ArrayList<String>) null);
      assertNotNull(fiefdoms1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getConqueror());
      assertEquals("fiefdomssax.xml", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals("fiefdomssax.xml", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(1069, fiefdoms1.getValue());
      
      fiefdoms0.setOwner("; -4tsI");
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("; -4tsI", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      ArrayList<Intruders> arrayList0 = fiefdoms1.getMuslim();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotNull(arrayList0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getConqueror());
      assertEquals("fiefdomssax.xml", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals("fiefdomssax.xml", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(1069, fiefdoms1.getValue());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      fiefdoms1.setMagyar(arrayList0);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getConqueror());
      assertEquals("fiefdomssax.xml", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals("fiefdomssax.xml", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(1069, fiefdoms1.getValue());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      fiefdoms0.setRebelliousVassals((int) (byte)107, true);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("; -4tsI", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      fiefdoms1.setRebelliousVassals(1204, true);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getConqueror());
      assertEquals("fiefdomssax.xml", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals("fiefdomssax.xml", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(1069, fiefdoms1.getValue());
      
      fiefdoms1.setValue(3307);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getConqueror());
      assertEquals("fiefdomssax.xml", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals("fiefdomssax.xml", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(3307, fiefdoms1.getValue());
      
      ArrayList<String> arrayList1 = fiefdoms1.getInvaderType();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNull(arrayList1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getConqueror());
      assertEquals("fiefdomssax.xml", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals("fiefdomssax.xml", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(3307, fiefdoms1.getValue());
      
      fiefdoms0.setName("fiefdomssax.xml");
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("; -4tsI", fiefdoms0.getOwner());
      assertEquals("fiefdomssax.xml", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      fiefdoms0.setMuslim((-4445), true);
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      float[] floatArray0 = fiefdoms0.getShaderColor();
      assertEquals(2, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms((ArrayList<String>) null, "", "muslim", 1391, false, (ArrayList<String>) null);
      assertNotNull(fiefdoms0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("muslim", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("", fiefdoms0.getName());
      assertEquals(1391, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      
      fiefdoms0.buyPersonalCastles(2);
      assertEquals("muslim", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("", fiefdoms0.getName());
      assertEquals(1391, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(2, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      
      Knight knight0 = new Knight();
      assertNotNull(knight0);
      assertNull(knight0.getName());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertFalse(knight0.getDead());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getKill());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      
      String string0 = knight0.getLocation();
      assertEquals("Ile-De-France", string0);
      assertNotNull(string0);
      assertNull(knight0.getName());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertFalse(knight0.getDead());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getKill());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      
      boolean boolean0 = knight0.isFiefdomMine("Ile-De-France");
      assertFalse(boolean0);
      assertNull(knight0.getName());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertFalse(knight0.getDead());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getKill());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      
      knight0.setTotalMoney(0);
      assertNull(knight0.getName());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertFalse(knight0.getDead());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getKill());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      
      ArrayList<Vassals> arrayList0 = knight0.getMovingVassals();
      assertNotNull(arrayList0);
      assertNull(knight0.getName());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertFalse(knight0.getDead());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getKill());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Vassals vassals0 = new Vassals();
      assertNotNull(vassals0);
      assertNull(vassals0.getFiefdom());
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getLord());
      assertNull(vassals0.getLocation());
      
      boolean boolean1 = arrayList0.add(vassals0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertNull(knight0.getName());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertFalse(knight0.getDead());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getKill());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(vassals0.getFiefdom());
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getLord());
      assertNull(vassals0.getLocation());
      assertTrue(arrayList0.contains(vassals0));
      
      fiefdoms0.setLoyalVassals(arrayList0);
      assertEquals("muslim", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("", fiefdoms0.getName());
      assertEquals(1391, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(2, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertFalse(knight0.getDead());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getKill());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(vassals0));
      
      fiefdoms0.setNeighbors((ArrayList<String>) null);
      assertEquals("muslim", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("", fiefdoms0.getName());
      assertEquals(1391, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(2, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      
      fiefdoms0.setLoyalVassals(1391, true);
      assertEquals("muslim", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("", fiefdoms0.getName());
      assertEquals(1391, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(2, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      
      String string1 = fiefdoms0.getConqueror();
      assertNull(string1);
      assertEquals("muslim", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("", fiefdoms0.getName());
      assertEquals(1391, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(2, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      
      fiefdoms0.setFiefdomCastles(62);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(62, fiefdoms0.getFiefdomCastles());
      
      ArrayList<Vassals> arrayList0 = new ArrayList<Vassals>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setPersonalCastles((-2040));
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals((-2040), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setLoyalVassals((-2040), false);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals((-2040), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      
      fiefdoms0.setLoyalVassals((-2028), false);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.buyPersonalCastles(0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      String string0 = fiefdoms0.getOwner();
      assertNull(string0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      String string1 = fiefdoms0.getName();
      assertNull(string1);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      String string2 = fiefdoms0.getName();
      assertNull(string2);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setMagyar(1391, false);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.buyFiefdomCastles(0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      byte[] byteArray0 = fiefdoms0.getSelectioncolor();
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setViking(1973, true);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms((ArrayList<String>) null, "", "muslim", 1391, false, (ArrayList<String>) null);
      assertNotNull(fiefdoms0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("muslim", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1391, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMuslim();
      assertNotNull(arrayList0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("muslim", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1391, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1391, arrayList0.size());
      
      fiefdoms0.setMuslim(arrayList0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("muslim", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1391, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1391, arrayList0.size());
      
      fiefdoms0.buyFiefdomCastles(2);
      assertEquals(2, fiefdoms0.getFiefdomCastles());
      assertEquals("muslim", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1391, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      
      fiefdoms0.setOwner((String) null);
      assertEquals(2, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1391, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getMuslim();
      assertSame(arrayList1, arrayList0);
      assertNotNull(arrayList1);
      assertEquals(2, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1391, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(arrayList1.isEmpty());
      assertEquals(1391, arrayList1.size());
      
      Fiefdoms fiefdoms1 = new Fiefdoms((ArrayList<String>) null, (String) null, "muslim", 2, false, (ArrayList<String>) null);
      assertNotNull(fiefdoms1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals("muslim", fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(2, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      
      ArrayList<String> arrayList2 = fiefdoms1.getNeighbors();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNull(arrayList2);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals("muslim", fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(2, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      
      fiefdoms0.setMuslim(2, false);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertEquals(2, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1391, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      
      Fiefdoms fiefdoms2 = new Fiefdoms();
      assertNotNull(fiefdoms2);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms2.getValue());
      assertNull(fiefdoms2.getConqueror());
      assertNull(fiefdoms2.getOwner());
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getPeasants());
      
      ArrayList<Intruders> arrayList3 = fiefdoms2.getMuslim();
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNotSame(arrayList3, arrayList0);
      assertNotSame(arrayList3, arrayList1);
      assertNotNull(arrayList3);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(arrayList3.equals((Object)arrayList0));
      assertFalse(arrayList3.equals((Object)arrayList1));
      assertEquals(0, fiefdoms2.getValue());
      assertNull(fiefdoms2.getConqueror());
      assertNull(fiefdoms2.getOwner());
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals(0, arrayList3.size());
      assertTrue(arrayList3.isEmpty());
      
      ArrayList<Intruders> arrayList4 = fiefdoms2.getMuslim();
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNotSame(arrayList4, arrayList0);
      assertSame(arrayList4, arrayList3);
      assertNotSame(arrayList4, arrayList1);
      assertNotNull(arrayList4);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(arrayList4.equals((Object)arrayList0));
      assertFalse(arrayList4.equals((Object)arrayList1));
      assertEquals(0, fiefdoms2.getValue());
      assertNull(fiefdoms2.getConqueror());
      assertNull(fiefdoms2.getOwner());
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals(0, arrayList4.size());
      assertTrue(arrayList4.isEmpty());
      
      int int0 = fiefdoms0.getPersonalCastles();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms0, fiefdoms2);
      assertEquals(0, int0);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      assertEquals(2, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1391, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      
      ArrayList<Intruders> arrayList5 = fiefdoms0.getViking();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms0, fiefdoms2);
      assertNotSame(arrayList5, arrayList1);
      assertNotSame(arrayList5, arrayList4);
      assertNotSame(arrayList5, arrayList0);
      assertNotSame(arrayList5, arrayList3);
      assertNotNull(arrayList5);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      assertFalse(arrayList5.equals((Object)arrayList1));
      assertTrue(arrayList5.equals((Object)arrayList3));
      assertFalse(arrayList5.equals((Object)arrayList0));
      assertTrue(arrayList5.equals((Object)arrayList4));
      assertEquals(2, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1391, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(arrayList5.isEmpty());
      assertEquals(0, arrayList5.size());
      
      ArrayList<Vassals> arrayList6 = fiefdoms0.getRebelliousVassals();
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms0, fiefdoms2);
      assertNotNull(arrayList6);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      assertEquals(2, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1391, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, arrayList6.size());
      assertTrue(arrayList6.isEmpty());
      
      Fiefdoms fiefdoms3 = new Fiefdoms((ArrayList<String>) null, "", "", 1032, false, (ArrayList<String>) null);
      assertNotNull(fiefdoms3);
      assertFalse(fiefdoms3.equals((Object)fiefdoms1));
      assertFalse(fiefdoms3.equals((Object)fiefdoms2));
      assertFalse(fiefdoms3.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms3.getPersonalCastles());
      assertNull(fiefdoms3.getConqueror());
      assertEquals("", fiefdoms3.getOwner());
      assertEquals(0, fiefdoms3.getPeasants());
      assertEquals("", fiefdoms3.getName());
      assertFalse(fiefdoms3.isKingdom());
      assertEquals(0, fiefdoms3.getFiefdomCastles());
      assertEquals(1032, fiefdoms3.getValue());
      
      int int1 = fiefdoms3.getPeasants();
      assertNotSame(fiefdoms3, fiefdoms1);
      assertNotSame(fiefdoms3, fiefdoms2);
      assertNotSame(fiefdoms3, fiefdoms0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertFalse(fiefdoms3.equals((Object)fiefdoms1));
      assertFalse(fiefdoms3.equals((Object)fiefdoms2));
      assertFalse(fiefdoms3.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms3.getPersonalCastles());
      assertNull(fiefdoms3.getConqueror());
      assertEquals("", fiefdoms3.getOwner());
      assertEquals(0, fiefdoms3.getPeasants());
      assertEquals("", fiefdoms3.getName());
      assertFalse(fiefdoms3.isKingdom());
      assertEquals(0, fiefdoms3.getFiefdomCastles());
      assertEquals(1032, fiefdoms3.getValue());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      fiefdoms0.setFiefdomCastles(false);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getRebelliousVassals();
      assertNotNull(arrayList0);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Vassals vassals0 = new Vassals("magyar", "D)~5g0");
      assertNotNull(vassals0);
      assertEquals("magyar", vassals0.getLord());
      assertEquals("vassal", vassals0.getRank());
      assertEquals("D)~5g0", vassals0.getFiefdom());
      assertNull(vassals0.getLocation());
      
      boolean boolean0 = arrayList0.add(vassals0);
      assertTrue(boolean0);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("magyar", vassals0.getLord());
      assertEquals("vassal", vassals0.getRank());
      assertEquals("D)~5g0", vassals0.getFiefdom());
      assertNull(vassals0.getLocation());
      assertTrue(arrayList0.contains(vassals0));
      
      fiefdoms0.setRebelliousVassals(arrayList0);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(vassals0));
      
      ArrayList<Player> arrayList1 = fiefdoms0.getVassalsList();
      assertNull(arrayList1);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      
      Fiefdoms fiefdoms1 = new Fiefdoms();
      assertNotNull(fiefdoms1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      
      ArrayList<Vassals> arrayList2 = fiefdoms1.getLoyalVassals();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotSame(arrayList2, arrayList0);
      assertNotNull(arrayList2);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(arrayList2.equals((Object)arrayList0));
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertFalse(arrayList2.contains(vassals0));
      
      ArrayList<Intruders> arrayList3 = fiefdoms1.getMagyar();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotNull(arrayList3);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, arrayList3.size());
      assertTrue(arrayList3.isEmpty());
      
      Fiefdoms fiefdoms2 = new Fiefdoms();
      assertNotNull(fiefdoms2);
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getPeasants());
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getValue());
      assertNull(fiefdoms2.getOwner());
      assertNull(fiefdoms2.getConqueror());
      
      fiefdoms2.setViking((-3165), true);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNotSame(fiefdoms2, fiefdoms1);
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getPeasants());
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getValue());
      assertNull(fiefdoms2.getOwner());
      assertNull(fiefdoms2.getConqueror());
      
      ArrayList<Intruders> arrayList4 = fiefdoms1.getMagyar();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotSame(fiefdoms1, fiefdoms2);
      assertSame(arrayList4, arrayList3);
      assertNotNull(arrayList4);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(fiefdoms1.equals((Object)fiefdoms2));
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertTrue(arrayList4.isEmpty());
      assertEquals(0, arrayList4.size());
      
      ArrayList<Intruders> arrayList5 = fiefdoms1.getMagyar();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotSame(fiefdoms1, fiefdoms2);
      assertSame(arrayList5, arrayList3);
      assertSame(arrayList5, arrayList4);
      assertNotNull(arrayList5);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(fiefdoms1.equals((Object)fiefdoms2));
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, arrayList5.size());
      assertTrue(arrayList5.isEmpty());
      
      ArrayList<Intruders> arrayList6 = fiefdoms0.getMuslim();
      assertNotSame(fiefdoms0, fiefdoms2);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(arrayList6, arrayList5);
      assertNotSame(arrayList6, arrayList4);
      assertNotSame(arrayList6, arrayList3);
      assertNotNull(arrayList6);
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertTrue(arrayList6.equals((Object)arrayList3));
      assertTrue(arrayList6.equals((Object)arrayList4));
      assertTrue(arrayList6.equals((Object)arrayList5));
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertEquals(0, arrayList6.size());
      assertTrue(arrayList6.isEmpty());
      
      String string0 = fiefdoms1.getName();
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotSame(fiefdoms1, fiefdoms2);
      assertNull(string0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(fiefdoms1.equals((Object)fiefdoms2));
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      
      ArrayList<Vassals> arrayList7 = fiefdoms0.getRebelliousVassals();
      assertNotSame(arrayList7, arrayList2);
      assertSame(arrayList7, arrayList0);
      assertNotSame(fiefdoms0, fiefdoms2);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotNull(arrayList7);
      assertFalse(arrayList7.equals((Object)arrayList2));
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(arrayList7.isEmpty());
      assertEquals(1, arrayList7.size());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertTrue(arrayList7.contains(vassals0));
      
      Fiefdoms fiefdoms3 = new Fiefdoms();
      assertNotNull(fiefdoms3);
      assertFalse(fiefdoms3.equals((Object)fiefdoms0));
      assertFalse(fiefdoms3.equals((Object)fiefdoms1));
      assertFalse(fiefdoms3.equals((Object)fiefdoms2));
      assertFalse(fiefdoms3.isKingdom());
      assertNull(fiefdoms3.getName());
      assertEquals(0, fiefdoms3.getPeasants());
      assertNull(fiefdoms3.getOwner());
      assertEquals(0, fiefdoms3.getFiefdomCastles());
      assertEquals(0, fiefdoms3.getPersonalCastles());
      assertNull(fiefdoms3.getConqueror());
      assertEquals(0, fiefdoms3.getValue());
      
      fiefdoms0.buyFiefdomCastles(1);
      assertNotSame(fiefdoms0, fiefdoms2);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms0, fiefdoms3);
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms0.equals((Object)fiefdoms3));
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      
      Fiefdoms fiefdoms4 = new Fiefdoms();
      assertNotNull(fiefdoms4);
      assertFalse(fiefdoms4.equals((Object)fiefdoms1));
      assertFalse(fiefdoms4.equals((Object)fiefdoms0));
      assertFalse(fiefdoms4.equals((Object)fiefdoms3));
      assertFalse(fiefdoms4.equals((Object)fiefdoms2));
      assertEquals(0, fiefdoms4.getValue());
      assertEquals(0, fiefdoms4.getPeasants());
      assertNull(fiefdoms4.getName());
      assertFalse(fiefdoms4.isKingdom());
      assertEquals(0, fiefdoms4.getFiefdomCastles());
      assertNull(fiefdoms4.getOwner());
      assertNull(fiefdoms4.getConqueror());
      assertEquals(0, fiefdoms4.getPersonalCastles());
      
      String string1 = fiefdoms4.getOwner();
      assertNotSame(fiefdoms4, fiefdoms1);
      assertNotSame(fiefdoms4, fiefdoms0);
      assertNotSame(fiefdoms4, fiefdoms3);
      assertNotSame(fiefdoms4, fiefdoms2);
      assertNull(string1);
      assertFalse(fiefdoms4.equals((Object)fiefdoms1));
      assertFalse(fiefdoms4.equals((Object)fiefdoms0));
      assertFalse(fiefdoms4.equals((Object)fiefdoms3));
      assertFalse(fiefdoms4.equals((Object)fiefdoms2));
      assertEquals(0, fiefdoms4.getValue());
      assertEquals(0, fiefdoms4.getPeasants());
      assertNull(fiefdoms4.getName());
      assertFalse(fiefdoms4.isKingdom());
      assertEquals(0, fiefdoms4.getFiefdomCastles());
      assertNull(fiefdoms4.getOwner());
      assertNull(fiefdoms4.getConqueror());
      assertEquals(0, fiefdoms4.getPersonalCastles());
      
      ArrayList<Intruders> arrayList8 = fiefdoms3.getViking();
      assertNotSame(fiefdoms3, fiefdoms4);
      assertNotSame(fiefdoms3, fiefdoms0);
      assertNotSame(fiefdoms3, fiefdoms1);
      assertNotSame(fiefdoms3, fiefdoms2);
      assertNotSame(arrayList8, arrayList3);
      assertNotSame(arrayList8, arrayList6);
      assertNotSame(arrayList8, arrayList4);
      assertNotSame(arrayList8, arrayList5);
      assertNotNull(arrayList8);
      assertFalse(fiefdoms3.equals((Object)fiefdoms4));
      assertFalse(fiefdoms3.equals((Object)fiefdoms0));
      assertFalse(fiefdoms3.equals((Object)fiefdoms1));
      assertFalse(fiefdoms3.equals((Object)fiefdoms2));
      assertTrue(arrayList8.equals((Object)arrayList5));
      assertTrue(arrayList8.equals((Object)arrayList4));
      assertTrue(arrayList8.equals((Object)arrayList6));
      assertTrue(arrayList8.equals((Object)arrayList3));
      assertFalse(fiefdoms3.isKingdom());
      assertNull(fiefdoms3.getName());
      assertEquals(0, fiefdoms3.getPeasants());
      assertNull(fiefdoms3.getOwner());
      assertEquals(0, fiefdoms3.getFiefdomCastles());
      assertEquals(0, fiefdoms3.getPersonalCastles());
      assertNull(fiefdoms3.getConqueror());
      assertEquals(0, fiefdoms3.getValue());
      assertTrue(arrayList8.isEmpty());
      assertEquals(0, arrayList8.size());
      
      ArrayList<Intruders> arrayList9 = new ArrayList<Intruders>();
      assertNotNull(arrayList9);
      assertTrue(arrayList9.equals((Object)arrayList5));
      assertTrue(arrayList9.equals((Object)arrayList4));
      assertTrue(arrayList9.equals((Object)arrayList8));
      assertTrue(arrayList9.equals((Object)arrayList3));
      assertTrue(arrayList9.equals((Object)arrayList6));
      assertEquals(0, arrayList9.size());
      assertTrue(arrayList9.isEmpty());
      
      fiefdoms2.setMuslim(arrayList9);
      assertNotSame(arrayList9, arrayList3);
      assertNotSame(arrayList9, arrayList4);
      assertNotSame(arrayList9, arrayList8);
      assertNotSame(arrayList9, arrayList5);
      assertNotSame(arrayList9, arrayList6);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNotSame(fiefdoms2, fiefdoms4);
      assertNotSame(fiefdoms2, fiefdoms3);
      assertNotSame(fiefdoms2, fiefdoms1);
      assertTrue(arrayList9.equals((Object)arrayList5));
      assertTrue(arrayList9.equals((Object)arrayList4));
      assertTrue(arrayList9.equals((Object)arrayList8));
      assertTrue(arrayList9.equals((Object)arrayList3));
      assertTrue(arrayList9.equals((Object)arrayList6));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms4));
      assertFalse(fiefdoms2.equals((Object)fiefdoms3));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertEquals(0, arrayList9.size());
      assertTrue(arrayList9.isEmpty());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getPeasants());
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getValue());
      assertNull(fiefdoms2.getOwner());
      assertNull(fiefdoms2.getConqueror());
      
      fiefdoms0.setViking(716, true);
      assertNotSame(fiefdoms0, fiefdoms2);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms0, fiefdoms4);
      assertNotSame(fiefdoms0, fiefdoms3);
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms0.equals((Object)fiefdoms4));
      assertFalse(fiefdoms0.equals((Object)fiefdoms3));
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNotNull(fiefdoms0);
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      Fiefdoms fiefdoms1 = new Fiefdoms();
      assertNotNull(fiefdoms1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      
      Fiefdoms fiefdoms2 = new Fiefdoms((ArrayList<String>) null, (String) null, (String) null, (-798), false, (ArrayList<String>) null);
      assertNotNull(fiefdoms2);
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertNull(fiefdoms2.getConqueror());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals((-798), fiefdoms2.getValue());
      assertNull(fiefdoms2.getOwner());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getName());
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      
      int int0 = fiefdoms0.getPersonalCastles();
      assertNotSame(fiefdoms0, fiefdoms2);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertEquals(0, int0);
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      String string0 = fiefdoms2.getConqueror();
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNull(string0);
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertNull(fiefdoms2.getConqueror());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals((-798), fiefdoms2.getValue());
      assertNull(fiefdoms2.getOwner());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getName());
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      
      byte[] byteArray0 = fiefdoms0.getSelectioncolor();
      assertEquals(3, byteArray0.length);
      assertNotSame(fiefdoms0, fiefdoms2);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms1.setViking(3, false);
      assertNotSame(fiefdoms1, fiefdoms2);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms2));
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      
      ArrayList<String> arrayList0 = fiefdoms2.getInvaderType();
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNull(arrayList0);
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertNull(fiefdoms2.getConqueror());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals((-798), fiefdoms2.getValue());
      assertNull(fiefdoms2.getOwner());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getName());
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      
      int int1 = fiefdoms2.getPeasants();
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNotSame(fiefdoms2, fiefdoms1);
      assertEquals(0, int1);
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertTrue(int1 == int0);
      assertNull(fiefdoms2.getConqueror());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals((-798), fiefdoms2.getValue());
      assertNull(fiefdoms2.getOwner());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getName());
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      
      ArrayList<Intruders> arrayList1 = fiefdoms1.getMuslim();
      assertNotSame(fiefdoms1, fiefdoms2);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotNull(arrayList1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms2));
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
  }
}

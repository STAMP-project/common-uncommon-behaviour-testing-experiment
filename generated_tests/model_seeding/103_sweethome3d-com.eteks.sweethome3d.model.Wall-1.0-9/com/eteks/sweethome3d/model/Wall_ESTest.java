/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 05 17:38:45 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.LinkedList;
import java.util.List;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Wall_ESTest extends Wall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Wall wall0 = new Wall((-1698.1F), (-1698.1F), (-1698.1F), (-1698.1F), (-1698.1F), (-1698.1F));
      assertEquals((-1698.1F), wall0.getYEnd(), 0.01F);
      assertEquals((-1698.1F), wall0.getXEnd(), 0.01F);
      assertEquals((-1698.1F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1698.1F), wall0.getXStart(), 0.01F);
      assertEquals((-1698.1F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1698.1F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1698.1F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1698.1F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.intersectsRectangle((-1698.1F), (-1698.1F), (-1698.1F), (-1698.1F));
      assertFalse(boolean0);
      assertEquals((-1698.1F), wall0.getYEnd(), 0.01F);
      assertEquals((-1698.1F), wall0.getXEnd(), 0.01F);
      assertEquals((-1698.1F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1698.1F), wall0.getXStart(), 0.01F);
      assertEquals((-1698.1F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1698.1F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1698.1F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1698.1F), wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setYStart(0.0F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Level level0 = new Level("0G?R~L[gj<NR+?", (-1733.0F), 0.0F, (-348.7F));
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals((-348.7F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("0G?R~L[gj<NR+?", level0.getName());
      assertEquals((-1733.0F), level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      wall0.setLevel(level0);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals((-348.7F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("0G?R~L[gj<NR+?", level0.getName());
      assertEquals((-1733.0F), level0.getElevation(), 0.01F);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals((-348.7F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("0G?R~L[gj<NR+?", level0.getName());
      assertEquals((-1733.0F), level0.getElevation(), 0.01F);
      assertEquals((-348.7F), level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("0G?R~L[gj<NR+?", level1.getName());
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertEquals((-1733.0F), level1.getElevation(), 0.01F);
      assertNotNull(level1);
      
      level0.setFloorThickness(3732.0F);
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level1);
      assertEquals((-348.7F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(3732.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("0G?R~L[gj<NR+?", level0.getName());
      assertEquals((-1733.0F), level0.getElevation(), 0.01F);
      
      Wall wall1 = new Wall((-1739.4F), (-1739.4F), 0.0F, 0.0F, (-625.596F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotNull(wall1);
      
      Float float0 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(float0);
      
      Float float1 = new Float((-2851.1F));
      assertEquals((-2851.1F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall1.setHeight(float1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      
      wall0.setArcExtent((Float) null);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float float2 = wall1.getStartPointToEndPointDistance();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2459.883F, float2, 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      
      wall1.setLeftSideTexture((HomeTexture) null);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall1 = new Wall(5.6169157F, 5.6169157F, 0.0F, 0.0F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2.8084579F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(5.6169157F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(7.943518F, wall1.getLength(), 0.01F);
      assertEquals(7.943518F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(5.6169157F, wall1.getYStart(), 0.01F);
      assertEquals(2.8084579F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2.8084579F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(5.6169157F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(7.943518F, wall1.getLength(), 0.01F);
      assertEquals(7.943518F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(5.6169157F, wall1.getYStart(), 0.01F);
      assertEquals(2.8084579F, wall1.getXArcCircleCenter(), 0.01F);
      
      Float float1 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2.8084579F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(5.6169157F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(7.943518F, wall1.getLength(), 0.01F);
      assertEquals(7.943518F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(5.6169157F, wall1.getYStart(), 0.01F);
      assertEquals(2.8084579F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(float1);
      
      boolean boolean0 = Float.isFinite(5.6169157F);
      assertTrue(boolean0);
      
      float float2 = Float.sum(0.0F, 944.7096F);
      assertEquals(944.7096F, float2, 0.01F);
      
      wall1.setHeight(float0);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(2.8084579F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(5.6169157F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(7.943518F, wall1.getLength(), 0.01F);
      assertEquals(7.943518F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(5.6169157F, wall1.getYStart(), 0.01F);
      assertEquals(2.8084579F, wall1.getXArcCircleCenter(), 0.01F);
      
      Float float3 = new Float(5.6169157F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(5.6169157F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(2.8084579F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(5.6169157F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(7.943518F, wall1.getLength(), 0.01F);
      assertEquals(7.943518F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(5.6169157F, wall1.getYStart(), 0.01F);
      assertEquals(2.8084579F, wall1.getXArcCircleCenter(), 0.01F);
      
      boolean boolean1 = wall1.intersectsRectangle(5.6169157F, (-2851.1F), 3238.7983F, 390.2F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(2.8084579F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(5.6169157F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(7.943518F, wall1.getLength(), 0.01F);
      assertEquals(7.943518F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(5.6169157F, wall1.getYStart(), 0.01F);
      assertEquals(2.8084579F, wall1.getXArcCircleCenter(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(floatArray0);
      
      float float4 = wall1.getLeftSideShininess();
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float4, float2, 0.01F);
      assertEquals(0.0F, float4, 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(2.8084579F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(5.6169157F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(7.943518F, wall1.getLength(), 0.01F);
      assertEquals(7.943518F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(5.6169157F, wall1.getYStart(), 0.01F);
      assertEquals(2.8084579F, wall1.getXArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Wall wall0 = new Wall((-0.16079742F), (-0.16079742F), (-0.16079742F), (-0.16079742F), (-0.16079742F), (-0.16079742F));
      assertEquals((-0.16079742F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.16079742F), wall0.getHeight(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.16079742F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.16079742F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getLeftSideShininess();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-0.16079742F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.16079742F), wall0.getHeight(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.16079742F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.16079742F), wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtEnd(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      
      Wall wall1 = new Wall((-0.9143441F), (-0.9143441F), 0.0F, (-0.9143441F), (-0.9143441F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-0.9143441F), wall1.getYStart(), 0.01F);
      assertEquals((-0.45717204F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-0.9143441F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.9143441F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.9143441F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-0.9143441F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-0.9143441F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.9143441F, wall1.getLength(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setLeftSideShininess((-0.9143441F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-0.9143441F), wall1.getYStart(), 0.01F);
      assertEquals((-0.45717204F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-0.9143441F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.9143441F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.9143441F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.9143441F), wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-0.9143441F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-0.9143441F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.9143441F, wall1.getLength(), 0.01F);
      
      Wall wall2 = wall1.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-0.9143441F), wall1.getYStart(), 0.01F);
      assertEquals((-0.45717204F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-0.9143441F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.9143441F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.9143441F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.9143441F), wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-0.9143441F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-0.9143441F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.9143441F, wall1.getLength(), 0.01F);
      assertEquals(0.9143441F, wall2.getLength(), 0.01F);
      assertEquals((-0.9143441F), wall2.getYEnd(), 0.01F);
      assertEquals((-0.45717204F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals((-0.9143441F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.9143441F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-0.9143441F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.9143441F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-0.9143441F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-0.9143441F), wall2.getLeftSideShininess(), 0.01F);
      assertNotNull(wall2);
      
      wall1.setWallAtStart(wall2);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-0.9143441F), wall1.getYStart(), 0.01F);
      assertEquals((-0.45717204F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-0.9143441F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.9143441F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.9143441F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.9143441F), wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-0.9143441F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-0.9143441F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.9143441F, wall1.getLength(), 0.01F);
      assertEquals(0.9143441F, wall2.getLength(), 0.01F);
      assertEquals((-0.9143441F), wall2.getYEnd(), 0.01F);
      assertEquals((-0.45717204F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals((-0.9143441F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.9143441F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-0.9143441F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.9143441F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-0.9143441F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-0.9143441F), wall2.getLeftSideShininess(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-0.9143441F), wall1.getYStart(), 0.01F);
      assertEquals((-0.45717204F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-0.9143441F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.9143441F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.9143441F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.9143441F), wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-0.9143441F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-0.9143441F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.9143441F, wall1.getLength(), 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-0.9143441F), wall1.getYStart(), 0.01F);
      assertEquals((-0.45717204F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-0.9143441F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.9143441F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.9143441F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.9143441F), wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-0.9143441F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-0.9143441F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.9143441F, wall1.getLength(), 0.01F);
      assertNotNull(floatArray0);
      
      Float float0 = wall2.getHeightAtEnd();
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-0.9143441F), wall1.getYStart(), 0.01F);
      assertEquals((-0.45717204F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-0.9143441F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.9143441F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.9143441F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.9143441F), wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-0.9143441F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-0.9143441F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.9143441F, wall1.getLength(), 0.01F);
      assertEquals(0.9143441F, wall2.getLength(), 0.01F);
      assertEquals((-0.9143441F), wall2.getYEnd(), 0.01F);
      assertEquals((-0.45717204F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals((-0.9143441F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.9143441F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-0.9143441F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.9143441F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-0.9143441F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-0.9143441F), wall2.getLeftSideShininess(), 0.01F);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Wall wall0 = new Wall((-1121.2971F), (-1678.2F), 0.0F, (-1678.2F), 0.0F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1121.2971F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1121.2971F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1121.2971F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-560.64856F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      
      Integer integer0 = new Integer(2268);
      assertEquals(2268, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.compare(2268, 2268);
      assertEquals(0, int0);
      
      int int1 = Integer.min(2268, 15);
      assertFalse(int1 == int0);
      assertEquals(15, int1);
      
      wall1.setLeftSideColor(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1121.2971F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1121.2971F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1121.2971F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-560.64856F), wall1.getXArcCircleCenter(), 0.01F);
      
      wall0.setRightSideShininess((-1121.2971F));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall2 = new Wall((-789.0F), 1.0F, (-3318.911F), (-1678.2F), (-527.216F));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-1678.2F), wall2.getYEnd(), 0.01F);
      assertEquals((-2053.9556F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-789.0F), wall2.getXStart(), 0.01F);
      assertEquals((-527.216F), wall2.getThickness(), 0.01F);
      assertEquals((-3318.911F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-838.6F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(3036.472F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3036.472F, wall2.getLength(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNotNull(wall2);
      
      Float float0 = wall2.getHeight();
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals((-1678.2F), wall2.getYEnd(), 0.01F);
      assertEquals((-2053.9556F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-789.0F), wall2.getXStart(), 0.01F);
      assertEquals((-527.216F), wall2.getThickness(), 0.01F);
      assertEquals((-3318.911F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-838.6F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(3036.472F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3036.472F, wall2.getLength(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(float0);
      
      Level level0 = new Level("UGS1VD;Z87>=", 0.0F, (-1418.8F), (-1943.8037F));
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals((-1943.8037F), level0.getHeight(), 0.01F);
      assertEquals((-1418.8F), level0.getFloorThickness(), 0.01F);
      assertEquals("UGS1VD;Z87>=", level0.getName());
      assertNotNull(level0);
      
      wall2.setLevel(level0);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals((-1678.2F), wall2.getYEnd(), 0.01F);
      assertEquals((-2053.9556F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-789.0F), wall2.getXStart(), 0.01F);
      assertEquals((-527.216F), wall2.getThickness(), 0.01F);
      assertEquals((-3318.911F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-838.6F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(3036.472F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3036.472F, wall2.getLength(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals((-1943.8037F), level0.getHeight(), 0.01F);
      assertEquals((-1418.8F), level0.getFloorThickness(), 0.01F);
      assertEquals("UGS1VD;Z87>=", level0.getName());
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals((-1943.8037F), level0.getHeight(), 0.01F);
      assertEquals((-1418.8F), level0.getFloorThickness(), 0.01F);
      assertEquals("UGS1VD;Z87>=", level0.getName());
      assertEquals("UGS1VD;Z87>=", level1.getName());
      assertEquals((-1943.8037F), level1.getHeight(), 0.01F);
      assertEquals((-1418.8F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertNotNull(level1);
      
      level0.setBackgroundImage((BackgroundImage) null);
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level1);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals((-1943.8037F), level0.getHeight(), 0.01F);
      assertEquals((-1418.8F), level0.getFloorThickness(), 0.01F);
      assertEquals("UGS1VD;Z87>=", level0.getName());
      
      float float1 = wall1.getXArcCircleCenter();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals((-560.64856F), float1, 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1121.2971F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1121.2971F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1121.2971F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-560.64856F), wall1.getXArcCircleCenter(), 0.01F);
      
      Level level2 = wall2.getLevel();
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(level2.equals((Object)level1));
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(level2, level1);
      assertSame(level2, level0);
      assertEquals((-1678.2F), wall2.getYEnd(), 0.01F);
      assertEquals((-2053.9556F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-789.0F), wall2.getXStart(), 0.01F);
      assertEquals((-527.216F), wall2.getThickness(), 0.01F);
      assertEquals((-3318.911F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-838.6F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(3036.472F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3036.472F, wall2.getLength(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals("UGS1VD;Z87>=", level2.getName());
      assertEquals((-1943.8037F), level2.getHeight(), 0.01F);
      assertEquals((-1418.8F), level2.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level2.getElevation(), 0.01F);
      assertTrue(level2.isVisible());
      assertNotNull(level2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Wall wall0 = new Wall((-1739.4F), (-1739.4F), 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((-2851.1F));
      assertEquals((-2851.1F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNotNull(wall1);
      
      float float1 = wall1.getThickness();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Wall wall0 = new Wall((-1121.2971F), (-1678.2F), 0.0F, (-1678.2F), 0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1121.2971F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1121.2971F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals((-560.64856F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1121.2971F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNotNull(wall1);
      
      Integer integer0 = new Integer(2268);
      assertEquals(2268, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.compare(2268, 2268);
      assertEquals(0, int0);
      
      int int1 = Integer.min(2268, 15);
      assertFalse(int1 == int0);
      assertEquals(15, int1);
      
      wall1.setLeftSideColor(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1121.2971F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1121.2971F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals((-560.64856F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1121.2971F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      
      wall0.setRightSideShininess((-1121.2971F));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      
      float float0 = wall0.getXEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      
      wall1.setXStart((-1678.2F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 0.0F, (-1121.2971F), 3088.55F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      
      wall0.setXStart(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      
      wall1.setThickness((-4470.84F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      
      float float1 = wall0.getYStart();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-1678.2F), float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      
      Integer integer1 = wall1.getRightSideColor();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(integer1);
      
      wall1.setLeftSideColor(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      
      wall1.setXEnd(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      
      boolean boolean1 = wall1.containsWallStartAt(0.0F, 3110.0F, 15);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(homeTexture0);
      
      Integer integer2 = wall0.getLeftSideColor();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(integer2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Wall wall0 = new Wall((-26.0F), 0.0F, 0.0F, (-26.0F), (-7.45F));
      assertEquals((-26.0F), wall0.getYEnd(), 0.01F);
      assertEquals(36.769554F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-7.45F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-26.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-13.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-13.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(36.769554F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      wall0.setXEnd(0.0F);
      assertEquals((-26.0F), wall0.getYEnd(), 0.01F);
      assertEquals(36.769554F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-7.45F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-26.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-13.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-13.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(36.769554F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      
      wall0.setXStart(0.0F);
      assertEquals((-26.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-7.45F), wall0.getThickness(), 0.01F);
      assertEquals(26.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-13.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(26.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      
      Float float0 = new Float((-735.664F));
      assertEquals((-735.664F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight((Float) null);
      assertEquals((-26.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-7.45F), wall0.getThickness(), 0.01F);
      assertEquals(26.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-13.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(26.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-26.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-7.45F), wall0.getThickness(), 0.01F);
      assertEquals(26.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-13.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(26.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(26.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-7.45F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals((-26.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-13.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(26.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(wall1);
      
      wall1.setYEnd((-7.45F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-26.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-7.45F), wall0.getThickness(), 0.01F);
      assertEquals(26.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-13.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(26.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-7.45F), wall1.getYEnd(), 0.01F);
      assertEquals(7.45F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-7.45F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-3.725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(7.45F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      try { 
        Integer.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Wall wall0 = new Wall((-1121.2971F), (-1678.2F), 0.0F, (-1678.2F), 0.0F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1121.2971F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals(1121.2971F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-560.64856F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1121.2971F, wall1.getLength(), 0.01F);
      assertNotNull(wall1);
      
      Integer integer0 = new Integer(2268);
      assertEquals(2268, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.compare(2268, 2268);
      assertEquals(0, int0);
      
      int int1 = new Integer(0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      wall1.setLeftSideColor(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1121.2971F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals(1121.2971F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-560.64856F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1121.2971F, wall1.getLength(), 0.01F);
      
      wall0.setRightSideShininess((-1121.2971F));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      float float0 = wall0.getXEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      wall1.setXStart((-1678.2F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 15, (-1121.2971F), 3088.55F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      wall1.setLeftSideShininess((-3380.811F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-3380.811F), wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      
      wall0.setXStart(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      wall1.setThickness((-4470.84F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-3380.811F), wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      
      float float1 = wall0.getYStart();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-1678.2F), float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      Integer integer1 = wall1.getRightSideColor();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-3380.811F), wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertNull(integer1);
      
      wall1.setLeftSideColor(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-3380.811F), wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      
      wall1.setXEnd(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-3380.811F), wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      
      boolean boolean1 = wall1.containsWallStartAt(0.0F, 3110.0F, 15);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-3380.811F), wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-3380.811F), wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertNull(homeTexture0);
      
      Integer integer2 = wall0.getLeftSideColor();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(integer2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = Float.isFinite(0.0F);
      assertTrue(boolean0);
      
      wall0.setHeight(float0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Float float1 = wall0.getHeight();
      assertEquals(0.0F, (float)float1, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.0F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall0.setWallAtStart(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      boolean boolean1 = wall0.intersectsRectangle(512.7397F, 0.01F, 0.0F, 2.0F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      wall0.move(0.01F, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      
      float float3 = wall0.getXEnd();
      assertEquals(0.01F, float3, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      
      float float4 = wall0.getXStart();
      assertEquals(float4, float3, 0.01F);
      assertEquals(0.01F, float4, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      
      Wall wall1 = wall0.getWallAtEnd();
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.01F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(0.01F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotNull(wall1);
      
      float float5 = wall0.getYArcCircleCenter();
      assertEquals(float5, float4, 0.01F);
      assertEquals(float5, float3, 0.01F);
      assertEquals(0.01F, float5, 0.01F);
      assertSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(float0);
      
      wall0.setHeightAtEnd(float0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setHeightAtEnd(float0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Wall wall0 = new Wall((-1447.0F), 1.0F, (-1200.5F), (-1447.0F), (-1200.5F));
      assertEquals((-1200.5F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1447.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1200.5F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1468.8315F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1323.75F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(1468.8315F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1447.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-723.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYEnd((-1200.5F));
      assertEquals((-1200.5F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1447.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1200.5F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1200.5F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1226.5254F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1226.5254F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1323.75F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals((-599.75F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals(0.0F, float1, 0.01F);
      
      Integer integer0 = new Integer((-730));
      assertEquals((-730), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = integer0.equals(object0);
      assertFalse(boolean0);
      
      wall0.setRightSideColor(integer0);
      assertEquals((-1200.5F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1447.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1200.5F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1200.5F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1226.5254F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1226.5254F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-730), (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1323.75F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals((-599.75F), wall0.getYArcCircleCenter(), 0.01F);
      
      float float2 = float0.floatValue();
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      
      Float float3 = new Float((double) 0.0F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall0.setRightSideShininess(732.90717F);
      assertEquals((-1200.5F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1447.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1200.5F), wall0.getYEnd(), 0.01F);
      assertEquals(732.90717F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1200.5F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1226.5254F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1226.5254F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-730), (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1323.75F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals((-599.75F), wall0.getYArcCircleCenter(), 0.01F);
      
      float float4 = float3.floatValue();
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals(float4, float1, 0.01F);
      assertEquals(float4, float2, 0.01F);
      assertEquals(0.0F, float4, 0.01F);
      
      wall0.setHeight((Float) 0.0F);
      assertEquals((-1200.5F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1447.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1200.5F), wall0.getYEnd(), 0.01F);
      assertEquals(732.90717F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1200.5F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1226.5254F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1226.5254F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-730), (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1323.75F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-599.75F), wall0.getYArcCircleCenter(), 0.01F);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals((-1200.5F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1447.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1200.5F), wall0.getYEnd(), 0.01F);
      assertEquals(732.90717F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1200.5F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1226.5254F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1226.5254F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-730), (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1323.75F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-599.75F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals((-1200.5F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1447.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1200.5F), wall0.getYEnd(), 0.01F);
      assertEquals(732.90717F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1200.5F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1226.5254F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1226.5254F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-730), (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1323.75F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-599.75F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(homeTexture0);
      
      Integer integer1 = wall0.getRightSideColor();
      assertEquals((-730), (int)integer1);
      assertEquals((-1200.5F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1447.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1200.5F), wall0.getYEnd(), 0.01F);
      assertEquals(732.90717F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1200.5F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1226.5254F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1226.5254F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-730), (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1323.75F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-599.75F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(integer1);
      
      int int0 = Float.floatToIntBits(1303.254F);
      assertEquals(1151526945, int0);
      
      int int1 = Float.floatToIntBits(110.02F);
      assertFalse(int1 == int0);
      assertEquals(1121716797, int1);
      
      int int2 = Float.floatToIntBits(0.01F);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1008981770, int2);
      
      int int3 = Float.floatToIntBits(1.0F);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(1065353216, int3);
      
      wall0.setHeight((Float) 1.0F);
      assertEquals((-1200.5F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1447.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1200.5F), wall0.getYEnd(), 0.01F);
      assertEquals(732.90717F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1200.5F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1226.5254F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1226.5254F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-730), (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1323.75F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals((-599.75F), wall0.getYArcCircleCenter(), 0.01F);
      
      float float5 = wall0.getRightSideShininess();
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertEquals(732.90717F, float5, 0.01F);
      assertEquals((-1200.5F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1447.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1200.5F), wall0.getYEnd(), 0.01F);
      assertEquals(732.90717F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1200.5F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1226.5254F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1226.5254F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-730), (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1323.75F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals((-599.75F), wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Wall wall0 = new Wall((-1739.4F), (-1739.4F), 12.107897F, 0.0F, (-625.596F));
      assertEquals(2468.4595F, wall0.getLength(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2468.4595F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(12.107897F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-863.64606F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(2468.4595F, wall0.getLength(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2468.4595F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(12.107897F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-863.64606F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertNull(float0);
      
      Float float1 = new Float((-2851.1F));
      assertEquals((-2851.1F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Level level0 = new Level("", 1577.2F, (-2851.1F), (-3753.2F));
      assertEquals("", level0.getName());
      assertEquals(1577.2F, level0.getElevation(), 0.01F);
      assertEquals((-3753.2F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-2851.1F), level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      wall0.setLevel(level0);
      assertEquals(2468.4595F, wall0.getLength(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2468.4595F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(12.107897F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-863.64606F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(1577.2F, level0.getElevation(), 0.01F);
      assertEquals((-3753.2F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-2851.1F), level0.getFloorThickness(), 0.01F);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals("", level0.getName());
      assertEquals(1577.2F, level0.getElevation(), 0.01F);
      assertEquals((-3753.2F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-2851.1F), level0.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals(1577.2F, level1.getElevation(), 0.01F);
      assertEquals((-2851.1F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-3753.2F), level1.getHeight(), 0.01F);
      assertNotNull(level1);
      
      level1.setBackgroundImage((BackgroundImage) null);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals("", level0.getName());
      assertEquals(1577.2F, level0.getElevation(), 0.01F);
      assertEquals((-3753.2F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-2851.1F), level0.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals(1577.2F, level1.getElevation(), 0.01F);
      assertEquals((-2851.1F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-3753.2F), level1.getHeight(), 0.01F);
      
      float float2 = wall0.getXArcCircleCenter();
      assertEquals((-863.64606F), float2, 0.01F);
      assertEquals(2468.4595F, wall0.getLength(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2468.4595F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(12.107897F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-863.64606F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Wall wall0 = new Wall(19.755266F, 19.755266F, 19.755266F, 19.755266F, 19.755266F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(19.755266F, wall0.getYEnd(), 0.01F);
      assertEquals(19.755266F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(19.755266F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(19.755266F, wall0.getThickness(), 0.01F);
      assertEquals(19.755266F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.755266F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(19.755266F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(19.755266F, 19.755266F, 19.755266F, 19.755266F, 19.755266F, 19.755266F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(19.755266F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(19.755266F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(19.755266F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(19.755266F, wall1.getXStart(), 0.01F);
      assertEquals(19.755266F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(19.755266F, wall1.getXEnd(), 0.01F);
      assertEquals(19.755266F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(19.755266F, wall1.getHeight(), 0.01F);
      assertNotNull(wall1);
      
      Float float0 = new Float(818.91223F);
      assertEquals(818.91223F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals(818.91223F, float1, 0.01F);
      
      wall1.setArcExtent((Float) 818.91223F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(19.755266F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(818.91223F, wall1.getArcExtent(), 0.01F);
      assertEquals(19.755266F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(19.755266F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(19.755266F, wall1.getXStart(), 0.01F);
      assertEquals(19.755266F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(19.755266F, wall1.getXEnd(), 0.01F);
      assertEquals(19.755266F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(19.755266F, wall1.getHeight(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(19.755266F, wall0.getYEnd(), 0.01F);
      assertEquals(19.755266F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(19.755266F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(19.755266F, wall0.getThickness(), 0.01F);
      assertEquals(19.755266F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.755266F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(19.755266F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(19.755266F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(818.91223F, wall1.getArcExtent(), 0.01F);
      assertEquals(19.755266F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(19.755266F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(19.755266F, wall1.getXStart(), 0.01F);
      assertEquals(19.755266F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(19.755266F, wall1.getXEnd(), 0.01F);
      assertEquals(19.755266F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(19.755266F, wall1.getHeight(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(19.755266F, wall0.getYEnd(), 0.01F);
      assertEquals(19.755266F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(19.755266F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(19.755266F, wall0.getThickness(), 0.01F);
      assertEquals(19.755266F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.755266F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(19.755266F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(19.755266F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(818.91223F, wall1.getArcExtent(), 0.01F);
      assertEquals(19.755266F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(19.755266F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(19.755266F, wall1.getXStart(), 0.01F);
      assertEquals(19.755266F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(19.755266F, wall1.getXEnd(), 0.01F);
      assertEquals(19.755266F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(19.755266F, wall1.getHeight(), 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall1, wall0);
      assertEquals(19.755266F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(818.91223F, wall1.getArcExtent(), 0.01F);
      assertEquals(19.755266F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(19.755266F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(19.755266F, wall1.getXStart(), 0.01F);
      assertEquals(19.755266F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(19.755266F, wall1.getXEnd(), 0.01F);
      assertEquals(19.755266F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(19.755266F, wall1.getHeight(), 0.01F);
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(19.755266F, wall0.getYEnd(), 0.01F);
      assertEquals(19.755266F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(19.755266F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(19.755266F, wall0.getThickness(), 0.01F);
      assertEquals(19.755266F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.755266F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(19.755266F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(float0);
      
      float float1 = wall0.getXStart();
      assertEquals((-1.0F), float1, 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      
      Wall wall1 = wall0.getWallAtEnd();
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall1);
      
      float float2 = wall0.getYArcCircleCenter();
      assertEquals(float2, float1, 0.01F);
      assertEquals((-1.0F), float2, 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Wall wall0 = new Wall((-1121.2971F), (-1678.2F), 0.0F, (-1678.2F), 0.0F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1121.2971F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-560.64856F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1121.2971F, wall1.getLength(), 0.01F);
      assertEquals(1121.2971F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNotNull(wall1);
      
      Integer integer0 = new Integer(2268);
      assertEquals(2268, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.compare(2268, 2268);
      assertEquals(0, int0);
      
      int int1 = Integer.min(2268, 15);
      assertFalse(int1 == int0);
      assertEquals(15, int1);
      
      wall1.setLeftSideColor(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1121.2971F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-560.64856F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1121.2971F, wall1.getLength(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals(1121.2971F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      
      wall0.setRightSideShininess((-1121.2971F));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall1.setXStart((-1678.2F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 22.939007F, (-1121.2971F), 3088.55F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setXStart(18.022617F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(9.011309F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(18.022617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(18.022617F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall1.setThickness((-4470.84F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(9.011309F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(18.022617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(18.022617F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      
      Integer integer1 = wall1.getRightSideColor();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(9.011309F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(18.022617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(18.022617F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(integer1);
      
      wall1.setLeftSideColor(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(9.011309F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(18.022617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(18.022617F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      
      wall1.setXEnd(15);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(9.011309F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(18.022617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(18.022617F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-831.6F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1693.2F, wall1.getLength(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(15.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1693.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      boolean boolean1 = wall1.containsWallStartAt(0.0F, 3110.0F, 15);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(9.011309F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(18.022617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(18.022617F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-831.6F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1693.2F, wall1.getLength(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(15.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1693.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(9.011309F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(18.022617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(18.022617F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-831.6F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1693.2F, wall1.getLength(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(15.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1693.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(homeTexture0);
      
      Integer integer2 = wall0.getLeftSideColor();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(9.011309F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(18.022617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(18.022617F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(integer2);
      
      Integer integer3 = Integer.valueOf(0);
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = integer3.equals(object0);
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      wall1.setLeftSideColor(integer3);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(9.011309F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(18.022617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(18.022617F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-831.6F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(0, (int)wall1.getLeftSideColor());
      assertEquals(1693.2F, wall1.getLength(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(15.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1693.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      float float0 = wall0.getRightSideShininess();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-1121.2971F), float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(9.011309F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(18.022617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(18.022617F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Wall wall0 = new Wall(48.392612F, 48.392612F, 48.392612F, 48.392612F, 48.392612F, 48.392612F);
      assertEquals(48.392612F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(48.392612F, wall0.getXEnd(), 0.01F);
      assertEquals(48.392612F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(48.392612F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(48.392612F, wall0.getHeight(), 0.01F);
      assertEquals(48.392612F, wall0.getThickness(), 0.01F);
      assertEquals(48.392612F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(48.392612F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(48.392612F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(48.392612F, wall0.getXEnd(), 0.01F);
      assertEquals(48.392612F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(48.392612F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(48.392612F, wall0.getHeight(), 0.01F);
      assertEquals(48.392612F, wall0.getThickness(), 0.01F);
      assertEquals(48.392612F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(48.392612F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals(48.392612F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(48.392612F, wall0.getXEnd(), 0.01F);
      assertEquals(48.392612F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(48.392612F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(48.392612F, wall0.getHeight(), 0.01F);
      assertEquals(48.392612F, wall0.getThickness(), 0.01F);
      assertEquals(48.392612F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(48.392612F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, (-1739.4F), (-1.0F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(wall1);
      
      Float float0 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.0F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall1.setHeight(float1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      Float float2 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(float2);
      
      wall0.setHeight(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float0, (float)float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      wall1.setWallAtStart(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      boolean boolean0 = wall1.intersectsRectangle(512.7397F, 0.01F, 0.0F, 2.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      assertNotSame(wall1, wall0);
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      wall1.move((-2851.1F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2851.1F), wall1.getXEnd(), 0.01F);
      assertEquals((-2851.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2851.1F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      float float3 = wall1.getXEnd();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2851.1F), float3, 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2851.1F), wall1.getXEnd(), 0.01F);
      assertEquals((-2851.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2851.1F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      float float4 = wall1.getXStart();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(float4, float3, 0.01F);
      assertEquals((-2851.1F), float4, 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2851.1F), wall1.getXEnd(), 0.01F);
      assertEquals((-2851.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2851.1F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      Wall wall2 = wall0.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2851.1F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-2851.1F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1739.4F), wall2.getYEnd(), 0.01F);
      assertEquals((-869.7F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1739.4F, wall2.getLength(), 0.01F);
      assertEquals((-1.0F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2851.1F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1739.4F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall2);
      
      float float5 = wall1.getYArcCircleCenter();
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertEquals((-869.7F), float5, 0.01F);
      assertNotSame(wall1, wall0);
      assertSame(wall1, wall2);
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2851.1F), wall1.getXEnd(), 0.01F);
      assertEquals((-2851.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2851.1F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall1, wall0);
      assertSame(wall1, wall2);
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2851.1F), wall1.getXEnd(), 0.01F);
      assertEquals((-2851.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2851.1F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = Float.isFinite(0.0F);
      assertTrue(boolean0);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      Float float1 = wall0.getHeight();
      assertEquals(0.0F, (float)float1, 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNotNull(float1);
      
      boolean boolean1 = wall0.intersectsRectangle((-228.9207F), -0.0F, 0.0F, (-1854.1F));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      wall0.setThickness((-1533.0F));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1533.0F), wall0.getThickness(), 0.01F);
      
      int int0 = Float.floatToIntBits(0.0F);
      assertEquals(0, int0);
      
      Float float2 = new Float((-3017.6128F));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-3017.6128F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = Float.valueOf((-1533.0F));
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((-1533.0F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      float float4 = float1.floatValue();
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float3, 0.01F);
      assertEquals(0.0F, float4, 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1533.0F), wall0.getThickness(), 0.01F);
      
      wall0.setArcExtent(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float4, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1533.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1533.0F), wall0.getThickness(), 0.01F);
      
      boolean boolean2 = wall0.containsWallEndAt(0.0F, 0.0F, 1.0F);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1533.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1533.0F), wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-1.0791351F), 0.0F, (-1.0791351F));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Float float0 = new Float((-3.003345F));
      assertEquals((-3.003345F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, (-2838.4321F), 0.0F, (-3.003345F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2835.4287F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1420.7178F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(2835.4287F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2838.4321F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotNull(wall1);
      
      Float float1 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-3.003345F), (float)float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(float1);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2835.4287F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1420.7178F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(2835.4287F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2838.4321F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      boolean boolean0 = wall0.intersectsRectangle((-1393.8479F), (-2838.4321F), (-1.0791351F), 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean0);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setRightSideShininess(0.1F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.1F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean1 = Float.isFinite((-2744.2F));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      boolean boolean2 = wall0.intersectsRectangle(2172.0F, (-1.0791351F), (-1.0791351F), 2172.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertNotSame(wall0, wall1);
      assertEquals(0.1F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy(":DlBwochr>-Lsco", propertyChangeListener0);
      assertEquals(":DlBwochr>-Lsco", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall1.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(2835.4287F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1420.7178F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(2835.4287F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2838.4321F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(":DlBwochr>-Lsco", propertyChangeListenerProxy0.getPropertyName());
      
      boolean boolean3 = wall0.intersectsRectangle((-1.0791351F), (-1.0791351F), 0.0F, (-1.0791351F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      assertNotSame(wall0, wall1);
      assertEquals(0.1F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall wall2 = wall0.getWallAtEnd();
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertEquals(1.0791351F, wall2.getLength(), 0.01F);
      assertEquals((-0.53956753F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0791351F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall2.getHeight(), 0.01F);
      assertEquals(0.1F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.0791351F), wall2.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall2);
      
      wall0.setArcExtent(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertEquals(0.1F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.6243867F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.037356485F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3.003345F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float[][] floatArray0 = wall2.getPoints();
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertEquals((-0.53956753F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.6243867F, wall2.getLength(), 0.01F);
      assertEquals((-3.003345F), wall2.getArcExtent(), 0.01F);
      assertEquals(0.037356485F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0791351F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall2.getHeight(), 0.01F);
      assertEquals(0.1F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.0791351F), wall2.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.6243867F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.037356485F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3.003345F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(floatArray0);
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(2835.4287F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1420.7178F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(2835.4287F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2838.4321F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(homeTexture0);
      
      Wall wall3 = wall2.clone();
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertSame(wall0, wall2);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertEquals((-0.53956753F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.6243867F, wall2.getLength(), 0.01F);
      assertEquals((-3.003345F), wall2.getArcExtent(), 0.01F);
      assertEquals(0.037356485F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0791351F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall2.getHeight(), 0.01F);
      assertEquals(0.1F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.0791351F), wall2.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.6243867F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.037356485F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3.003345F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getLeftSideColor());
      assertEquals((-1.0791351F), wall3.getThickness(), 0.01F);
      assertEquals(0.037356485F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals((-0.53956753F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall3.getHeight(), 0.01F);
      assertEquals((-3.003345F), wall3.getArcExtent(), 0.01F);
      assertEquals(1.6243867F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall3.getXEnd(), 0.01F);
      assertNotNull(wall3);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
      assertNotNull(wall_PropertyArray0);
      
      wall3.setLeftSideTexture((HomeTexture) null);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertSame(wall0, wall2);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertEquals((-0.53956753F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.6243867F, wall2.getLength(), 0.01F);
      assertEquals((-3.003345F), wall2.getArcExtent(), 0.01F);
      assertEquals(0.037356485F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0791351F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall2.getHeight(), 0.01F);
      assertEquals(0.1F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.0791351F), wall2.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.6243867F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.037356485F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3.003345F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getLeftSideColor());
      assertEquals((-1.0791351F), wall3.getThickness(), 0.01F);
      assertEquals(0.037356485F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals((-0.53956753F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall3.getHeight(), 0.01F);
      assertEquals((-3.003345F), wall3.getArcExtent(), 0.01F);
      assertEquals(1.6243867F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall3.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Wall wall0 = new Wall((-1121.2971F), (-1678.2F), 0.0F, (-1678.2F), 0.0F);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1121.2971F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-560.64856F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1121.2971F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1121.2971F, wall1.getLength(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertNotNull(wall1);
      
      Integer integer0 = new Integer(2268);
      assertEquals(2268, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.compare(2268, 2268);
      assertEquals(0, int0);
      
      int int1 = Integer.min(2268, 15);
      assertFalse(int1 == int0);
      assertEquals(15, int1);
      
      wall1.setLeftSideColor(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1121.2971F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-560.64856F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1121.2971F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals(1121.2971F, wall1.getLength(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      
      wall0.setRightSideShininess((-1121.2971F));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float float0 = wall0.getXEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall1.setXStart((-1678.2F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 22.939007F, (-1121.2971F), 3088.55F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setXStart(18.022617F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(18.022617F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(18.022617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(9.011309F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall1.setThickness((-4470.84F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(18.022617F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(18.022617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(9.011309F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      
      Integer integer1 = wall1.getRightSideColor();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(18.022617F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(18.022617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(9.011309F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertNull(integer1);
      
      wall1.setLeftSideColor(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(18.022617F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(18.022617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(9.011309F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      
      wall1.setXEnd(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(18.022617F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(18.022617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(9.011309F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      
      boolean boolean1 = wall1.containsWallStartAt(0.0F, 3110.0F, 15);
      assertTrue(boolean1 == boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(18.022617F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(18.022617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(9.011309F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(18.022617F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(18.022617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(9.011309F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertNull(homeTexture0);
      
      Integer integer2 = wall0.getLeftSideColor();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(18.022617F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(18.022617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(9.011309F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(integer2);
      
      Float float1 = wall0.getArcExtent();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(18.022617F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(18.022617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(9.011309F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(float1);
      
      wall0.setPattern((TextureImage) null);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(18.022617F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(18.022617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(9.011309F, wall0.getXArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Wall wall0 = new Wall((-1739.4F), (-1.0F), 3481.1F, 2015.25F, (-1.0F));
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5596.3276F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(5596.3276F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1007.125F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsPoint(3481.1F, (-2311.0F), (-1.0F));
      assertFalse(boolean0);
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5596.3276F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(5596.3276F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1007.125F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      
      wall0.setYStart(0.0F);
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1007.625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(5595.968F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5595.968F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      Level level0 = new Level((String) null, (-1413.0F), (-1601.39F), 0.0F);
      assertNull(level0.getName());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      wall0.setLevel(level0);
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1007.625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(5595.968F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5595.968F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(level0.getName());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      
      Level level1 = new Level((String) null, 3481.1F, (-1.0F), (-1601.39F));
      assertFalse(level1.equals((Object)level0));
      assertEquals(3481.1F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-1601.39F), level1.getHeight(), 0.01F);
      assertEquals((-1.0F), level1.getFloorThickness(), 0.01F);
      assertNull(level1.getName());
      assertNotNull(level1);
      
      level1.setFloorThickness((-1601.39F));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level1, level0);
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertEquals(3481.1F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-1601.39F), level1.getHeight(), 0.01F);
      assertNull(level1.getName());
      
      boolean boolean1 = wall0.isAtLevel(level1);
      assertFalse(level1.equals((Object)level0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(level1, level0);
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1007.625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(5595.968F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5595.968F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertEquals(3481.1F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-1601.39F), level1.getHeight(), 0.01F);
      assertNull(level1.getName());
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals(870.85004F, float0, 0.01F);
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1007.625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(5595.968F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5595.968F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Wall wall0 = new Wall(6.760374F, 6.760374F, 6.760374F, 6.760374F, 6.760374F);
      assertEquals(6.760374F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(6.760374F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(6.760374F, wall0.getYStart(), 0.01F);
      assertEquals(6.760374F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(6.760374F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(6.760374F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(6.760374F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(6.760374F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(6.760374F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(6.760374F, wall0.getYStart(), 0.01F);
      assertEquals(6.760374F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(6.760374F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(6.760374F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(6.760374F, wall0.getXStart(), 0.01F);
      assertNull(float0);
      
      Level level0 = new Level((String) null, 6.760374F, 0.01F, 0.01F);
      assertNull(level0.getName());
      assertEquals(0.01F, level0.getFloorThickness(), 0.01F);
      assertEquals(6.760374F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.01F, level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      wall0.setLevel(level0);
      assertEquals(6.760374F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(6.760374F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(6.760374F, wall0.getYStart(), 0.01F);
      assertEquals(6.760374F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(6.760374F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(6.760374F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(6.760374F, wall0.getXStart(), 0.01F);
      assertNull(level0.getName());
      assertEquals(0.01F, level0.getFloorThickness(), 0.01F);
      assertEquals(6.760374F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.01F, level0.getHeight(), 0.01F);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNull(level0.getName());
      assertEquals(0.01F, level0.getFloorThickness(), 0.01F);
      assertEquals(6.760374F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.01F, level0.getHeight(), 0.01F);
      assertNull(level1.getName());
      assertEquals(0.01F, level1.getFloorThickness(), 0.01F);
      assertEquals(6.760374F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.01F, level1.getHeight(), 0.01F);
      assertNotNull(level1);
      
      boolean boolean0 = wall0.isAtLevel(level1);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(boolean0);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(6.760374F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(6.760374F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(6.760374F, wall0.getYStart(), 0.01F);
      assertEquals(6.760374F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(6.760374F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(6.760374F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(6.760374F, wall0.getXStart(), 0.01F);
      assertNull(level0.getName());
      assertEquals(0.01F, level0.getFloorThickness(), 0.01F);
      assertEquals(6.760374F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.01F, level0.getHeight(), 0.01F);
      assertNull(level1.getName());
      assertEquals(0.01F, level1.getFloorThickness(), 0.01F);
      assertEquals(6.760374F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.01F, level1.getHeight(), 0.01F);
      
      float float1 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(6.760374F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(6.760374F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(6.760374F, wall0.getYStart(), 0.01F);
      assertEquals(6.760374F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(6.760374F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(6.760374F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(6.760374F, wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Wall wall0 = new Wall(3904.6F, (-1022.38086F), (-830.6896F), (-830.6896F), 0.0F, (-2170.124F));
      assertEquals(4739.168F, wall0.getLength(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertEquals((-830.6896F), wall0.getYEnd(), 0.01F);
      assertEquals(4739.168F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1022.38086F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-926.5352F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      wall0.setYEnd(2110.9646F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(5678.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1022.38086F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(544.2919F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5678.1F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setThickness(0.0F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(5678.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1022.38086F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(544.2919F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5678.1F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone(list0);
      assertTrue(list1.equals((Object)list0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      Level level0 = new Level((String) null, (-1413.0F), (-1601.39F), 0.0F);
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertNull(level1.getName());
      assertNotNull(level1);
      
      level1.setName((String) null);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertNull(level1.getName());
      
      wall0.setLevel(level1);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(5678.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1022.38086F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(544.2919F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5678.1F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertNull(level1.getName());
      
      Float float0 = new Float(0.6084034999428786);
      assertEquals(0.6084035F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Level level2 = level1.clone();
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level1, level2);
      assertNotSame(level1, level0);
      assertNotSame(level2, level0);
      assertNotSame(level2, level1);
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertNull(level1.getName());
      assertEquals((-1413.0F), level2.getElevation(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals(0.0F, level2.getHeight(), 0.01F);
      assertEquals((-1601.39F), level2.getFloorThickness(), 0.01F);
      assertNull(level2.getName());
      assertNotNull(level2);
      
      level1.setFloorThickness(0.0F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level1.equals((Object)level2));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level1, level2);
      assertNotSame(level1, level0);
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertNull(level1.getName());
      
      boolean boolean0 = wall0.isAtLevel(level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level2));
      assertFalse(boolean0);
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(5678.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1022.38086F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(544.2919F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5678.1F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertTrue(level0.isVisible());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall1 = new Wall(5.6169157F, 5.6169157F, 0.0F, 0.0F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2.8084579F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(7.943518F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(5.6169157F, wall1.getXStart(), 0.01F);
      assertEquals(2.8084579F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(5.6169157F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(7.943518F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2.8084579F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(7.943518F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(5.6169157F, wall1.getXStart(), 0.01F);
      assertEquals(2.8084579F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(5.6169157F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(7.943518F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      Float float1 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2.8084579F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(7.943518F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(5.6169157F, wall1.getXStart(), 0.01F);
      assertEquals(2.8084579F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(5.6169157F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(7.943518F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(float1);
      
      Float float2 = new Float(0.0F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall0.setHeight((Float) null);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Float float3 = new Float(0.0F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2.8084579F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(7.943518F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(5.6169157F, wall1.getXStart(), 0.01F);
      assertEquals(2.8084579F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(5.6169157F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(7.943518F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle((-1008.817F), 0.0F, 944.7096F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean1 = wall1.containsPoint(3238.7983F, 2601.7258F, 110.02F);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2.8084579F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(7.943518F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(5.6169157F, wall1.getXStart(), 0.01F);
      assertEquals(2.8084579F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(5.6169157F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(7.943518F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      int int0 = Float.floatToIntBits(2.2F);
      assertEquals(1074580685, int0);
      
      int int1 = Float.floatToIntBits(3371.93F);
      assertFalse(int1 == int0);
      assertEquals(1163050721, int1);
      
      int int2 = Float.floatToIntBits(1074580685);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1317018010, int2);
      
      int int3 = Float.floatToIntBits(2.2F);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(1074580685, int3);
      
      int int4 = Float.floatToIntBits(3371.93F);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertEquals(1163050721, int4);
      
      wall0.setArcExtent((Float) 3371.93F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(3371.93F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Wall wall0 = new Wall((-1739.4F), 2015.25F, (-1739.4F), 3481.1F, 0.89738584F, 2015.25F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(1465.8501F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(2015.25F, wall0.getYStart(), 0.01F);
      assertEquals(0.89738584F, wall0.getThickness(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals(2748.175F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals(1465.8501F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsPoint(3481.1F, (-2311.0F), 0.89738584F);
      assertFalse(boolean0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(1465.8501F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(2015.25F, wall0.getYStart(), 0.01F);
      assertEquals(0.89738584F, wall0.getThickness(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals(2748.175F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals(1465.8501F, wall0.getLength(), 0.01F);
      
      Level level0 = new Level((String) null, (-1413.0F), 0.89738584F, (-1413.0F));
      assertNull(level0.getName());
      assertEquals((-1413.0F), level0.getHeight(), 0.01F);
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.89738584F, level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      wall0.setLevel(level0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(1465.8501F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(2015.25F, wall0.getYStart(), 0.01F);
      assertEquals(0.89738584F, wall0.getThickness(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals(2748.175F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals(1465.8501F, wall0.getLength(), 0.01F);
      assertNull(level0.getName());
      assertEquals((-1413.0F), level0.getHeight(), 0.01F);
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.89738584F, level0.getFloorThickness(), 0.01F);
      
      Level level1 = wall0.getLevel();
      assertSame(level1, level0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(1465.8501F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(2015.25F, wall0.getYStart(), 0.01F);
      assertEquals(0.89738584F, wall0.getThickness(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals(2748.175F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals(1465.8501F, wall0.getLength(), 0.01F);
      assertTrue(level1.isVisible());
      assertNull(level1.getName());
      assertEquals(0.89738584F, level1.getFloorThickness(), 0.01F);
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      assertEquals((-1413.0F), level1.getHeight(), 0.01F);
      assertNotNull(level1);
      
      level1.setFloorThickness((-1739.4F));
      assertSame(level1, level0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(1465.8501F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(2015.25F, wall0.getYStart(), 0.01F);
      assertEquals(0.89738584F, wall0.getThickness(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals(2748.175F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals(1465.8501F, wall0.getLength(), 0.01F);
      assertEquals((-1739.4F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertNull(level1.getName());
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      assertEquals((-1413.0F), level1.getHeight(), 0.01F);
      
      boolean boolean1 = wall0.isAtLevel(level1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertSame(level1, level0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(1465.8501F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(2015.25F, wall0.getYStart(), 0.01F);
      assertEquals(0.89738584F, wall0.getThickness(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals(2748.175F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals(1465.8501F, wall0.getLength(), 0.01F);
      assertEquals((-1739.4F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertNull(level1.getName());
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      assertEquals((-1413.0F), level1.getHeight(), 0.01F);
      
      wall0.setArcExtent((Float) null);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(1465.8501F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(2015.25F, wall0.getYStart(), 0.01F);
      assertEquals(0.89738584F, wall0.getThickness(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals(2748.175F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals(1465.8501F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(float0);
      
      Float float1 = new Float(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight(float1);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, (-2851.1F), 0.0F, 0.0F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1425.55F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertEquals(2851.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2851.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotNull(wall1);
      
      Float float2 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(float2);
      
      float float3 = Float.min(0.0F, (-1.0F));
      assertEquals((-1.0F), float3, 0.01F);
      
      Float float4 = new Float(1.0F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals(1.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      wall0.setHeight((Float) null);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1425.55F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertEquals(2851.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2851.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      boolean boolean0 = wall0.intersectsRectangle(512.7397F, 0.01F, 0.0F, 2.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.move(0.0F, 3400.637F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3400.637F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3400.637F, wall0.getYStart(), 0.01F);
      assertEquals(3400.637F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float float5 = wall1.getXEnd();
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float5, float3, 0.01F);
      assertEquals(0.0F, float5, 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1425.55F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertEquals(2851.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2851.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      float float6 = wall1.getXStart();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(float6, float5, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertEquals(0.0F, float6, 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1425.55F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertEquals(2851.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2851.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      Wall wall2 = wall0.getWallAtEnd();
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertEquals(3400.637F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(3400.637F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(3400.637F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3400.637F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3400.637F, wall0.getYStart(), 0.01F);
      assertEquals(3400.637F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall2);
      
      float float7 = wall1.getYArcCircleCenter();
      assertNotEquals(float7, float5, 0.01F);
      assertNotEquals(float7, float3, 0.01F);
      assertNotEquals(float7, float6, 0.01F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1425.55F), float7, 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1425.55F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertEquals(2851.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2851.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1425.55F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertEquals(2851.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2851.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 1490.0F, (-1.0F), 1490.0F, (-1.0F));
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.45F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.1F, wall0.getLength(), 0.01F);
      assertEquals(1490.0F, wall0.getYStart(), 0.01F);
      assertEquals(1490.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1490.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getYStart();
      assertEquals(1490.0F, float0, 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.45F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.1F, wall0.getLength(), 0.01F);
      assertEquals(1490.0F, wall0.getYStart(), 0.01F);
      assertEquals(1490.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1490.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.45F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.1F, wall0.getLength(), 0.01F);
      assertEquals(1490.0F, wall0.getYStart(), 0.01F);
      assertEquals(1490.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1490.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1490.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.1F, wall1.getLength(), 0.01F);
      assertEquals(1490.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-0.45F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1490.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertNotNull(wall1);
      
      Integer integer0 = Integer.valueOf(1861);
      assertEquals(1861, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(12);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(12, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf(12);
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(12, (int)integer2);
      assertNotNull(integer2);
      
      int int0 = Integer.min(2139, 1217);
      assertEquals(1217, int0);
      
      Float float1 = wall0.getArcExtent();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.45F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.1F, wall0.getLength(), 0.01F);
      assertEquals(1490.0F, wall0.getYStart(), 0.01F);
      assertEquals(1490.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1490.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(float1);
      
      wall1.setRightSideColor((Integer) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.45F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.1F, wall0.getLength(), 0.01F);
      assertEquals(1490.0F, wall0.getYStart(), 0.01F);
      assertEquals(1490.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1490.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1490.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.1F, wall1.getLength(), 0.01F);
      assertEquals(1490.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-0.45F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1490.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Wall wall0 = new Wall(48.552513F, 48.552513F, 48.552513F, 48.552513F, 48.552513F, 48.552513F);
      assertEquals(48.552513F, wall0.getYEnd(), 0.01F);
      assertEquals(48.552513F, wall0.getThickness(), 0.01F);
      assertEquals(48.552513F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(48.552513F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(48.552513F, wall0.getHeight(), 0.01F);
      assertEquals(48.552513F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(48.552513F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(48.552513F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Float float0 = new Float(1.0E-10);
      assertEquals(1.0E-10F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeightAtEnd(float0);
      assertEquals(48.552513F, wall0.getYEnd(), 0.01F);
      assertEquals(48.552513F, wall0.getThickness(), 0.01F);
      assertEquals(48.552513F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(48.552513F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(48.552513F, wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(48.552513F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(48.552513F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(48.552513F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0E-10F, wall0.getHeightAtEnd(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(48.552513F, wall0.getYEnd(), 0.01F);
      assertEquals(48.552513F, wall0.getThickness(), 0.01F);
      assertEquals(48.552513F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(48.552513F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(48.552513F, wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(48.552513F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(48.552513F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(48.552513F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0E-10F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(48.552513F, wall1.getThickness(), 0.01F);
      assertEquals(1.0E-10F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(48.552513F, wall1.getYStart(), 0.01F);
      assertEquals(48.552513F, wall1.getYEnd(), 0.01F);
      assertEquals(48.552513F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(48.552513F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(48.552513F, wall1.getHeight(), 0.01F);
      assertEquals(48.552513F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(48.552513F, wall1.getXStart(), 0.01F);
      assertNotNull(wall1);
      
      Wall wall2 = new Wall(48.552513F, 48.552513F, 48.552513F, 48.552513F, 48.552513F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(48.552513F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeight());
      assertEquals(48.552513F, wall2.getYStart(), 0.01F);
      assertEquals(48.552513F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(48.552513F, wall2.getXEnd(), 0.01F);
      assertEquals(48.552513F, wall2.getYEnd(), 0.01F);
      assertEquals(48.552513F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(48.552513F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNotNull(wall2);
      
      Float float1 = new Float(1.0E-10);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.0E-10F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = Float.valueOf((-291.44528F));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-291.44528F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      boolean boolean0 = wall1.isTrapezoidal();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean0);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals(48.552513F, wall0.getYEnd(), 0.01F);
      assertEquals(48.552513F, wall0.getThickness(), 0.01F);
      assertEquals(48.552513F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(48.552513F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(48.552513F, wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(48.552513F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(48.552513F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(48.552513F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0E-10F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(48.552513F, wall1.getThickness(), 0.01F);
      assertEquals(1.0E-10F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(48.552513F, wall1.getYStart(), 0.01F);
      assertEquals(48.552513F, wall1.getYEnd(), 0.01F);
      assertEquals(48.552513F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(48.552513F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(48.552513F, wall1.getHeight(), 0.01F);
      assertEquals(48.552513F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(48.552513F, wall1.getXStart(), 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals(48.552513F, wall0.getYEnd(), 0.01F);
      assertEquals(48.552513F, wall0.getThickness(), 0.01F);
      assertEquals(48.552513F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(48.552513F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(48.552513F, wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(48.552513F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(48.552513F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(48.552513F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0E-10F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(48.552513F, wall1.getThickness(), 0.01F);
      assertEquals(1.0E-10F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(48.552513F, wall1.getYStart(), 0.01F);
      assertEquals(48.552513F, wall1.getYEnd(), 0.01F);
      assertEquals(48.552513F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(48.552513F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(48.552513F, wall1.getHeight(), 0.01F);
      assertEquals(48.552513F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(48.552513F, wall1.getXStart(), 0.01F);
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall2.getPoints();
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(floatArray1, floatArray0);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(48.552513F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeight());
      assertEquals(48.552513F, wall2.getYStart(), 0.01F);
      assertEquals(48.552513F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(48.552513F, wall2.getXEnd(), 0.01F);
      assertEquals(48.552513F, wall2.getYEnd(), 0.01F);
      assertEquals(48.552513F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(48.552513F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Integer integer0 = new Integer(3691);
      assertEquals(3691, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3691, (int)wall0.getLeftSideColor());
      
      wall0.setLeftSideColor(integer0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3691, (int)wall0.getLeftSideColor());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Float float0 = new Float(0.01F);
      assertEquals(0.01F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      wall1.setYStart(0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle((-1393.8479F), 0.01F, 0.0F, (-1.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      Float float1 = new Float(0.0F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean1 = wall1.containsWallStartAt(0.01F, (-1393.8479F), 51.70028F);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean2 = wall0.intersectsRectangle(0.0F, 0.0F, 0.0F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall1.move(0.01F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.01F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Wall wall0 = new Wall(8.875367F, 8.875367F, 8.875367F, 8.875367F, 8.875367F);
      assertEquals(8.875367F, wall0.getXEnd(), 0.01F);
      assertEquals(8.875367F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(8.875367F, wall0.getYStart(), 0.01F);
      assertEquals(8.875367F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(8.875367F, wall0.getThickness(), 0.01F);
      assertEquals(8.875367F, wall0.getXStart(), 0.01F);
      assertEquals(8.875367F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = new Integer(15);
      assertEquals(15, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(8.875367F, wall0.getXEnd(), 0.01F);
      assertEquals(8.875367F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(8.875367F, wall0.getYStart(), 0.01F);
      assertEquals(8.875367F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(8.875367F, wall0.getThickness(), 0.01F);
      assertEquals(15, (int)wall0.getLeftSideColor());
      assertEquals(8.875367F, wall0.getXStart(), 0.01F);
      assertEquals(8.875367F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Wall wall0 = new Wall(0.2215297F, 0.2215297F, 0.2215297F, 0.2215297F, 0.2215297F);
      assertEquals(0.2215297F, wall0.getXEnd(), 0.01F);
      assertEquals(0.2215297F, wall0.getYStart(), 0.01F);
      assertEquals(0.2215297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.2215297F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.2215297F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.2215297F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.2215297F, wall0.getXEnd(), 0.01F);
      assertEquals(0.2215297F, wall0.getYStart(), 0.01F);
      assertEquals(0.2215297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.2215297F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.2215297F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.2215297F, wall0.getYEnd(), 0.01F);
      
      Wall wall1 = new Wall((-6.4098854F), (-6.4098854F), 0.2215297F, (-6.4098854F), (-6.4098854F), 0.2215297F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-6.4098854F), wall1.getYEnd(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-6.4098854F), wall1.getYStart(), 0.01F);
      assertEquals(6.631415F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-6.4098854F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.2215297F, wall1.getHeight(), 0.01F);
      assertEquals(6.631415F, wall1.getLength(), 0.01F);
      assertEquals((-6.4098854F), wall1.getXStart(), 0.01F);
      assertEquals(0.2215297F, wall1.getXEnd(), 0.01F);
      assertEquals((-3.094178F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.2215297F, wall0.getXEnd(), 0.01F);
      assertEquals(0.2215297F, wall0.getYStart(), 0.01F);
      assertEquals(0.2215297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.2215297F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.2215297F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.2215297F, wall0.getYEnd(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYEnd(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-6.4098854F), wall1.getYStart(), 0.01F);
      assertEquals(6.631415F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-6.4098854F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.2215297F, wall1.getHeight(), 0.01F);
      assertEquals(6.631415F, wall1.getLength(), 0.01F);
      assertEquals((-6.4098854F), wall1.getXStart(), 0.01F);
      assertEquals(0.2215297F, wall1.getXEnd(), 0.01F);
      assertEquals((-3.094178F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.2215297F, wall0.getXEnd(), 0.01F);
      assertEquals(0.2215297F, wall0.getYStart(), 0.01F);
      assertEquals(0.2215297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.2215297F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.2215297F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.2215297F, wall0.getYEnd(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYEnd(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-6.4098854F), wall1.getYStart(), 0.01F);
      assertEquals(6.631415F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-6.4098854F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.2215297F, wall1.getHeight(), 0.01F);
      assertEquals(6.631415F, wall1.getLength(), 0.01F);
      assertEquals((-6.4098854F), wall1.getXStart(), 0.01F);
      assertEquals(0.2215297F, wall1.getXEnd(), 0.01F);
      assertEquals((-3.094178F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall1, wall0);
      assertEquals((-6.4098854F), wall1.getYEnd(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-6.4098854F), wall1.getYStart(), 0.01F);
      assertEquals(6.631415F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-6.4098854F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.2215297F, wall1.getHeight(), 0.01F);
      assertEquals(6.631415F, wall1.getLength(), 0.01F);
      assertEquals((-6.4098854F), wall1.getXStart(), 0.01F);
      assertEquals(0.2215297F, wall1.getXEnd(), 0.01F);
      assertEquals((-3.094178F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0.2215297F, wall0.getXEnd(), 0.01F);
      assertEquals(0.2215297F, wall0.getYStart(), 0.01F);
      assertEquals(0.2215297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.2215297F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.2215297F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.2215297F, wall0.getYEnd(), 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Wall wall0 = new Wall(8.007533F, 8.007533F, 8.007533F, 8.007533F, 8.007533F);
      assertEquals(8.007533F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(8.007533F, wall0.getXStart(), 0.01F);
      assertEquals(8.007533F, wall0.getThickness(), 0.01F);
      assertEquals(8.007533F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(8.007533F, wall0.getYStart(), 0.01F);
      assertEquals(8.007533F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(8.007533F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("Content isn't a JAR entry", propertyChangeListener0);
      assertEquals("Content isn't a JAR entry", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(8.007533F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(8.007533F, wall0.getXStart(), 0.01F);
      assertEquals(8.007533F, wall0.getThickness(), 0.01F);
      assertEquals(8.007533F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(8.007533F, wall0.getYStart(), 0.01F);
      assertEquals(8.007533F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(8.007533F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals("Content isn't a JAR entry", propertyChangeListenerProxy0.getPropertyName());
      
      Float float0 = wall0.getHeight();
      assertEquals(8.007533F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(8.007533F, wall0.getXStart(), 0.01F);
      assertEquals(8.007533F, wall0.getThickness(), 0.01F);
      assertEquals(8.007533F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(8.007533F, wall0.getYStart(), 0.01F);
      assertEquals(8.007533F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(8.007533F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(float0);
      
      wall0.setHeightAtEnd((Float) null);
      assertEquals(8.007533F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(8.007533F, wall0.getXStart(), 0.01F);
      assertEquals(8.007533F, wall0.getThickness(), 0.01F);
      assertEquals(8.007533F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(8.007533F, wall0.getYStart(), 0.01F);
      assertEquals(8.007533F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(8.007533F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Float float0 = new Float((-3.003345F));
      assertEquals((-3.003345F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setWallAtEnd(wall0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      wall0.setYStart(0.0F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, (-3.003345F), 0.0F, (-3.003345F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-3.003345F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNotNull(wall1);
      
      Float float1 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(float1);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-3.003345F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      
      wall1.setYStart(0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle((-1393.8479F), (-2851.1F), 0.0F, (-2247.7522F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      
      boolean boolean1 = wall1.containsWallStartAt((-1739.4F), (-4599.4F), 51.70028F);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      
      boolean boolean2 = wall0.intersectsRectangle(390.2F, 0.0F, 0.0F, 390.2F);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      wall1.move(0.01F, 1.15652966E9F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.01F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.15652966E9F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.15652966E9F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.01F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertEquals(1.15652966E9F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      
      Float float2 = wall0.getArcExtent();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(float2);
      
      wall1.setHeight((Float) null);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.01F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.15652966E9F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.15652966E9F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.01F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertEquals(1.15652966E9F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess((-1.0F));
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = wall0.getXStart();
      assertEquals((-1.0F), float1, 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall wall1 = wall0.getWallAtEnd();
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1);
      
      wall0.setArcExtent(float0);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float float2 = wall0.getYArcCircleCenter();
      assertEquals(float2, float1, 0.01F);
      assertEquals((-1.0F), float2, 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Float float0 = new Float((-3.003345F));
      assertEquals((-3.003345F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setYStart(0.1F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, (-2851.1F), 0.1F, (-3.003345F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotNull(wall1);
      
      Float float1 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(float1);
      
      Float float2 = new Float(0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.01F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      wall1.setYStart(0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3.0050094F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3.0050094F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle((-1393.8479F), (-2851.1F), 0.0F, (-2247.7522F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3.0050094F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3.0050094F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      Float float3 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(float3);
      
      Float float4 = wall1.getHeightAtEnd();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3.0050094F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3.0050094F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(float4);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3.0050094F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3.0050094F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean1 = wall1.intersectsRectangle(1.15652966E9F, 512.7397F, 0.13753456F, 2.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3.0050094F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3.0050094F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      Float float5 = wall1.getArcExtent();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3.0050094F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3.0050094F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(float5);
      
      wall1.setRightSideColor((Integer) null);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3.0050094F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3.0050094F, wall1.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Wall wall0 = new Wall(3611.0F, 3611.0F, 3611.0F, 3611.0F, 3611.0F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3611.0F, wall0.getThickness(), 0.01F);
      assertEquals(3611.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3611.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3611.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3611.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3611.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3611.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = Integer.valueOf(1861);
      assertEquals(1861, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(12);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(12, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf(12);
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(12, (int)integer2);
      assertNotNull(integer2);
      
      wall0.setRightSideColor(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3611.0F, wall0.getThickness(), 0.01F);
      assertEquals(3611.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3611.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3611.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3611.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(12, (int)wall0.getRightSideColor());
      assertEquals(3611.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3611.0F, wall0.getXStart(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint(3611.0F, 3611.0F, 3611.0F);
      assertTrue(boolean0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3611.0F, wall0.getThickness(), 0.01F);
      assertEquals(3611.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3611.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3611.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3611.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(12, (int)wall0.getRightSideColor());
      assertEquals(3611.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3611.0F, wall0.getXStart(), 0.01F);
      
      wall0.setHeightAtEnd((Float) null);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3611.0F, wall0.getThickness(), 0.01F);
      assertEquals(3611.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3611.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3611.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3611.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(12, (int)wall0.getRightSideColor());
      assertEquals(3611.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3611.0F, wall0.getXStart(), 0.01F);
      
      Integer integer3 = wall0.getLeftSideColor();
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3611.0F, wall0.getThickness(), 0.01F);
      assertEquals(3611.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3611.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3611.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3611.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(12, (int)wall0.getRightSideColor());
      assertEquals(3611.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3611.0F, wall0.getXStart(), 0.01F);
      assertNull(integer3);
      
      Integer integer4 = wall0.getLeftSideColor();
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3611.0F, wall0.getThickness(), 0.01F);
      assertEquals(3611.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3611.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3611.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3611.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(12, (int)wall0.getRightSideColor());
      assertEquals(3611.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3611.0F, wall0.getXStart(), 0.01F);
      assertNull(integer4);
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3611.0F, wall0.getThickness(), 0.01F);
      assertEquals(3611.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3611.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3611.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3611.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(12, (int)wall0.getRightSideColor());
      assertEquals(3611.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3611.0F, wall0.getXStart(), 0.01F);
      
      wall0.setRightSideColor(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3611.0F, wall0.getThickness(), 0.01F);
      assertEquals(3611.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3611.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3611.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3611.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(12, (int)wall0.getRightSideColor());
      assertEquals(3611.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3611.0F, wall0.getXStart(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean1 = linkedList0.removeAll(linkedList1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Wall wall0 = new Wall((-1739.4F), 3481.1F, (-1739.4F), 3481.1F, (-1739.4F), 3481.1F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertEquals((-1739.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1739.4F), wall0.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsPoint(3481.1F, (-1739.4F), (-1739.4F));
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertEquals((-1739.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1739.4F), wall0.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertEquals((-1739.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1739.4F), wall0.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      Float float0 = new Float((-3.003345F));
      assertEquals((-3.003345F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      wall0.setYStart(0.0F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, (-2851.1F), 0.0F, (-3.003345F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertNotNull(wall1);
      
      Float float1 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(float1);
      
      Float float2 = new Float(0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.01F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      
      wall1.setYStart(0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle((-1393.8479F), (-2851.1F), 0.0F, (-2247.7522F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      
      Float float3 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(float3);
      
      Float float4 = wall1.getHeightAtEnd();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(float4);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      
      boolean boolean1 = wall1.intersectsRectangle(1.15652966E9F, 512.7397F, 0.13753456F, 2.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      
      wall1.move(3481.1F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(3481.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3481.1F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3481.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      
      Float float5 = wall1.getArcExtent();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(3481.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3481.1F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3481.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(float5);
      
      wall1.setRightSideColor((Integer) null);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(3481.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3481.1F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3481.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Wall wall0 = new Wall((-1121.2971F), (-1678.2F), 0.0F, (-1678.2F), 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1121.2971F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-560.64856F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1121.2971F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNotNull(wall1);
      
      Integer integer0 = new Integer(2268);
      assertEquals(2268, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.compare(2268, 2268);
      assertEquals(0, int0);
      
      int int1 = Integer.min(2268, 15);
      assertFalse(int1 == int0);
      assertEquals(15, int1);
      
      wall1.setLeftSideColor(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1121.2971F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-560.64856F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals(1121.2971F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      
      wall0.setRightSideShininess((-1121.2971F));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      float float0 = wall0.getXEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      wall1.setXStart((-1678.2F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 22.939007F, (-1121.2971F), 3088.55F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      wall0.setXStart(18.022617F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(9.011309F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(18.022617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(18.022617F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      wall1.setThickness((-4470.84F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(9.011309F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(18.022617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(18.022617F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      
      Integer integer1 = wall1.getRightSideColor();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(9.011309F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(18.022617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(18.022617F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertNull(integer1);
      
      wall1.setLeftSideColor(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(9.011309F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(18.022617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(18.022617F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      
      wall1.setXEnd(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(9.011309F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(18.022617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(18.022617F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      
      boolean boolean1 = wall1.containsWallStartAt(0.0F, 3110.0F, 15);
      assertTrue(boolean1 == boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(9.011309F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(18.022617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(18.022617F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(9.011309F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(18.022617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(18.022617F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertNull(homeTexture0);
      
      Integer integer2 = wall0.getLeftSideColor();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(9.011309F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(18.022617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(18.022617F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(integer2);
      
      Float float1 = wall0.getHeightAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(9.011309F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(18.022617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(18.022617F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(float1);
      
      wall1.setRightSideShininess(3088.55F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(9.011309F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(18.022617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(18.022617F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3088.55F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Wall wall0 = new Wall((-2133.0F), (-2133.0F), (-2133.0F), (-1614.955F), 2.0F, 0.0F);
      assertEquals(518.04504F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2133.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2133.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1614.955F), wall0.getYEnd(), 0.01F);
      assertEquals(518.04504F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1873.9775F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2133.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2133.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals(518.04504F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2133.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2133.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1614.955F), wall0.getYEnd(), 0.01F);
      assertEquals(518.04504F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1873.9775F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2133.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2133.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      Wall wall1 = new Wall((-1739.4F), (-1739.4F), 0.0F, 0.0F, (-625.596F));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      
      Float float0 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(float0);
      
      Float float1 = new Float((-2851.1F));
      assertEquals((-2851.1F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall1.setHeight(float1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(518.04504F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2133.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2133.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1614.955F), wall0.getYEnd(), 0.01F);
      assertEquals(518.04504F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1873.9775F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2133.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2133.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      
      Wall wall2 = wall0.clone();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(518.04504F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2133.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2133.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1614.955F), wall0.getYEnd(), 0.01F);
      assertEquals(518.04504F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1873.9775F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2133.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2133.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2133.0F), wall2.getXStart(), 0.01F);
      assertEquals((-2133.0F), wall2.getYStart(), 0.01F);
      assertEquals((-1873.9775F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(518.04504F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(518.04504F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-2133.0F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1614.955F), wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2133.0F), wall2.getXEnd(), 0.01F);
      assertEquals(2.0F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNotNull(wall2);
      
      boolean boolean1 = wall0.intersectsRectangle((-2133.0F), 0.0F, 0.0F, 2.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals(518.04504F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2133.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2133.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1614.955F), wall0.getYEnd(), 0.01F);
      assertEquals(518.04504F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1873.9775F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2133.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2133.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall1.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      wall0.setYEnd(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2133.0F, wall0.getLength(), 0.01F);
      assertEquals((-2133.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2133.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1066.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2133.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2133.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2133.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Wall wall0 = new Wall((-0.16079742F), (-0.16079742F), (-0.16079742F), (-0.16079742F), (-0.16079742F), (-0.16079742F));
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.16079742F), wall0.getHeight(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.16079742F), wall0.getThickness(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-0.16079742F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Wall wall1 = new Wall((-0.16079742F), (-0.16079742F), (-0.16079742F), (-166.76F), 0.0F, (-166.76F));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-0.16079742F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-83.460396F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-0.16079742F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-166.76F), wall1.getHeight(), 0.01F);
      assertEquals((-166.76F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.16079742F), wall1.getYStart(), 0.01F);
      assertEquals(166.5992F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(166.5992F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-0.16079742F), wall1.getXStart(), 0.01F);
      assertNotNull(wall1);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.16079742F), wall0.getHeight(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.16079742F), wall0.getThickness(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-0.16079742F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-0.16079742F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-83.460396F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-0.16079742F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-166.76F), wall1.getHeight(), 0.01F);
      assertEquals((-166.76F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.16079742F), wall1.getYStart(), 0.01F);
      assertEquals(166.5992F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(166.5992F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-0.16079742F), wall1.getXStart(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.16079742F), wall0.getHeight(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.16079742F), wall0.getThickness(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-0.16079742F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-0.16079742F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-83.460396F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-0.16079742F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-166.76F), wall1.getHeight(), 0.01F);
      assertEquals((-166.76F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.16079742F), wall1.getYStart(), 0.01F);
      assertEquals(166.5992F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(166.5992F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-0.16079742F), wall1.getXStart(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.16079742F), wall0.getHeight(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.16079742F), wall0.getThickness(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-0.16079742F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Wall wall0 = new Wall((-1739.4F), (-1.0F), 3481.1F, 2015.25F, (-1.0F));
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(5596.3276F, wall0.getLength(), 0.01F);
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1007.125F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5596.3276F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsPoint(3481.1F, (-2311.0F), (-1.0F));
      assertFalse(boolean0);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(5596.3276F, wall0.getLength(), 0.01F);
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1007.125F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5596.3276F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      
      wall0.setYStart(0.0F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(1007.625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5595.968F, wall0.getLength(), 0.01F);
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5595.968F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      Level level0 = wall0.getLevel();
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(1007.625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5595.968F, wall0.getLength(), 0.01F);
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5595.968F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(level0);
      
      wall0.setLevel((Level) null);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(1007.625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5595.968F, wall0.getLength(), 0.01F);
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5595.968F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      Level level1 = new Level((String) null, 3481.1F, (-1.0F), (-1624.4988F));
      assertEquals(3481.1F, level1.getElevation(), 0.01F);
      assertEquals((-1624.4988F), level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-1.0F), level1.getFloorThickness(), 0.01F);
      assertNull(level1.getName());
      assertNotNull(level1);
      
      level1.setFloorThickness((-1624.4988F));
      assertEquals(3481.1F, level1.getElevation(), 0.01F);
      assertEquals((-1624.4988F), level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-1624.4988F), level1.getFloorThickness(), 0.01F);
      assertNull(level1.getName());
      
      boolean boolean1 = wall0.isAtLevel(level1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(1007.625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5595.968F, wall0.getLength(), 0.01F);
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5595.968F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(3481.1F, level1.getElevation(), 0.01F);
      assertEquals((-1624.4988F), level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-1624.4988F), level1.getFloorThickness(), 0.01F);
      assertNull(level1.getName());
      
      float float0 = new Float(2015.25F);
      assertEquals(2015.25F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Wall wall0 = new Wall((-0.16079742F), (-0.16079742F), (-0.16079742F), (-0.16079742F), (-0.16079742F), (-0.16079742F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.16079742F), wall0.getHeight(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.16079742F), wall0.getThickness(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((-0.16079742F));
      assertEquals((-0.16079742F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXStart(), 0.01F);
      assertEquals((-0.16079742F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.16079742F), wall0.getHeight(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.16079742F), wall0.getThickness(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXArcCircleCenter(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXStart(), 0.01F);
      assertEquals((-0.16079742F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.16079742F), wall0.getHeight(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.16079742F), wall0.getThickness(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Wall wall0 = new Wall((-4.7919436F), 780.7F, 780.7F, (-4.7919436F), (-4.7919436F));
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(780.7F, wall0.getXEnd(), 0.01F);
      assertEquals((-4.7919436F), wall0.getXStart(), 0.01F);
      assertEquals(387.95404F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1110.8534F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4.7919436F), wall0.getYEnd(), 0.01F);
      assertEquals((-4.7919436F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(387.95404F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(780.7F, wall0.getYStart(), 0.01F);
      assertEquals(1110.8534F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(1641.108F, 1641.108F, (-1.0F), 1.0F, 1641.108F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(821.054F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2320.8777F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1641.108F, wall1.getYStart(), 0.01F);
      assertEquals(820.054F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1641.108F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(2320.8777F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1641.108F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNotNull(wall1);
      
      Float float0 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(821.054F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2320.8777F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1641.108F, wall1.getYStart(), 0.01F);
      assertEquals(820.054F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1641.108F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(2320.8777F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1641.108F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(float0);
      
      int int0 = Float.compare(0.0F, 0.0F);
      assertEquals(0, int0);
      
      int int1 = Float.compare(3671.4F, 0);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = Float.compare(10.75596F, 1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      
      int int3 = Float.compare(0.0F, 1.0F);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals((-1), int3);
      
      int int4 = Float.compare((-2332.0F), (-2332.0F));
      assertTrue(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertEquals(0, int4);
      
      int int5 = Float.compare(1, 0.0F);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      assertFalse(int5 == int4);
      assertEquals(1, int5);
      
      int int6 = Float.compare((-851.2328F), (-851.2328F));
      assertTrue(int6 == int0);
      assertFalse(int6 == int2);
      assertTrue(int6 == int4);
      assertFalse(int6 == int1);
      assertFalse(int6 == int3);
      assertFalse(int6 == int5);
      assertEquals(0, int6);
      
      int int7 = Float.compare(1675.9688F, 0.0F);
      assertFalse(int7 == int6);
      assertTrue(int7 == int2);
      assertTrue(int7 == int1);
      assertFalse(int7 == int4);
      assertTrue(int7 == int5);
      assertFalse(int7 == int3);
      assertFalse(int7 == int0);
      assertEquals(1, int7);
      
      wall1.setHeightAtEnd((Float) 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(821.054F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2320.8777F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1641.108F, wall1.getYStart(), 0.01F);
      assertEquals(820.054F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeightAtEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1641.108F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(2320.8777F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1641.108F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      
      Wall wall2 = wall1.getWallAtEnd();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(821.054F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2320.8777F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1641.108F, wall1.getYStart(), 0.01F);
      assertEquals(820.054F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeightAtEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1641.108F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(2320.8777F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1641.108F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall2);
      
      float float1 = wall0.getLength();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1110.8534F, float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(780.7F, wall0.getXEnd(), 0.01F);
      assertEquals((-4.7919436F), wall0.getXStart(), 0.01F);
      assertEquals(387.95404F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1110.8534F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4.7919436F), wall0.getYEnd(), 0.01F);
      assertEquals((-4.7919436F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(387.95404F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(780.7F, wall0.getYStart(), 0.01F);
      assertEquals(1110.8534F, wall0.getLength(), 0.01F);
      
      Level level0 = wall0.getLevel();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(780.7F, wall0.getXEnd(), 0.01F);
      assertEquals((-4.7919436F), wall0.getXStart(), 0.01F);
      assertEquals(387.95404F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1110.8534F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4.7919436F), wall0.getYEnd(), 0.01F);
      assertEquals((-4.7919436F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(387.95404F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(780.7F, wall0.getYStart(), 0.01F);
      assertEquals(1110.8534F, wall0.getLength(), 0.01F);
      assertNull(level0);
      
      Float float2 = wall1.getHeightAtEnd();
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(821.054F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2320.8777F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1641.108F, wall1.getYStart(), 0.01F);
      assertEquals(820.054F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeightAtEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1641.108F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(2320.8777F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1641.108F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNotNull(float2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 641.0F, 0.0F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(641.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(320.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(641.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(641.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      wall0.setYStart(0.0F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(641.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(320.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(641.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(641.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Wall wall0 = new Wall(2015.25F, 2015.25F, (-1739.4F), (-1739.4F), 3481.1F, 2015.25F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertEquals(137.92499F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getThickness(), 0.01F);
      assertEquals(5309.877F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2015.25F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals(5309.877F, wall0.getLength(), 0.01F);
      assertEquals(2015.25F, wall0.getXStart(), 0.01F);
      assertEquals(137.92499F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsPoint(3481.1F, (-2310.5024F), (-0.9628612F));
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertEquals(137.92499F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getThickness(), 0.01F);
      assertEquals(5309.877F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2015.25F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals(5309.877F, wall0.getLength(), 0.01F);
      assertEquals(2015.25F, wall0.getXStart(), 0.01F);
      assertEquals(137.92499F, wall0.getXArcCircleCenter(), 0.01F);
      
      boolean boolean1 = wall0.containsWallStartAt((-2196.0F), (-0.9628612F), 2015.25F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertEquals(137.92499F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getThickness(), 0.01F);
      assertEquals(5309.877F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2015.25F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals(5309.877F, wall0.getLength(), 0.01F);
      assertEquals(2015.25F, wall0.getXStart(), 0.01F);
      assertEquals(137.92499F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setYStart(0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(4137.984F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals(4137.984F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2015.25F, wall0.getXStart(), 0.01F);
      assertEquals(137.92499F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setXStart((-665.3366F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2044.2908F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-665.3366F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1202.3683F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals(2044.2908F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setThickness(Float.NEGATIVE_INFINITY);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2044.2908F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-665.3366F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, wall0.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1202.3683F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals(2044.2908F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Integer integer0 = wall0.getRightSideColor();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2044.2908F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-665.3366F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, wall0.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1202.3683F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals(2044.2908F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(integer0);
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2044.2908F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-665.3366F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, wall0.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1202.3683F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals(2044.2908F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setXEnd((-2196.0F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2316.99F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2196.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-665.3366F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2316.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals((-1430.6683F), wall0.getXArcCircleCenter(), 0.01F);
      
      boolean boolean2 = wall0.containsWallStartAt((-1.0F), Float.NEGATIVE_INFINITY, 0.01F);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2316.99F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2196.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-665.3366F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2316.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals((-1430.6683F), wall0.getXArcCircleCenter(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2316.99F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2196.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-665.3366F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2316.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals((-1430.6683F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(homeTexture0);
      
      Integer integer1 = wall0.getLeftSideColor();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2316.99F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2196.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-665.3366F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2316.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals((-1430.6683F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      wall0.setLeftSideShininess(0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall0));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1, linkedList0.size());
      
      Stream<Wall> stream0 = linkedList0.stream();
      assertTrue(linkedList0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertNotNull(stream0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      String string0 = "hGfK1=*c_-O";
      String string1 = "";
      String string2 = "";
      int int0 = 148;
      try { 
        MockURL.URL("", (String) null, 148, "");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Wall wall0 = new Wall((-1698.0F), 3481.1F, 3481.1F, 3481.1F, (-1698.0F));
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(5179.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertEquals((-1698.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1698.0F), wall0.getXStart(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(891.55005F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5179.1F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsPoint(3481.1F, (-2311.0F), (-1698.0F));
      assertFalse(boolean0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(5179.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertEquals((-1698.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1698.0F), wall0.getXStart(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(891.55005F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5179.1F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Level level0 = new Level((String) null, 3481.1F, (-1698.0F), 3481.1F);
      assertNull(level0.getName());
      assertEquals(3481.1F, level0.getElevation(), 0.01F);
      assertEquals(3481.1F, level0.getHeight(), 0.01F);
      assertEquals((-1698.0F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      wall0.setLevel(level0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(5179.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertEquals((-1698.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1698.0F), wall0.getXStart(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(891.55005F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5179.1F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(level0.getName());
      assertEquals(3481.1F, level0.getElevation(), 0.01F);
      assertEquals(3481.1F, level0.getHeight(), 0.01F);
      assertEquals((-1698.0F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      
      Level level1 = new Level((String) null, (-1698.0F), (-1698.0F), (-1698.0F));
      assertFalse(level1.equals((Object)level0));
      assertEquals((-1698.0F), level1.getFloorThickness(), 0.01F);
      assertEquals((-1698.0F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-1698.0F), level1.getHeight(), 0.01F);
      assertNull(level1.getName());
      assertNotNull(level1);
      
      boolean boolean1 = wall0.isAtLevel(level1);
      assertFalse(level1.equals((Object)level0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(level1, level0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(5179.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertEquals((-1698.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1698.0F), wall0.getXStart(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(891.55005F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5179.1F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1698.0F), level1.getFloorThickness(), 0.01F);
      assertEquals((-1698.0F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-1698.0F), level1.getHeight(), 0.01F);
      assertNull(level1.getName());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 0.01F, 0.01F, 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Float float0 = new Float(0.01F);
      assertEquals(0.01F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-1.0791351F), 0.0F, (-1.0791351F));
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      Float float0 = new Float((-3.003345F));
      assertEquals((-3.003345F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, (-2851.1F), 0.0F, (-3.003345F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotNull(wall1);
      
      Float float1 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-3.003345F), (float)float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.01F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle((-1393.8479F), (-2851.1F), (-1.0791351F), (-2247.7522F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      
      Float float3 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((-3.003345F), (float)float3, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotNull(float3);
      
      Float float4 = wall1.getHeightAtEnd();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(float4);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      
      boolean boolean1 = wall1.intersectsRectangle(1.15652966E9F, 512.7397F, 0.13753456F, 2.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      
      wall1.move(3481.1F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(3481.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3481.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3481.1F, wall1.getXStart(), 0.01F);
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      
      Float float5 = wall1.getArcExtent();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(3481.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3481.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3481.1F, wall1.getXStart(), 0.01F);
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertNull(float5);
      
      wall1.setRightSideColor((Integer) null);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(3481.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3481.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3481.1F, wall1.getXStart(), 0.01F);
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 0.01F, 0.01F, 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      Float float0 = new Float(0.01F);
      assertEquals(0.01F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      wall0.move(0.01F, 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.02F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.02F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.02F, wall0.getYEnd(), 0.01F);
      assertEquals(0.02F, wall0.getXEnd(), 0.01F);
      assertEquals(0.02F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.02F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      float float1 = wall0.getXEnd();
      assertEquals(0.02F, float1, 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.02F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.02F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.02F, wall0.getYEnd(), 0.01F);
      assertEquals(0.02F, wall0.getXEnd(), 0.01F);
      assertEquals(0.02F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.02F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.02F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.02F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.02F, wall0.getYEnd(), 0.01F);
      assertEquals(0.02F, wall0.getXEnd(), 0.01F);
      assertEquals(0.02F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.02F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.02F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.02F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.02F, wall0.getYEnd(), 0.01F);
      assertEquals(0.02F, wall0.getXEnd(), 0.01F);
      assertEquals(0.02F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.02F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(floatArray1);
      
      Wall wall1 = wall0.getWallAtStart();
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.02F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.02F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.02F, wall0.getYEnd(), 0.01F);
      assertEquals(0.02F, wall0.getXEnd(), 0.01F);
      assertEquals(0.02F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.02F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.02F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals(0.02F, wall1.getXStart(), 0.01F);
      assertEquals(0.02F, wall1.getYStart(), 0.01F);
      assertEquals(0.02F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.02F, wall1.getXEnd(), 0.01F);
      assertEquals(0.02F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotNull(wall1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1153);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1153, (int)integer1);
      assertNotNull(integer1);
      
      Wall wall1 = new Wall(1153, 1153, 1153, 0.0F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getLeftSideColor());
      assertEquals(1153.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1153.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(576.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1153.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1153.0F, wall1.getLength(), 0.01F);
      assertEquals(1153.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1153.0F, wall1.getXStart(), 0.01F);
      assertNotNull(wall1);
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(integer1, "ARC_EXTENT", "ARC_EXTENT", wall1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getLeftSideColor());
      assertEquals(1153.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1153.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(576.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1153.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1153.0F, wall1.getLength(), 0.01F);
      assertEquals(1153.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1153.0F, wall1.getXStart(), 0.01F);
      assertEquals("ARC_EXTENT", propertyChangeEvent0.getPropertyName());
      assertNotNull(propertyChangeEvent0);
      
      String string0 = propertyChangeEvent0.getPropertyName();
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals("ARC_EXTENT", string0);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1153.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1153.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(576.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1153.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1153.0F, wall1.getLength(), 0.01F);
      assertEquals(1153.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1153.0F, wall1.getXStart(), 0.01F);
      assertEquals("ARC_EXTENT", propertyChangeEvent0.getPropertyName());
      assertNotNull(string0);
      
      String string1 = propertyChangeEvent0.getPropertyName();
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals("ARC_EXTENT", string1);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1153.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1153.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(576.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1153.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1153.0F, wall1.getLength(), 0.01F);
      assertEquals(1153.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1153.0F, wall1.getXStart(), 0.01F);
      assertEquals("ARC_EXTENT", propertyChangeEvent0.getPropertyName());
      assertNotNull(string1);
      
      String string2 = propertyChangeEvent0.getPropertyName();
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals("ARC_EXTENT", string2);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1153.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1153.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(576.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1153.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1153.0F, wall1.getLength(), 0.01F);
      assertEquals(1153.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1153.0F, wall1.getXStart(), 0.01F);
      assertEquals("ARC_EXTENT", propertyChangeEvent0.getPropertyName());
      assertNotNull(string2);
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1153.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1153.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(576.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1153.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1153.0F, wall1.getLength(), 0.01F);
      assertEquals(1153.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1153.0F, wall1.getXStart(), 0.01F);
      assertEquals("ARC_EXTENT", propertyChangeEvent0.getPropertyName());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      propertyChangeListenerProxy0.propertyChange((PropertyChangeEvent) null);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      boolean boolean0 = integer0.equals(object0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(boolean0);
      
      wall0.setLeftSideColor(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(integer0.equals((Object)integer1));
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      wall0.setXEnd((-593.2629F));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(593.2629F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-296.63144F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(593.2629F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-593.2629F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Wall wall0 = new Wall((-22.129295F), 780.7F, 780.7F, (-22.129295F), (-22.129295F));
      assertEquals(780.7F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1135.3721F, wall0.getLength(), 0.01F);
      assertEquals(1135.3721F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(379.28537F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-22.129295F), wall0.getThickness(), 0.01F);
      assertEquals((-22.129295F), wall0.getXStart(), 0.01F);
      assertEquals(379.28537F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-22.129295F), wall0.getYEnd(), 0.01F);
      assertEquals(780.7F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = new Integer(10);
      assertEquals(10, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertEquals(780.7F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1135.3721F, wall0.getLength(), 0.01F);
      assertEquals(1135.3721F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(379.28537F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(10, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-22.129295F), wall0.getThickness(), 0.01F);
      assertEquals((-22.129295F), wall0.getXStart(), 0.01F);
      assertEquals(379.28537F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-22.129295F), wall0.getYEnd(), 0.01F);
      assertEquals(780.7F, wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-1.0791351F), 0.0F, (-1.0791351F));
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      Float float0 = new Float((-3.003345F));
      assertEquals((-3.003345F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, (-2851.1F), 0.0F, (-3.003345F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNotNull(wall1);
      
      Float float1 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-3.003345F), (float)float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.01F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle((-1393.8479F), (-2851.1F), (-1.0791351F), (-2247.7522F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy(":DlBwochr>-Lsco", propertyChangeListener0);
      assertEquals(":DlBwochr>-Lsco", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall1.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertEquals(":DlBwochr>-Lsco", propertyChangeListenerProxy0.getPropertyName());
      
      float float3 = Float.max((-1.0791351F), (-1.0791351F));
      assertEquals((-1.0791351F), float3, 0.01F);
      
      boolean boolean1 = wall0.intersectsRectangle(512.7397F, 0.01F, 0.0F, 512.7397F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(wall0, wall1);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      float float4 = wall0.getXEnd();
      assertEquals(float4, float3, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-1.0791351F), float4, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      Wall wall2 = wall0.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-0.53956753F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall2.getHeight(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.0791351F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0791351F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall2.getXEnd(), 0.01F);
      assertNotNull(wall2);
      
      wall0.setArcExtent(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float4, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-3.003345F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.6243867F, wall0.getLength(), 0.01F);
      assertEquals(0.037356485F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      float[][] floatArray0 = wall2.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(4, floatArray0.length);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-3.003345F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.6243867F, wall0.getLength(), 0.01F);
      assertEquals(0.037356485F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-0.53956753F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall2.getHeight(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.0791351F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.6243867F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.037356485F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.0791351F), wall2.getXEnd(), 0.01F);
      assertNotNull(floatArray0);
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(homeTexture0);
      
      Wall wall3 = wall2.clone();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-3.003345F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.6243867F, wall0.getLength(), 0.01F);
      assertEquals(0.037356485F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-0.53956753F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall2.getHeight(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.0791351F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.6243867F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.037356485F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.0791351F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall3.getArcExtent(), 0.01F);
      assertEquals((-3.003345F), wall3.getHeight(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals(0.037356485F, wall3.getYArcCircleCenter(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(1.0791351F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals((-0.53956753F), wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall3.getThickness(), 0.01F);
      assertEquals(1.6243867F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals((-1.0791351F), wall3.getXEnd(), 0.01F);
      assertNotNull(wall3);
      
      wall3.setHeight(float2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float3, 0.01F);
      assertNotEquals((float)float2, (float)float4, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-3.003345F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.6243867F, wall0.getLength(), 0.01F);
      assertEquals(0.037356485F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-0.53956753F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall2.getHeight(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.0791351F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.6243867F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.037356485F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.0791351F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall3.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals(0.037356485F, wall3.getYArcCircleCenter(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(1.0791351F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals((-0.53956753F), wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall3.getThickness(), 0.01F);
      assertEquals(0.01F, wall3.getHeight(), 0.01F);
      assertEquals(1.6243867F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals((-1.0791351F), wall3.getXEnd(), 0.01F);
      
      wall3.setRightSideShininess(512.7397F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-3.003345F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.6243867F, wall0.getLength(), 0.01F);
      assertEquals(0.037356485F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-0.53956753F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall2.getHeight(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.0791351F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.6243867F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.037356485F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.0791351F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall3.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals(0.037356485F, wall3.getYArcCircleCenter(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(1.0791351F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals((-0.53956753F), wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall3.getThickness(), 0.01F);
      assertEquals(0.01F, wall3.getHeight(), 0.01F);
      assertEquals(1.6243867F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals(512.7397F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall3.getXEnd(), 0.01F);
      
      float float5 = wall2.getLength();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertEquals(1.6243867F, float5, 0.01F);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-3.003345F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.6243867F, wall0.getLength(), 0.01F);
      assertEquals(0.037356485F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-0.53956753F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall2.getHeight(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.0791351F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.6243867F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.037356485F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.0791351F), wall2.getXEnd(), 0.01F);
      
      HomeTexture homeTexture1 = wall1.getLeftSideTexture();
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(homeTexture1);
      
      int int0 = Float.floatToIntBits((-1917.262F));
      assertEquals((-990926750), int0);
      
      wall2.setArcExtent((Float) (-1917.262F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2402.1184F, wall0.getLength(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1917.262F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(1.1307521F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertEquals((-1917.262F), wall2.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-0.53956753F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall2.getHeight(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.0791351F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2402.1184F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.1307521F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.0791351F), wall2.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Wall wall0 = new Wall((-1326.29F), 0.0F, 0.0F, (-1326.29F), 0.0F, (-1326.29F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-663.145F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1326.29F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1326.29F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1326.29F), wall0.getXStart(), 0.01F);
      assertEquals((-663.145F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1875.6573F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1875.6573F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((-1326.29F));
      assertEquals((-1326.29F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1326.29F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1326.29F), wall0.getYEnd(), 0.01F);
      assertEquals((-3068.9026F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1326.29F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3068.9026F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1326.29F), wall0.getXStart(), 0.01F);
      assertEquals(4680669.0F, wall0.getLength(), 0.01F);
      assertEquals(1875.6573F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4330, floatArray0.length);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1326.29F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1326.29F), wall0.getYEnd(), 0.01F);
      assertEquals((-3068.9026F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1326.29F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3068.9026F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1326.29F), wall0.getXStart(), 0.01F);
      assertEquals(4680669.0F, wall0.getLength(), 0.01F);
      assertEquals(1875.6573F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Wall wall0 = new Wall(1229.0F, 1229.0F, 1229.0F, 296.363F, 1913.933F, 296.363F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1229.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(932.63696F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(296.363F, wall0.getHeight(), 0.01F);
      assertEquals(762.6815F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1229.0F, wall0.getXEnd(), 0.01F);
      assertEquals(932.63696F, wall0.getLength(), 0.01F);
      assertEquals(296.363F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1229.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1229.0F, wall0.getYStart(), 0.01F);
      assertEquals(1913.933F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1229.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(932.63696F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(296.363F, wall0.getHeight(), 0.01F);
      assertEquals(762.6815F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1229.0F, wall0.getXEnd(), 0.01F);
      assertEquals(932.63696F, wall0.getLength(), 0.01F);
      assertEquals(296.363F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1229.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1229.0F, wall0.getYStart(), 0.01F);
      assertEquals(1913.933F, wall0.getThickness(), 0.01F);
      assertEquals(762.6815F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1229.0F, wall1.getXEnd(), 0.01F);
      assertEquals(932.63696F, wall1.getLength(), 0.01F);
      assertEquals(1913.933F, wall1.getThickness(), 0.01F);
      assertEquals(1229.0F, wall1.getYStart(), 0.01F);
      assertEquals(296.363F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1229.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(296.363F, wall1.getYEnd(), 0.01F);
      assertEquals(1229.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(932.63696F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertNotNull(wall1);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1229.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(932.63696F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(296.363F, wall0.getHeight(), 0.01F);
      assertEquals(762.6815F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1229.0F, wall0.getXEnd(), 0.01F);
      assertEquals(932.63696F, wall0.getLength(), 0.01F);
      assertEquals(296.363F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1229.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1229.0F, wall0.getYStart(), 0.01F);
      assertEquals(1913.933F, wall0.getThickness(), 0.01F);
      
      int int0 = Float.floatToIntBits(1913.933F);
      assertEquals(1156529627, int0);
      
      Float float0 = new Float(296.363F);
      assertEquals(296.363F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf((float) 1156529627);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.15652966E9F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      float float2 = (-953.0F);
      int int1 = Float.compare((-953.0F), (-953.0F));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = Float.compare((-2298.1997F), (-132.13783F));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      float float3 = ((Float)(-132.13783F)).floatValue();
      assertNotEquals(float3, float2, 0.01F);
      assertEquals((-132.13783F), float3, 0.01F);
      
      wall1.setArcExtent(float1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float3, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1229.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(932.63696F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(296.363F, wall0.getHeight(), 0.01F);
      assertEquals(762.6815F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1229.0F, wall0.getXEnd(), 0.01F);
      assertEquals(932.63696F, wall0.getLength(), 0.01F);
      assertEquals(296.363F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1229.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1229.0F, wall0.getYStart(), 0.01F);
      assertEquals(1913.933F, wall0.getThickness(), 0.01F);
      assertEquals(762.6815F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.15652966E9F, wall1.getArcExtent(), 0.01F);
      assertEquals(1229.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1913.933F, wall1.getThickness(), 0.01F);
      assertEquals(1229.0F, wall1.getYStart(), 0.01F);
      assertEquals(296.363F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1229.0F, wall1.getXStart(), 0.01F);
      assertEquals(253.90228F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.25005215E12F, wall1.getLength(), 0.01F);
      assertEquals(296.363F, wall1.getYEnd(), 0.01F);
      assertEquals(932.63696F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      
      float float4 = (-1772.7F);
      float float5 = 0.0F;
      // Undeclared exception!
      wall1.containsWallEndAt(float4, float2, float5);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setXEnd(0.0F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      wall0.move(0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      float float0 = wall0.getXEnd();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Wall wall0 = new Wall(3904.6F, (-1023.02F), (-830.6896F), (-830.6896F), (-1023.02F), (-2170.124F));
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4739.194F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4739.194F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-830.6896F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1023.02F), wall0.getThickness(), 0.01F);
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertEquals((-926.8548F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYEnd(2110.9646F);
      assertEquals(543.9723F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(5678.453F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1023.02F), wall0.getThickness(), 0.01F);
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      
      wall0.setThickness(0.0F);
      assertEquals(543.9723F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(5678.453F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone(list0);
      assertTrue(list1.equals((Object)list0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      Level level0 = new Level((String) null, (-1413.0F), (-1601.39F), 0.0F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      assertNull(level1.getName());
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertNotNull(level1);
      
      level1.setName((String) null);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      assertNull(level1.getName());
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      
      wall0.setLevel(level1);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(543.9723F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(5678.453F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      assertNull(level1.getName());
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      
      Float float0 = new Float(1.0E-10);
      assertEquals(1.0E-10F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Integer integer0 = new Integer(2928);
      assertEquals(2928, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = float0.equals(integer0);
      assertFalse(boolean0);
      
      wall0.setArcExtent(float0);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0E-10F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5678.4453F, wall0.getLength(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals((-3.13398059E13F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertEquals((-4.7352832E13F), wall0.getYArcCircleCenter(), 0.01F);
      
      float float1 = wall0.getXStart();
      assertEquals(3904.6F, float1, 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0E-10F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5678.4453F, wall0.getLength(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals((-3.13398059E13F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertEquals((-4.7352832E13F), wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setArcExtent(float0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0E-10F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5678.4453F, wall0.getLength(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals((-3.13398059E13F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertEquals((-4.7352832E13F), wall0.getYArcCircleCenter(), 0.01F);
      
      float float2 = wall0.getXArcCircleCenter();
      assertNotEquals(float2, float1, 0.01F);
      assertEquals((-3.13398059E13F), float2, 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0E-10F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5678.4453F, wall0.getLength(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals((-3.13398059E13F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertEquals((-4.7352832E13F), wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 0.01F, 0.01F, 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      wall0.setXEnd(1757.7546F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(1757.7446F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(1757.7546F, wall0.getXEnd(), 0.01F);
      assertEquals(1757.7446F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(878.8823F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float0 = new Float(1757.7546F);
      assertEquals(1757.7546F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(1757.7446F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(1757.7546F, wall0.getXEnd(), 0.01F);
      assertEquals(1757.7446F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(878.8823F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Wall wall0 = new Wall((-1698.0676F), 3481.1F, (-1698.0676F), 3481.1F, (-1698.0676F), 3481.1F);
      assertEquals((-1698.0676F), wall0.getThickness(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.intersectsRectangle((-1698.0676F), (-1698.0676F), (-1698.0676F), (-1698.0676F));
      assertFalse(boolean0);
      assertEquals((-1698.0676F), wall0.getThickness(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXArcCircleCenter(), 0.01F);
      
      Level level0 = wall0.getLevel();
      assertEquals((-1698.0676F), wall0.getThickness(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(level0);
      
      wall0.setLevel((Level) null);
      assertEquals((-1698.0676F), wall0.getThickness(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXArcCircleCenter(), 0.01F);
      
      boolean boolean1 = wall0.isAtLevel((Level) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals((-1698.0676F), wall0.getThickness(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXArcCircleCenter(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals((-1698.0676F), wall0.getThickness(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Wall wall0 = new Wall((-1739.4F), (-1739.4F), 0.0F, 0.0F, (-625.596F));
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(float0);
      
      Float float1 = new Float((-2851.1F));
      assertEquals((-2851.1F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight(float1);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNotNull(wall1);
      
      float float2 = wall1.getRightSideShininess();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      
      boolean boolean0 = wall1.isTrapezoidal();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-1.0791351F), 0.0F, (-1.0791351F));
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, (-2851.1F), 0.0F, 0.0F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2851.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1425.55F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2851.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotNull(wall1);
      
      Float float1 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.01F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2851.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1425.55F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2851.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      boolean boolean0 = wall0.intersectsRectangle(512.7397F, 0.01F, 0.0F, 2.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      float float3 = wall0.getXEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-1.0791351F), float3, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      Wall wall2 = wall0.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-0.53956753F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(1.0791351F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1.0791351F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall2);
      
      float float4 = wall0.getYArcCircleCenter();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float4, float3, 0.01F);
      assertEquals(0.0F, float4, 0.01F);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      wall0.setArcExtent(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float0, (float)float4, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-8.8118067E15F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      float[][] floatArray0 = wall2.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(4, floatArray0.length);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-8.8118067E15F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1.0791351F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(1.0791351F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-8.8118067E15F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1.0791351F), wall2.getXEnd(), 0.01F);
      assertNotNull(floatArray0);
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(2851.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1425.55F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2851.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(homeTexture0);
      
      Wall wall3 = wall2.clone();
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getHeight(), 0.01F);
      assertEquals((-1.0791351F), wall3.getXEnd(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals((-8.8118067E15F), wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals(1.0791351F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0791351F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals(1.0791351F, wall3.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall3.getThickness(), 0.01F);
      assertEquals(0.0F, wall3.getArcExtent(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-8.8118067E15F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1.0791351F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(1.0791351F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-8.8118067E15F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1.0791351F), wall2.getXEnd(), 0.01F);
      assertNotNull(wall3);
      
      wall3.setRightSideShininess(512.7397F);
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall3.getHeight(), 0.01F);
      assertEquals((-1.0791351F), wall3.getXEnd(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals((-8.8118067E15F), wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals(1.0791351F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0791351F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals(1.0791351F, wall3.getLength(), 0.01F);
      assertEquals(512.7397F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall3.getThickness(), 0.01F);
      assertEquals(0.0F, wall3.getArcExtent(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-8.8118067E15F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1.0791351F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(1.0791351F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-8.8118067E15F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1.0791351F), wall2.getXEnd(), 0.01F);
      
      float float5 = wall2.getLength();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(1.0791351F, float5, 0.01F);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-8.8118067E15F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1.0791351F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(1.0791351F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-8.8118067E15F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1.0791351F), wall2.getXEnd(), 0.01F);
      
      HomeTexture homeTexture1 = wall1.getLeftSideTexture();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall2));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall2);
      assertEquals(2851.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1425.55F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2851.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(homeTexture1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Wall wall0 = new Wall((-1698.0676F), 3481.1F, (-1698.0676F), 3481.1F, (-1698.0676F), 3481.1F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1698.0676F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-1698.0676F), wall0.getThickness(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallStartAt((-1698.0676F), 3481.1F, (-1698.0676F));
      assertFalse(boolean0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1698.0676F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-1698.0676F), wall0.getThickness(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Level level0 = new Level((String) null, 3481.1F, (-1698.0676F), 3481.1F);
      assertEquals((-1698.0676F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(3481.1F, level0.getHeight(), 0.01F);
      assertEquals(3481.1F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      wall0.setLevel(level0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1698.0676F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-1698.0676F), wall0.getThickness(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1698.0676F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(3481.1F, level0.getHeight(), 0.01F);
      assertEquals(3481.1F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals((-1698.0676F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(3481.1F, level0.getHeight(), 0.01F);
      assertEquals(3481.1F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertNull(level1.getName());
      assertEquals(3481.1F, level1.getElevation(), 0.01F);
      assertEquals(3481.1F, level1.getHeight(), 0.01F);
      assertEquals((-1698.0676F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertNotNull(level1);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1698.0676F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-1698.0676F), wall0.getThickness(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Wall wall0 = new Wall(48.392612F, 48.392612F, 48.392612F, 48.392612F, 48.392612F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(48.392612F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(48.392612F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(48.392612F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(48.392612F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(48.392612F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(48.392612F, wall0.getXStart(), 0.01F);
      assertEquals(48.392612F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(48.392612F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(48.392612F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(48.392612F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(48.392612F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(48.392612F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(48.392612F, wall0.getXStart(), 0.01F);
      assertEquals(48.392612F, wall0.getYArcCircleCenter(), 0.01F);
      
      Level level0 = wall0.getLevel();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(48.392612F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(48.392612F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(48.392612F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(48.392612F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(48.392612F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(48.392612F, wall0.getXStart(), 0.01F);
      assertEquals(48.392612F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(level0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Wall wall0 = new Wall(0.2215297F, 0.2215297F, 0.2215297F, 0.2215297F, 0.2215297F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.2215297F, wall0.getXEnd(), 0.01F);
      assertEquals(0.2215297F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.2215297F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.2215297F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2215297F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.2215297F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtEnd(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.2215297F, wall0.getXEnd(), 0.01F);
      assertEquals(0.2215297F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.2215297F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.2215297F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2215297F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.2215297F, wall0.getXArcCircleCenter(), 0.01F);
      
      Wall wall1 = new Wall((-6.4098854F), (-6.4098854F), 0.2215297F, (-6.4098854F), (-6.4098854F), 0.2215297F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.2215297F, wall1.getHeight(), 0.01F);
      assertEquals(6.631415F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(6.631415F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-3.094178F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-6.4098854F), wall1.getYStart(), 0.01F);
      assertEquals((-6.4098854F), wall1.getXStart(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall1.getXEnd(), 0.01F);
      assertEquals((-6.4098854F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotNull(wall1);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.2215297F, wall0.getXEnd(), 0.01F);
      assertEquals(0.2215297F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.2215297F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.2215297F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2215297F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.2215297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.2215297F, wall1.getHeight(), 0.01F);
      assertEquals(6.631415F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(6.631415F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-3.094178F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-6.4098854F), wall1.getYStart(), 0.01F);
      assertEquals((-6.4098854F), wall1.getXStart(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall1.getXEnd(), 0.01F);
      assertEquals((-6.4098854F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.2215297F, wall0.getXEnd(), 0.01F);
      assertEquals(0.2215297F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.2215297F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.2215297F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2215297F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.2215297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.2215297F, wall1.getHeight(), 0.01F);
      assertEquals(6.631415F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(6.631415F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-3.094178F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-6.4098854F), wall1.getYStart(), 0.01F);
      assertEquals((-6.4098854F), wall1.getXStart(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall1.getXEnd(), 0.01F);
      assertEquals((-6.4098854F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.2215297F, wall0.getXEnd(), 0.01F);
      assertEquals(0.2215297F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.2215297F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.2215297F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2215297F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.2215297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.2215297F, wall1.getHeight(), 0.01F);
      assertEquals(6.631415F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(6.631415F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-3.094178F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-6.4098854F), wall1.getYStart(), 0.01F);
      assertEquals((-6.4098854F), wall1.getXStart(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall1.getXEnd(), 0.01F);
      assertEquals((-6.4098854F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.2215297F, wall0.getXEnd(), 0.01F);
      assertEquals(0.2215297F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.2215297F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.2215297F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2215297F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.2215297F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(float0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      Float float1 = new Float((-2851.1F));
      assertEquals((-2851.1F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      float float2 = Float.sum((-2851.1F), (-304.348F));
      assertEquals((-3155.448F), float2, 0.01F);
      
      boolean boolean0 = integer0.equals((Object) null);
      assertFalse(boolean0);
      
      float float3 = Float.sum(3471.7107F, 0.0F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(3471.7107F, float3, 0.01F);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      wall0.setHeight(float1);
      assertNotEquals((float)float1, (float)float3, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      boolean boolean1 = wall0.intersectsRectangle(0.0F, 0.0F, 0.01F, 0.0F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      wall0.move(0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      wall0.setArcExtent((Float) null);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      Wall wall1 = wall0.getWallAtStart();
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0, (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotNull(wall1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Wall wall0 = new Wall((-1739.4F), (-1739.4F), 0.0F, 0.0F, (-625.596F));
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Float float0 = new Float((-2851.1F));
      assertEquals((-2851.1F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotNull(wall1);
      
      wall1.setYEnd(878.5F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-430.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals(878.5F, wall1.getYEnd(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3143.0737F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3143.0737F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      float float1 = wall0.getStartPointToEndPointDistance();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(2459.883F, float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall1.move(0.0F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-430.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals(878.5F, wall1.getYEnd(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3143.0737F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3143.0737F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setHeight((Float) null);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Wall wall0 = new Wall(48.392612F, 48.392612F, 48.392612F, 48.392612F, 48.392612F);
      assertEquals(48.392612F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(48.392612F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(48.392612F, wall0.getYEnd(), 0.01F);
      assertEquals(48.392612F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(48.392612F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(48.392612F, wall0.getYStart(), 0.01F);
      assertEquals(48.392612F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(48.392612F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(48.392612F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(48.392612F, wall0.getYEnd(), 0.01F);
      assertEquals(48.392612F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(48.392612F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(48.392612F, wall0.getYStart(), 0.01F);
      assertEquals(48.392612F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      Float float0 = wall0.getHeight();
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(float0);
      
      Float float1 = new Float((-2851.1F));
      assertEquals((-2851.1F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = integer0.equals((Object) null);
      assertFalse(boolean0);
      
      wall0.setLeftSideColor(integer0);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      wall0.setHeight(float1);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      boolean boolean1 = wall0.intersectsRectangle(0.0F, 0.0F, 0.01F, 0.0F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      wall0.move(0.0F, 0.0F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      float float2 = wall0.getXEnd();
      assertEquals(0.0F, float2, 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      float float3 = wall0.getXStart();
      assertEquals(float3, float2, 0.01F);
      assertEquals(0.0F, float3, 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      Wall wall1 = wall0.getWallAtEnd();
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Wall wall0 = new Wall(48.392612F, 48.392612F, 48.392612F, 48.392612F, 48.392612F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(48.392612F, wall0.getXEnd(), 0.01F);
      assertEquals(48.392612F, wall0.getThickness(), 0.01F);
      assertEquals(48.392612F, wall0.getYStart(), 0.01F);
      assertEquals(48.392612F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(48.392612F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(48.392612F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(48.392612F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      wall0.setWallAtStart((Wall) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(48.392612F, wall0.getXEnd(), 0.01F);
      assertEquals(48.392612F, wall0.getThickness(), 0.01F);
      assertEquals(48.392612F, wall0.getYStart(), 0.01F);
      assertEquals(48.392612F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(48.392612F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(48.392612F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(48.392612F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      wall0.setYEnd((-2145.231F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(48.392612F, wall0.getXEnd(), 0.01F);
      assertEquals(48.392612F, wall0.getThickness(), 0.01F);
      assertEquals(48.392612F, wall0.getYStart(), 0.01F);
      assertEquals(2193.6235F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2145.231F), wall0.getYEnd(), 0.01F);
      assertEquals(2193.6235F, wall0.getLength(), 0.01F);
      assertEquals(48.392612F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1048.4192F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(48.392612F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      wall0.setWallAtEnd((Wall) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(48.392612F, wall0.getXEnd(), 0.01F);
      assertEquals(48.392612F, wall0.getThickness(), 0.01F);
      assertEquals(48.392612F, wall0.getYStart(), 0.01F);
      assertEquals(2193.6235F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2145.231F), wall0.getYEnd(), 0.01F);
      assertEquals(2193.6235F, wall0.getLength(), 0.01F);
      assertEquals(48.392612F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1048.4192F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(48.392612F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(48.392612F, wall0.getXEnd(), 0.01F);
      assertEquals(48.392612F, wall0.getThickness(), 0.01F);
      assertEquals(48.392612F, wall0.getYStart(), 0.01F);
      assertEquals(2193.6235F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2145.231F), wall0.getYEnd(), 0.01F);
      assertEquals(2193.6235F, wall0.getLength(), 0.01F);
      assertEquals(48.392612F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1048.4192F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(48.392612F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Wall wall0 = new Wall((-1698.0676F), 3481.1F, (-1698.0676F), 3481.1F, (-1698.0676F), 3481.1F);
      assertEquals((-1698.0676F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1698.0676F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXStart(), 0.01F);
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.intersectsRectangle((-1698.0676F), (-1698.0676F), (-1698.0676F), (-1698.0676F));
      assertFalse(boolean0);
      assertEquals((-1698.0676F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1698.0676F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXStart(), 0.01F);
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      Float float0 = new Float(0.1F);
      assertEquals(0.1F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = float0.equals(".tmp");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      wall0.setHeightAtEnd(float0);
      assertEquals((-1698.0676F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1698.0676F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXStart(), 0.01F);
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      Level level0 = new Level((String) null, 3481.1F, (-1698.0676F), 3481.1F);
      assertTrue(level0.isVisible());
      assertEquals((-1698.0676F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(3481.1F, level0.getElevation(), 0.01F);
      assertEquals(3481.1F, level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      wall0.setLevel(level0);
      assertEquals((-1698.0676F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1698.0676F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXStart(), 0.01F);
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1698.0676F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(3481.1F, level0.getElevation(), 0.01F);
      assertEquals(3481.1F, level0.getHeight(), 0.01F);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertTrue(level0.isVisible());
      assertEquals((-1698.0676F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(3481.1F, level0.getElevation(), 0.01F);
      assertEquals(3481.1F, level0.getHeight(), 0.01F);
      assertEquals(3481.1F, level1.getElevation(), 0.01F);
      assertNull(level1.getName());
      assertEquals((-1698.0676F), level1.getFloorThickness(), 0.01F);
      assertEquals(3481.1F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertNotNull(level1);
      
      boolean boolean2 = wall0.isAtLevel(level1);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals((-1698.0676F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1698.0676F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXStart(), 0.01F);
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1698.0676F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(3481.1F, level0.getElevation(), 0.01F);
      assertEquals(3481.1F, level0.getHeight(), 0.01F);
      assertEquals(3481.1F, level1.getElevation(), 0.01F);
      assertNull(level1.getName());
      assertEquals((-1698.0676F), level1.getFloorThickness(), 0.01F);
      assertEquals(3481.1F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals((-1698.0676F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1698.0676F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXStart(), 0.01F);
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(floatArray0);
      
      boolean boolean3 = wall0.isTrapezoidal();
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertEquals((-1698.0676F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1698.0676F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXStart(), 0.01F);
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      boolean boolean4 = wall0.isTrapezoidal();
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4);
      assertEquals((-1698.0676F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1698.0676F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXStart(), 0.01F);
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Wall wall0 = new Wall((-2145.231F), 3904.6F, 3904.6F, (-2145.231F), (-2145.231F));
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2145.231F), wall0.getThickness(), 0.01F);
      assertEquals((-2145.231F), wall0.getXStart(), 0.01F);
      assertEquals(3904.6F, wall0.getYStart(), 0.01F);
      assertEquals(8555.753F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(879.6846F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3904.6F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(8555.753F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2145.231F), wall0.getYEnd(), 0.01F);
      assertEquals(879.6846F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYEnd(1106.68F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2145.231F), wall0.getThickness(), 0.01F);
      assertEquals((-2145.231F), wall0.getXStart(), 0.01F);
      assertEquals(3904.6F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2505.6401F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3904.6F, wall0.getXEnd(), 0.01F);
      assertEquals(6665.494F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1106.68F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(879.6846F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(6665.494F, wall0.getLength(), 0.01F);
      
      Float float0 = new Float((double) 3904.6F);
      assertEquals(3904.6F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertNull(wall0.getHeight());
      assertEquals(1.3277137E7F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(3118.145F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2145.231F), wall0.getThickness(), 0.01F);
      assertEquals((-2145.231F), wall0.getXStart(), 0.01F);
      assertEquals(3904.6F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3904.6F, wall0.getArcExtent(), 0.01F);
      assertEquals(3904.6F, wall0.getXEnd(), 0.01F);
      assertEquals(6665.494F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1106.68F, wall0.getYEnd(), 0.01F);
      assertEquals(1162.9552F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(6032, floatArray0.length);
      assertNull(wall0.getHeight());
      assertEquals(1.3277137E7F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(3118.145F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2145.231F), wall0.getThickness(), 0.01F);
      assertEquals((-2145.231F), wall0.getXStart(), 0.01F);
      assertEquals(3904.6F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3904.6F, wall0.getArcExtent(), 0.01F);
      assertEquals(3904.6F, wall0.getXEnd(), 0.01F);
      assertEquals(6665.494F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1106.68F, wall0.getYEnd(), 0.01F);
      assertEquals(1162.9552F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(floatArray0);
      
      // Undeclared exception!
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 1490.0F, (-1.0F), 1490.0F, (-1.4276036F));
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.1F, wall0.getLength(), 0.01F);
      assertEquals(1490.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1490.0F, wall0.getYStart(), 0.01F);
      assertEquals(1490.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.45F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.4276036F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getYStart();
      assertEquals(1490.0F, float0, 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.1F, wall0.getLength(), 0.01F);
      assertEquals(1490.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1490.0F, wall0.getYStart(), 0.01F);
      assertEquals(1490.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.45F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.4276036F), wall0.getThickness(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.1F, wall0.getLength(), 0.01F);
      assertEquals(1490.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1490.0F, wall0.getYStart(), 0.01F);
      assertEquals(1490.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.45F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.4276036F), wall0.getThickness(), 0.01F);
      assertEquals((-0.45F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1490.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1490.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.4276036F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1.1F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1490.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotNull(wall1);
      
      Integer integer0 = Integer.valueOf(12);
      assertEquals(12, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(12);
      assertEquals(12, (int)integer1);
      assertNotNull(integer1);
      
      Level level0 = new Level("", 3636.889F, 3636.889F, 3636.889F);
      assertEquals(3636.889F, level0.getElevation(), 0.01F);
      assertEquals(3636.889F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(3636.889F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      wall0.setLevel(level0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.1F, wall0.getLength(), 0.01F);
      assertEquals(1490.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1490.0F, wall0.getYStart(), 0.01F);
      assertEquals(1490.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.45F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.4276036F), wall0.getThickness(), 0.01F);
      assertEquals(3636.889F, level0.getElevation(), 0.01F);
      assertEquals(3636.889F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(3636.889F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(3636.889F, level0.getElevation(), 0.01F);
      assertEquals(3636.889F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(3636.889F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(3636.889F, level1.getElevation(), 0.01F);
      assertEquals(3636.889F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(3636.889F, level1.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertNotNull(level1);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("1", propertyChangeListener0);
      assertEquals("1", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      level0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level1);
      assertEquals(3636.889F, level0.getElevation(), 0.01F);
      assertEquals(3636.889F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(3636.889F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("1", propertyChangeListenerProxy0.getPropertyName());
      
      level0.setBackgroundImage((BackgroundImage) null);
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level1);
      assertEquals(3636.889F, level0.getElevation(), 0.01F);
      assertEquals(3636.889F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(3636.889F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      
      float float1 = wall1.getXArcCircleCenter();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-0.45F), float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.1F, wall0.getLength(), 0.01F);
      assertEquals(1490.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1490.0F, wall0.getYStart(), 0.01F);
      assertEquals(1490.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.45F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.4276036F), wall0.getThickness(), 0.01F);
      assertEquals((-0.45F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1490.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1490.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.4276036F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1.1F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1490.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      boolean boolean0 = wall1.isTrapezoidal();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.1F, wall0.getLength(), 0.01F);
      assertEquals(1490.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1490.0F, wall0.getYStart(), 0.01F);
      assertEquals(1490.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.45F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.4276036F), wall0.getThickness(), 0.01F);
      assertEquals((-0.45F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1490.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1490.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.4276036F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1.1F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1490.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      wall1.setRightSideColor(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.1F, wall0.getLength(), 0.01F);
      assertEquals(1490.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1490.0F, wall0.getYStart(), 0.01F);
      assertEquals(1490.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.45F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.4276036F), wall0.getThickness(), 0.01F);
      assertEquals((-0.45F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1490.0F, wall1.getYStart(), 0.01F);
      assertEquals(12, (int)wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1490.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.4276036F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1.1F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(1490.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall wall1 = new Wall((-1739.4F), (-1739.4F), 0.0F, 0.0F, (-625.596F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(wall1);
      
      Float float0 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(float0);
      
      Float float1 = new Float((-2851.1F));
      assertEquals((-2851.1F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall1, wall0);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(floatArray0);
      
      wall1.setHeight(float1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      Wall wall2 = new Wall((-1739.4F), (-1739.4F), 0.0F, 0.0F, (-625.596F));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-869.7F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertEquals(2459.883F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2459.883F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-625.596F), wall2.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall2.getYStart(), 0.01F);
      assertEquals((-869.7F), wall2.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall2);
      
      Float float2 = wall2.getHeight();
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-869.7F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertEquals(2459.883F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2459.883F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-625.596F), wall2.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall2.getYStart(), 0.01F);
      assertEquals((-869.7F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(float2);
      
      Float float3 = new Float((-2851.1F));
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((-2851.1F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall2.setHeight(float3);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-869.7F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2459.883F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2459.883F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-625.596F), wall2.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall2.getYStart(), 0.01F);
      assertEquals((-869.7F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall2.getHeight(), 0.01F);
      
      wall0.setWallAtStart(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-869.7F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2459.883F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2459.883F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-625.596F), wall2.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall2.getYStart(), 0.01F);
      assertEquals((-869.7F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall2.getHeight(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 0.0F, 0.01F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.move(0.0F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float float4 = wall0.getXEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals(0.0F, float4, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float float5 = wall0.getXStart();
      assertEquals(float5, float4, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals(0.0F, float5, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall wall3 = wall0.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall3, wall0);
      assertSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals((-869.7F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall3.getThickness(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-869.7F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(2459.883F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals((-2851.1F), wall3.getHeight(), 0.01F);
      assertEquals((-1739.4F), wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall3.getXStart(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(2459.883F, wall3.getLength(), 0.01F);
      assertNotNull(wall3);
      
      float float6 = wall0.getYArcCircleCenter();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals(float6, float5, 0.01F);
      assertEquals(float6, float4, 0.01F);
      assertEquals(0.0F, float6, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setRightSideShininess(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 3602.0F, 1.0F, 1.0F, 3602.0F);
      assertEquals(3602.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3601.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3601.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3602.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1801.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("J\"B2", propertyChangeListener0);
      assertEquals("J\"B2", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      Integer integer0 = new Integer(1153);
      assertEquals(1153, (int)integer0);
      assertNotNull(integer0);
      
      Wall wall1 = new Wall(1153, 1153, 1153, 0.0F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1153.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1153.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1153.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(576.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1153.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1153.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1153.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNotNull(wall1);
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(integer0, "ARC_EXTENT", "ARC_EXTENT", wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1153.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1153.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1153.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(576.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1153.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1153.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1153.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals("ARC_EXTENT", propertyChangeEvent0.getPropertyName());
      assertNotNull(propertyChangeEvent0);
      
      String string0 = propertyChangeEvent0.getPropertyName();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals("ARC_EXTENT", string0);
      assertNotSame(wall1, wall0);
      assertEquals(1153.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1153.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1153.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(576.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1153.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1153.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1153.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals("ARC_EXTENT", propertyChangeEvent0.getPropertyName());
      assertNotNull(string0);
      
      String string1 = propertyChangeEvent0.getPropertyName();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals("ARC_EXTENT", string1);
      assertNotSame(wall1, wall0);
      assertEquals(1153.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1153.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1153.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(576.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1153.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1153.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1153.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals("ARC_EXTENT", propertyChangeEvent0.getPropertyName());
      assertNotNull(string1);
      
      String string2 = propertyChangeEvent0.getPropertyName();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals("ARC_EXTENT", string2);
      assertNotSame(wall1, wall0);
      assertEquals(1153.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1153.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1153.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(576.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1153.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1153.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1153.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals("ARC_EXTENT", propertyChangeEvent0.getPropertyName());
      assertNotNull(string2);
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals("J\"B2", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(1153.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1153.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1153.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(576.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1153.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1153.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1153.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals("ARC_EXTENT", propertyChangeEvent0.getPropertyName());
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(3602.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3601.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3601.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3602.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1801.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals("J\"B2", propertyChangeListenerProxy0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Wall wall0 = new Wall((-0.3789827F), 0.0F, 0.0F, (-0.3789827F), 0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-0.3789827F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.18949135F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.53596246F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-0.3789827F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.53596246F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.18949135F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.1F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotNull(wall1);
      
      Float float0 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-0.3789827F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.18949135F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.53596246F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-0.3789827F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.53596246F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.18949135F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(float0);
      
      Float float1 = new Float(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(0.0F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = float2.equals(integer0);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(boolean0);
      
      wall1.setHeight(float2);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-0.3789827F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.18949135F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.53596246F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-0.3789827F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.53596246F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.18949135F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      
      Float float3 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotNull(float3);
      
      wall1.setHeight((Float) null);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-0.3789827F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.18949135F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.53596246F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-0.3789827F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.53596246F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.18949135F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      
      boolean boolean1 = wall0.intersectsRectangle(629.463F, (-2337.433F), (-3753.2F), (-2851.1F));
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-0.3789827F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.18949135F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.53596246F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-0.3789827F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.53596246F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.18949135F), wall0.getYArcCircleCenter(), 0.01F);
      
      wall1.move((-1277.6556F), (-1277.6556F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1277.6556F), wall1.getXStart(), 0.01F);
      assertEquals((-1277.6556F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1277.6556F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1277.6556F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1277.6556F), wall1.getYStart(), 0.01F);
      assertEquals((-1277.6556F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      
      float float4 = wall0.getXEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, float4, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-0.3789827F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.18949135F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.53596246F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-0.3789827F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.53596246F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.18949135F), wall0.getYArcCircleCenter(), 0.01F);
      
      float float5 = wall1.getXStart();
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float5, float4, 0.01F);
      assertEquals((-1277.6556F), float5, 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1277.6556F), wall1.getXStart(), 0.01F);
      assertEquals((-1277.6556F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1277.6556F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1277.6556F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1277.6556F), wall1.getYStart(), 0.01F);
      assertEquals((-1277.6556F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      
      float float6 = wall0.getYArcCircleCenter();
      assertNotEquals(float6, float5, 0.01F);
      assertNotEquals(float6, float4, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-0.18949135F), float6, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-0.3789827F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.18949135F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.53596246F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-0.3789827F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.53596246F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.18949135F), wall0.getYArcCircleCenter(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-0.3789827F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.18949135F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.53596246F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-0.3789827F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.53596246F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.18949135F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Wall wall0 = new Wall(48.392612F, 48.392612F, 48.392612F, 48.392612F, 48.392612F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(48.392612F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(48.392612F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(48.392612F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(48.392612F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(48.392612F, wall0.getXStart(), 0.01F);
      assertEquals(48.392612F, wall0.getThickness(), 0.01F);
      assertEquals(48.392612F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(48.392612F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(48.392612F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(48.392612F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(48.392612F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(48.392612F, wall0.getXStart(), 0.01F);
      assertEquals(48.392612F, wall0.getThickness(), 0.01F);
      assertEquals(48.392612F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(float0);
      
      wall0.setHeight((Float) null);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(48.392612F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(48.392612F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(48.392612F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(48.392612F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(48.392612F, wall0.getXStart(), 0.01F);
      assertEquals(48.392612F, wall0.getThickness(), 0.01F);
      assertEquals(48.392612F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Wall wall0 = new Wall((-1739.4F), (-1.0F), 3481.1F, 2015.25F, (-1.0F));
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1007.125F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(5596.3276F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5596.3276F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsPoint(3481.1F, (-2311.0F), (-1.0F));
      assertFalse(boolean0);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1007.125F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(5596.3276F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5596.3276F, wall0.getLength(), 0.01F);
      
      wall0.setYStart(0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1007.625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5595.968F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5595.968F, wall0.getLength(), 0.01F);
      
      Level level0 = new Level((String) null, (-1413.0F), (-1601.39F), 0.0F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      assertNotNull(level0);
      
      wall0.setLevel(level0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1007.625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5595.968F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5595.968F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      assertNull(level1.getName());
      assertNotNull(level1);
      
      level1.setFloorThickness((-1601.39F));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      assertNull(level1.getName());
      
      boolean boolean1 = wall0.isAtLevel(level1);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1007.625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5595.968F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5595.968F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      assertNull(level1.getName());
      
      wall0.setArcExtent((Float) null);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1007.625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5595.968F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5595.968F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 362.4303F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(362.4303F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setLeftSideShininess(1.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(362.4303F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(362.4303F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1, linkedList0.size());
      
      Stream<Wall> stream0 = linkedList0.stream();
      assertTrue(linkedList0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertNotNull(stream0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Integer integer0 = Integer.valueOf(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(362.4303F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0, (int)wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      float float0 = wall0.getThickness();
      assertEquals(362.4303F, float0, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(362.4303F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0, (int)wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Wall wall0 = new Wall((-2837.1267F), (-1.0F), Float.POSITIVE_INFINITY, (-2837.1267F), (-1.0F), 303.0555F);
      assertEquals((-1419.0634F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(303.0555F, wall0.getHeight(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2837.1267F), wall0.getYEnd(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getXEnd(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2837.1267F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall((-1739.4F), (-1739.4F), 0.0F, 0.0F, (-625.596F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(wall1);
      
      Float float0 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(float0);
      
      Float float1 = new Float((-2851.1F));
      assertEquals((-2851.1F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall1.setHeight(float1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1419.0634F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(303.0555F, wall0.getHeight(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2837.1267F), wall0.getYEnd(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getXEnd(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2837.1267F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      Level level0 = new Level((String) null, (-1413.0F), (-1601.39F), 0.0F);
      assertNull(level0.getName());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNull(level0.getName());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level1.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      assertNotNull(level1);
      
      wall0.setLevel(level1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(wall0, wall1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals((-1419.0634F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(303.0555F, wall0.getHeight(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2837.1267F), wall0.getYEnd(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getXEnd(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2837.1267F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(level0.getName());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level1.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-1419.0634F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(303.0555F, wall0.getHeight(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2837.1267F), wall0.getYEnd(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getXEnd(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2837.1267F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(homeTexture0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall1));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall1));
      assertFalse(list0.contains(wall1));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone(list0);
      assertTrue(list1.equals((Object)list0));
      assertFalse(linkedList0.contains(wall1));
      assertFalse(list0.contains(wall1));
      assertFalse(list1.contains(wall1));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      List<Wall> list2 = Wall.clone(list1);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertFalse(linkedList0.contains(wall1));
      assertFalse(list0.contains(wall1));
      assertFalse(list1.contains(wall1));
      assertFalse(list2.contains(wall1));
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotNull(list2);
      
      List<Wall> list3 = Wall.clone(list2);
      assertTrue(list0.equals((Object)list2));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list3.equals((Object)list1));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list0));
      assertFalse(linkedList0.contains(wall1));
      assertFalse(list0.contains(wall1));
      assertFalse(list1.contains(wall1));
      assertFalse(list2.contains(wall1));
      assertFalse(list3.contains(wall1));
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list0, list3);
      assertNotSame(list1, list2);
      assertNotSame(list1, list3);
      assertNotSame(list1, list0);
      assertNotSame(list2, list1);
      assertNotSame(list2, list3);
      assertNotSame(list2, list0);
      assertNotSame(list3, list2);
      assertNotSame(list3, list1);
      assertNotSame(list3, list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertNotNull(list3);
      
      Level level2 = wall0.getLevel();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(level2.equals((Object)level0));
      assertNotSame(wall0, wall1);
      assertSame(level2, level1);
      assertNotSame(level2, level0);
      assertEquals((-1419.0634F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(303.0555F, wall0.getHeight(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2837.1267F), wall0.getYEnd(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getXEnd(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2837.1267F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(level2.getName());
      assertEquals((-1413.0F), level2.getElevation(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals(0.0F, level2.getHeight(), 0.01F);
      assertEquals((-1601.39F), level2.getFloorThickness(), 0.01F);
      assertNotNull(level2);
      
      wall0.setPattern((TextureImage) null);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-1419.0634F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(303.0555F, wall0.getHeight(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2837.1267F), wall0.getYEnd(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getXEnd(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2837.1267F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall2 = wall1.clone();
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(2459.883F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-869.7F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2459.883F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-2851.1F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-625.596F), wall2.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall2.getYStart(), 0.01F);
      assertEquals((-869.7F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(wall2);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Wall wall0 = new Wall(3904.6F, (-1023.02F), (-830.6896F), (-830.6896F), 0.0F, (-2170.124F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4739.194F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-926.8548F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals((-830.6896F), wall0.getYEnd(), 0.01F);
      assertEquals(4739.194F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYEnd(2110.9646F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5678.453F, wall0.getLength(), 0.01F);
      assertEquals(543.9723F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setThickness(0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5678.453F, wall0.getLength(), 0.01F);
      assertEquals(543.9723F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone(list0);
      assertTrue(list1.equals((Object)list0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      Level level0 = new Level((String) null, (-1413.0F), (-1601.39F), 0.0F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertNull(level1.getName());
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      assertNotNull(level1);
      
      level1.setName((String) null);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertNull(level1.getName());
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      
      wall0.setLevel(level1);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5678.453F, wall0.getLength(), 0.01F);
      assertEquals(543.9723F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertNull(level1.getName());
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      
      Float float0 = new Float(1.0E-10);
      assertEquals(1.0E-10F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Integer integer0 = new Integer(2928);
      assertEquals(2928, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = float0.equals(integer0);
      assertFalse(boolean0);
      
      wall0.setArcExtent(float0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4.7352832E13F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3.13398059E13F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertEquals(5678.4453F, wall0.getLength(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(1.0E-10F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float float1 = wall0.getXStart();
      assertEquals(3904.6F, float1, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4.7352832E13F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3.13398059E13F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertEquals(5678.4453F, wall0.getLength(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(1.0E-10F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Wall wall0 = new Wall((-1121.2971F), (-1121.2971F), 0.0F, (-1121.2971F), 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1121.2971F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1121.2971F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1121.2971F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1121.2971F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-560.64856F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1121.2971F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotNull(wall1);
      
      Integer integer0 = new Integer(2268);
      assertEquals(2268, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.compare(2268, 2268);
      assertEquals(0, int0);
      
      int int1 = Integer.min(2268, 15);
      assertFalse(int1 == int0);
      assertEquals(15, int1);
      
      wall1.setLeftSideColor(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1121.2971F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1121.2971F), wall1.getYStart(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1121.2971F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1121.2971F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-560.64856F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1121.2971F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      float float0 = wall0.getXEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      wall1.setXStart((-1121.2971F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1121.2971F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1121.2971F), wall1.getYStart(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1121.2971F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1121.2971F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-560.64856F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1121.2971F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 0.0F, (-1121.2971F), 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      wall1.setThickness((-4470.84F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1121.2971F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1121.2971F), wall1.getYStart(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1121.2971F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals((-1121.2971F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-560.64856F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1121.2971F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      float float1 = wall0.getYStart();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-1121.2971F), float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      Integer integer1 = wall1.getRightSideColor();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1121.2971F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1121.2971F), wall1.getYStart(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1121.2971F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals((-1121.2971F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-560.64856F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1121.2971F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(integer1);
      
      Integer integer2 = Integer.valueOf(1985);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int1));
      assertEquals(1985, (int)integer2);
      assertNotNull(integer2);
      
      wall1.setRightSideColor(integer2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int1));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1121.2971F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall1.getLength(), 0.01F);
      assertEquals(1985, (int)wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertEquals((-1121.2971F), wall1.getYStart(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1121.2971F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals((-1121.2971F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-560.64856F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1121.2971F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      wall1.setLeftSideColor(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)int0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1121.2971F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall1.getLength(), 0.01F);
      assertEquals(1985, (int)wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertEquals((-1121.2971F), wall1.getYStart(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1121.2971F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals((-1121.2971F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-560.64856F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1121.2971F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      wall1.setXEnd(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1121.2971F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall1.getLength(), 0.01F);
      assertEquals(1985, (int)wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertEquals((-1121.2971F), wall1.getYStart(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1121.2971F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals((-1121.2971F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-560.64856F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1121.2971F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      boolean boolean1 = wall1.containsWallStartAt(0.0F, 3110.0F, 15);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1121.2971F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall1.getLength(), 0.01F);
      assertEquals(1985, (int)wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertEquals((-1121.2971F), wall1.getYStart(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1121.2971F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals((-1121.2971F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-560.64856F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1121.2971F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1121.2971F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall1.getLength(), 0.01F);
      assertEquals(1985, (int)wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertEquals((-1121.2971F), wall1.getYStart(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1121.2971F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals((-1121.2971F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-560.64856F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1121.2971F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(homeTexture0);
      
      Integer integer3 = wall0.getLeftSideColor();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(integer3);
      
      float float2 = wall1.getYArcCircleCenter();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals((-1121.2971F), float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals((-1121.2971F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1121.2971F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall1.getLength(), 0.01F);
      assertEquals(1985, (int)wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertEquals((-1121.2971F), wall1.getYStart(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1121.2971F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals((-1121.2971F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-560.64856F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1121.2971F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Wall wall0 = new Wall((-1739.4F), (-1739.4F), 0.0F, 0.0F, (-625.596F));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(float0);
      
      Float float1 = new Float((-2851.1F));
      assertEquals((-2851.1F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight(float1);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNotNull(wall1);
      
      boolean boolean0 = wall1.containsWallEndAt(0.0F, 0.0F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall1.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = Float.isFinite(0.0F);
      assertTrue(boolean0);
      
      wall0.setHeight(float0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      Float float1 = wall0.getHeight();
      assertEquals(0.0F, (float)float1, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(float1);
      
      Wall wall1 = new Wall((-1.0F), 1.0F, (-3102.0F), (-3639.0F), 1.0F, 205.96123F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-3639.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1819.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(4781.82F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1551.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3102.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(205.96123F, wall1.getHeight(), 0.01F);
      assertEquals(4781.82F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotNull(wall1);
      
      Wall wall2 = wall1.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-3639.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1819.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(4781.82F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1551.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3102.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(205.96123F, wall1.getHeight(), 0.01F);
      assertEquals(4781.82F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-3102.0F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(205.96123F, wall2.getHeight(), 0.01F);
      assertEquals(4781.82F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1551.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(4781.82F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-3639.0F), wall2.getYEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals((-1819.0F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNotNull(wall2);
      
      wall1.setWallAtStart(wall2);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-3639.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1819.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(4781.82F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1551.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3102.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(205.96123F, wall1.getHeight(), 0.01F);
      assertEquals(4781.82F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-3102.0F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(205.96123F, wall2.getHeight(), 0.01F);
      assertEquals(4781.82F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1551.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(4781.82F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-3639.0F), wall2.getYEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals((-1819.0F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      
      Wall wall3 = wall2.getWallAtEnd();
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-3639.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1819.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(4781.82F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1551.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3102.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(205.96123F, wall1.getHeight(), 0.01F);
      assertEquals(4781.82F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-3102.0F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(205.96123F, wall2.getHeight(), 0.01F);
      assertEquals(4781.82F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1551.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(4781.82F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-3639.0F), wall2.getYEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals((-1819.0F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall3);
      
      Wall wall4 = wall0.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall0, wall4);
      assertNotSame(wall4, wall2);
      assertSame(wall4, wall0);
      assertNotSame(wall4, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall4.getYStart(), 0.01F);
      assertEquals(0.0F, wall4.getThickness(), 0.01F);
      assertEquals(0.0F, wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall4.getXStart(), 0.01F);
      assertNull(wall4.getHeightAtEnd());
      assertEquals(0.0F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertEquals(0.0F, wall4.getXArcCircleCenter(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertEquals(0.0F, wall4.getHeight(), 0.01F);
      assertEquals(0.0F, wall4.getXEnd(), 0.01F);
      assertEquals(0.0F, wall4.getYEnd(), 0.01F);
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall4.getLength(), 0.01F);
      assertNotNull(wall4);
      
      wall4.setWallAtEnd((Wall) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall0, wall4);
      assertNotSame(wall4, wall2);
      assertSame(wall4, wall0);
      assertNotSame(wall4, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall4.getYStart(), 0.01F);
      assertEquals(0.0F, wall4.getThickness(), 0.01F);
      assertEquals(0.0F, wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall4.getXStart(), 0.01F);
      assertNull(wall4.getHeightAtEnd());
      assertEquals(0.0F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertEquals(0.0F, wall4.getXArcCircleCenter(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertEquals(0.0F, wall4.getHeight(), 0.01F);
      assertEquals(0.0F, wall4.getXEnd(), 0.01F);
      assertEquals(0.0F, wall4.getYEnd(), 0.01F);
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall4.getLength(), 0.01F);
      
      wall1.setXStart((-3102.0F));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall4));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall4);
      assertEquals((-3639.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals((-3102.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1819.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-3102.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3640.0F, wall1.getLength(), 0.01F);
      assertEquals((-3102.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(205.96123F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3640.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setWallAtEnd(wall4);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall0, wall4);
      assertNotSame(wall4, wall2);
      assertSame(wall4, wall0);
      assertNotSame(wall4, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall4.getYStart(), 0.01F);
      assertEquals(0.0F, wall4.getThickness(), 0.01F);
      assertEquals(0.0F, wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall4.getXStart(), 0.01F);
      assertNull(wall4.getHeightAtEnd());
      assertEquals(0.0F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertEquals(0.0F, wall4.getXArcCircleCenter(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertEquals(0.0F, wall4.getHeight(), 0.01F);
      assertEquals(0.0F, wall4.getXEnd(), 0.01F);
      assertEquals(0.0F, wall4.getYEnd(), 0.01F);
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall4.getLength(), 0.01F);
      
      Float float2 = wall2.getHeight();
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall4));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(205.96123F, (float)float2, 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall4);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall4);
      assertEquals((-3639.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals((-3102.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1819.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-3102.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3640.0F, wall1.getLength(), 0.01F);
      assertEquals((-3102.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(205.96123F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3640.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-3102.0F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(205.96123F, wall2.getHeight(), 0.01F);
      assertEquals(4781.82F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1551.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(4781.82F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-3639.0F), wall2.getYEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals((-1819.0F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNotNull(float2);
      
      wall4.setHeight((Float) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall0, wall4);
      assertNotSame(wall4, wall2);
      assertSame(wall4, wall0);
      assertNotSame(wall4, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall4.getYStart(), 0.01F);
      assertEquals(0.0F, wall4.getThickness(), 0.01F);
      assertEquals(0.0F, wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall4.getXStart(), 0.01F);
      assertNull(wall4.getHeightAtEnd());
      assertEquals(0.0F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertEquals(0.0F, wall4.getXArcCircleCenter(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertNull(wall4.getHeight());
      assertEquals(0.0F, wall4.getXEnd(), 0.01F);
      assertEquals(0.0F, wall4.getYEnd(), 0.01F);
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall4.getLength(), 0.01F);
      
      float float3 = wall0.getStartPointToEndPointDistance();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals(0.0F, float3, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall0, wall4);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Wall wall0 = new Wall((-1739.4F), (-1739.4F), 0.0F, 0.1F, (-625.596F));
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-869.65F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2459.9539F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2459.9539F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-869.65F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2459.9539F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2459.9539F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(float0);
      
      Float float1 = new Float((-2851.1F));
      assertEquals((-2851.1F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight(float1);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-869.65F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2459.9539F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2459.9539F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-869.65F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2459.9539F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2459.9539F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2459.9539F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-869.65F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(2459.9539F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotNull(wall1);
      
      Float float2 = new Float((-2851.1F));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-2851.1F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall1.setHeight(float2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-869.65F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2459.9539F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2459.9539F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2459.9539F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-869.65F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(2459.9539F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-869.65F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2459.9539F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2459.9539F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2459.9539F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-869.65F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(2459.9539F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      
      boolean boolean0 = wall1.intersectsRectangle(0.0F, 1625.0F, 700.23F, (-1739.4F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-869.65F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2459.9539F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2459.9539F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2459.9539F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-869.65F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(2459.9539F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      
      wall0.move((-7.45F), (-1739.4F));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals((-7.45F), wall0.getXEnd(), 0.01F);
      assertEquals((-3478.8F), wall0.getYStart(), 0.01F);
      assertEquals((-877.14996F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1739.3F), wall0.getYEnd(), 0.01F);
      assertEquals(2459.9539F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2609.05F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1746.85F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2459.9539F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float float3 = wall0.getXEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-7.45F), float3, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals((-7.45F), wall0.getXEnd(), 0.01F);
      assertEquals((-3478.8F), wall0.getYStart(), 0.01F);
      assertEquals((-877.14996F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1739.3F), wall0.getYEnd(), 0.01F);
      assertEquals(2459.9539F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2609.05F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1746.85F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2459.9539F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float float4 = wall0.getXStart();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float4, float3, 0.01F);
      assertEquals((-1746.85F), float4, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals((-7.45F), wall0.getXEnd(), 0.01F);
      assertEquals((-3478.8F), wall0.getYStart(), 0.01F);
      assertEquals((-877.14996F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1739.3F), wall0.getYEnd(), 0.01F);
      assertEquals(2459.9539F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2609.05F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1746.85F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2459.9539F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall wall2 = wall1.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals((-7.45F), wall0.getXEnd(), 0.01F);
      assertEquals((-3478.8F), wall0.getYStart(), 0.01F);
      assertEquals((-877.14996F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1739.3F), wall0.getYEnd(), 0.01F);
      assertEquals(2459.9539F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2609.05F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1746.85F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2459.9539F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2459.9539F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-869.65F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(2459.9539F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall2);
      
      float float5 = wall0.getYArcCircleCenter();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertEquals((-2609.05F), float5, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals((-7.45F), wall0.getXEnd(), 0.01F);
      assertEquals((-3478.8F), wall0.getYStart(), 0.01F);
      assertEquals((-877.14996F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1739.3F), wall0.getYEnd(), 0.01F);
      assertEquals(2459.9539F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2609.05F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1746.85F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2459.9539F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 1490.0F, (-1.0F), 1490.0F, (-1.0F));
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-0.45F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1490.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1490.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1490.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(1.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getYStart();
      assertEquals(1490.0F, float0, 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-0.45F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1490.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1490.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1490.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(1.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-0.45F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1490.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1490.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1490.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(1.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1490.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1.1F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1490.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1490.0F, wall1.getYStart(), 0.01F);
      assertEquals((-0.45F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotNull(wall1);
      
      Integer integer0 = Integer.valueOf(1861);
      assertEquals(1861, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(12);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(12, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf(12);
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(12, (int)integer2);
      assertNotNull(integer2);
      
      int int0 = Integer.min(2139, 1217);
      assertEquals(1217, int0);
      
      wall0.setRightSideColor(integer2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotSame(wall0, wall1);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-0.45F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1490.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1490.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1490.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(1.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(12, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = new Wall((-1739.4F), (-1739.4F), 0.0F, 0.0F, (-625.596F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertNotNull(wall1);
      
      Float float0 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertNull(float0);
      
      Float float1 = new Float((-2851.1F));
      assertEquals((-2851.1F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall1.setHeight(float1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      
      Wall wall2 = new Wall((-1739.4F), (-1739.4F), 0.0F, 0.0F, (-625.596F));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-625.596F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2459.883F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-869.7F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-869.7F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1739.4F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2459.883F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNotNull(wall2);
      
      Float float2 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals((-2851.1F), (float)float2, 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float(0.0F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      int int0 = Float.floatToIntBits(1303.254F);
      assertEquals(1151526945, int0);
      
      int int1 = Float.floatToIntBits(110.02F);
      assertFalse(int1 == int0);
      assertEquals(1121716797, int1);
      
      int int2 = Float.floatToIntBits(0.01F);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1008981770, int2);
      
      int int3 = Float.floatToIntBits(1.0F);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(1065353216, int3);
      
      wall1.setHeight((Float) 1.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      
      Wall wall3 = wall2.clone();
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-625.596F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2459.883F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-869.7F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-869.7F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1739.4F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2459.883F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(2459.883F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall3.getYStart(), 0.01F);
      assertEquals((-1739.4F), wall3.getXStart(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(2459.883F, wall3.getLength(), 0.01F);
      assertEquals((-869.7F), wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals((-625.596F), wall3.getThickness(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-869.7F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNotNull(wall3);
      
      wall1.setYEnd(0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 27.582699F, 0.0F, 27.582699F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(27.582699F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(27.582699F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(27.582699F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(13.791349F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(27.582699F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(27.582699F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(27.582699F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(27.582699F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(13.791349F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(27.582699F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = new Wall((-1739.4F), (-1739.4F), 0.0F, 0.0F, (-625.596F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall1);
      
      Float float0 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(float0);
      
      Float float1 = new Float((-2851.1F));
      assertEquals((-2851.1F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall1.setHeight(float1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(27.582699F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(27.582699F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(27.582699F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(13.791349F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(27.582699F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 0.0F, 0.01F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(27.582699F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(27.582699F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(27.582699F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(13.791349F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(27.582699F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.move(27.582699F, 27.582699F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(27.582699F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(27.582699F, wall0.getXStart(), 0.01F);
      assertEquals(27.582699F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(27.582699F, wall0.getThickness(), 0.01F);
      assertEquals(27.582699F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(27.582699F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(55.165398F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(27.582699F, wall0.getYEnd(), 0.01F);
      assertEquals(41.374046F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float float2 = wall0.getXEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(55.165398F, float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(27.582699F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(27.582699F, wall0.getXStart(), 0.01F);
      assertEquals(27.582699F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(27.582699F, wall0.getThickness(), 0.01F);
      assertEquals(27.582699F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(27.582699F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(55.165398F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(27.582699F, wall0.getYEnd(), 0.01F);
      assertEquals(41.374046F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float float3 = wall0.getXStart();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(27.582699F, float3, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(27.582699F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(27.582699F, wall0.getXStart(), 0.01F);
      assertEquals(27.582699F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(27.582699F, wall0.getThickness(), 0.01F);
      assertEquals(27.582699F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(27.582699F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(55.165398F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(27.582699F, wall0.getYEnd(), 0.01F);
      assertEquals(41.374046F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall2 = wall0.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(27.582699F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(27.582699F, wall0.getXStart(), 0.01F);
      assertEquals(27.582699F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(27.582699F, wall0.getThickness(), 0.01F);
      assertEquals(27.582699F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(27.582699F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(55.165398F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(27.582699F, wall0.getYEnd(), 0.01F);
      assertEquals(41.374046F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall2);
      
      float float4 = wall0.getYEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float4, float2, 0.01F);
      assertEquals(float4, float3, 0.01F);
      assertEquals(27.582699F, float4, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(27.582699F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(27.582699F, wall0.getXStart(), 0.01F);
      assertEquals(27.582699F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(27.582699F, wall0.getThickness(), 0.01F);
      assertEquals(27.582699F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(27.582699F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(55.165398F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(27.582699F, wall0.getYEnd(), 0.01F);
      assertEquals(41.374046F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Float float0 = new Float((-3.003345F));
      assertEquals((-3.003345F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setYStart(0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, (-3.003345F), 0.0F, (-3.003345F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-3.003345F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-3.003345F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall1);
      
      Float float1 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(float1);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-3.003345F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-3.003345F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      wall1.setYStart(0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle((-1393.8479F), (-2851.1F), 0.0F, (-2247.7522F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      
      Float float2 = wall1.getHeightAtEnd();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(float2);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      
      boolean boolean1 = wall1.containsWallStartAt((-1739.4F), (-4599.4F), 51.70028F);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      
      boolean boolean2 = wall0.intersectsRectangle(390.2F, 0.0F, 0.0F, 390.2F);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall1.move(0.01F, 1.15652966E9F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1.15652966E9F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.15652966E9F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.01F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.15652966E9F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall1.getXEnd(), 0.01F);
      
      Float float3 = wall0.getArcExtent();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(float3);
      
      wall0.setArcExtent((Float) null);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall2 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.01F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.15652966E9F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.15652966E9F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(1.15652966E9F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.01F, wall2.getXStart(), 0.01F);
      assertNotNull(wall2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.getWallAtStart();
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Wall wall0 = new Wall(3904.6F, (-1023.02F), (-830.6896F), (-830.6896F), (-1023.02F), (-2170.124F));
      assertEquals(4739.194F, wall0.getLength(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4739.194F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1023.02F), wall0.getThickness(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-926.8548F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-830.6896F), wall0.getYEnd(), 0.01F);
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      wall0.setYEnd(2110.9646F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1023.02F), wall0.getThickness(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(543.9723F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5678.453F, wall0.getLength(), 0.01F);
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setThickness(0.0F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(543.9723F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5678.453F, wall0.getLength(), 0.01F);
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone(list0);
      assertTrue(list1.equals((Object)list0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      Level level0 = new Level((String) null, (-1413.0F), (-1601.39F), 0.0F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertNull(level1.getName());
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertNotNull(level1);
      
      level1.setName((String) null);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertNull(level1.getName());
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      
      wall0.setLevel(level1);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(543.9723F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5678.453F, wall0.getLength(), 0.01F);
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertNull(level1.getName());
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      
      Float float0 = new Float(1.0E-10);
      assertEquals(1.0E-10F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Integer integer0 = new Integer(2928);
      assertEquals(2928, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = float0.equals(integer0);
      assertFalse(boolean0);
      
      wall0.setArcExtent(float0);
      assertEquals(1.0E-10F, wall0.getArcExtent(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5678.4453F, wall0.getLength(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3.13398059E13F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4.7352832E13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float float1 = wall0.getXStart();
      assertEquals(3904.6F, float1, 0.01F);
      assertEquals(1.0E-10F, wall0.getArcExtent(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5678.4453F, wall0.getLength(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3.13398059E13F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4.7352832E13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(152, floatArray0.length);
      assertEquals(1.0E-10F, wall0.getArcExtent(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5678.4453F, wall0.getLength(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3.13398059E13F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4.7352832E13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(floatArray0);
      
      boolean boolean1 = wall0.isAtLevel(level1);
      assertFalse(boolean1 == boolean0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertTrue(boolean1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(1.0E-10F, wall0.getArcExtent(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5678.4453F, wall0.getLength(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3.13398059E13F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4.7352832E13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertNull(level1.getName());
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Wall wall0 = new Wall((-1678.2F), (-1678.2F), (-1678.2F), (-1678.2F), (-1678.2F));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getThickness(), 0.01F);
      assertEquals((-1678.2F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getThickness(), 0.01F);
      assertEquals((-1678.2F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setPattern((TextureImage) null);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getThickness(), 0.01F);
      assertEquals((-1678.2F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getThickness(), 0.01F);
      assertEquals((-1678.2F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Wall wall0 = new Wall((-1089.5614F), (-1678.2F), (-1678.2F), (-1678.2F), (-4.7919436F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1383.8806F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(588.63855F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1089.5614F), wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(588.63855F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4.7919436F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1383.8806F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(588.63855F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1089.5614F), wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(588.63855F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4.7919436F), wall0.getThickness(), 0.01F);
      assertEquals((-1383.8806F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals((-1089.5614F), wall1.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4.7919436F), wall1.getThickness(), 0.01F);
      assertEquals(588.63855F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(588.63855F, wall1.getLength(), 0.01F);
      assertNotNull(wall1);
      
      Wall wall2 = new Wall((-2311.0F), (-4.08248F), (-1089.5614F), (-1089.5614F), 7889.2427F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(1634.0675F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1089.5614F), wall2.getYEnd(), 0.01F);
      assertEquals(1634.0675F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1700.2808F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1089.5614F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-4.08248F), wall2.getYStart(), 0.01F);
      assertEquals((-2311.0F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-546.82196F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(7889.2427F, wall2.getThickness(), 0.01F);
      assertNotNull(wall2);
      
      Float float0 = wall1.getHeight();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1383.8806F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(588.63855F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1089.5614F), wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(588.63855F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4.7919436F), wall0.getThickness(), 0.01F);
      assertEquals((-1383.8806F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals((-1089.5614F), wall1.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4.7919436F), wall1.getThickness(), 0.01F);
      assertEquals(588.63855F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(588.63855F, wall1.getLength(), 0.01F);
      assertNull(float0);
      
      wall1.setWallAtStart(wall2);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1383.8806F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(588.63855F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1089.5614F), wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(588.63855F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4.7919436F), wall0.getThickness(), 0.01F);
      assertEquals((-1383.8806F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals((-1089.5614F), wall1.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4.7919436F), wall1.getThickness(), 0.01F);
      assertEquals(588.63855F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(588.63855F, wall1.getLength(), 0.01F);
      assertEquals(1634.0675F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1089.5614F), wall2.getYEnd(), 0.01F);
      assertEquals(1634.0675F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1700.2808F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1089.5614F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-4.08248F), wall2.getYStart(), 0.01F);
      assertEquals((-2311.0F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-546.82196F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(7889.2427F, wall2.getThickness(), 0.01F);
      
      wall2.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1383.8806F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(588.63855F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1089.5614F), wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(588.63855F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4.7919436F), wall0.getThickness(), 0.01F);
      assertEquals(1634.0675F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1089.5614F), wall2.getYEnd(), 0.01F);
      assertEquals(1634.0675F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1700.2808F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1089.5614F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-4.08248F), wall2.getYStart(), 0.01F);
      assertEquals((-2311.0F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-546.82196F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(7889.2427F, wall2.getThickness(), 0.01F);
      
      Float float1 = wall2.getHeightAtEnd();
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(1634.0675F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1089.5614F), wall2.getYEnd(), 0.01F);
      assertEquals(1634.0675F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1700.2808F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1089.5614F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-4.08248F), wall2.getYStart(), 0.01F);
      assertEquals((-2311.0F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-546.82196F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(7889.2427F, wall2.getThickness(), 0.01F);
      assertNull(float1);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1383.8806F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(588.63855F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1089.5614F), wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(588.63855F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4.7919436F), wall0.getThickness(), 0.01F);
      assertEquals((-1383.8806F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals((-1089.5614F), wall1.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4.7919436F), wall1.getThickness(), 0.01F);
      assertEquals(588.63855F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(588.63855F, wall1.getLength(), 0.01F);
      
      boolean boolean0 = wall1.intersectsRectangle((-4.08248F), 11, (-4.7919436F), 2.0F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(boolean0);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1383.8806F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(588.63855F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1089.5614F), wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(588.63855F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4.7919436F), wall0.getThickness(), 0.01F);
      assertEquals((-1383.8806F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals((-1089.5614F), wall1.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4.7919436F), wall1.getThickness(), 0.01F);
      assertEquals(588.63855F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(588.63855F, wall1.getLength(), 0.01F);
      
      wall2.move(8.007533F, (-828.102F));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals((-1917.6633F), wall2.getYEnd(), 0.01F);
      assertEquals(1634.0675F, wall2.getLength(), 0.01F);
      assertEquals((-1374.9238F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1081.5538F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1634.0675F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2302.9924F), wall2.getXStart(), 0.01F);
      assertEquals((-1692.2732F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeight());
      assertEquals((-832.18445F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(7889.2427F, wall2.getThickness(), 0.01F);
      
      Wall wall3 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertSame(wall3, wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1383.8806F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(588.63855F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1089.5614F), wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(588.63855F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4.7919436F), wall0.getThickness(), 0.01F);
      assertEquals((-4.7919436F), wall3.getThickness(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals((-1678.2F), wall3.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall3.getYStart(), 0.01F);
      assertEquals(588.63855F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNull(wall3.getLeftSideColor());
      assertEquals((-1383.8806F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(588.63855F, wall3.getLength(), 0.01F);
      assertEquals((-1089.5614F), wall3.getXStart(), 0.01F);
      assertNull(wall3.getHeight());
      assertNotNull(wall3);
      
      wall1.setRightSideTexture((HomeTexture) null);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertSame(wall1, wall3);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1383.8806F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(588.63855F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1089.5614F), wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(588.63855F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4.7919436F), wall0.getThickness(), 0.01F);
      assertEquals((-1383.8806F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals((-1089.5614F), wall1.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4.7919436F), wall1.getThickness(), 0.01F);
      assertEquals(588.63855F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(588.63855F, wall1.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      wall0.setLeftSideShininess(0.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall0));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add(wall0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(wall0));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(2, linkedList0.size());
      
      Stream<Wall> stream0 = linkedList0.stream();
      assertTrue(linkedList0.contains(wall0));
      assertEquals(2, linkedList0.size());
      assertNotNull(stream0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(2, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(float0);
      
      Float float1 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight((Float) null);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      Wall wall1 = new Wall((-1739.4F), (-1739.4F), 0.0F, 0.0F, (-625.596F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(wall1);
      
      Float float2 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(float2);
      
      Float float3 = new Float((-2851.1F));
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((-2851.1F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall1.setHeight(float3);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      boolean boolean2 = wall0.intersectsRectangle(0.0F, (-830.6896F), 1931.8F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      wall0.move(1.0F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      float float4 = wall0.getXEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1.0F, float4, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      float float5 = wall1.getXStart();
      assertNotEquals(float5, float4, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1739.4F), float5, 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      Wall wall2 = wall0.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall2);
      
      float float6 = wall0.getYArcCircleCenter();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float6, float5, 0.01F);
      assertNotEquals(float6, float4, 0.01F);
      assertEquals(0.0F, float6, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.92811793F, 0.0F, 0.92811793F);
      assertEquals(0.92811793F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.92811793F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.92811793F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.92811793F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.46405897F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = Float.isFinite(0.0F);
      assertTrue(boolean0);
      
      wall0.setHeight(float0);
      assertEquals(0.92811793F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.92811793F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.92811793F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.92811793F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.46405897F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.92811793F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.92811793F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.92811793F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.92811793F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.46405897F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Float float1 = wall0.getHeight();
      assertEquals(0.0F, (float)float1, 0.01F);
      assertEquals(0.92811793F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.92811793F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.92811793F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.92811793F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.46405897F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(0.13753456F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.13753456F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.92811793F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.92811793F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.92811793F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.92811793F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.46405897F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      boolean boolean1 = wall0.intersectsRectangle(512.7397F, 0.01F, 0.0F, 2.0F);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0.92811793F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.92811793F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.92811793F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.92811793F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.46405897F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      wall0.move((-2851.1F), 0.0F);
      assertEquals(0.92811793F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2850.1719F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.92822266F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertEquals((-2850.636F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.92822266F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      int int0 = Integer.min((-911), (-911));
      assertEquals((-911), int0);
      
      Float float3 = wall0.getArcExtent();
      assertEquals(0.92811793F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2850.1719F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.92822266F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertEquals((-2850.636F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.92822266F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(float3);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(0.92811793F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2850.1719F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.92822266F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertEquals((-2850.636F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.92822266F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Wall wall0 = new Wall((-1739.4F), (-1.0F), 3481.1F, 2015.25F, (-1.0F));
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(5596.3276F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1007.125F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(5596.3276F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsPoint(3481.1F, (-2311.0F), (-1.0F));
      assertFalse(boolean0);
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(5596.3276F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1007.125F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(5596.3276F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setYStart(0.01F);
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(5595.964F, wall0.getLength(), 0.01F);
      assertEquals(1007.63F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(5595.964F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Level level0 = new Level((String) null, 0.01F, (-1.0F), 3481.1F);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(3481.1F, level0.getHeight(), 0.01F);
      assertNull(level0.getName());
      assertEquals(0.01F, level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      wall0.setLevel(level0);
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(5595.964F, wall0.getLength(), 0.01F);
      assertEquals(1007.63F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(5595.964F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(3481.1F, level0.getHeight(), 0.01F);
      assertNull(level0.getName());
      assertEquals(0.01F, level0.getElevation(), 0.01F);
      
      Level level1 = new Level((String) null, (-665.3366F), (-2311.0F), 0.01F);
      assertFalse(level1.equals((Object)level0));
      assertNull(level1.getName());
      assertEquals(0.01F, level1.getHeight(), 0.01F);
      assertEquals((-2311.0F), level1.getFloorThickness(), 0.01F);
      assertEquals((-665.3366F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertNotNull(level1);
      
      level1.setFloorThickness((-3851.0F));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level1, level0);
      assertNull(level1.getName());
      assertEquals(0.01F, level1.getHeight(), 0.01F);
      assertEquals((-665.3366F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-3851.0F), level1.getFloorThickness(), 0.01F);
      
      boolean boolean1 = wall0.isAtLevel(level1);
      assertFalse(level1.equals((Object)level0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(level1, level0);
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(5595.964F, wall0.getLength(), 0.01F);
      assertEquals(1007.63F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(5595.964F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(level1.getName());
      assertEquals(0.01F, level1.getHeight(), 0.01F);
      assertEquals((-665.3366F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-3851.0F), level1.getFloorThickness(), 0.01F);
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals(870.85004F, float0, 0.01F);
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(5595.964F, wall0.getLength(), 0.01F);
      assertEquals(1007.63F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(5595.964F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Level level2 = wall0.getLevel();
      assertFalse(level2.equals((Object)level1));
      assertNotSame(level2, level1);
      assertSame(level2, level0);
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(5595.964F, wall0.getLength(), 0.01F);
      assertEquals(1007.63F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(5595.964F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals((-1.0F), level2.getFloorThickness(), 0.01F);
      assertNull(level2.getName());
      assertEquals(0.01F, level2.getElevation(), 0.01F);
      assertEquals(3481.1F, level2.getHeight(), 0.01F);
      assertNotNull(level2);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Wall wall0 = new Wall(3904.6F, (-1023.02F), (-830.6896F), (-830.6896F), (-1023.02F), (-2170.124F));
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1023.02F), wall0.getThickness(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals((-926.8548F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4739.194F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4739.194F, wall0.getLength(), 0.01F);
      assertEquals((-830.6896F), wall0.getYEnd(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYEnd(2110.9646F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1023.02F), wall0.getThickness(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(543.9723F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5678.453F, wall0.getLength(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      
      wall0.setThickness(0.0F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(543.9723F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5678.453F, wall0.getLength(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Level level0 = new Level((String) null, (-1413.0F), (-1601.39F), 0.0F);
      assertNull(level0.getName());
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNull(level0.getName());
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertTrue(level1.isVisible());
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertNull(level1.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertNotNull(level1);
      
      level1.setName((String) null);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNull(level0.getName());
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertTrue(level1.isVisible());
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertNull(level1.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      
      wall0.setLevel(level1);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(543.9723F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5678.453F, wall0.getLength(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertNull(level0.getName());
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertTrue(level1.isVisible());
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertNull(level1.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      
      Float float0 = new Float(1.0E-10);
      assertEquals(1.0E-10F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Integer integer0 = new Integer(2928);
      assertEquals(2928, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = float0.equals(integer0);
      assertFalse(boolean0);
      
      wall0.setArcExtent(float0);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertEquals((-4.7352832E13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5678.4453F, wall0.getLength(), 0.01F);
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertEquals((-3.13398059E13F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0E-10F, wall0.getArcExtent(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      
      float float1 = wall0.getXStart();
      assertEquals(3904.6F, float1, 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertEquals((-4.7352832E13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5678.4453F, wall0.getLength(), 0.01F);
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertEquals((-3.13398059E13F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0E-10F, wall0.getArcExtent(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      
      wall0.setArcExtent(float0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertEquals((-4.7352832E13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5678.4453F, wall0.getLength(), 0.01F);
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertEquals((-3.13398059E13F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0E-10F, wall0.getArcExtent(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      
      float float2 = wall0.getXArcCircleCenter();
      assertNotEquals(float2, float1, 0.01F);
      assertEquals((-3.13398059E13F), float2, 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertEquals((-4.7352832E13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5678.4453F, wall0.getLength(), 0.01F);
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertEquals((-3.13398059E13F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0E-10F, wall0.getArcExtent(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Wall wall0 = new Wall((-1650.0F), 0.0F, (-509.81708F), 2432.29F, 2.0F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals((-509.81708F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2432.29F, wall0.getYEnd(), 0.01F);
      assertEquals(1216.145F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1650.0F), wall0.getXStart(), 0.01F);
      assertEquals(2686.271F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2686.271F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1079.9086F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = wall0.getLevel();
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals((-509.81708F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2432.29F, wall0.getYEnd(), 0.01F);
      assertEquals(1216.145F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1650.0F), wall0.getXStart(), 0.01F);
      assertEquals(2686.271F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2686.271F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1079.9086F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(level0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Wall wall0 = new Wall((-1121.2971F), (-1678.2F), (-1678.2F), (-1678.2F), 0.0F);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(556.90283F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1399.7485F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(556.90283F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(556.90283F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1399.7485F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(556.90283F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(556.90283F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1399.7485F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(556.90283F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1121.2971F), wall1.getXStart(), 0.01F);
      assertEquals((-1399.7485F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(556.90283F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(556.90283F, wall1.getLength(), 0.01F);
      assertNotNull(wall1);
      
      Integer integer0 = new Integer(2268);
      assertEquals(2268, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.compare(2268, 2268);
      assertEquals(0, int0);
      
      int int1 = Integer.min(2268, 15);
      assertFalse(int1 == int0);
      assertEquals(15, int1);
      
      wall1.setLeftSideColor(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(556.90283F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1399.7485F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(556.90283F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1121.2971F), wall1.getXStart(), 0.01F);
      assertEquals((-1399.7485F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(556.90283F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(556.90283F, wall1.getLength(), 0.01F);
      
      wall0.setRightSideShininess((-1121.2971F));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(556.90283F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1399.7485F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(556.90283F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float float0 = wall0.getXEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-1678.2F), float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(556.90283F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1399.7485F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(556.90283F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall1.setXStart((-1678.2F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(556.90283F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1399.7485F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(556.90283F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 22.939007F, (-1121.2971F), 3088.55F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(556.90283F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1399.7485F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(556.90283F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setXStart(18.022617F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(1696.2225F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-830.0887F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(1696.2225F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall1.setThickness((-4470.84F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1696.2225F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-830.0887F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(1696.2225F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      
      int int2 = Float.floatToIntBits(1.0F);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1065353216, int2);
      
      Float float1 = new Float(1757.9F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1757.9F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      float float2 = float1.floatValue();
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(1757.9F, float2, 0.01F);
      
      wall1.setArcExtent((Float) 1757.9F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1696.2225F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-830.0887F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(1696.2225F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1757.9F, wall1.getArcExtent(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      
      boolean boolean1 = wall1.containsWallEndAt(1065353216, 22.939007F, (-712.4F));
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1696.2225F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-830.0887F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(1696.2225F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1757.9F, wall1.getArcExtent(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      
      Integer integer1 = Integer.valueOf(2268);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int2));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertEquals(2268, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf(33);
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int2));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(33, (int)integer2);
      assertNotNull(integer2);
      
      wall0.setRightSideColor(integer2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int2));
      assertFalse(integer2.equals((Object)integer0));
      assertNotSame(wall0, wall1);
      assertEquals(1696.2225F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-830.0887F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals(33, (int)wall0.getRightSideColor());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(1696.2225F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(18.022617F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Wall wall0 = new Wall(2015.25F, 2015.25F, (-1739.4F), (-1739.4F), 3481.1F, 2015.25F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertEquals(137.92499F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getThickness(), 0.01F);
      assertEquals(5309.877F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2015.25F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals(5309.877F, wall0.getLength(), 0.01F);
      assertEquals(2015.25F, wall0.getXStart(), 0.01F);
      assertEquals(137.92499F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsPoint(3481.1F, (-2310.5024F), (-1.0F));
      assertFalse(boolean0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertEquals(137.92499F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getThickness(), 0.01F);
      assertEquals(5309.877F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2015.25F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals(5309.877F, wall0.getLength(), 0.01F);
      assertEquals(2015.25F, wall0.getXStart(), 0.01F);
      assertEquals(137.92499F, wall0.getXArcCircleCenter(), 0.01F);
      
      boolean boolean1 = wall0.containsWallStartAt((-2196.0F), (-1.0F), 2015.25F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertEquals(137.92499F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getThickness(), 0.01F);
      assertEquals(5309.877F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2015.25F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals(5309.877F, wall0.getLength(), 0.01F);
      assertEquals(2015.25F, wall0.getXStart(), 0.01F);
      assertEquals(137.92499F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setYStart(0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4137.984F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4137.984F, wall0.getLength(), 0.01F);
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals(2015.25F, wall0.getXStart(), 0.01F);
      assertEquals(137.92499F, wall0.getXArcCircleCenter(), 0.01F);
      
      Level level0 = new Level((String) null, (-1413.0F), (-1601.39F), 0.0F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      wall0.setLevel(level0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4137.984F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4137.984F, wall0.getLength(), 0.01F);
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals(2015.25F, wall0.getXStart(), 0.01F);
      assertEquals(137.92499F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertNull(level1.getName());
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      assertNotNull(level1);
      
      level1.setBackgroundImage((BackgroundImage) null);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertNull(level1.getName());
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      
      level1.setFloorThickness((-1601.39F));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertNull(level1.getName());
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      
      boolean boolean2 = wall0.isAtLevel(level1);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4137.984F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4137.984F, wall0.getLength(), 0.01F);
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals(2015.25F, wall0.getXStart(), 0.01F);
      assertEquals(137.92499F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertNull(level1.getName());
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      
      wall0.setArcExtent((Float) null);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4137.984F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4137.984F, wall0.getLength(), 0.01F);
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals(2015.25F, wall0.getXStart(), 0.01F);
      assertEquals(137.92499F, wall0.getXArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(float0);
      
      Float float1 = new Float(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight(float1);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Float float2 = wall0.getHeight();
      assertEquals(0.0F, (float)float2, 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float(1.0F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(1.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall0.setHeight((Float) null);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(512.7397F, 0.01F, 0.0F, 2.0F);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.move((-2851.1F), 0.0F);
      assertEquals((-2851.1F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2851.1F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float float4 = wall0.getXEnd();
      assertEquals((-2851.1F), float4, 0.01F);
      assertEquals((-2851.1F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2851.1F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float float5 = wall0.getXStart();
      assertEquals(float5, float4, 0.01F);
      assertEquals((-2851.1F), float5, 0.01F);
      assertEquals((-2851.1F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2851.1F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = wall0.getWallAtEnd();
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertEquals((-2851.1F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2851.1F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2851.1F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2851.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotNull(wall1);
      
      float float6 = wall0.getYArcCircleCenter();
      assertNotEquals(float6, float4, 0.01F);
      assertNotEquals(float6, float5, 0.01F);
      assertEquals(0.0F, float6, 0.01F);
      assertSame(wall0, wall1);
      assertEquals((-2851.1F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2851.1F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertSame(wall0, wall1);
      assertEquals((-2851.1F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2851.1F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Wall wall0 = new Wall(6.7807713F, 6.7807713F, 6.7807713F, 6.7807713F, 6.7807713F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(6.7807713F, wall0.getYStart(), 0.01F);
      assertEquals(6.7807713F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(6.7807713F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(6.7807713F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(6.7807713F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(6.7807713F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(6.7807713F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(6.7807713F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(6.7807713F, wall0.getYStart(), 0.01F);
      assertEquals(6.7807713F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(6.7807713F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(6.7807713F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(6.7807713F, wall0.getXStart(), 0.01F);
      assertEquals(6.7807713F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(6.7807713F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(6.7807713F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Wall wall0 = new Wall((-1739.4F), 3481.1F, (-1739.4F), 3481.1F, (-1739.4F), 3481.1F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1739.4F), wall0.getThickness(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsPoint(3481.1F, (-2311.0F), (-1739.4F));
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1739.4F), wall0.getThickness(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1739.4F), wall0.getThickness(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1739.4F), wall0.getThickness(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setPattern((TextureImage) null);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1739.4F), wall0.getThickness(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      
      int int0 = Float.floatToIntBits(133.0F);
      assertEquals(1124401152, int0);
      
      int int1 = Float.floatToIntBits(133.0F);
      assertTrue(int1 == int0);
      assertEquals(1124401152, int1);
      
      wall0.setHeightAtEnd((Float) 133.0F);
      assertEquals(133.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1739.4F), wall0.getThickness(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      
      Float float1 = wall0.getHeightAtEnd();
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(133.0F, (float)float1, 0.01F);
      assertEquals(133.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1739.4F), wall0.getThickness(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertNotNull(float1);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertEquals(133.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1739.4F), wall0.getThickness(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertNull(textureImage0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Wall wall0 = new Wall((-26.0F), 0.0F, 0.0F, (-26.0F), (-7.45F));
      assertEquals((-26.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-13.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(36.769554F, wall0.getLength(), 0.01F);
      assertEquals((-26.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-13.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(36.769554F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-7.45F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setXEnd(0.0F);
      assertEquals((-26.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-13.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(36.769554F, wall0.getLength(), 0.01F);
      assertEquals((-26.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-13.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(36.769554F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-7.45F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      wall0.setXStart(0.0F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-13.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-26.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(26.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(26.0F, wall0.getLength(), 0.01F);
      assertEquals((-7.45F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, (-607.7F), (-4470.84F), (-735.664F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-4470.84F), wall1.getXEnd(), 0.01F);
      assertEquals((-2235.42F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-671.682F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(4472.671F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4472.671F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-735.664F), wall1.getYEnd(), 0.01F);
      assertEquals((-607.7F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotNull(wall1);
      
      Float float0 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-4470.84F), wall1.getXEnd(), 0.01F);
      assertEquals((-2235.42F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-671.682F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(4472.671F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4472.671F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-735.664F), wall1.getYEnd(), 0.01F);
      assertEquals((-607.7F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(float0);
      
      Float float1 = new Float((-735.664F));
      assertEquals((-735.664F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight((Float) null);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-13.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-26.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(26.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(26.0F, wall0.getLength(), 0.01F);
      assertEquals((-7.45F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      Wall wall2 = wall1.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals((-4470.84F), wall1.getXEnd(), 0.01F);
      assertEquals((-2235.42F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-671.682F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(4472.671F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4472.671F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-735.664F), wall1.getYEnd(), 0.01F);
      assertEquals((-607.7F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-671.682F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(4472.671F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-4470.84F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals((-735.664F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-607.7F), wall2.getYStart(), 0.01F);
      assertEquals(4472.671F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2235.42F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotNull(wall2);
      
      Float float2 = wall2.getHeightAtEnd();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals((-4470.84F), wall1.getXEnd(), 0.01F);
      assertEquals((-2235.42F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-671.682F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(4472.671F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4472.671F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-735.664F), wall1.getYEnd(), 0.01F);
      assertEquals((-607.7F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-671.682F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(4472.671F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-4470.84F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals((-735.664F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-607.7F), wall2.getYStart(), 0.01F);
      assertEquals(4472.671F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2235.42F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(float2);
      
      Wall wall3 = wall1.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      assertEquals((-4470.84F), wall1.getXEnd(), 0.01F);
      assertEquals((-2235.42F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-671.682F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(4472.671F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4472.671F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-735.664F), wall1.getYEnd(), 0.01F);
      assertEquals((-607.7F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertEquals((-735.664F), wall3.getYEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals((-4470.84F), wall3.getXEnd(), 0.01F);
      assertEquals(4472.671F, wall3.getLength(), 0.01F);
      assertEquals((-671.682F), wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals((-2235.42F), wall3.getXArcCircleCenter(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(4472.671F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals((-607.7F), wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getHeight());
      assertNotNull(wall3);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Wall wall0 = new Wall((-0.3789827F), 0.0F, 0.0F, (-0.3789827F), 0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-0.18949135F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.3789827F), wall0.getYEnd(), 0.01F);
      assertEquals(0.53596246F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.3789827F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.53596246F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-0.18949135F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess((-0.3789827F));
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-0.18949135F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.3789827F), wall0.getYEnd(), 0.01F);
      assertEquals(0.53596246F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-0.3789827F), wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.3789827F), wall0.getXStart(), 0.01F);
      assertEquals(0.53596246F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-0.18949135F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.0F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight(float0);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-0.18949135F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.3789827F), wall0.getYEnd(), 0.01F);
      assertEquals(0.53596246F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-0.3789827F), wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.3789827F), wall0.getXStart(), 0.01F);
      assertEquals(0.53596246F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-0.18949135F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-0.18949135F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.3789827F), wall0.getYEnd(), 0.01F);
      assertEquals(0.53596246F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-0.3789827F), wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.3789827F), wall0.getXStart(), 0.01F);
      assertEquals(0.53596246F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-0.18949135F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.3789827F), wall1.getYEnd(), 0.01F);
      assertEquals(0.53596246F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-0.18949135F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.3789827F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-0.3789827F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.53596246F, wall1.getLength(), 0.01F);
      assertEquals((-0.18949135F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotNull(wall1);
      
      boolean boolean0 = wall1.containsWallEndAt(0.0F, 3535.5881F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-0.18949135F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.3789827F), wall0.getYEnd(), 0.01F);
      assertEquals(0.53596246F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-0.3789827F), wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.3789827F), wall0.getXStart(), 0.01F);
      assertEquals(0.53596246F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-0.18949135F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.3789827F), wall1.getYEnd(), 0.01F);
      assertEquals(0.53596246F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-0.18949135F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.3789827F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-0.3789827F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.53596246F, wall1.getLength(), 0.01F);
      assertEquals((-0.18949135F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      float float2 = wall0.getLength();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.53596246F, float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-0.18949135F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.3789827F), wall0.getYEnd(), 0.01F);
      assertEquals(0.53596246F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-0.3789827F), wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.3789827F), wall0.getXStart(), 0.01F);
      assertEquals(0.53596246F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-0.18949135F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall2 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-0.18949135F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.3789827F), wall0.getYEnd(), 0.01F);
      assertEquals(0.53596246F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-0.3789827F), wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.3789827F), wall0.getXStart(), 0.01F);
      assertEquals(0.53596246F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-0.18949135F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall2);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Wall wall0 = new Wall(49.58068F, 49.58068F, 49.58068F, 49.58068F, 49.58068F, 49.58068F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(49.58068F, wall0.getYStart(), 0.01F);
      assertEquals(49.58068F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(49.58068F, wall0.getXEnd(), 0.01F);
      assertEquals(49.58068F, wall0.getThickness(), 0.01F);
      assertEquals(49.58068F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(49.58068F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(49.58068F, wall0.getYEnd(), 0.01F);
      assertEquals(49.58068F, wall0.getHeight(), 0.01F);
      assertNotNull(wall0);
      
      int int0 = Float.compare((-1797.2726F), 0.0F);
      assertEquals((-1), int0);
      
      int int1 = Float.compare(0.0F, 0.0F);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      wall0.setArcExtent((Float) 0.0F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(49.58068F, wall0.getYStart(), 0.01F);
      assertEquals(49.58068F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(49.58068F, wall0.getXEnd(), 0.01F);
      assertEquals(49.58068F, wall0.getThickness(), 0.01F);
      assertEquals(49.58068F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(49.58068F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(49.58068F, wall0.getYEnd(), 0.01F);
      assertEquals(49.58068F, wall0.getHeight(), 0.01F);
      
      float float0 = wall0.getLength();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(49.58068F, wall0.getYStart(), 0.01F);
      assertEquals(49.58068F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(49.58068F, wall0.getXEnd(), 0.01F);
      assertEquals(49.58068F, wall0.getThickness(), 0.01F);
      assertEquals(49.58068F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(49.58068F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(49.58068F, wall0.getYEnd(), 0.01F);
      assertEquals(49.58068F, wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Wall wall0 = new Wall((-2616.0F), (-2616.0F), 2415.7822F, (-1.0F), (-2320.38F), (-3345.0947F));
      assertEquals((-3345.0947F), wall0.getHeight(), 0.01F);
      assertEquals((-2616.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5670.719F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-100.10889F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1308.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2616.0F), wall0.getXStart(), 0.01F);
      assertEquals(2415.7822F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2320.38F), wall0.getThickness(), 0.01F);
      assertEquals(5670.719F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      int int0 = Float.compare(0.0F, 2333.0557F);
      assertEquals((-1), int0);
      
      wall0.setHeight((Float) 2333.0557F);
      assertEquals((-2616.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5670.719F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-100.10889F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1308.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(2333.0557F, wall0.getHeight(), 0.01F);
      assertEquals((-2616.0F), wall0.getXStart(), 0.01F);
      assertEquals(2415.7822F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2320.38F), wall0.getThickness(), 0.01F);
      assertEquals(5670.719F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      float float0 = wall0.getXEnd();
      assertEquals(2415.7822F, float0, 0.01F);
      assertEquals((-2616.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5670.719F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-100.10889F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1308.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(2333.0557F, wall0.getHeight(), 0.01F);
      assertEquals((-2616.0F), wall0.getXStart(), 0.01F);
      assertEquals(2415.7822F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2320.38F), wall0.getThickness(), 0.01F);
      assertEquals(5670.719F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      TexturesCategory texturesCategory0 = new TexturesCategory("3");
      assertEquals("3", texturesCategory0.getName());
      assertEquals(0, texturesCategory0.getTexturesCount());
      assertNotNull(texturesCategory0);
      
      int int1 = texturesCategory0.getIndexOfTexture((CatalogTexture) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals("3", texturesCategory0.getName());
      assertEquals(0, texturesCategory0.getTexturesCount());
      
      // Undeclared exception!
      try { 
        texturesCategory0.getTexture((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Wall wall0 = new Wall((-19.736471F), (-19.736471F), (-19.736471F), (-19.736471F), (-19.736471F));
      assertEquals((-19.736471F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-19.736471F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-19.736471F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-19.736471F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-19.736471F), wall0.getThickness(), 0.01F);
      assertEquals((-19.736471F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-19.736471F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-19.736471F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-19.736471F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-19.736471F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-19.736471F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-19.736471F), wall0.getThickness(), 0.01F);
      assertEquals((-19.736471F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-19.736471F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Wall wall0 = new Wall(19.755266F, 19.755266F, 19.755266F, 19.755266F, 19.755266F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(19.755266F, wall0.getYStart(), 0.01F);
      assertEquals(19.755266F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(19.755266F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(19.755266F, wall0.getYEnd(), 0.01F);
      assertEquals(19.755266F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(19.755266F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(19.755266F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(19.755266F, 19.755266F, 19.755266F, 19.755266F, 19.755266F, 19.755266F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(19.755266F, wall1.getYStart(), 0.01F);
      assertEquals(19.755266F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(19.755266F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(19.755266F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(19.755266F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(19.755266F, wall1.getHeight(), 0.01F);
      assertEquals(19.755266F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(19.755266F, wall1.getThickness(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(19.755266F, wall0.getYStart(), 0.01F);
      assertEquals(19.755266F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(19.755266F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(19.755266F, wall0.getYEnd(), 0.01F);
      assertEquals(19.755266F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(19.755266F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(19.755266F, wall0.getThickness(), 0.01F);
      assertEquals(19.755266F, wall1.getYStart(), 0.01F);
      assertEquals(19.755266F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(19.755266F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(19.755266F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(19.755266F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(19.755266F, wall1.getHeight(), 0.01F);
      assertEquals(19.755266F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(19.755266F, wall1.getThickness(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(19.755266F, wall0.getYStart(), 0.01F);
      assertEquals(19.755266F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(19.755266F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(19.755266F, wall0.getYEnd(), 0.01F);
      assertEquals(19.755266F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(19.755266F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(19.755266F, wall0.getThickness(), 0.01F);
      assertEquals(19.755266F, wall1.getYStart(), 0.01F);
      assertEquals(19.755266F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(19.755266F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(19.755266F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(19.755266F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(19.755266F, wall1.getHeight(), 0.01F);
      assertEquals(19.755266F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(19.755266F, wall1.getThickness(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(19.755266F, wall0.getYStart(), 0.01F);
      assertEquals(19.755266F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(19.755266F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(19.755266F, wall0.getYEnd(), 0.01F);
      assertEquals(19.755266F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(19.755266F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(19.755266F, wall0.getThickness(), 0.01F);
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertNotSame(wall1, wall0);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(19.755266F, wall1.getYStart(), 0.01F);
      assertEquals(19.755266F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(19.755266F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(19.755266F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(19.755266F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(19.755266F, wall1.getHeight(), 0.01F);
      assertEquals(19.755266F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(19.755266F, wall1.getThickness(), 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Wall wall0 = new Wall((-1678.2F), (-1678.2F), (-1678.2F), (-1678.2F), (-1678.2F));
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1678.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1678.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setPattern((TextureImage) null);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1678.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1678.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      TextureImage textureImage0 = wall0.getPattern();
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1678.2F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1678.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(textureImage0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Wall wall0 = new Wall((-2133.0F), (-2133.0F), (-2133.0F), (-1614.955F), 2.0F, 0.0F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(518.04504F, wall0.getLength(), 0.01F);
      assertEquals((-2133.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1614.955F), wall0.getYEnd(), 0.01F);
      assertEquals(518.04504F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2133.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1873.9775F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2133.0F), wall0.getYStart(), 0.01F);
      assertEquals((-2133.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(518.04504F, wall0.getLength(), 0.01F);
      assertEquals((-2133.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1614.955F), wall0.getYEnd(), 0.01F);
      assertEquals(518.04504F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2133.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1873.9775F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2133.0F), wall0.getYStart(), 0.01F);
      assertEquals((-2133.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, (float)float0, 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(518.04504F, wall0.getLength(), 0.01F);
      assertEquals((-2133.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1614.955F), wall0.getYEnd(), 0.01F);
      assertEquals(518.04504F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2133.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1873.9775F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2133.0F), wall0.getYStart(), 0.01F);
      assertEquals((-2133.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-2851.1F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2851.1F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      boolean boolean1 = wall0.containsWallStartAt(188.3F, (-2133.0F), (-1853.0F));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(518.04504F, wall0.getLength(), 0.01F);
      assertEquals((-2133.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1614.955F), wall0.getYEnd(), 0.01F);
      assertEquals(518.04504F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2133.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1873.9775F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2133.0F), wall0.getYStart(), 0.01F);
      assertEquals((-2133.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setHeight((Float) null);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(518.04504F, wall0.getLength(), 0.01F);
      assertEquals((-2133.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1614.955F), wall0.getYEnd(), 0.01F);
      assertEquals(518.04504F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2133.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-1873.9775F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2133.0F), wall0.getYStart(), 0.01F);
      assertEquals((-2133.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(518.04504F, wall0.getLength(), 0.01F);
      assertEquals((-2133.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1614.955F), wall0.getYEnd(), 0.01F);
      assertEquals(518.04504F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2133.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-1873.9775F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2133.0F), wall0.getYStart(), 0.01F);
      assertEquals((-2133.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2133.0F), wall1.getYStart(), 0.01F);
      assertEquals((-2133.0F), wall1.getXStart(), 0.01F);
      assertEquals(518.04504F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1614.955F), wall1.getYEnd(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertEquals((-2133.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2133.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(518.04504F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1873.9775F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotNull(wall1);
      
      boolean boolean2 = wall0.intersectsRectangle((-2133.0F), 0.0F, 0.0F, 2.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(wall0, wall1);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(518.04504F, wall0.getLength(), 0.01F);
      assertEquals((-2133.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1614.955F), wall0.getYEnd(), 0.01F);
      assertEquals(518.04504F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2133.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-1873.9775F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2133.0F), wall0.getYStart(), 0.01F);
      assertEquals((-2133.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 1296.9031F, 1646.4475F, 0.1F, (-4643.938F));
      assertEquals(823.27374F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(648.5015F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1296.9031F, wall0.getYStart(), 0.01F);
      assertEquals(2095.7478F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1646.4475F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-4643.938F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2095.7478F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.getWallAtEnd();
      assertEquals(823.27374F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(648.5015F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1296.9031F, wall0.getYStart(), 0.01F);
      assertEquals(2095.7478F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1646.4475F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-4643.938F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2095.7478F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Wall wall0 = new Wall(48.91553F, 48.91553F, 48.91553F, 48.91553F, 48.91553F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(48.91553F, wall0.getXEnd(), 0.01F);
      assertEquals(48.91553F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(48.91553F, wall0.getXStart(), 0.01F);
      assertEquals(48.91553F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(48.91553F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(48.91553F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(48.91553F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.getLeftSideColor();
      assertEquals(48.91553F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-1.0791351F), 0.0F, (-1.0791351F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(1898.5F);
      assertEquals(1898.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = float0.equals(integer0);
      assertFalse(boolean0);
      
      wall0.setArcExtent(float0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0139803F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(2180.623F, wall0.getLength(), 0.01F);
      assertEquals(1898.5F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Float float1 = new Float((-3.003345F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-3.003345F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0139803F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(2180.623F, wall0.getLength(), 0.01F);
      assertEquals(1898.5F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0139803F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(2180.623F, wall0.getLength(), 0.01F);
      assertEquals(1898.5F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, (-2851.1F), 0.0F, (-3.003345F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertNotNull(wall1);
      
      Float float2 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-3.003345F), (float)float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0139803F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(2180.623F, wall0.getLength(), 0.01F);
      assertEquals(1898.5F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float(0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(0.01F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0139803F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(2180.623F, wall0.getLength(), 0.01F);
      assertEquals(1898.5F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      
      boolean boolean1 = wall0.intersectsRectangle((-1393.8479F), (-2851.1F), (-1.0791351F), (-2247.7522F));
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0139803F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(2180.623F, wall0.getLength(), 0.01F);
      assertEquals(1898.5F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0139803F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(2180.623F, wall0.getLength(), 0.01F);
      assertEquals(1898.5F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      
      Float float4 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((-3.003345F), (float)float4, 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0139803F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(2180.623F, wall0.getLength(), 0.01F);
      assertEquals(1898.5F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(float4);
      
      Float float5 = wall1.getHeightAtEnd();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertNull(float5);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0139803F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(2180.623F, wall0.getLength(), 0.01F);
      assertEquals(1898.5F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      
      boolean boolean2 = wall1.intersectsRectangle(1.15652966E9F, 512.7397F, 0.13753456F, 2.0F);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean2);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      
      wall1.move(3481.1F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3481.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3481.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3481.1F, wall1.getXStart(), 0.01F);
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Wall wall0 = new Wall((-0.507157F), (-0.507157F), (-0.507157F), (-0.507157F), (-0.507157F));
      assertEquals((-0.507157F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.507157F), wall0.getYStart(), 0.01F);
      assertEquals((-0.507157F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.507157F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.507157F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.507157F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.507157F), wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-0.507157F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.507157F), wall0.getYStart(), 0.01F);
      assertEquals((-0.507157F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.507157F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.507157F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.507157F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.507157F), wall0.getXEnd(), 0.01F);
      
      Wall wall1 = new Wall((-0.8947971F), (-0.8947971F), (-0.507157F), (-0.8947971F), (-0.8947971F), (-0.507157F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-0.8947971F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.7009771F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.507157F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-0.8947971F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.8947971F), wall1.getXStart(), 0.01F);
      assertEquals(0.38764006F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-0.507157F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.38764006F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-0.8947971F), wall1.getThickness(), 0.01F);
      assertEquals((-0.8947971F), wall1.getYStart(), 0.01F);
      assertNotNull(wall1);
      
      Float float0 = new Float(818.91223F);
      assertEquals(818.91223F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals(818.91223F, float1, 0.01F);
      
      wall1.setArcExtent((Float) 818.91223F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-0.8947971F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.7009771F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(183.0782F, wall1.getLength(), 0.01F);
      assertEquals((-0.507157F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-0.7833786F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.8947971F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(818.91223F, wall1.getArcExtent(), 0.01F);
      assertEquals((-0.507157F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.38764006F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-0.8947971F), wall1.getThickness(), 0.01F);
      assertEquals((-0.8947971F), wall1.getYStart(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-0.507157F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.507157F), wall0.getYStart(), 0.01F);
      assertEquals((-0.507157F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.507157F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.507157F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.507157F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.507157F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.8947971F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.7009771F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(183.0782F, wall1.getLength(), 0.01F);
      assertEquals((-0.507157F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-0.7833786F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.8947971F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(818.91223F, wall1.getArcExtent(), 0.01F);
      assertEquals((-0.507157F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.38764006F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-0.8947971F), wall1.getThickness(), 0.01F);
      assertEquals((-0.8947971F), wall1.getYStart(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-0.507157F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.507157F), wall0.getYStart(), 0.01F);
      assertEquals((-0.507157F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.507157F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.507157F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.507157F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.507157F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.8947971F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.7009771F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(183.0782F, wall1.getLength(), 0.01F);
      assertEquals((-0.507157F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-0.7833786F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.8947971F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(818.91223F, wall1.getArcExtent(), 0.01F);
      assertEquals((-0.507157F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.38764006F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-0.8947971F), wall1.getThickness(), 0.01F);
      assertEquals((-0.8947971F), wall1.getYStart(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      assertEquals((-0.507157F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.507157F), wall0.getYStart(), 0.01F);
      assertEquals((-0.507157F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.507157F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.507157F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.507157F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.507157F), wall0.getXEnd(), 0.01F);
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals((-0.507157F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.507157F), wall0.getYStart(), 0.01F);
      assertEquals((-0.507157F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.507157F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.507157F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.507157F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.507157F), wall0.getXEnd(), 0.01F);
      assertNotNull(floatArray1);
      
      float[][] floatArray2 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(2, floatArray2.length);
      assertNotSame(wall1, wall0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals((-0.8947971F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.7009771F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(183.0782F, wall1.getLength(), 0.01F);
      assertEquals((-0.507157F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-0.7833786F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.8947971F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(818.91223F, wall1.getArcExtent(), 0.01F);
      assertEquals((-0.507157F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.38764006F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-0.8947971F), wall1.getThickness(), 0.01F);
      assertEquals((-0.8947971F), wall1.getYStart(), 0.01F);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Wall wall0 = new Wall(0.2215297F, 0.2215297F, 0.2215297F, 0.2215297F, 0.2215297F);
      assertEquals(0.2215297F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2215297F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.2215297F, wall0.getYStart(), 0.01F);
      assertEquals(0.2215297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.2215297F, wall0.getXEnd(), 0.01F);
      assertEquals(0.2215297F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.2215297F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2215297F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.2215297F, wall0.getYStart(), 0.01F);
      assertEquals(0.2215297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.2215297F, wall0.getXEnd(), 0.01F);
      assertEquals(0.2215297F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall0.getYEnd(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint((-222.0455F), (-222.0455F), 0.2215297F);
      assertFalse(boolean0);
      assertEquals(0.2215297F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2215297F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.2215297F, wall0.getYStart(), 0.01F);
      assertEquals(0.2215297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.2215297F, wall0.getXEnd(), 0.01F);
      assertEquals(0.2215297F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall0.getYEnd(), 0.01F);
      
      Wall wall1 = wall0.getWallAtEnd();
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertEquals(0.2215297F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2215297F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.2215297F, wall0.getYStart(), 0.01F);
      assertEquals(0.2215297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.2215297F, wall0.getXEnd(), 0.01F);
      assertEquals(0.2215297F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall0.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.2215297F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.2215297F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.2215297F, wall1.getThickness(), 0.01F);
      assertEquals(0.2215297F, wall1.getXEnd(), 0.01F);
      assertEquals(0.2215297F, wall1.getYEnd(), 0.01F);
      assertEquals(0.2215297F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.2215297F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setWallAtStart(wall0);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertEquals(0.2215297F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2215297F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.2215297F, wall0.getYStart(), 0.01F);
      assertEquals(0.2215297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.2215297F, wall0.getXEnd(), 0.01F);
      assertEquals(0.2215297F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall0.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.2215297F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.2215297F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.2215297F, wall1.getThickness(), 0.01F);
      assertEquals(0.2215297F, wall1.getXEnd(), 0.01F);
      assertEquals(0.2215297F, wall1.getYEnd(), 0.01F);
      assertEquals(0.2215297F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.2215297F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      
      wall1.setYEnd(0.2215297F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertEquals(0.2215297F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2215297F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.2215297F, wall0.getYStart(), 0.01F);
      assertEquals(0.2215297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.2215297F, wall0.getXEnd(), 0.01F);
      assertEquals(0.2215297F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall0.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.2215297F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.2215297F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.2215297F, wall1.getThickness(), 0.01F);
      assertEquals(0.2215297F, wall1.getXEnd(), 0.01F);
      assertEquals(0.2215297F, wall1.getYEnd(), 0.01F);
      assertEquals(0.2215297F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.2215297F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      
      wall0.setWallAtEnd((Wall) null);
      assertSame(wall0, wall1);
      assertEquals(0.2215297F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2215297F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.2215297F, wall0.getYStart(), 0.01F);
      assertEquals(0.2215297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.2215297F, wall0.getXEnd(), 0.01F);
      assertEquals(0.2215297F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall0.getYEnd(), 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertEquals(0.2215297F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2215297F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.2215297F, wall0.getYStart(), 0.01F);
      assertEquals(0.2215297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.2215297F, wall0.getXEnd(), 0.01F);
      assertEquals(0.2215297F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall0.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.2215297F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.2215297F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.2215297F, wall1.getThickness(), 0.01F);
      assertEquals(0.2215297F, wall1.getXEnd(), 0.01F);
      assertEquals(0.2215297F, wall1.getYEnd(), 0.01F);
      assertEquals(0.2215297F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.2215297F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0.2215297F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2215297F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.2215297F, wall0.getYStart(), 0.01F);
      assertEquals(0.2215297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.2215297F, wall0.getXEnd(), 0.01F);
      assertEquals(0.2215297F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall0.getYEnd(), 0.01F);
      assertNotNull(floatArray1);
      
      int int0 = Float.floatToIntBits((-2810.424F));
      assertEquals((-986732855), int0);
      
      wall1.setHeightAtEnd((Float) (-2810.424F));
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertEquals(0.2215297F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2215297F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.2215297F, wall0.getYStart(), 0.01F);
      assertEquals(0.2215297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.2215297F, wall0.getXEnd(), 0.01F);
      assertEquals((-2810.424F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.2215297F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall0.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.2215297F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2810.424F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.2215297F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.2215297F, wall1.getThickness(), 0.01F);
      assertEquals(0.2215297F, wall1.getXEnd(), 0.01F);
      assertEquals(0.2215297F, wall1.getYEnd(), 0.01F);
      assertEquals(0.2215297F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.2215297F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-1.0791351F), 0.0F, (-1.0791351F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall1 = new Wall(5.6169157F, 5.6169157F, 0.0F, 0.0F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(7.943518F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2.8084579F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(7.943518F, wall1.getLength(), 0.01F);
      assertEquals(5.6169157F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2.8084579F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(5.6169157F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotNull(wall1);
      
      Float float1 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(7.943518F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2.8084579F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(7.943518F, wall1.getLength(), 0.01F);
      assertEquals(5.6169157F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2.8084579F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(5.6169157F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(float1);
      
      float float2 = Float.sum((-1.0791351F), 944.7096F);
      assertEquals(943.63043F, float2, 0.01F);
      
      wall1.setThickness((-1739.4F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(7.943518F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.8084579F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(7.943518F, wall1.getLength(), 0.01F);
      assertEquals(5.6169157F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2.8084579F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(5.6169157F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7.943518F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.8084579F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(7.943518F, wall1.getLength(), 0.01F);
      assertEquals(5.6169157F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2.8084579F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(5.6169157F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      Float float3 = new Float(5.6169157F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(5.6169157F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7.943518F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.8084579F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(7.943518F, wall1.getLength(), 0.01F);
      assertEquals(5.6169157F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2.8084579F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(5.6169157F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      boolean boolean0 = wall1.intersectsRectangle(1263.4F, 0.0F, 0.0F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      assertNotSame(wall1, wall0);
      assertEquals(7.943518F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.8084579F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(7.943518F, wall1.getLength(), 0.01F);
      assertEquals(5.6169157F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2.8084579F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(5.6169157F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      wall0.move((-1.0791351F), 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-1.0791351F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-2.1582701F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.6187027F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall1, wall0);
      assertEquals(7.943518F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.8084579F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(7.943518F, wall1.getLength(), 0.01F);
      assertEquals(5.6169157F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2.8084579F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(5.6169157F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals((-1.0791351F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-2.1582701F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.6187027F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(floatArray1);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone(list0);
      assertTrue(list1.equals((Object)list0));
      assertFalse(list1.contains(wall0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotSame(list1, list0);
      assertNotSame(list0, list1);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list1);
      
      List<Wall> list2 = Wall.clone(list1);
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list0.equals((Object)list1));
      assertFalse(list1.contains(wall0));
      assertFalse(list2.contains(wall0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotSame(list1, list0);
      assertNotSame(list1, list2);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list2);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Wall wall0 = new Wall((-0.16079742F), (-0.16079742F), (-0.16079742F), (-0.16079742F), (-0.16079742F), (-0.16079742F));
      assertEquals((-0.16079742F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.16079742F), wall0.getThickness(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-0.16079742F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXStart(), 0.01F);
      assertEquals((-0.16079742F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.16079742F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYEnd((-0.16079742F));
      assertEquals((-0.16079742F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.16079742F), wall0.getThickness(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-0.16079742F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXStart(), 0.01F);
      assertEquals((-0.16079742F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.16079742F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-0.16079742F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.16079742F), wall0.getThickness(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-0.16079742F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXStart(), 0.01F);
      assertEquals((-0.16079742F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.16079742F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-0.16079742F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall1.getYStart(), 0.01F);
      assertEquals((-0.16079742F), wall1.getThickness(), 0.01F);
      assertEquals((-0.16079742F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.16079742F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.16079742F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.16079742F), wall1.getHeight(), 0.01F);
      assertNotNull(wall1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-1.0791351F), 0.0F, (-1.0791351F));
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      Float float0 = new Float((-3.003345F));
      assertEquals((-3.003345F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.min((-1.0791351F), (-1.0791351F));
      assertEquals((-1.0791351F), float1, 0.01F);
      
      wall0.setHeight(float0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, (-1.0791351F), (-1.0791351F), (-1.0791351F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0791351F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall1.getXEnd(), 0.01F);
      assertEquals(1.0791351F, wall1.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1.0791351F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.53956753F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1.0791351F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotNull(wall1);
      
      Wall wall2 = wall0.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0791351F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.53956753F), wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-3.003345F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-1.0791351F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1.0791351F, wall2.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNotNull(wall2);
      
      wall2.setXEnd((-1.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-3.003345F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      
      wall2.setArcExtent(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertFalse(wall2.equals((Object)wall1));
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.034617063F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.5052673F, wall0.getLength(), 0.01F);
      assertEquals((-3.003345F), wall0.getArcExtent(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-3.003345F), wall2.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-3.003345F), wall2.getHeight(), 0.01F);
      assertEquals(1.5052673F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.034617063F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      
      // Undeclared exception!
      try { 
        wall2.getPoints();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      wall0.setYEnd((-819.6F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-409.8F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(819.6F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-819.6F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(819.6F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setWallAtStart((Wall) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-409.8F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(819.6F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-819.6F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(819.6F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-409.8F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(819.6F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-819.6F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(819.6F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Wall wall0 = new Wall(8.511597F, 8.511597F, 8.511597F, 8.511597F, 8.511597F);
      assertEquals(8.511597F, wall0.getYEnd(), 0.01F);
      assertEquals(8.511597F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(8.511597F, wall0.getThickness(), 0.01F);
      assertEquals(8.511597F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(8.511597F, wall0.getYStart(), 0.01F);
      assertEquals(8.511597F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(8.511597F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getLength();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(8.511597F, wall0.getYEnd(), 0.01F);
      assertEquals(8.511597F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(8.511597F, wall0.getThickness(), 0.01F);
      assertEquals(8.511597F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(8.511597F, wall0.getYStart(), 0.01F);
      assertEquals(8.511597F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(8.511597F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      
      Wall wall1 = new Wall(0.0F, (-3.003345F), 0.0F, (-3.003345F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3.003345F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3.003345F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle((-1393.8479F), 0.01F, 0.0F, (-1.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3.003345F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      
      Float float0 = new Float((-3.003345F));
      assertEquals((-3.003345F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3.003345F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      
      boolean boolean1 = wall1.containsWallStartAt(0.01F, (-1393.8479F), 51.70028F);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3.003345F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      
      boolean boolean2 = wall0.intersectsRectangle((-3.003345F), 0.0F, 0.0F, (-3.003345F));
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      
      wall1.move(0.01F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.01F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.01F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3.003345F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      
      Float float1 = wall0.getArcExtent();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(float1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float0 = new Float((-3.003345F));
      assertEquals((-3.003345F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setYStart(0.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, (-3.003345F), 0.0F, (-3.003345F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-3.003345F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall1));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall1));
      assertFalse(list0.contains(wall1));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone(list0);
      assertTrue(list1.equals((Object)list0));
      assertFalse(linkedList0.contains(wall1));
      assertFalse(list0.contains(wall1));
      assertFalse(list1.contains(wall1));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      List<Wall> list2 = Wall.clone(list1);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertFalse(linkedList0.contains(wall1));
      assertFalse(list0.contains(wall1));
      assertFalse(list1.contains(wall1));
      assertFalse(list2.contains(wall1));
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotNull(list2);
      
      List<Wall> list3 = Wall.clone(list2);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list1));
      assertFalse(linkedList0.contains(wall1));
      assertFalse(list0.contains(wall1));
      assertFalse(list1.contains(wall1));
      assertFalse(list2.contains(wall1));
      assertFalse(list3.contains(wall1));
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list0, list3);
      assertNotSame(list1, list2);
      assertNotSame(list1, list3);
      assertNotSame(list1, list0);
      assertNotSame(list2, list0);
      assertNotSame(list2, list3);
      assertNotSame(list2, list1);
      assertNotSame(list3, list1);
      assertNotSame(list3, list2);
      assertNotSame(list3, list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertNotNull(list3);
      
      List<Wall> list4 = Wall.clone(list3);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list0.equals((Object)list3));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list1.equals((Object)list3));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list3));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list1));
      assertTrue(list4.equals((Object)list3));
      assertTrue(list4.equals((Object)list0));
      assertTrue(list4.equals((Object)list2));
      assertTrue(list4.equals((Object)list1));
      assertFalse(linkedList0.contains(wall1));
      assertFalse(list0.contains(wall1));
      assertFalse(list1.contains(wall1));
      assertFalse(list2.contains(wall1));
      assertFalse(list3.contains(wall1));
      assertFalse(list4.contains(wall1));
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list0, list4);
      assertNotSame(list0, list3);
      assertNotSame(list1, list2);
      assertNotSame(list1, list4);
      assertNotSame(list1, list3);
      assertNotSame(list1, list0);
      assertNotSame(list2, list0);
      assertNotSame(list2, list3);
      assertNotSame(list2, list4);
      assertNotSame(list2, list1);
      assertNotSame(list3, list1);
      assertNotSame(list3, list4);
      assertNotSame(list3, list2);
      assertNotSame(list3, list0);
      assertNotSame(list4, list1);
      assertNotSame(list4, list3);
      assertNotSame(list4, list2);
      assertNotSame(list4, list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertEquals(0, list4.size());
      assertTrue(list4.isEmpty());
      assertNotNull(list4);
      
      Float float1 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(float1);
      
      Float float2 = new Float(0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.01F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-3.003345F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      
      wall1.setYStart(0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle((-1393.8479F), (-2851.1F), 0.0F, (-2247.7522F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      
      Float float3 = wall1.getHeightAtEnd();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(float3);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      
      boolean boolean1 = wall0.intersectsRectangle((-3.003345F), 0.0F, (-2219.13F), (-2247.7522F));
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall1.move((-2851.1F), (-2851.1F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3.003418F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2851.1F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-2852.6018F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2854.1035F), wall1.getYEnd(), 0.01F);
      assertEquals(3.003418F, wall1.getLength(), 0.01F);
      assertEquals((-2851.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-2851.1F), wall1.getXStart(), 0.01F);
      
      float float4 = wall0.getStartPointToEndPointDistance();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, float4, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Wall wall0 = new Wall((-0.16079742F), (-0.16079742F), (-0.16079742F), (-0.16079742F), (-0.16079742F), (-0.16079742F));
      assertEquals((-0.16079742F), wall0.getThickness(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYStart(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.16079742F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((-0.16079742F));
      assertEquals((-0.16079742F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals((-0.16079742F), wall0.getThickness(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYStart(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.16079742F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.16079742F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals((-0.16079742F), wall0.getThickness(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYStart(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.16079742F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.16079742F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float float1 = wall0.getLength();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals((-0.16079742F), wall0.getThickness(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYStart(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.16079742F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.16079742F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Wall wall0 = new Wall((-26.0F), 0.0F, 0.0F, (-26.0F), (-7.45F));
      assertEquals((-7.45F), wall0.getThickness(), 0.01F);
      assertEquals((-13.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(36.769554F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-26.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-13.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(36.769554F, wall0.getLength(), 0.01F);
      assertEquals((-26.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setXEnd(0.0F);
      assertEquals((-7.45F), wall0.getThickness(), 0.01F);
      assertEquals((-13.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(36.769554F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-26.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-13.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(36.769554F, wall0.getLength(), 0.01F);
      assertEquals((-26.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setXStart(0.0F);
      assertEquals(26.0F, wall0.getLength(), 0.01F);
      assertEquals((-7.45F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-26.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-13.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(26.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, (-607.7F), (-4470.84F), (-735.664F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-671.682F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(4472.671F, wall1.getLength(), 0.01F);
      assertEquals((-4470.84F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-735.664F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-607.7F), wall1.getYStart(), 0.01F);
      assertEquals((-2235.42F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(4472.671F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNotNull(wall1);
      
      Float float0 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-671.682F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(4472.671F, wall1.getLength(), 0.01F);
      assertEquals((-4470.84F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-735.664F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-607.7F), wall1.getYStart(), 0.01F);
      assertEquals((-2235.42F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(4472.671F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNull(float0);
      
      Float float1 = new Float((-735.664F));
      assertEquals((-735.664F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight((Float) null);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(26.0F, wall0.getLength(), 0.01F);
      assertEquals((-7.45F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-26.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-13.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(26.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall2 = wall1.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-671.682F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(4472.671F, wall1.getLength(), 0.01F);
      assertEquals((-4470.84F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-735.664F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-607.7F), wall1.getYStart(), 0.01F);
      assertEquals((-2235.42F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(4472.671F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-735.664F), wall2.getYEnd(), 0.01F);
      assertEquals((-4470.84F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-671.682F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(4472.671F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals((-607.7F), wall2.getYStart(), 0.01F);
      assertEquals((-2235.42F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(4472.671F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeight());
      assertNotNull(wall2);
      
      wall2.setYEnd((-7.45F));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-671.682F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(4472.671F, wall1.getLength(), 0.01F);
      assertEquals((-4470.84F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-735.664F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-607.7F), wall1.getYStart(), 0.01F);
      assertEquals((-2235.42F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(4472.671F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(4510.954F, wall2.getLength(), 0.01F);
      assertEquals(4510.954F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4470.84F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-307.575F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals((-607.7F), wall2.getYStart(), 0.01F);
      assertEquals((-2235.42F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-7.45F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeight());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Wall wall0 = new Wall((-1739.4F), (-1.0F), 3481.1F, 2015.25F, (-1.0F));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(5596.3276F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1007.125F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5596.3276F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsPoint(3481.1F, (-2311.0F), (-1.0F));
      assertFalse(boolean0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(5596.3276F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1007.125F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5596.3276F, wall0.getLength(), 0.01F);
      
      wall0.setYStart(0.0F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(1007.625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5595.968F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5595.968F, wall0.getLength(), 0.01F);
      
      Level level0 = new Level((String) null, 2430.65F, (-1601.39F), (-2101.0952F));
      assertNull(level0.getName());
      assertEquals((-2101.0952F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertEquals(2430.65F, level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      wall0.setLevel(level0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(1007.625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5595.968F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5595.968F, wall0.getLength(), 0.01F);
      assertNull(level0.getName());
      assertEquals((-2101.0952F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertEquals(2430.65F, level0.getElevation(), 0.01F);
      
      Level level1 = new Level((String) null, (-256.43024F), (-3604.5967F), 400.5F);
      assertFalse(level1.equals((Object)level0));
      assertEquals(400.5F, level1.getHeight(), 0.01F);
      assertNull(level1.getName());
      assertTrue(level1.isVisible());
      assertEquals((-256.43024F), level1.getElevation(), 0.01F);
      assertEquals((-3604.5967F), level1.getFloorThickness(), 0.01F);
      assertNotNull(level1);
      
      level0.setFloorThickness((-806.47F));
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level1);
      assertNull(level0.getName());
      assertEquals((-2101.0952F), level0.getHeight(), 0.01F);
      assertEquals((-806.47F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2430.65F, level0.getElevation(), 0.01F);
      
      boolean boolean1 = wall0.isAtLevel(level1);
      assertFalse(level1.equals((Object)level0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(level1, level0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(1007.625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5595.968F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5595.968F, wall0.getLength(), 0.01F);
      assertEquals(400.5F, level1.getHeight(), 0.01F);
      assertNull(level1.getName());
      assertTrue(level1.isVisible());
      assertEquals((-256.43024F), level1.getElevation(), 0.01F);
      assertEquals((-3604.5967F), level1.getFloorThickness(), 0.01F);
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals(870.85004F, float0, 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(1007.625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5595.968F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5595.968F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Wall wall0 = new Wall(2015.25F, 2015.25F, (-1739.4F), (-1739.4F), 3481.1F, 2015.25F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(137.92499F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3481.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(5309.877F, wall0.getLength(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals(2015.25F, wall0.getYStart(), 0.01F);
      assertEquals(2015.25F, wall0.getXStart(), 0.01F);
      assertEquals(137.92499F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5309.877F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsPoint(3481.1F, (-2310.5024F), (-1.0F));
      assertFalse(boolean0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(137.92499F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3481.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(5309.877F, wall0.getLength(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals(2015.25F, wall0.getYStart(), 0.01F);
      assertEquals(2015.25F, wall0.getXStart(), 0.01F);
      assertEquals(137.92499F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5309.877F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      
      wall0.setLeftSideShininess(2015.25F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(137.92499F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3481.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(5309.877F, wall0.getLength(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals(2015.25F, wall0.getYStart(), 0.01F);
      assertEquals(2015.25F, wall0.getXStart(), 0.01F);
      assertEquals(137.92499F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5309.877F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(2015.25F, wall0.getLeftSideShininess(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = linkedList0.add(wall0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(wall0));
      assertNull(wall0.getLeftSideColor());
      assertEquals(137.92499F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3481.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(5309.877F, wall0.getLength(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals(2015.25F, wall0.getYStart(), 0.01F);
      assertEquals(2015.25F, wall0.getXStart(), 0.01F);
      assertEquals(137.92499F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5309.877F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(2015.25F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1, linkedList0.size());
      
      Stream<Wall> stream0 = linkedList0.stream();
      assertTrue(linkedList0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertNotNull(stream0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(wall0.getLeftSideColor());
      assertEquals(137.92499F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3481.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(5309.877F, wall0.getLength(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals(2015.25F, wall0.getYStart(), 0.01F);
      assertEquals(2015.25F, wall0.getXStart(), 0.01F);
      assertEquals(137.92499F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5309.877F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(2015.25F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(integer0);
      
      float float0 = wall0.getYEnd();
      assertEquals((-1739.4F), float0, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(137.92499F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3481.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(5309.877F, wall0.getLength(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals(2015.25F, wall0.getYStart(), 0.01F);
      assertEquals(2015.25F, wall0.getXStart(), 0.01F);
      assertEquals(137.92499F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5309.877F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(2015.25F, wall0.getLeftSideShininess(), 0.01F);
      
      float float1 = wall0.getYArcCircleCenter();
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(137.92499F, float1, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(137.92499F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3481.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(5309.877F, wall0.getLength(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertEquals(2015.25F, wall0.getYStart(), 0.01F);
      assertEquals(2015.25F, wall0.getXStart(), 0.01F);
      assertEquals(137.92499F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5309.877F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(2015.25F, wall0.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Wall wall0 = new Wall((-1678.2F), 0.0F, (-1678.2F), 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1678.2F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-1678.2F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      
      Integer integer0 = new Integer(2268);
      assertEquals(2268, (int)integer0);
      assertNotNull(integer0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean0);
      assertFalse(linkedList0.contains(wall0));
      assertTrue(linkedList0.contains(wall1));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1678.2F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-1678.2F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1, linkedList0.size());
      
      Stream<Wall> stream0 = linkedList0.stream();
      assertFalse(linkedList0.contains(wall0));
      assertTrue(linkedList0.contains(wall1));
      assertEquals(1, linkedList0.size());
      assertNotNull(stream0);
      
      List<Wall> list0 = new LinkedList<Wall>();
      assertFalse(list0.contains(wall0));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Wall wall0 = new Wall((-1739.4F), (-1739.4F), 0.0F, 0.0F, (-625.596F));
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(float0);
      
      Float float1 = new Float((-2851.1F));
      assertEquals((-2851.1F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight(float1);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setYEnd(878.5F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals(3143.0737F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-430.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(878.5F, wall1.getYEnd(), 0.01F);
      assertEquals(3143.0737F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Wall wall0 = new Wall(48.392612F, 48.392612F, 48.392612F, 48.392612F, 48.392612F, 48.392612F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(48.392612F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(48.392612F, wall0.getXStart(), 0.01F);
      assertEquals(48.392612F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(48.392612F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(48.392612F, wall0.getXEnd(), 0.01F);
      assertEquals(48.392612F, wall0.getThickness(), 0.01F);
      assertEquals(48.392612F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(48.392612F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(48.392612F, (float)float0, 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(48.392612F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(48.392612F, wall0.getXStart(), 0.01F);
      assertEquals(48.392612F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(48.392612F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(48.392612F, wall0.getXEnd(), 0.01F);
      assertEquals(48.392612F, wall0.getThickness(), 0.01F);
      assertEquals(48.392612F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(48.392612F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(48.392612F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(48.392612F, wall0.getXStart(), 0.01F);
      assertEquals(48.392612F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(48.392612F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(48.392612F, wall0.getXEnd(), 0.01F);
      assertEquals(48.392612F, wall0.getThickness(), 0.01F);
      assertEquals(48.392612F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(48.392612F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, (-1739.4F), (-1.0F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(wall1);
      
      Float float0 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(float0);
      
      float float1 = Float.sum(0.0F, (-1739.4F));
      assertEquals((-1739.4F), float1, 0.01F);
      
      Float float2 = new Float(0.0F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall1.setHeight(float2);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      Wall wall2 = new Wall((-1724.7719F), (-2851.1F), 0.0F, (-1739.4F), 0.0F);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-862.3859F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1724.7719F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2052.0027F, wall2.getLength(), 0.01F);
      assertEquals((-2295.25F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(2052.0027F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-2851.1F), wall2.getYStart(), 0.01F);
      assertEquals((-1739.4F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNotNull(wall2);
      
      Float float3 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(float3);
      
      Float float4 = new Float(1.0F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals(1.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      wall0.setHeight((Float) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      wall2.setWallAtStart(wall1);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-862.3859F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1724.7719F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2052.0027F, wall2.getLength(), 0.01F);
      assertEquals((-2295.25F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(2052.0027F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-2851.1F), wall2.getYStart(), 0.01F);
      assertEquals((-1739.4F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      
      boolean boolean0 = wall1.intersectsRectangle(512.7397F, 0.01F, 0.0F, 2.0F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      wall1.move((-2851.1F), 0.0F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertEquals((-2851.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2851.1F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-2851.1F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      float float5 = wall2.getXEnd();
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotEquals(float5, float1, 0.01F);
      assertEquals(0.0F, float5, 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-862.3859F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1724.7719F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2052.0027F, wall2.getLength(), 0.01F);
      assertEquals((-2295.25F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(2052.0027F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-2851.1F), wall2.getYStart(), 0.01F);
      assertEquals((-1739.4F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      
      float float6 = wall2.getXStart();
      assertNotEquals(float6, float1, 0.01F);
      assertNotEquals(float6, float5, 0.01F);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-1724.7719F), float6, 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-862.3859F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1724.7719F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2052.0027F, wall2.getLength(), 0.01F);
      assertEquals((-2295.25F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(2052.0027F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-2851.1F), wall2.getYStart(), 0.01F);
      assertEquals((-1739.4F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      
      Wall wall3 = wall1.getWallAtEnd();
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertEquals((-2851.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2851.1F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-2851.1F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall3);
      
      float float7 = wall1.getYArcCircleCenter();
      assertNotEquals(float7, float1, 0.01F);
      assertNotEquals(float7, float6, 0.01F);
      assertNotEquals(float7, float5, 0.01F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-869.7F), float7, 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertEquals((-2851.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2851.1F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-2851.1F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertEquals((-2851.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2851.1F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-2851.1F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(floatArray0);
      
      float float8 = wall0.getYStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNotEquals(float8, float1, 0.01F);
      assertEquals(float8, float5, 0.01F);
      assertNotEquals(float8, float6, 0.01F);
      assertNotEquals(float8, float7, 0.01F);
      assertEquals(0.0F, float8, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Wall wall0 = new Wall(48.392612F, 48.392612F, 48.392612F, 48.392612F, 48.392612F, 48.392612F);
      assertEquals(48.392612F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(48.392612F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(48.392612F, wall0.getYStart(), 0.01F);
      assertEquals(48.392612F, wall0.getThickness(), 0.01F);
      assertEquals(48.392612F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(48.392612F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(48.392612F, wall0.getXEnd(), 0.01F);
      assertEquals(48.392612F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.getWallAtEnd();
      assertEquals(48.392612F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(48.392612F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(48.392612F, wall0.getYStart(), 0.01F);
      assertEquals(48.392612F, wall0.getThickness(), 0.01F);
      assertEquals(48.392612F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(48.392612F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(48.392612F, wall0.getXEnd(), 0.01F);
      assertEquals(48.392612F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setLeftSideShininess(0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall0));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1, linkedList0.size());
      
      Stream<Wall> stream0 = linkedList0.stream();
      assertTrue(linkedList0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertNotNull(stream0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      Integer integer0 = wall0.getRightSideColor();
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(integer0);
      
      float float0 = wall0.getYEnd();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float float1 = wall0.getYArcCircleCenter();
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Wall wall0 = new Wall(507.353F, 507.353F, (-823.8474F), (-823.8474F), 507.353F);
      assertEquals(1882.6017F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1882.6017F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(507.353F, wall0.getYStart(), 0.01F);
      assertEquals((-823.8474F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(507.353F, wall0.getThickness(), 0.01F);
      assertEquals((-823.8474F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-158.24721F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(507.353F, wall0.getXStart(), 0.01F);
      assertEquals((-158.24721F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeightAtEnd();
      assertEquals(1882.6017F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1882.6017F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(507.353F, wall0.getYStart(), 0.01F);
      assertEquals((-823.8474F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(507.353F, wall0.getThickness(), 0.01F);
      assertEquals((-823.8474F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-158.24721F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(507.353F, wall0.getXStart(), 0.01F);
      assertEquals((-158.24721F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 3481.1F, (-2169.3F), 3481.1F, 0.897F, 0.897F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.897F, wall0.getHeight(), 0.01F);
      assertEquals((-1085.15F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2168.3F, wall0.getLength(), 0.01F);
      assertEquals((-2169.3F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2168.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.897F, wall0.getThickness(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsPoint((-1.0F), 393.0F, (-1.0F));
      assertFalse(boolean0);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.897F, wall0.getHeight(), 0.01F);
      assertEquals((-1085.15F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2168.3F, wall0.getLength(), 0.01F);
      assertEquals((-2169.3F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2168.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.897F, wall0.getThickness(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      
      Level level0 = new Level("", (-937.149F), 0.0F, (-2365.11F));
      assertEquals((-937.149F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals((-2365.11F), level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertNotNull(level0);
      
      wall0.setLevel(level0);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.897F, wall0.getHeight(), 0.01F);
      assertEquals((-1085.15F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2168.3F, wall0.getLength(), 0.01F);
      assertEquals((-2169.3F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2168.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.897F, wall0.getThickness(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-937.149F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals((-2365.11F), level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals((-937.149F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals((-2365.11F), level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals("", level1.getName());
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertEquals((-937.149F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-2365.11F), level1.getHeight(), 0.01F);
      assertNotNull(level1);
      
      level0.setFloorThickness(4410.804F);
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level1);
      assertEquals((-937.149F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-2365.11F), level0.getHeight(), 0.01F);
      assertEquals(4410.804F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      
      boolean boolean1 = wall0.isAtLevel(level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(level0, level1);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.897F, wall0.getHeight(), 0.01F);
      assertEquals((-1085.15F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2168.3F, wall0.getLength(), 0.01F);
      assertEquals((-2169.3F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2168.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.897F, wall0.getThickness(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-937.149F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-2365.11F), level0.getHeight(), 0.01F);
      assertEquals(4410.804F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      
      int int0 = Float.floatToIntBits(2.0F);
      assertEquals(1073741824, int0);
      
      wall0.setArcExtent((Float) 2.0F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.897F, wall0.getHeight(), 0.01F);
      assertEquals((-1085.15F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2169.3F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2576.797F, wall0.getLength(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2168.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.897F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2784.9753F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      
      boolean boolean2 = wall0.containsWallEndAt(4410.804F, (-3594.0F), 4410.804F);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.897F, wall0.getHeight(), 0.01F);
      assertEquals((-1085.15F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2169.3F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2576.797F, wall0.getLength(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2168.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.897F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2784.9753F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      
      Integer integer0 = Integer.valueOf(2359);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(2359, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.897F, wall0.getHeight(), 0.01F);
      assertEquals((-1085.15F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2169.3F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2576.797F, wall0.getLength(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2168.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.897F, wall0.getThickness(), 0.01F);
      assertEquals(2359, (int)wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2784.9753F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Wall wall0 = new Wall(48.392612F, 48.392612F, 48.392612F, 48.392612F, 48.392612F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(48.392612F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(48.392612F, wall0.getThickness(), 0.01F);
      assertEquals(48.392612F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(48.392612F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(48.392612F, wall0.getYStart(), 0.01F);
      assertEquals(48.392612F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(48.392612F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(48.392612F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(48.392612F, wall0.getThickness(), 0.01F);
      assertEquals(48.392612F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(48.392612F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(48.392612F, wall0.getYStart(), 0.01F);
      assertEquals(48.392612F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(48.392612F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(float0);
      
      wall0.setHeightAtEnd((Float) null);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(48.392612F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(48.392612F, wall0.getThickness(), 0.01F);
      assertEquals(48.392612F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(48.392612F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(48.392612F, wall0.getYStart(), 0.01F);
      assertEquals(48.392612F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(48.392612F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      wall0.setArcExtent((Float) null);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(48.392612F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(48.392612F, wall0.getThickness(), 0.01F);
      assertEquals(48.392612F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(48.392612F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(48.392612F, wall0.getYStart(), 0.01F);
      assertEquals(48.392612F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(48.392612F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Wall wall0 = new Wall(48.91553F, 48.91553F, 48.91553F, 48.91553F, 48.91553F, 48.91553F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(48.91553F, wall0.getThickness(), 0.01F);
      assertEquals(48.91553F, wall0.getXStart(), 0.01F);
      assertEquals(48.91553F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(48.91553F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(48.91553F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(48.91553F, wall0.getYEnd(), 0.01F);
      assertEquals(48.91553F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(48.91553F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall0));
      assertNull(wall0.getLeftSideColor());
      assertEquals(48.91553F, wall0.getThickness(), 0.01F);
      assertEquals(48.91553F, wall0.getXStart(), 0.01F);
      assertEquals(48.91553F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(48.91553F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(48.91553F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(48.91553F, wall0.getYEnd(), 0.01F);
      assertEquals(48.91553F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(48.91553F, wall0.getXEnd(), 0.01F);
      assertEquals(1, linkedList0.size());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Wall wall0 = new Wall(2015.25F, 2015.25F, (-1739.4F), (-1739.4F), 3481.1F, 2015.25F);
      assertEquals(5309.877F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2015.25F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2015.25F, wall0.getYStart(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(137.92499F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3481.1F, wall0.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5309.877F, wall0.getLength(), 0.01F);
      assertEquals(137.92499F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsPoint(3481.1F, (-2310.5024F), (-0.9628612F));
      assertFalse(boolean0);
      assertEquals(5309.877F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2015.25F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2015.25F, wall0.getYStart(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(137.92499F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3481.1F, wall0.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5309.877F, wall0.getLength(), 0.01F);
      assertEquals(137.92499F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Wall wall1 = new Wall(3481.1F, 0.0F, (-625.596F), (-2868.9805F), 1491.51F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2868.9805F), wall1.getYEnd(), 0.01F);
      assertEquals(1427.7521F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(5009.591F, wall1.getLength(), 0.01F);
      assertEquals(1491.51F, wall1.getThickness(), 0.01F);
      assertEquals(5009.591F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-625.596F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(3481.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1434.4902F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      
      Float float0 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(2015.25F, (float)float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(5309.877F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2015.25F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2015.25F, wall0.getYStart(), 0.01F);
      assertEquals(2015.25F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(137.92499F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3481.1F, wall0.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5309.877F, wall0.getLength(), 0.01F);
      assertEquals(137.92499F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(float0);
      
      Float float1 = new Float(3481.1F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(3481.1F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight(float1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(5309.877F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2015.25F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2015.25F, wall0.getYStart(), 0.01F);
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(137.92499F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3481.1F, wall0.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5309.877F, wall0.getLength(), 0.01F);
      assertEquals(137.92499F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(5309.877F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2015.25F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2015.25F, wall0.getYStart(), 0.01F);
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(137.92499F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3481.1F, wall0.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5309.877F, wall0.getLength(), 0.01F);
      assertEquals(137.92499F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2868.9805F), wall1.getYEnd(), 0.01F);
      assertEquals(1427.7521F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(5009.591F, wall1.getLength(), 0.01F);
      assertEquals(1491.51F, wall1.getThickness(), 0.01F);
      assertEquals(5009.591F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-625.596F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(3481.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1434.4902F), wall1.getYArcCircleCenter(), 0.01F);
      
      Wall wall2 = new Wall(1491.51F, 0.0F, 15.0F, 0.0F, (-2851.1F));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(wall2.getLeftSideColor());
      assertEquals(753.255F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-2851.1F), wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(1476.51F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(15.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1476.51F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1491.51F, wall2.getXStart(), 0.01F);
      assertNotNull(wall2);
      
      Float float2 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2868.9805F), wall1.getYEnd(), 0.01F);
      assertEquals(1427.7521F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(5009.591F, wall1.getLength(), 0.01F);
      assertEquals(1491.51F, wall1.getThickness(), 0.01F);
      assertEquals(5009.591F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-625.596F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(3481.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1434.4902F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(float2);
      
      boolean boolean1 = wall1.containsWallEndAt(0.0F, (-2310.5024F), 12.1F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2868.9805F), wall1.getYEnd(), 0.01F);
      assertEquals(1427.7521F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(5009.591F, wall1.getLength(), 0.01F);
      assertEquals(1491.51F, wall1.getThickness(), 0.01F);
      assertEquals(5009.591F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-625.596F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(3481.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1434.4902F), wall1.getYArcCircleCenter(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.model.Level", propertyChangeListener0);
      assertEquals("com.eteks.sweethome3d.model.Level", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.model.Level", propertyChangeListenerProxy0);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertEquals("com.eteks.sweethome3d.model.Level", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("com.eteks.sweethome3d.model.Level", propertyChangeListenerProxy1.getPropertyName());
      assertNotNull(propertyChangeListenerProxy1);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy2 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.model.Level", propertyChangeListenerProxy1);
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy0));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy1));
      assertEquals("com.eteks.sweethome3d.model.Level", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("com.eteks.sweethome3d.model.Level", propertyChangeListenerProxy1.getPropertyName());
      assertEquals("com.eteks.sweethome3d.model.Level", propertyChangeListenerProxy2.getPropertyName());
      assertNotNull(propertyChangeListenerProxy2);
      
      wall1.removePropertyChangeListener(propertyChangeListenerProxy2);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy2));
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy2));
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy0));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy1));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy2);
      assertNotSame(propertyChangeListenerProxy1, propertyChangeListenerProxy2);
      assertNotSame(propertyChangeListenerProxy1, propertyChangeListenerProxy0);
      assertNotSame(propertyChangeListenerProxy2, propertyChangeListenerProxy0);
      assertNotSame(propertyChangeListenerProxy2, propertyChangeListenerProxy1);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2868.9805F), wall1.getYEnd(), 0.01F);
      assertEquals(1427.7521F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(5009.591F, wall1.getLength(), 0.01F);
      assertEquals(1491.51F, wall1.getThickness(), 0.01F);
      assertEquals(5009.591F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-625.596F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(3481.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1434.4902F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.Level", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("com.eteks.sweethome3d.model.Level", propertyChangeListenerProxy1.getPropertyName());
      assertEquals("com.eteks.sweethome3d.model.Level", propertyChangeListenerProxy2.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Float float0 = new Float((-3.003345F));
      assertEquals((-3.003345F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setWallAtEnd(wall0);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setYStart(0.0F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, (-3.003345F), 0.0F, (-3.003345F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-3.003345F), wall1.getYStart(), 0.01F);
      assertEquals((-3.003345F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotNull(wall1);
      
      Float float1 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(float1);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-3.003345F), wall1.getYStart(), 0.01F);
      assertEquals((-3.003345F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      wall1.setYStart(0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      boolean boolean0 = wall0.intersectsRectangle((-1393.8479F), (-2851.1F), 0.0F, (-2247.7522F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      wall0.setRightSideShininess(447.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(447.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall1.setHeightAtEnd(float0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      
      Float float2 = wall1.getHeightAtEnd();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-3.003345F), (float)float2, 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNotNull(float2);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(447.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      
      boolean boolean1 = wall0.intersectsRectangle(390.2F, 0.0F, 0.0F, 390.2F);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(447.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall1.move(0.01F, 1.15652966E9F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(1.15652966E9F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.15652966E9F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.01F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-3.003345F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertEquals(1.15652966E9F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall1.getXEnd(), 0.01F);
      
      Float float3 = wall0.getArcExtent();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(447.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(float3);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = new Wall((-1739.4F), (-1739.4F), 0.0F, 0.0F, (-625.596F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotNull(wall1);
      
      Float float0 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(float0);
      
      Float float1 = new Float((-2851.1F));
      assertEquals((-2851.1F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall1.setHeight(float1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      
      Wall wall2 = new Wall((-1739.4F), (-1739.4F), 0.0F, 0.0F, (-625.596F));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-869.7F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(2459.883F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-869.7F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2459.883F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-625.596F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertNotNull(wall2);
      
      Float float2 = wall2.getHeight();
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals((-869.7F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(2459.883F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-869.7F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2459.883F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-625.596F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertNull(float2);
      
      Float float3 = new Float((-2851.1F));
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((-2851.1F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall2.setYEnd((-1580.5685F));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals((-1659.9843F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1746.6367F, wall2.getLength(), 0.01F);
      assertEquals((-1739.4F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-869.7F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1580.5685F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1746.6367F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-625.596F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      
      wall2.setHeight(float3);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals((-1659.9843F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1746.6367F, wall2.getLength(), 0.01F);
      assertEquals((-1739.4F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-869.7F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall2.getHeight(), 0.01F);
      assertEquals((-1739.4F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1580.5685F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1746.6367F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-625.596F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      
      wall0.setWallAtStart(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1659.9843F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1746.6367F, wall2.getLength(), 0.01F);
      assertEquals((-1739.4F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-869.7F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall2.getHeight(), 0.01F);
      assertEquals((-1739.4F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1580.5685F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1746.6367F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-625.596F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 0.0F, 0.01F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.move(0.0F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float float4 = wall0.getXEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals(0.0F, float4, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float float5 = wall0.getXStart();
      assertEquals(float5, float4, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals(0.0F, float5, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall3 = wall0.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertSame(wall3, wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(2459.883F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall3.getYStart(), 0.01F);
      assertEquals((-869.7F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall3.getHeight(), 0.01F);
      assertEquals((-625.596F), wall3.getThickness(), 0.01F);
      assertEquals((-869.7F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall3.getXStart(), 0.01F);
      assertEquals(2459.883F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertNotNull(wall3);
      
      float float6 = wall0.getYArcCircleCenter();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertEquals(float6, float5, 0.01F);
      assertEquals(float6, float4, 0.01F);
      assertEquals(0.0F, float6, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall1, wall3);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall3.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertSame(wall3, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(2459.883F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall3.getYStart(), 0.01F);
      assertEquals((-869.7F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall3.getHeight(), 0.01F);
      assertEquals((-625.596F), wall3.getThickness(), 0.01F);
      assertEquals((-869.7F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall3.getXStart(), 0.01F);
      assertEquals(2459.883F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertNotNull(floatArray1);
      
      boolean boolean1 = wall1.isTrapezoidal();
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall1, wall3);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      
      wall3.setHeightAtEnd((Float) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertSame(wall3, wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(2459.883F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall3.getYStart(), 0.01F);
      assertEquals((-869.7F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall3.getHeight(), 0.01F);
      assertEquals((-625.596F), wall3.getThickness(), 0.01F);
      assertEquals((-869.7F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall3.getXStart(), 0.01F);
      assertEquals(2459.883F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-1.0791351F), 0.0F, (-1.0791351F));
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess((-1.0791351F));
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0791351F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      
      Float float0 = new Float((-3.003345F));
      assertEquals((-3.003345F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0791351F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0791351F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, (-1.0791351F), (-1.0791351F), (-1.0791351F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-0.53956753F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0791351F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0791351F), wall1.getXEnd(), 0.01F);
      assertEquals(1.0791351F, wall1.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1.0791351F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotNull(wall1);
      
      Wall wall2 = wall0.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0791351F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.0791351F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0791351F), wall2.getRightSideShininess(), 0.01F);
      assertEquals((-3.003345F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(1.0791351F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1.0791351F), wall2.getXEnd(), 0.01F);
      assertEquals((-0.53956753F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertNotNull(wall2);
      
      wall2.setArcExtent(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0791351F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.037356485F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.6243867F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.0791351F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0791351F), wall2.getRightSideShininess(), 0.01F);
      assertEquals((-3.003345F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.037356485F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-3.003345F), wall2.getArcExtent(), 0.01F);
      assertEquals((-1.0791351F), wall2.getXEnd(), 0.01F);
      assertEquals((-0.53956753F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertEquals(1.6243867F, wall2.getLength(), 0.01F);
      
      float[][] floatArray0 = wall2.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0791351F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.037356485F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.6243867F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.0791351F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0791351F), wall2.getRightSideShininess(), 0.01F);
      assertEquals((-3.003345F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.037356485F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-3.003345F), wall2.getArcExtent(), 0.01F);
      assertEquals((-1.0791351F), wall2.getXEnd(), 0.01F);
      assertEquals((-0.53956753F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertEquals(1.6243867F, wall2.getLength(), 0.01F);
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-0.53956753F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0791351F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0791351F), wall1.getXEnd(), 0.01F);
      assertEquals(1.0791351F, wall1.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1.0791351F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 3481.1F, (-2169.3F), 3481.1F, 0.897F, 0.897F);
      assertEquals(0.897F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2169.3F), wall0.getXEnd(), 0.01F);
      assertEquals(0.897F, wall0.getHeight(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2168.3F, wall0.getLength(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2168.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1085.15F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsPoint((-1.0F), 393.0F, (-1.0F));
      assertFalse(boolean0);
      assertEquals(0.897F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2169.3F), wall0.getXEnd(), 0.01F);
      assertEquals(0.897F, wall0.getHeight(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2168.3F, wall0.getLength(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2168.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1085.15F), wall0.getXArcCircleCenter(), 0.01F);
      
      Level level0 = new Level("", (-937.149F), 0.897F, (-2365.11F));
      assertEquals("", level0.getName());
      assertEquals((-937.149F), level0.getElevation(), 0.01F);
      assertEquals(0.897F, level0.getFloorThickness(), 0.01F);
      assertEquals((-2365.11F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      wall0.setLevel(level0);
      assertEquals(0.897F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2169.3F), wall0.getXEnd(), 0.01F);
      assertEquals(0.897F, wall0.getHeight(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2168.3F, wall0.getLength(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2168.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1085.15F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-937.149F), level0.getElevation(), 0.01F);
      assertEquals(0.897F, level0.getFloorThickness(), 0.01F);
      assertEquals((-2365.11F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals("", level0.getName());
      assertEquals((-937.149F), level0.getElevation(), 0.01F);
      assertEquals(0.897F, level0.getFloorThickness(), 0.01F);
      assertEquals((-2365.11F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-937.149F), level1.getElevation(), 0.01F);
      assertEquals(0.897F, level1.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals((-2365.11F), level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertNotNull(level1);
      
      level0.setFloorThickness(4410.804F);
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level1);
      assertEquals(4410.804F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-937.149F), level0.getElevation(), 0.01F);
      assertEquals((-2365.11F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      
      boolean boolean1 = wall0.isAtLevel(level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(level0, level1);
      assertEquals(0.897F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2169.3F), wall0.getXEnd(), 0.01F);
      assertEquals(0.897F, wall0.getHeight(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2168.3F, wall0.getLength(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2168.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1085.15F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4410.804F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-937.149F), level0.getElevation(), 0.01F);
      assertEquals((-2365.11F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      
      int int0 = Float.floatToIntBits(2.0F);
      assertEquals(1073741824, int0);
      
      wall0.setArcExtent((Float) 2.0F);
      assertEquals(0.897F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2169.3F), wall0.getXEnd(), 0.01F);
      assertEquals(0.897F, wall0.getHeight(), 0.01F);
      assertEquals(2576.797F, wall0.getLength(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2784.9753F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2168.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1085.15F), wall0.getXArcCircleCenter(), 0.01F);
      
      boolean boolean2 = wall0.containsWallEndAt(4410.804F, (-3594.0F), 4410.804F);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(0.897F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2169.3F), wall0.getXEnd(), 0.01F);
      assertEquals(0.897F, wall0.getHeight(), 0.01F);
      assertEquals(2576.797F, wall0.getLength(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2784.9753F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2168.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1085.15F), wall0.getXArcCircleCenter(), 0.01F);
      
      Integer integer0 = Integer.valueOf(2359);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(2359, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0.897F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2169.3F), wall0.getXEnd(), 0.01F);
      assertEquals(0.897F, wall0.getHeight(), 0.01F);
      assertEquals(2576.797F, wall0.getLength(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2784.9753F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2168.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1085.15F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2359, (int)wall0.getRightSideColor());
      
      Float float0 = wall0.getArcExtent();
      assertEquals(2.0F, (float)float0, 0.01F);
      assertEquals(0.897F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2169.3F), wall0.getXEnd(), 0.01F);
      assertEquals(0.897F, wall0.getHeight(), 0.01F);
      assertEquals(2576.797F, wall0.getLength(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2784.9753F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2168.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1085.15F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2359, (int)wall0.getRightSideColor());
      assertNotNull(float0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Wall wall0 = new Wall((-6.4098854F), (-6.4098854F), 0.0F, (-6.4098854F), (-6.4098854F), 0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-6.4098854F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(6.4098854F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-6.4098854F), wall0.getYEnd(), 0.01F);
      assertEquals((-6.4098854F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-6.4098854F), wall0.getThickness(), 0.01F);
      assertEquals((-6.4098854F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(6.4098854F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.2049427F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-6.4098854F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(6.4098854F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-6.4098854F), wall0.getYEnd(), 0.01F);
      assertEquals((-6.4098854F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-6.4098854F), wall0.getThickness(), 0.01F);
      assertEquals((-6.4098854F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(6.4098854F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.2049427F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-3.2049427F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(6.4098854F, wall1.getLength(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-6.4098854F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-6.4098854F), wall1.getXStart(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYStart(), 0.01F);
      assertEquals(6.4098854F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-6.4098854F), wall1.getThickness(), 0.01F);
      assertNotNull(wall1);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-6.4098854F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(6.4098854F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-6.4098854F), wall0.getYEnd(), 0.01F);
      assertEquals((-6.4098854F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-6.4098854F), wall0.getThickness(), 0.01F);
      assertEquals((-6.4098854F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(6.4098854F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.2049427F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-3.2049427F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(6.4098854F, wall1.getLength(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-6.4098854F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-6.4098854F), wall1.getXStart(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYStart(), 0.01F);
      assertEquals(6.4098854F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-6.4098854F), wall1.getThickness(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-6.4098854F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(6.4098854F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-6.4098854F), wall0.getYEnd(), 0.01F);
      assertEquals((-6.4098854F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-6.4098854F), wall0.getThickness(), 0.01F);
      assertEquals((-6.4098854F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(6.4098854F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.2049427F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Wall wall0 = new Wall((-2145.231F), 3904.6F, 3904.6F, (-2145.231F), (-2145.231F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(879.6846F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(8555.753F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2145.231F), wall0.getXStart(), 0.01F);
      assertEquals(879.6846F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2145.231F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(8555.753F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3904.6F, wall0.getYStart(), 0.01F);
      assertEquals(3904.6F, wall0.getXEnd(), 0.01F);
      assertEquals((-2145.231F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYEnd(1106.68F);
      assertEquals(2505.6401F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1106.68F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(6665.494F, wall0.getLength(), 0.01F);
      assertEquals((-2145.231F), wall0.getXStart(), 0.01F);
      assertEquals(879.6846F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3904.6F, wall0.getYStart(), 0.01F);
      assertEquals(3904.6F, wall0.getXEnd(), 0.01F);
      assertEquals((-2145.231F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(6665.494F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Float float0 = new Float(1.0E-10);
      assertEquals(1.0E-10F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(2.79791639E13F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1106.68F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2145.231F), wall0.getXStart(), 0.01F);
      assertEquals(1.0E-10F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(6.0498234E13F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3904.6F, wall0.getYStart(), 0.01F);
      assertEquals(3904.6F, wall0.getXEnd(), 0.01F);
      assertEquals((-2145.231F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(6665.494F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(6665.486F, wall0.getLength(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(164, floatArray0.length);
      assertEquals(2.79791639E13F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1106.68F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2145.231F), wall0.getXStart(), 0.01F);
      assertEquals(1.0E-10F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(6.0498234E13F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3904.6F, wall0.getYStart(), 0.01F);
      assertEquals(3904.6F, wall0.getXEnd(), 0.01F);
      assertEquals((-2145.231F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(6665.494F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(6665.486F, wall0.getLength(), 0.01F);
      assertNotNull(floatArray0);
      
      wall0.setLeftSideShininess(1106.68F);
      assertEquals(2.79791639E13F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1106.68F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1106.68F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2145.231F), wall0.getXStart(), 0.01F);
      assertEquals(1.0E-10F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(6.0498234E13F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3904.6F, wall0.getYStart(), 0.01F);
      assertEquals(3904.6F, wall0.getXEnd(), 0.01F);
      assertEquals((-2145.231F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(6665.494F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(6665.486F, wall0.getLength(), 0.01F);
      
      float[][] floatArray1 = wall0.getPoints();
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(164, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2.79791639E13F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1106.68F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1106.68F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2145.231F), wall0.getXStart(), 0.01F);
      assertEquals(1.0E-10F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(6.0498234E13F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3904.6F, wall0.getYStart(), 0.01F);
      assertEquals(3904.6F, wall0.getXEnd(), 0.01F);
      assertEquals((-2145.231F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(6665.494F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(6665.486F, wall0.getLength(), 0.01F);
      assertNotNull(floatArray1);
      
      float float1 = wall0.getLeftSideShininess();
      assertEquals(1106.68F, float1, 0.01F);
      assertEquals(2.79791639E13F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1106.68F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1106.68F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2145.231F), wall0.getXStart(), 0.01F);
      assertEquals(1.0E-10F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(6.0498234E13F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3904.6F, wall0.getYStart(), 0.01F);
      assertEquals(3904.6F, wall0.getXEnd(), 0.01F);
      assertEquals((-2145.231F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(6665.494F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(6665.486F, wall0.getLength(), 0.01F);
      
      wall0.setHeightAtEnd(float0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals(2.79791639E13F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1106.68F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1106.68F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2145.231F), wall0.getXStart(), 0.01F);
      assertEquals(1.0E-10F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(6.0498234E13F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0E-10F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(3904.6F, wall0.getYStart(), 0.01F);
      assertEquals(3904.6F, wall0.getXEnd(), 0.01F);
      assertEquals((-2145.231F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(6665.494F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(6665.486F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Wall wall0 = new Wall(0.2215297F, 0.2215297F, 0.2215297F, 0.2215297F, 0.2215297F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.2215297F, wall0.getYStart(), 0.01F);
      assertEquals(0.2215297F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2215297F, wall0.getThickness(), 0.01F);
      assertEquals(0.2215297F, wall0.getXEnd(), 0.01F);
      assertEquals(0.2215297F, wall0.getYEnd(), 0.01F);
      assertEquals(0.2215297F, wall0.getXStart(), 0.01F);
      assertEquals(0.2215297F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtEnd(wall0);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.2215297F, wall0.getYStart(), 0.01F);
      assertEquals(0.2215297F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2215297F, wall0.getThickness(), 0.01F);
      assertEquals(0.2215297F, wall0.getXEnd(), 0.01F);
      assertEquals(0.2215297F, wall0.getYEnd(), 0.01F);
      assertEquals(0.2215297F, wall0.getXStart(), 0.01F);
      assertEquals(0.2215297F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      Wall wall1 = new Wall((-6.4098854F), (-6.4098854F), 0.2215297F, (-6.4098854F), (-6.4098854F), 0.2215297F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.2215297F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(6.631415F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-3.094178F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall1.getXEnd(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-6.4098854F), wall1.getYEnd(), 0.01F);
      assertEquals(6.631415F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-6.4098854F), wall1.getXStart(), 0.01F);
      assertEquals((-6.4098854F), wall1.getThickness(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotNull(wall1);
      
      Float float0 = new Float(818.91223F);
      assertEquals(818.91223F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals(818.91223F, float1, 0.01F);
      
      wall1.setArcExtent((Float) 818.91223F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.2215297F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-3.094178F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall1.getXEnd(), 0.01F);
      assertEquals(818.91223F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4.5038333F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYEnd(), 0.01F);
      assertEquals(6.631415F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3131.9458F, wall1.getLength(), 0.01F);
      assertEquals((-6.4098854F), wall1.getXStart(), 0.01F);
      assertEquals((-6.4098854F), wall1.getThickness(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.2215297F, wall0.getYStart(), 0.01F);
      assertEquals(0.2215297F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2215297F, wall0.getThickness(), 0.01F);
      assertEquals(0.2215297F, wall0.getXEnd(), 0.01F);
      assertEquals(0.2215297F, wall0.getYEnd(), 0.01F);
      assertEquals(0.2215297F, wall0.getXStart(), 0.01F);
      assertEquals(0.2215297F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.2215297F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-3.094178F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall1.getXEnd(), 0.01F);
      assertEquals(818.91223F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4.5038333F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYEnd(), 0.01F);
      assertEquals(6.631415F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3131.9458F, wall1.getLength(), 0.01F);
      assertEquals((-6.4098854F), wall1.getXStart(), 0.01F);
      assertEquals((-6.4098854F), wall1.getThickness(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.2215297F, wall0.getYStart(), 0.01F);
      assertEquals(0.2215297F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2215297F, wall0.getThickness(), 0.01F);
      assertEquals(0.2215297F, wall0.getXEnd(), 0.01F);
      assertEquals(0.2215297F, wall0.getYEnd(), 0.01F);
      assertEquals(0.2215297F, wall0.getXStart(), 0.01F);
      assertEquals(0.2215297F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.2215297F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-3.094178F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall1.getXEnd(), 0.01F);
      assertEquals(818.91223F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4.5038333F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYEnd(), 0.01F);
      assertEquals(6.631415F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3131.9458F, wall1.getLength(), 0.01F);
      assertEquals((-6.4098854F), wall1.getXStart(), 0.01F);
      assertEquals((-6.4098854F), wall1.getThickness(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(48, floatArray0.length);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.2215297F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-3.094178F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall1.getXEnd(), 0.01F);
      assertEquals(818.91223F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4.5038333F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYEnd(), 0.01F);
      assertEquals(6.631415F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3131.9458F, wall1.getLength(), 0.01F);
      assertEquals((-6.4098854F), wall1.getXStart(), 0.01F);
      assertEquals((-6.4098854F), wall1.getThickness(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.2215297F, wall0.getYStart(), 0.01F);
      assertEquals(0.2215297F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2215297F, wall0.getThickness(), 0.01F);
      assertEquals(0.2215297F, wall0.getXEnd(), 0.01F);
      assertEquals(0.2215297F, wall0.getYEnd(), 0.01F);
      assertEquals(0.2215297F, wall0.getXStart(), 0.01F);
      assertEquals(0.2215297F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-1.0791351F), 0.0F, (-1.0791351F));
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall1 = new Wall(5.6169157F, 5.6169157F, 0.0F, 0.0F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(5.6169157F, wall1.getYStart(), 0.01F);
      assertEquals(5.6169157F, wall1.getXStart(), 0.01F);
      assertEquals(7.943518F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2.8084579F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(7.943518F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(2.8084579F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotNull(wall1);
      
      Float float1 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(5.6169157F, wall1.getYStart(), 0.01F);
      assertEquals(5.6169157F, wall1.getXStart(), 0.01F);
      assertEquals(7.943518F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2.8084579F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(7.943518F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(2.8084579F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(float1);
      
      float float2 = Float.sum((-1.0791351F), 944.7096F);
      assertEquals(943.63043F, float2, 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5.6169157F, wall1.getYStart(), 0.01F);
      assertEquals(5.6169157F, wall1.getXStart(), 0.01F);
      assertEquals(7.943518F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2.8084579F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(7.943518F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(2.8084579F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      Float float3 = new Float(5.6169157F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(5.6169157F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5.6169157F, wall1.getYStart(), 0.01F);
      assertEquals(5.6169157F, wall1.getXStart(), 0.01F);
      assertEquals(7.943518F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2.8084579F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(7.943518F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(2.8084579F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(3238.7983F, 944.7096F, 636.9084F, 636.9084F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      boolean boolean1 = wall1.containsPoint((-3008.0F), 0.0F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall1, wall0);
      assertEquals(5.6169157F, wall1.getYStart(), 0.01F);
      assertEquals(5.6169157F, wall1.getXStart(), 0.01F);
      assertEquals(7.943518F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2.8084579F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(7.943518F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(2.8084579F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      Float float4 = Float.valueOf(4235.5884F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals(4235.5884F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      wall0.setArcExtent(float4);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-1.430269F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4235.5884F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(6474.7764F, wall0.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("|&GL!RtI01M?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.|&GL!RtI01M?
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Wall wall0 = new Wall(49.58068F, 49.58068F, 49.58068F, 49.58068F, 49.58068F, 49.58068F);
      assertEquals(49.58068F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(49.58068F, wall0.getXEnd(), 0.01F);
      assertEquals(49.58068F, wall0.getThickness(), 0.01F);
      assertEquals(49.58068F, wall0.getYStart(), 0.01F);
      assertEquals(49.58068F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(49.58068F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(49.58068F, wall0.getXStart(), 0.01F);
      assertEquals(49.58068F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      wall0.move(49.58068F, 49.58068F);
      assertEquals(99.16136F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(99.16136F, wall0.getXEnd(), 0.01F);
      assertEquals(49.58068F, wall0.getThickness(), 0.01F);
      assertEquals(99.16136F, wall0.getYStart(), 0.01F);
      assertEquals(99.16136F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(99.16136F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(99.16136F, wall0.getXStart(), 0.01F);
      assertEquals(49.58068F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      Float float0 = wall0.getArcExtent();
      assertEquals(99.16136F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(99.16136F, wall0.getXEnd(), 0.01F);
      assertEquals(49.58068F, wall0.getThickness(), 0.01F);
      assertEquals(99.16136F, wall0.getYStart(), 0.01F);
      assertEquals(99.16136F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(99.16136F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(99.16136F, wall0.getXStart(), 0.01F);
      assertEquals(49.58068F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(float0);
      
      wall0.setArcExtent((Float) null);
      assertEquals(99.16136F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(99.16136F, wall0.getXEnd(), 0.01F);
      assertEquals(49.58068F, wall0.getThickness(), 0.01F);
      assertEquals(99.16136F, wall0.getYStart(), 0.01F);
      assertEquals(99.16136F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(99.16136F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(99.16136F, wall0.getXStart(), 0.01F);
      assertEquals(49.58068F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Wall wall0 = new Wall((-1698.0676F), 3481.1F, (-1698.0676F), 3481.1F, (-1698.0676F), 3481.1F);
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1698.0676F), wall0.getThickness(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = new Level((String) null, 3481.1F, (-1698.0676F), 3481.1F);
      assertNull(level0.getName());
      assertEquals((-1698.0676F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(3481.1F, level0.getElevation(), 0.01F);
      assertEquals(3481.1F, level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNull(level0.getName());
      assertEquals((-1698.0676F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(3481.1F, level0.getElevation(), 0.01F);
      assertEquals(3481.1F, level0.getHeight(), 0.01F);
      assertEquals(3481.1F, level1.getElevation(), 0.01F);
      assertNull(level1.getName());
      assertEquals((-1698.0676F), level1.getFloorThickness(), 0.01F);
      assertEquals(3481.1F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertNotNull(level1);
      
      boolean boolean0 = wall0.isAtLevel(level1);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(boolean0);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1698.0676F), wall0.getThickness(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(level0.getName());
      assertEquals((-1698.0676F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(3481.1F, level0.getElevation(), 0.01F);
      assertEquals(3481.1F, level0.getHeight(), 0.01F);
      assertEquals(3481.1F, level1.getElevation(), 0.01F);
      assertNull(level1.getName());
      assertEquals((-1698.0676F), level1.getFloorThickness(), 0.01F);
      assertEquals(3481.1F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1698.0676F), wall0.getThickness(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, (-1739.4F), (-1.0F));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertNotNull(wall1);
      
      Float float0 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(float0);
      
      Float float1 = new Float(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall1.setHeight(float1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      
      Float float2 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(float2);
      
      Float float3 = new Float(1.0F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(1.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall0.setHeight((Float) null);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      wall1.setWallAtStart(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      
      boolean boolean0 = wall1.intersectsRectangle(512.7397F, 0.01F, 0.0F, 2.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      
      wall1.move((-2851.1F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2851.1F), wall1.getXStart(), 0.01F);
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2851.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertEquals((-2851.1F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      
      float float4 = wall1.getXEnd();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2851.1F), float4, 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2851.1F), wall1.getXStart(), 0.01F);
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2851.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertEquals((-2851.1F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      
      float float5 = wall1.getXStart();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(float5, float4, 0.01F);
      assertEquals((-2851.1F), float5, 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2851.1F), wall1.getXStart(), 0.01F);
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2851.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertEquals((-2851.1F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      
      Wall wall2 = wall0.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-869.7F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-2851.1F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-2851.1F), wall2.getXStart(), 0.01F);
      assertEquals(1739.4F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getArcExtent());
      assertEquals(1739.4F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals((-2851.1F), wall2.getXEnd(), 0.01F);
      assertNotNull(wall2);
      
      float float6 = wall1.getYArcCircleCenter();
      assertNotEquals(float6, float5, 0.01F);
      assertNotEquals(float6, float4, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-869.7F), float6, 0.01F);
      assertNotSame(wall1, wall0);
      assertSame(wall1, wall2);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2851.1F), wall1.getXStart(), 0.01F);
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2851.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertEquals((-2851.1F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall1, wall0);
      assertSame(wall1, wall2);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2851.1F), wall1.getXStart(), 0.01F);
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2851.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertEquals((-2851.1F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Wall wall0 = new Wall((-0.16079742F), (-0.16079742F), (-0.16079742F), (-0.16079742F), (-0.16079742F), (-0.16079742F));
      assertEquals((-0.16079742F), wall0.getThickness(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.16079742F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.16079742F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Float float0 = new Float((-0.16079742F));
      assertEquals((-0.16079742F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeightAtEnd(float0);
      assertEquals((-0.16079742F), wall0.getThickness(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.16079742F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.16079742F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.16079742F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      boolean boolean0 = Float.isFinite((-4041.0F));
      assertTrue(boolean0);
      
      float float1 = float0.floatValue();
      assertEquals((-0.16079742F), float1, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals((-0.16079742F), wall0.getThickness(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.16079742F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.16079742F), wall0.getArcExtent(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.16079742F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals((-0.16079742F), wall0.getThickness(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.16079742F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.16079742F), wall0.getArcExtent(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.16079742F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(floatArray0);
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals((-0.16079742F), wall0.getThickness(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.16079742F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.16079742F), wall0.getArcExtent(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.16079742F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 362.4303F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(362.4303F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setLeftSideShininess(1.0F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(362.4303F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall0));
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(362.4303F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1, linkedList0.size());
      
      Stream<Wall> stream0 = linkedList0.stream();
      assertTrue(linkedList0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertNotNull(stream0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      Float float0 = wall0.getArcExtent();
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(362.4303F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      Wall wall1 = new Wall((-1739.4F), (-1739.4F), 0.0F, 0.0F, (-625.596F));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      
      Float float0 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(float0);
      
      Float float1 = new Float((-2851.1F));
      assertEquals((-2851.1F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      float float2 = Float.sum(2.0F, 2.0F);
      assertEquals(4.0F, float2, 0.01F);
      
      wall1.setHeight(float1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 0.0F, 0.01F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      wall0.move(0.0F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      float float3 = wall0.getXEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(0.0F, float3, 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      boolean boolean1 = wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(homeTexture0);
      
      Integer integer0 = wall1.getLeftSideColor();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertNull(integer0);
      
      boolean boolean2 = wall1.isAtLevel((Level) null);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.92811793F, 0.0F, 0.92811793F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.92811793F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.92811793F, wall0.getLength(), 0.01F);
      assertEquals(0.92811793F, wall0.getXEnd(), 0.01F);
      assertEquals(0.92811793F, wall0.getThickness(), 0.01F);
      assertEquals(0.46405897F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = Float.isFinite(0.0F);
      assertTrue(boolean0);
      
      wall0.setHeight(float0);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.92811793F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.92811793F, wall0.getLength(), 0.01F);
      assertEquals(0.92811793F, wall0.getXEnd(), 0.01F);
      assertEquals(0.92811793F, wall0.getThickness(), 0.01F);
      assertEquals(0.46405897F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.92811793F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.92811793F, wall0.getLength(), 0.01F);
      assertEquals(0.92811793F, wall0.getXEnd(), 0.01F);
      assertEquals(0.92811793F, wall0.getThickness(), 0.01F);
      assertEquals(0.46405897F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      Float float1 = wall0.getHeight();
      assertEquals(0.0F, (float)float1, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.92811793F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.92811793F, wall0.getLength(), 0.01F);
      assertEquals(0.92811793F, wall0.getXEnd(), 0.01F);
      assertEquals(0.92811793F, wall0.getThickness(), 0.01F);
      assertEquals(0.46405897F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(0.13753456F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.13753456F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall0.setWallAtStart(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.92811793F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.92811793F, wall0.getLength(), 0.01F);
      assertEquals(0.92811793F, wall0.getXEnd(), 0.01F);
      assertEquals(0.92811793F, wall0.getThickness(), 0.01F);
      assertEquals(0.46405897F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      boolean boolean1 = wall0.intersectsRectangle(348.0F, 0.0F, 1106.68F, (-3496.0F));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.92811793F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.92811793F, wall0.getLength(), 0.01F);
      assertEquals(0.92811793F, wall0.getXEnd(), 0.01F);
      assertEquals(0.92811793F, wall0.getThickness(), 0.01F);
      assertEquals(0.46405897F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      Wall wall1 = new Wall((-1739.4F), (-1739.4F), 0.0F, 0.0F, (-625.596F));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      
      Float float3 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(float3);
      
      Float float4 = new Float((-2851.1F));
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals((-2851.1F), (float)float4, 0.01F);
      assertNotNull(float4);
      
      wall1.setHeight(float4);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      
      wall1.move((-934.0F), 2.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2673.4F), wall1.getXStart(), 0.01F);
      assertEquals((-1737.4F), wall1.getYStart(), 0.01F);
      assertEquals((-934.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals(2.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-867.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1803.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      float float5 = wall1.getXEnd();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-934.0F), float5, 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2673.4F), wall1.getXStart(), 0.01F);
      assertEquals((-1737.4F), wall1.getYStart(), 0.01F);
      assertEquals((-934.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals(2.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-867.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1803.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      Wall wall2 = wall0.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.92811793F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.92811793F, wall0.getLength(), 0.01F);
      assertEquals(0.92811793F, wall0.getXEnd(), 0.01F);
      assertEquals(0.92811793F, wall0.getThickness(), 0.01F);
      assertEquals(0.46405897F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.92811793F, wall2.getXEnd(), 0.01F);
      assertEquals(0.92811793F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.46405897F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.92811793F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.92811793F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNotNull(wall2);
      
      float float6 = wall0.getYArcCircleCenter();
      assertNotEquals(float6, float5, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, float6, 0.01F);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.92811793F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.92811793F, wall0.getLength(), 0.01F);
      assertEquals(0.92811793F, wall0.getXEnd(), 0.01F);
      assertEquals(0.92811793F, wall0.getThickness(), 0.01F);
      assertEquals(0.46405897F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      float[][] floatArray0 = wall2.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.92811793F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.92811793F, wall0.getLength(), 0.01F);
      assertEquals(0.92811793F, wall0.getXEnd(), 0.01F);
      assertEquals(0.92811793F, wall0.getThickness(), 0.01F);
      assertEquals(0.46405897F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.92811793F, wall2.getXEnd(), 0.01F);
      assertEquals(0.92811793F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.46405897F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.92811793F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.92811793F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float0 = new Float((-3.003345F));
      assertEquals((-3.003345F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall1 = new Wall(0.0F, (-3.003345F), 0.0F, (-3.003345F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-3.003345F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-3.003345F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNotNull(wall1);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3.003345F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-3.003345F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      
      wall1.setYStart(0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      
      boolean boolean0 = wall0.containsWallStartAt((-3.003345F), 0.0F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      
      Float float1 = new Float((-3.003345F));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-3.003345F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      
      boolean boolean1 = wall1.containsWallStartAt(0.01F, (-1393.8479F), 51.70028F);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall1, wall0);
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      
      boolean boolean2 = wall0.intersectsRectangle((-3.003345F), 0.0F, 0.0F, (-3.003345F));
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall1, wall0);
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Wall wall0 = new Wall((-1739.4F), (-1.0F), 3481.1F, 2015.25F, (-1.0F));
      assertEquals(1007.125F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5596.3276F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5596.3276F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall((-1739.4F), 1.0F, (-625.596F), 0.01F, (-527.38086F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-625.596F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(1113.8044F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1182.498F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-527.38086F), wall1.getThickness(), 0.01F);
      assertEquals(0.505F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1113.8044F, wall1.getLength(), 0.01F);
      assertNotNull(wall1);
      
      Float float0 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(1007.125F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5596.3276F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5596.3276F, wall0.getLength(), 0.01F);
      assertNull(float0);
      
      Float float1 = new Float(2.0F);
      assertEquals(2.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = Float.valueOf(0.0F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = Float.valueOf(0.0F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall0.setHeight(float3);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(1007.125F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5596.3276F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5596.3276F, wall0.getLength(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1007.125F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5596.3276F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5596.3276F, wall0.getLength(), 0.01F);
      assertEquals((-625.596F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(1113.8044F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1182.498F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-527.38086F), wall1.getThickness(), 0.01F);
      assertEquals(0.505F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1113.8044F, wall1.getLength(), 0.01F);
      
      Wall wall2 = new Wall(0.0F, 0.0F, 2015.25F, 0.0F, (-328.51F));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(1007.625F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2015.25F, wall2.getLength(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(2015.25F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-328.51F), wall2.getThickness(), 0.01F);
      assertEquals(2015.25F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertNotNull(wall2);
      
      Float float4 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals((-625.596F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(1113.8044F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1182.498F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-527.38086F), wall1.getThickness(), 0.01F);
      assertEquals(0.505F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1113.8044F, wall1.getLength(), 0.01F);
      assertNull(float4);
      
      boolean boolean0 = wall1.containsWallEndAt(0.0F, (-1739.4F), 3481.1F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals((-625.596F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(1113.8044F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1182.498F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-527.38086F), wall1.getThickness(), 0.01F);
      assertEquals(0.505F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1113.8044F, wall1.getLength(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      assertEquals("", propertyChangeListenerProxy1.getPropertyName());
      assertNotNull(propertyChangeListenerProxy1);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy2 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy1);
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy0));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy1));
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      assertEquals("", propertyChangeListenerProxy1.getPropertyName());
      assertEquals("", propertyChangeListenerProxy2.getPropertyName());
      assertNotNull(propertyChangeListenerProxy2);
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy2));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy2);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      assertEquals(1007.125F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5596.3276F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5596.3276F, wall0.getLength(), 0.01F);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Wall wall0 = new Wall(1229.0F, 1229.0F, 1229.0F, 296.363F, 1913.933F, 296.363F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(932.63696F, wall0.getLength(), 0.01F);
      assertEquals(762.6815F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1913.933F, wall0.getThickness(), 0.01F);
      assertEquals(296.363F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1229.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1229.0F, wall0.getYStart(), 0.01F);
      assertEquals(296.363F, wall0.getYEnd(), 0.01F);
      assertEquals(932.63696F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1229.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1229.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(932.63696F, wall0.getLength(), 0.01F);
      assertEquals(762.6815F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1913.933F, wall0.getThickness(), 0.01F);
      assertEquals(296.363F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1229.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1229.0F, wall0.getYStart(), 0.01F);
      assertEquals(296.363F, wall0.getYEnd(), 0.01F);
      assertEquals(932.63696F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1229.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1229.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(296.363F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1229.0F, wall1.getXStart(), 0.01F);
      assertEquals(1229.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(932.63696F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(296.363F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(762.6815F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1229.0F, wall1.getXEnd(), 0.01F);
      assertEquals(932.63696F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1229.0F, wall1.getYStart(), 0.01F);
      assertEquals(1913.933F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotNull(wall1);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(932.63696F, wall0.getLength(), 0.01F);
      assertEquals(762.6815F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1913.933F, wall0.getThickness(), 0.01F);
      assertEquals(296.363F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1229.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1229.0F, wall0.getYStart(), 0.01F);
      assertEquals(296.363F, wall0.getYEnd(), 0.01F);
      assertEquals(932.63696F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1229.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1229.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(932.63696F, wall0.getLength(), 0.01F);
      assertEquals(762.6815F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1913.933F, wall0.getThickness(), 0.01F);
      assertEquals(296.363F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1229.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1229.0F, wall0.getYStart(), 0.01F);
      assertEquals(296.363F, wall0.getYEnd(), 0.01F);
      assertEquals(932.63696F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1229.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1229.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setLeftSideShininess(0.0F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(integer0);
      
      float float0 = wall0.getYEnd();
      assertEquals(0.0F, float0, 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float float1 = wall0.getYArcCircleCenter();
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Level level0 = wall0.getLevel();
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(level0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Wall wall0 = new Wall((-1739.4F), (-1739.4F), (-1739.4F), (-1739.4F), (-1739.4F));
      assertEquals((-1739.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall0.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1739.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = wall0.containsWallEndAt((-2311.0F), (-2311.0F), (-1739.4F));
      assertFalse(boolean0);
      assertEquals((-1739.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall0.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1739.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1739.4F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1739.4F), wall0.getXEnd(), 0.01F);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Wall wall0 = new Wall((-1739.4F), (-1.0F), 3481.1F, 2015.25F, (-1.0F));
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5596.3276F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(5596.3276F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1007.125F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsPoint(3481.1F, (-2311.0F), (-1.0F));
      assertFalse(boolean0);
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5596.3276F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(5596.3276F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1007.125F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      
      wall0.setYStart(0.0F);
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5595.968F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1007.625F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(5595.968F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      
      Level level0 = new Level((String) null, (-1413.0F), (-1601.39F), 0.0F);
      assertTrue(level0.isVisible());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertTrue(level0.isVisible());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      
      wall0.setLevel(level0);
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5595.968F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1007.625F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(5595.968F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      
      Level level1 = new Level((String) null, 3481.1F, (-1.0F), (-1601.39F));
      assertFalse(level1.equals((Object)level0));
      assertEquals(3481.1F, level1.getElevation(), 0.01F);
      assertEquals((-1.0F), level1.getFloorThickness(), 0.01F);
      assertNull(level1.getName());
      assertEquals((-1601.39F), level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertNotNull(level1);
      
      level1.setFloorThickness((-1601.39F));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level1, level0);
      assertEquals(3481.1F, level1.getElevation(), 0.01F);
      assertNull(level1.getName());
      assertEquals((-1601.39F), level1.getHeight(), 0.01F);
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      
      boolean boolean1 = wall0.isAtLevel(level1);
      assertFalse(level1.equals((Object)level0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(level1, level0);
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5595.968F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1007.625F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(5595.968F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, level1.getElevation(), 0.01F);
      assertNull(level1.getName());
      assertEquals((-1601.39F), level1.getHeight(), 0.01F);
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals(870.85004F, float0, 0.01F);
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5595.968F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1007.625F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(5595.968F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      
      float float1 = wall0.getLength();
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(5595.968F, float1, 0.01F);
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5595.968F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1007.625F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(5595.968F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      Wall wall1 = new Wall((-1739.4F), (-1739.4F), 0.0F, 0.0F, (-625.596F));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall1);
      
      Float float0 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(float0);
      
      Float float1 = new Float((-2851.1F));
      assertEquals((-2851.1F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall1.setHeight(float1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 0.0F, 0.01F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      wall0.move(0.0F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      float float2 = wall0.getXEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      float float3 = wall0.getXStart();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float3, float2, 0.01F);
      assertEquals(0.0F, float3, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      Wall wall2 = wall0.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall2);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Wall wall0 = new Wall(3611.0F, 3611.0F, 3611.0F, 3611.0F, 3611.0F, 3611.0F);
      assertEquals(3611.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3611.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3611.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3611.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3611.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3611.0F, wall0.getThickness(), 0.01F);
      assertEquals(3611.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3611.0F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(3611.0F);
      assertEquals(3611.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall1 = new Wall(3611.0F, 2.0F, (-3.003345F), (-71.5F), (-3011.6309F));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-3011.6309F), wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(3614.7507F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-71.5F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-34.75F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3614.7507F, wall1.getLength(), 0.01F);
      assertEquals(1803.9983F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3611.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotNull(wall1);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3611.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3611.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3611.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3611.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3611.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3611.0F, wall0.getThickness(), 0.01F);
      assertEquals(3611.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3611.0F, wall0.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-3011.6309F), wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(3614.7507F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-71.5F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-34.75F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3614.7507F, wall1.getLength(), 0.01F);
      assertEquals(1803.9983F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3611.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      
      wall0.setYStart((-3011.6309F));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(3611.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3611.0F, wall0.getXEnd(), 0.01F);
      assertEquals(6622.631F, wall0.getLength(), 0.01F);
      assertEquals(3611.0F, wall0.getXStart(), 0.01F);
      assertEquals(6622.631F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3611.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(299.68457F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3611.0F, wall0.getThickness(), 0.01F);
      assertEquals(3611.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3011.6309F), wall0.getYStart(), 0.01F);
      
      boolean boolean0 = wall1.containsWallStartAt((-3.003345F), (-3.003345F), (-3.003345F));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-3011.6309F), wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(3614.7507F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-71.5F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-34.75F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3614.7507F, wall1.getLength(), 0.01F);
      assertEquals(1803.9983F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3611.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3611.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3611.0F, wall0.getXEnd(), 0.01F);
      assertEquals(6622.631F, wall0.getLength(), 0.01F);
      assertEquals(3611.0F, wall0.getXStart(), 0.01F);
      assertEquals(6622.631F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3611.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(299.68457F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3611.0F, wall0.getThickness(), 0.01F);
      assertEquals(3611.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3011.6309F), wall0.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-3011.6309F), wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(3614.7507F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-71.5F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-34.75F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3614.7507F, wall1.getLength(), 0.01F);
      assertEquals(1803.9983F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3611.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      
      Float float1 = new Float(280.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(280.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3611.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3611.0F, wall0.getXEnd(), 0.01F);
      assertEquals(6622.631F, wall0.getLength(), 0.01F);
      assertEquals(3611.0F, wall0.getXStart(), 0.01F);
      assertEquals(6622.631F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3611.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(299.68457F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3611.0F, wall0.getThickness(), 0.01F);
      assertEquals(3611.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3011.6309F), wall0.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-3011.6309F), wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(3614.7507F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-71.5F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-34.75F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3614.7507F, wall1.getLength(), 0.01F);
      assertEquals(1803.9983F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3611.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      
      boolean boolean1 = wall0.containsWallStartAt(722.449F, 882.1143F, (-1.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertEquals(3611.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3611.0F, wall0.getXEnd(), 0.01F);
      assertEquals(6622.631F, wall0.getLength(), 0.01F);
      assertEquals(3611.0F, wall0.getXStart(), 0.01F);
      assertEquals(6622.631F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3611.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(299.68457F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3611.0F, wall0.getThickness(), 0.01F);
      assertEquals(3611.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3011.6309F), wall0.getYStart(), 0.01F);
      
      boolean boolean2 = wall1.intersectsRectangle((-3.003345F), (-1.0F), 1.0F, 1518.2285F);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-3011.6309F), wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(3614.7507F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-71.5F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-34.75F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3614.7507F, wall1.getLength(), 0.01F);
      assertEquals(1803.9983F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3611.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      
      wall0.move(1.0F, 2212.051F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3612.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-799.57983F), wall0.getYStart(), 0.01F);
      assertEquals(6622.631F, wall0.getLength(), 0.01F);
      assertEquals(6622.631F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3612.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3611.0F, wall0.getHeight(), 0.01F);
      assertEquals(3612.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3611.0F, wall0.getThickness(), 0.01F);
      assertEquals(5823.051F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2511.7354F, wall0.getYArcCircleCenter(), 0.01F);
      
      Float float2 = wall0.getArcExtent();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3612.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-799.57983F), wall0.getYStart(), 0.01F);
      assertEquals(6622.631F, wall0.getLength(), 0.01F);
      assertEquals(6622.631F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3612.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3611.0F, wall0.getHeight(), 0.01F);
      assertEquals(3612.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3611.0F, wall0.getThickness(), 0.01F);
      assertEquals(5823.051F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2511.7354F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(float2);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Wall wall0 = new Wall((-1698.0676F), (-1698.0676F), (-1698.0676F), (-1698.0676F), (-1698.0676F), (-1698.0676F));
      assertEquals((-1698.0676F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1698.0676F), wall0.getHeight(), 0.01F);
      assertEquals((-1698.0676F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1698.0676F), wall0.getYEnd(), 0.01F);
      assertEquals((-1698.0676F), wall0.getYStart(), 0.01F);
      assertEquals((-1698.0676F), wall0.getThickness(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.intersectsRectangle((-1698.0676F), (-1698.0676F), (-1698.0676F), (-1698.0676F));
      assertFalse(boolean0);
      assertEquals((-1698.0676F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1698.0676F), wall0.getHeight(), 0.01F);
      assertEquals((-1698.0676F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1698.0676F), wall0.getYEnd(), 0.01F);
      assertEquals((-1698.0676F), wall0.getYStart(), 0.01F);
      assertEquals((-1698.0676F), wall0.getThickness(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXStart(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals((-1698.0676F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1698.0676F), wall0.getHeight(), 0.01F);
      assertEquals((-1698.0676F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1698.0676F), wall0.getYEnd(), 0.01F);
      assertEquals((-1698.0676F), wall0.getYStart(), 0.01F);
      assertEquals((-1698.0676F), wall0.getThickness(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXStart(), 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-1.0791351F), 0.0F, (-1.0791351F));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      
      Float float0 = new Float((-3.003345F));
      assertEquals((-3.003345F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setArcExtent((Float) null);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = new Wall((-1739.4F), (-1739.4F), 0.0F, 0.0F, (-625.596F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      
      Float float1 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(float1);
      
      Float float2 = new Float((-2851.1F));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-2851.1F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall1.setHeight(float2);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall1, wall0);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Wall wall0 = new Wall((-1447.0F), 1.0F, (-1200.5F), (-1447.0F), (-1200.5F));
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1468.8315F, wall0.getLength(), 0.01F);
      assertEquals((-1447.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1200.5F), wall0.getXEnd(), 0.01F);
      assertEquals((-723.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1447.0F), wall0.getXStart(), 0.01F);
      assertEquals(1468.8315F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1200.5F), wall0.getThickness(), 0.01F);
      assertEquals((-1323.75F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYEnd((-1200.5F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1226.5254F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-599.75F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1200.5F), wall0.getXEnd(), 0.01F);
      assertEquals((-1200.5F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1447.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1200.5F), wall0.getThickness(), 0.01F);
      assertEquals(1226.5254F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1323.75F), wall0.getXArcCircleCenter(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1226.5254F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-599.75F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1200.5F), wall0.getXEnd(), 0.01F);
      assertEquals((-1200.5F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1447.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1200.5F), wall0.getThickness(), 0.01F);
      assertEquals(1226.5254F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1323.75F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1226.5254F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-599.75F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1200.5F), wall0.getXEnd(), 0.01F);
      assertEquals((-1200.5F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1447.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1200.5F), wall0.getThickness(), 0.01F);
      assertEquals(1226.5254F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1323.75F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(homeTexture0);
      
      Integer integer0 = wall0.getRightSideColor();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1226.5254F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-599.75F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1200.5F), wall0.getXEnd(), 0.01F);
      assertEquals((-1200.5F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1447.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1200.5F), wall0.getThickness(), 0.01F);
      assertEquals(1226.5254F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1323.75F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(integer0);
      
      float float1 = wall0.getYEnd();
      assertEquals((-1200.5F), float1, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1226.5254F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-599.75F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1200.5F), wall0.getXEnd(), 0.01F);
      assertEquals((-1200.5F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1447.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1200.5F), wall0.getThickness(), 0.01F);
      assertEquals(1226.5254F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1323.75F), wall0.getXArcCircleCenter(), 0.01F);
      
      float float2 = wall0.getYArcCircleCenter();
      assertNotEquals(float2, float1, 0.01F);
      assertEquals((-599.75F), float2, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1226.5254F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-599.75F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1200.5F), wall0.getXEnd(), 0.01F);
      assertEquals((-1200.5F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1447.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1200.5F), wall0.getThickness(), 0.01F);
      assertEquals(1226.5254F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1323.75F), wall0.getXArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Wall wall0 = new Wall(3904.6F, (-1023.02F), (-830.6896F), (-830.6896F), (-1023.02F), (-2170.124F));
      assertEquals((-1023.02F), wall0.getThickness(), 0.01F);
      assertEquals((-830.6896F), wall0.getYEnd(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertEquals(4739.194F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4739.194F, wall0.getLength(), 0.01F);
      assertEquals((-926.8548F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYEnd(2110.9646F);
      assertEquals((-1023.02F), wall0.getThickness(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(543.9723F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5678.453F, wall0.getLength(), 0.01F);
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      
      wall0.setThickness(0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(543.9723F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5678.453F, wall0.getLength(), 0.01F);
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone(list0);
      assertTrue(list1.equals((Object)list0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      Level level0 = new Level((String) null, (-1413.0F), (-1601.39F), 0.0F);
      assertTrue(level0.isVisible());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertTrue(level0.isVisible());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertNull(level1.getName());
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      assertNotNull(level1);
      
      level1.setName((String) null);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertTrue(level0.isVisible());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertNull(level1.getName());
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      
      wall0.setLevel(level1);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(543.9723F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5678.453F, wall0.getLength(), 0.01F);
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertNull(level1.getName());
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      
      Float float0 = new Float((double) (-830.6896F));
      assertEquals((-830.6896F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Integer integer0 = new Integer(2928);
      assertEquals(2928, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = float0.equals(integer0);
      assertFalse(boolean0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-830.6896F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertEquals(3578.8506F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3873989.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(3629.1711F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      
      float float1 = wall0.getXStart();
      assertEquals(3904.6F, float1, 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-830.6896F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertEquals(3578.8506F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3873989.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(3629.1711F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(3940, floatArray0.length);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-830.6896F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertEquals(3578.8506F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3873989.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(3629.1711F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertNotNull(floatArray0);
      
      boolean boolean1 = wall0.isAtLevel(level1);
      assertFalse(boolean1 == boolean0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertTrue(boolean1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-830.6896F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertEquals(3578.8506F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3873989.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(3629.1711F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertNull(level1.getName());
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Wall wall0 = new Wall(3.8689172F, 3.8689172F, 0.0F, 3.8689172F, (-6304.9014F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.9344586F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3.8689172F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3.8689172F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3.8689172F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-6304.9014F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3.8689172F, wall0.getYEnd(), 0.01F);
      assertEquals(3.8689172F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3.8689172F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setLeftSideShininess((-6304.9014F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.9344586F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3.8689172F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3.8689172F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3.8689172F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-6304.9014F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-6304.9014F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3.8689172F, wall0.getYEnd(), 0.01F);
      assertEquals(3.8689172F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3.8689172F, wall0.getLength(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = wall0.containsWallStartAt((-6304.9014F), 0.0F, 3.8689172F);
      assertFalse(boolean0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.9344586F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3.8689172F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3.8689172F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3.8689172F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-6304.9014F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-6304.9014F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3.8689172F, wall0.getYEnd(), 0.01F);
      assertEquals(3.8689172F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3.8689172F, wall0.getLength(), 0.01F);
      
      boolean boolean1 = wall0.containsPoint((-6304.9014F), (-6304.9014F), 0.0F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.9344586F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3.8689172F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3.8689172F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3.8689172F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-6304.9014F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-6304.9014F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3.8689172F, wall0.getYEnd(), 0.01F);
      assertEquals(3.8689172F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3.8689172F, wall0.getLength(), 0.01F);
      
      Stream<Wall> stream0 = linkedList0.stream();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(stream0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.sum(0.0F, 0.0F);
      assertEquals(0.0F, float1, 0.01F);
      
      boolean boolean0 = Float.isFinite(0.0F);
      assertTrue(boolean0);
      
      wall0.setHeight(float0);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float2 = wall0.getHeight();
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float(1.0F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(1.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      boolean boolean1 = wall0.intersectsRectangle(512.7397F, 0.01F, 0.0F, 2.0F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.move((-2851.1F), 0.0F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2851.1F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float float4 = wall0.getXEnd();
      assertNotEquals(float4, float1, 0.01F);
      assertEquals((-2851.1F), float4, 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2851.1F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float float5 = wall0.getXStart();
      assertNotEquals(float5, float1, 0.01F);
      assertEquals(float5, float4, 0.01F);
      assertEquals((-2851.1F), float5, 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2851.1F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = wall0.getWallAtEnd();
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2851.1F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2851.1F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2851.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotNull(wall1);
      
      float float6 = wall0.getYArcCircleCenter();
      assertNotEquals(float6, float5, 0.01F);
      assertEquals(float6, float1, 0.01F);
      assertNotEquals(float6, float4, 0.01F);
      assertEquals(0.0F, float6, 0.01F);
      assertSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2851.1F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2851.1F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(floatArray0);
      
      Wall wall2 = wall0.getWallAtStart();
      assertSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertEquals((-2851.1F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-2851.1F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2851.1F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall2);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Wall wall0 = new Wall((-3442.59F), 77.0F, (-3442.59F), 0.0F, 1.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(77.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(77.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-3442.59F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(77.0F, wall0.getYStart(), 0.01F);
      assertEquals((-3442.59F), wall0.getXStart(), 0.01F);
      assertEquals(38.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-3442.59F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      wall0.setThickness(1.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(77.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(77.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-3442.59F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(77.0F, wall0.getYStart(), 0.01F);
      assertEquals((-3442.59F), wall0.getXStart(), 0.01F);
      assertEquals(38.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-3442.59F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      float float0 = wall0.getLength();
      assertEquals(77.0F, float0, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(77.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(77.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-3442.59F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(77.0F, wall0.getYStart(), 0.01F);
      assertEquals((-3442.59F), wall0.getXStart(), 0.01F);
      assertEquals(38.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-3442.59F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Wall wall0 = new Wall((-14.65714F), (-14.65714F), (-14.65714F), (-14.65714F), (-14.65714F), (-14.65714F));
      assertEquals((-14.65714F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-14.65714F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-14.65714F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-14.65714F), wall0.getThickness(), 0.01F);
      assertEquals((-14.65714F), wall0.getYStart(), 0.01F);
      assertEquals((-14.65714F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-14.65714F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-14.65714F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtStart(wall0);
      assertEquals((-14.65714F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-14.65714F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-14.65714F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-14.65714F), wall0.getThickness(), 0.01F);
      assertEquals((-14.65714F), wall0.getYStart(), 0.01F);
      assertEquals((-14.65714F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-14.65714F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-14.65714F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setXEnd(1757.7546F);
      assertEquals(1757.7546F, wall0.getXEnd(), 0.01F);
      assertEquals((-14.65714F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(871.54877F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-14.65714F), wall0.getYEnd(), 0.01F);
      assertEquals((-14.65714F), wall0.getThickness(), 0.01F);
      assertEquals((-14.65714F), wall0.getYStart(), 0.01F);
      assertEquals(1772.4117F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-14.65714F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-14.65714F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1772.4117F, wall0.getLength(), 0.01F);
      
      Float float0 = new Float(1757.7546F);
      assertEquals(1757.7546F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(1757.7546F, wall0.getXEnd(), 0.01F);
      assertEquals((-14.65714F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(871.54877F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-14.65714F), wall0.getYEnd(), 0.01F);
      assertEquals((-14.65714F), wall0.getThickness(), 0.01F);
      assertEquals((-14.65714F), wall0.getYStart(), 0.01F);
      assertEquals(1772.4117F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-14.65714F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-14.65714F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1772.4117F, wall0.getLength(), 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Wall wall0 = new Wall((-1698.0676F), 3481.1F, (-1698.0676F), 3481.1F, (-1698.0676F), 3481.1F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXStart(), 0.01F);
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1698.0676F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.intersectsRectangle((-1698.0676F), (-1698.0676F), (-1698.0676F), (-1698.0676F));
      assertFalse(boolean0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXStart(), 0.01F);
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1698.0676F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Level level0 = new Level((String) null, 3481.1F, (-1698.0676F), 3481.1F);
      assertTrue(level0.isVisible());
      assertEquals((-1698.0676F), level0.getFloorThickness(), 0.01F);
      assertEquals(3481.1F, level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      assertEquals(3481.1F, level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      wall0.setLevel(level0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXStart(), 0.01F);
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1698.0676F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertTrue(level0.isVisible());
      assertEquals((-1698.0676F), level0.getFloorThickness(), 0.01F);
      assertEquals(3481.1F, level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      assertEquals(3481.1F, level0.getHeight(), 0.01F);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertTrue(level0.isVisible());
      assertEquals((-1698.0676F), level0.getFloorThickness(), 0.01F);
      assertEquals(3481.1F, level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      assertEquals(3481.1F, level0.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-1698.0676F), level1.getFloorThickness(), 0.01F);
      assertNull(level1.getName());
      assertEquals(3481.1F, level1.getHeight(), 0.01F);
      assertEquals(3481.1F, level1.getElevation(), 0.01F);
      assertNotNull(level1);
      
      boolean boolean1 = wall0.isAtLevel(level1);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXStart(), 0.01F);
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1698.0676F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertTrue(level0.isVisible());
      assertEquals((-1698.0676F), level0.getFloorThickness(), 0.01F);
      assertEquals(3481.1F, level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      assertEquals(3481.1F, level0.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-1698.0676F), level1.getFloorThickness(), 0.01F);
      assertNull(level1.getName());
      assertEquals(3481.1F, level1.getHeight(), 0.01F);
      assertEquals(3481.1F, level1.getElevation(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1698.0676F), wall0.getXStart(), 0.01F);
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1698.0676F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = Integer.valueOf((-715));
      assertEquals((-715), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(117);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(117, (int)integer1);
      assertNotNull(integer1);
      
      wall0.setXStart(9);
      assertEquals(10.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(10.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(9.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      int int0 = Integer.compareUnsigned((-3349), 148);
      assertEquals(1, int0);
      
      long long0 = Integer.toUnsignedLong(9);
      assertEquals(9L, long0);
      
      long long1 = Integer.toUnsignedLong(117);
      assertFalse(long1 == long0);
      assertEquals(117L, long1);
      
      wall0.setRightSideColor(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(10.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(10.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(9.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(117, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Integer integer2 = wall0.getRightSideColor();
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertEquals(117, (int)integer2);
      assertEquals(10.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(10.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(9.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(117, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(integer2);
      
      Level level0 = wall0.getLevel();
      assertEquals(10.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(10.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(9.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(117, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(level0);
      
      Level level1 = wall0.getLevel();
      assertEquals(10.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(10.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(9.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(117, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(level1);
      
      Integer integer3 = wall0.getLeftSideColor();
      assertEquals(10.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(10.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(9.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(117, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(integer3);
      
      Float float0 = Float.valueOf(4235.5884F);
      assertEquals(4235.5884F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeightAtEnd(float0);
      assertEquals(10.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4235.5884F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(10.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(9.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(117, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.92811793F, 0.0F, 0.92811793F);
      assertEquals(0.92811793F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.46405897F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.92811793F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.92811793F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.92811793F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = Float.isFinite(0.0F);
      assertTrue(boolean0);
      
      wall0.setHeight(float0);
      assertEquals(0.92811793F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.46405897F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.92811793F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.92811793F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.92811793F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.92811793F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.46405897F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.92811793F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.92811793F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.92811793F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      Float float1 = wall0.getHeight();
      assertEquals(0.0F, (float)float1, 0.01F);
      assertEquals(0.92811793F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.46405897F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.92811793F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.92811793F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.92811793F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(0.13753456F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.13753456F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.92811793F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.46405897F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.92811793F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.92811793F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.92811793F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      boolean boolean1 = wall0.intersectsRectangle(512.7397F, 0.01F, 0.0F, 2.0F);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0.92811793F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.46405897F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.92811793F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.92811793F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.92811793F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      wall0.move((-2851.1F), 0.0F);
      assertEquals(0.92811793F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2850.1719F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.92822266F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2850.636F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.92822266F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      float float3 = wall0.getXStart();
      assertEquals((-2851.1F), float3, 0.01F);
      assertEquals(0.92811793F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2850.1719F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.92822266F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2850.636F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.92822266F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      Wall wall1 = wall0.getWallAtEnd();
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertEquals(0.92811793F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2850.1719F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.92822266F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2850.636F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.92822266F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.92822266F, wall1.getLength(), 0.01F);
      assertEquals((-2850.636F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2851.1F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.92811793F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2850.1719F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.92822266F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNotNull(wall1);
      
      float float4 = wall1.getYArcCircleCenter();
      assertNotEquals(float4, float3, 0.01F);
      assertEquals(0.0F, float4, 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertEquals(0.92811793F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2850.1719F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.92822266F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2850.636F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.92822266F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.92822266F, wall1.getLength(), 0.01F);
      assertEquals((-2850.636F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2851.1F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.92811793F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2850.1719F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.92822266F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertSame(wall0, wall1);
      assertEquals(0.92811793F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2850.1719F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.92822266F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2850.636F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.92822266F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall1.getPoints();
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0.92811793F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2850.1719F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.92822266F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2850.636F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.92822266F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.92822266F, wall1.getLength(), 0.01F);
      assertEquals((-2850.636F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2851.1F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.92811793F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2850.1719F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.92822266F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNotNull(floatArray1);
      
      boolean boolean2 = wall0.isTrapezoidal();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertSame(wall0, wall1);
      assertEquals(0.92811793F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2850.1719F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.92822266F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2850.636F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.92822266F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      int int0 = Float.floatToIntBits(1303.254F);
      assertEquals(1151526945, int0);
      
      int int1 = Float.floatToIntBits(110.02F);
      assertFalse(int1 == int0);
      assertEquals(1121716797, int1);
      
      int int2 = Float.floatToIntBits(0.01F);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1008981770, int2);
      
      int int3 = Float.floatToIntBits(1.0F);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(1065353216, int3);
      
      wall1.setHeightAtEnd((Float) 1.0F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertEquals(0.92811793F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2850.1719F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.92822266F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2850.636F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.92822266F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.92822266F, wall1.getLength(), 0.01F);
      assertEquals((-2850.636F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2851.1F), wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.92811793F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2850.1719F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(0.92822266F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-1.0791351F), 0.0F, (-1.0791351F));
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float0 = new Float((-13.701525F));
      assertEquals((-13.701525F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-13.701525F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setWallAtEnd(wall0);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-13.701525F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = new Wall(0.0F, (-1.0791351F), (-1.0791351F), (-1.0791351F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.0791351F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.0791351F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-0.53956753F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0791351F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0791351F), wall1.getXEnd(), 0.01F);
      assertEquals(1.0791351F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNotNull(wall1);
      
      Wall wall2 = wall0.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-13.701525F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0791351F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-0.53956753F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.0791351F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-13.701525F), wall2.getHeight(), 0.01F);
      assertEquals(1.0791351F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNotNull(wall2);
      
      wall2.setArcExtent(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.8463068F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(13.75191F, wall0.getLength(), 0.01F);
      assertEquals((-13.701525F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-13.701525F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0791351F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-0.53956753F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.0791351F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.8463068F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(13.75191F, wall2.getLength(), 0.01F);
      assertEquals((-13.701525F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-13.701525F), wall2.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      
      float[][] floatArray0 = wall2.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(8, floatArray0.length);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.8463068F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(13.75191F, wall0.getLength(), 0.01F);
      assertEquals((-13.701525F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-13.701525F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0791351F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-0.53956753F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.0791351F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.8463068F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(13.75191F, wall2.getLength(), 0.01F);
      assertEquals((-13.701525F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-13.701525F), wall2.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Wall wall0 = new Wall(3904.6F, (-1022.38086F), (-830.6896F), (-830.6896F), 0.0F, (-2170.124F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4739.168F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-926.5352F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4739.168F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals((-830.6896F), wall0.getYEnd(), 0.01F);
      assertEquals((-1022.38086F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      wall0.setYEnd(2110.9646F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(5678.1F, wall0.getLength(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertEquals(544.2919F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals((-1022.38086F), wall0.getYStart(), 0.01F);
      assertEquals(5678.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      boolean boolean0 = wall0.containsPoint((-1022.38086F), 3904.6F, (-1022.38086F));
      assertFalse(boolean0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(5678.1F, wall0.getLength(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertEquals(544.2919F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals((-1022.38086F), wall0.getYStart(), 0.01F);
      assertEquals(5678.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setThickness(0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(5678.1F, wall0.getLength(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertEquals(544.2919F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals((-1022.38086F), wall0.getYStart(), 0.01F);
      assertEquals(5678.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone(list0);
      assertTrue(list1.equals((Object)list0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      Level level0 = new Level((String) null, (-1413.0F), (-1601.39F), 0.0F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertNull(level1.getName());
      assertNotNull(level1);
      
      level1.setName((String) null);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertNull(level1.getName());
      
      wall0.setLevel(level1);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(5678.1F, wall0.getLength(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertEquals(544.2919F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals((-1022.38086F), wall0.getYStart(), 0.01F);
      assertEquals(5678.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertNull(level1.getName());
      
      Float float0 = new Float(0.6084034999428786);
      assertEquals(0.6084035F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Level level2 = level1.clone();
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNotSame(level1, level2);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertNull(level1.getName());
      assertNull(level2.getName());
      assertEquals((-1601.39F), level2.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level2.getHeight(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals((-1413.0F), level2.getElevation(), 0.01F);
      assertNotNull(level2);
      
      level1.setFloorThickness(0.0F);
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level1.equals((Object)level2));
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNotSame(level1, level2);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertNull(level1.getName());
      
      boolean boolean1 = wall0.isAtLevel(level0);
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(5678.1F, wall0.getLength(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertEquals(544.2919F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals((-1022.38086F), wall0.getYStart(), 0.01F);
      assertEquals(5678.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      
      wall0.setThickness(0.1F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5678.1F, wall0.getLength(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertEquals(544.2919F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals((-1022.38086F), wall0.getYStart(), 0.01F);
      assertEquals(5678.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Wall wall0 = new Wall((-22.129295F), 780.7F, (-22.129295F), (-22.129295F), (-22.129295F), (-22.129295F));
      assertEquals(802.8293F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-22.129295F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(780.7F, wall0.getYStart(), 0.01F);
      assertEquals((-22.129295F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(802.8293F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-22.129295F), wall0.getThickness(), 0.01F);
      assertEquals((-22.129295F), wall0.getXStart(), 0.01F);
      assertEquals(379.28537F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-22.129295F), wall0.getXEnd(), 0.01F);
      assertEquals((-22.129295F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(802.8293F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-22.129295F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(780.7F, wall0.getYStart(), 0.01F);
      assertEquals((-22.129295F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(802.8293F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-22.129295F), wall0.getThickness(), 0.01F);
      assertEquals((-22.129295F), wall0.getXStart(), 0.01F);
      assertEquals(379.28537F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-22.129295F), wall0.getXEnd(), 0.01F);
      assertEquals((-22.129295F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-22.129295F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(780.7F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(379.28537F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(802.8293F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-22.129295F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-22.129295F), wall1.getXStart(), 0.01F);
      assertEquals((-22.129295F), wall1.getXEnd(), 0.01F);
      assertEquals((-22.129295F), wall1.getYEnd(), 0.01F);
      assertEquals(802.8293F, wall1.getLength(), 0.01F);
      assertEquals((-22.129295F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotNull(wall1);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(802.8293F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-22.129295F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(780.7F, wall0.getYStart(), 0.01F);
      assertEquals((-22.129295F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(802.8293F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-22.129295F), wall0.getThickness(), 0.01F);
      assertEquals((-22.129295F), wall0.getXStart(), 0.01F);
      assertEquals(379.28537F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-22.129295F), wall0.getXEnd(), 0.01F);
      assertEquals((-22.129295F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-22.129295F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(780.7F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(379.28537F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(802.8293F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-22.129295F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-22.129295F), wall1.getXStart(), 0.01F);
      assertEquals((-22.129295F), wall1.getXEnd(), 0.01F);
      assertEquals((-22.129295F), wall1.getYEnd(), 0.01F);
      assertEquals(802.8293F, wall1.getLength(), 0.01F);
      assertEquals((-22.129295F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(802.8293F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-22.129295F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(780.7F, wall0.getYStart(), 0.01F);
      assertEquals((-22.129295F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(802.8293F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-22.129295F), wall0.getThickness(), 0.01F);
      assertEquals((-22.129295F), wall0.getXStart(), 0.01F);
      assertEquals(379.28537F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-22.129295F), wall0.getXEnd(), 0.01F);
      assertEquals((-22.129295F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-22.129295F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(780.7F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(379.28537F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(802.8293F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-22.129295F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-22.129295F), wall1.getXStart(), 0.01F);
      assertEquals((-22.129295F), wall1.getXEnd(), 0.01F);
      assertEquals((-22.129295F), wall1.getYEnd(), 0.01F);
      assertEquals(802.8293F, wall1.getLength(), 0.01F);
      assertEquals((-22.129295F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(802.8293F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-22.129295F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(780.7F, wall0.getYStart(), 0.01F);
      assertEquals((-22.129295F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(802.8293F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-22.129295F), wall0.getThickness(), 0.01F);
      assertEquals((-22.129295F), wall0.getXStart(), 0.01F);
      assertEquals(379.28537F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-22.129295F), wall0.getXEnd(), 0.01F);
      assertEquals((-22.129295F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-22.129295F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(780.7F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(379.28537F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(802.8293F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-22.129295F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-22.129295F), wall1.getXStart(), 0.01F);
      assertEquals((-22.129295F), wall1.getXEnd(), 0.01F);
      assertEquals((-22.129295F), wall1.getYEnd(), 0.01F);
      assertEquals(802.8293F, wall1.getLength(), 0.01F);
      assertEquals((-22.129295F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Wall wall0 = new Wall((-1.1605421F), (-1.1605421F), (-1.1605421F), (-1.1605421F), (-1.1605421F), (-1.1605421F));
      assertEquals((-1.1605421F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.1605421F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.1605421F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.1605421F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.1605421F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.1605421F), wall0.getHeight(), 0.01F);
      assertEquals((-1.1605421F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.1605421F), wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((-1.1605421F));
      assertEquals((-1.1605421F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-1.1605421F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.1605421F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.1605421F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.1605421F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.1605421F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.1605421F), wall0.getHeight(), 0.01F);
      assertEquals((-1.1605421F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.1605421F), wall0.getYEnd(), 0.01F);
      
      Float float1 = wall0.getHeight();
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.1605421F), (float)float1, 0.01F);
      assertEquals((-1.1605421F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.1605421F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.1605421F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.1605421F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.1605421F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.1605421F), wall0.getHeight(), 0.01F);
      assertEquals((-1.1605421F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.1605421F), wall0.getYEnd(), 0.01F);
      assertNotNull(float1);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Wall wall0 = new Wall((-1121.2971F), (-1678.2F), 0.0F, (-1678.2F), 0.0F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1121.2971F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-560.64856F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1121.2971F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1121.2971F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotNull(wall1);
      
      Integer integer0 = new Integer(2268);
      assertEquals(2268, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.compare(2268, 2268);
      assertEquals(0, int0);
      
      int int1 = Integer.min(2268, 15);
      assertFalse(int1 == int0);
      assertEquals(15, int1);
      
      wall1.setLeftSideColor(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1121.2971F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-560.64856F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1121.2971F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1121.2971F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      wall0.setRightSideShininess((-1121.2971F));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      
      float float0 = wall0.getXEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      
      Integer integer1 = Integer.getInteger("]Jz)_vM>Rc(GniV;", 0);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      wall1.setXStart((-1678.2F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 0.0F, (-1121.2971F), 3088.55F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setXStart(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      wall1.setThickness((-4470.84F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      float float1 = wall0.getYStart();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-1678.2F), float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      Integer integer2 = wall1.getRightSideColor();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(integer2);
      
      wall1.setLeftSideColor(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)integer1));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      wall1.setXEnd(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean1 = wall1.containsWallStartAt(0.0F, 3110.0F, 15);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(homeTexture0);
      
      Integer integer3 = wall0.getLeftSideColor();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(integer3);
      
      boolean boolean2 = wall0.containsPoint(0.0F, (-1678.2F), (-1777.534F));
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      float float2 = wall0.getXEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      Level level0 = new Level((String) null, 0.0F, 0.01F, (-1.0F));
      assertEquals(0.01F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      assertEquals((-1.0F), level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy((String) null, propertyChangeListenerProxy0);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      assertNull(propertyChangeListenerProxy1.getPropertyName());
      assertNotNull(propertyChangeListenerProxy1);
      
      level0.removePropertyChangeListener(propertyChangeListenerProxy1);
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      assertNotSame(propertyChangeListenerProxy1, propertyChangeListenerProxy0);
      assertEquals(0.01F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      assertEquals((-1.0F), level0.getHeight(), 0.01F);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      assertNull(propertyChangeListenerProxy1.getPropertyName());
      
      wall0.setLevel(level0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      assertEquals((-1.0F), level0.getHeight(), 0.01F);
      
      Level level1 = new Level((String) null, 0.0F, 0.01F, 0.0F);
      assertFalse(level1.equals((Object)level0));
      assertEquals(0.01F, level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertNull(level1.getName());
      assertNotNull(level1);
      
      level1.setFloorThickness((-1413.0F));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level1, level0);
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertNull(level1.getName());
      assertEquals((-1413.0F), level1.getFloorThickness(), 0.01F);
      
      boolean boolean0 = wall0.isAtLevel(level1);
      assertFalse(level1.equals((Object)level0));
      assertFalse(boolean0);
      assertNotSame(level1, level0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertNull(level1.getName());
      assertEquals((-1413.0F), level1.getFloorThickness(), 0.01F);
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals(0.0F, float0, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      float float1 = wall0.getLength();
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(textureImage0);
      
      boolean boolean1 = wall0.containsWallEndAt(1.0F, 3036.847F, 2.0F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      Float float0 = new Float((-3.003345F));
      assertEquals((-3.003345F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setWallAtEnd(wall0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      wall0.setYStart(0.0F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      wall0.move(0.0F, 0.0F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, (-3.003345F), 0.0F, (-3.003345F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-3.003345F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-3.003345F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-3.003345F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-3.003345F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      
      wall1.setYStart(0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle((-1393.8479F), 0.01F, 0.0F, (-1.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      
      Float float1 = new Float((-3.003345F));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-3.003345F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      
      boolean boolean1 = wall0.intersectsRectangle(1.0F, 8.557878F, 0.0F, 8.557878F);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      boolean boolean2 = wall1.containsWallStartAt(0.01F, (-4599.4F), 51.70028F);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      
      boolean boolean3 = wall0.intersectsRectangle(390.2F, 0.0F, 0.0F, 390.2F);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      wall1.move(0.01F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getXEnd(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      
      Float float2 = wall0.getArcExtent();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(float2);
      
      wall0.setArcExtent((Float) null);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      wall0.setHeightAtEnd(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float0, (float)float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-1.0791351F), 0.0F, (-1.0791351F));
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      Float float0 = new Float((-3.003345F));
      assertEquals((-3.003345F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = new Wall(0.0F, (-2851.1F), 0.0F, (-3.003345F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall1);
      
      Float float1 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-3.003345F), (float)float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(float1);
      
      Float float2 = new Float(0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.01F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle((-1393.8479F), (-2851.1F), (-1.0791351F), (-2247.7522F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      Float float3 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((-3.003345F), (float)float3, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(float3);
      
      Float float4 = wall1.getHeightAtEnd();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(float4);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean1 = wall0.intersectsRectangle((-3.003345F), (-1.0791351F), (-3.003345F), 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall1.move((-73.767624F), (-3.003345F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-73.767624F), wall1.getXEnd(), 0.01F);
      assertEquals((-2854.1035F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-73.767624F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2848.097F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1430.055F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-73.767624F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-6.00669F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2848.097F, wall1.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-1.0791351F), 0.0F, (-1.0791351F));
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, (-2851.1F), 0.0F, 0.0F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2851.1F, wall1.getLength(), 0.01F);
      assertEquals((-1425.55F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2851.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNotNull(wall1);
      
      Float float1 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.01F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2851.1F, wall1.getLength(), 0.01F);
      assertEquals((-1425.55F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2851.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2851.1F, wall1.getLength(), 0.01F);
      assertEquals((-1425.55F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2851.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(512.7397F, 0.01F, 0.0F, 2.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      float float3 = wall0.getXEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-1.0791351F), float3, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Wall wall2 = wall0.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0791351F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall2.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-0.53956753F), wall2.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall2);
      
      float float4 = wall0.getYArcCircleCenter();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float4, float3, 0.01F);
      assertEquals(0.0F, float4, 0.01F);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      wall0.setArcExtent(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertEquals((float)float0, (float)float4, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-8.8118067E15F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      float[][] floatArray0 = wall2.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(4, floatArray0.length);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-8.8118067E15F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0791351F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(1.0791351F, wall2.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getArcExtent(), 0.01F);
      assertEquals((-8.8118067E15F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1.0791351F), wall2.getXArcCircleCenter(), 0.01F);
      assertNotNull(floatArray0);
      
      boolean boolean1 = wall1.containsWallStartAt(0.0F, (-2851.1F), 0.0F);
      assertFalse(boolean1 == boolean0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(boolean1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2851.1F, wall1.getLength(), 0.01F);
      assertEquals((-1425.55F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2851.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-8.8118067E15F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(homeTexture0);
      
      Integer integer0 = wall1.getLeftSideColor();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2851.1F, wall1.getLength(), 0.01F);
      assertEquals((-1425.55F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2851.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(integer0);
      
      Float float5 = wall0.getArcExtent();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertEquals((float)float5, (float)float4, 0.01F);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-8.8118067E15F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(float5);
      
      wall1.setPattern((TextureImage) null);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2851.1F, wall1.getLength(), 0.01F);
      assertEquals((-1425.55F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2851.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-1.0791351F), 0.0F, (-1.0791351F));
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall1 = new Wall((-1739.4F), (-1739.4F), 0.0F, 0.0F, (-625.596F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(wall1);
      
      Float float1 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(float1);
      
      Float float2 = new Float((-2851.1F));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-2851.1F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      float float3 = Float.sum((-956.0F), 944.7096F);
      assertEquals((-11.290405F), float3, 0.01F);
      
      wall1.setHeight(float2);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float3, 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      wall1.setHeight(float0);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      Float float4 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(float4);
      
      Float float5 = new Float(0.0F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertEquals((float)float5, (float)float4, 0.01F);
      assertEquals((float)float5, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      boolean boolean0 = wall1.intersectsRectangle((-625.596F), 974.55786F, 3238.7983F, 390.2F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      boolean boolean1 = wall0.containsPoint((-1238.0F), 110.02F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      
      wall1.move(110.02F, 390.2F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(110.02F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(390.2F, wall1.getYEnd(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-1629.38F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-479.49997F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1349.2F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-759.68F), wall1.getXArcCircleCenter(), 0.01F);
      
      float float6 = wall1.getXEnd();
      assertNotEquals(float6, float3, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(110.02F, float6, 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(110.02F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(390.2F, wall1.getYEnd(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-1629.38F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-479.49997F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1349.2F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-759.68F), wall1.getXArcCircleCenter(), 0.01F);
      
      float float7 = wall1.getXStart();
      assertNotEquals(float7, float6, 0.01F);
      assertNotEquals(float7, float3, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1629.38F), float7, 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(110.02F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(390.2F, wall1.getYEnd(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-1629.38F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-479.49997F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1349.2F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-759.68F), wall1.getXArcCircleCenter(), 0.01F);
      
      Wall wall2 = wall1.getWallAtEnd();
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-0.53956753F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(1.0791351F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.0791351F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.0791351F, wall2.getLength(), 0.01F);
      assertEquals(110.02F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(390.2F, wall1.getYEnd(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-1629.38F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-479.49997F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1349.2F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-759.68F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall2);
      
      float float8 = wall2.getYArcCircleCenter();
      assertFalse(wall2.equals((Object)wall1));
      assertNotEquals(float8, float7, 0.01F);
      assertNotEquals(float8, float3, 0.01F);
      assertNotEquals(float8, float6, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals(0.0F, float8, 0.01F);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-0.53956753F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(1.0791351F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.0791351F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.0791351F, wall2.getLength(), 0.01F);
      assertEquals(110.02F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(390.2F, wall1.getYEnd(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-1629.38F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-479.49997F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1349.2F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-759.68F), wall1.getXArcCircleCenter(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(4, floatArray0.length);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      Float float0 = new Float((-425.0F));
      assertEquals((-425.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall1 = new Wall(0.0F, (-1.1121188F), (-1.1121188F), 0.0F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1.1121188F), wall1.getXEnd(), 0.01F);
      assertEquals(1.5727736F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-0.5560594F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.5727736F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.1121188F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5560594F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNotNull(wall1);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.1121188F), wall1.getXEnd(), 0.01F);
      assertEquals(1.5727736F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-0.5560594F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.5727736F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.1121188F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5560594F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.1121188F), wall1.getXEnd(), 0.01F);
      assertEquals(1.5727736F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-0.5560594F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.5727736F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.1121188F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5560594F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      
      Float float1 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-1.1121188F), wall1.getXEnd(), 0.01F);
      assertEquals(1.5727736F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-0.5560594F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.5727736F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.1121188F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5560594F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(float1);
      
      float float2 = Float.sum(542.768F, 0.0F);
      assertEquals(542.768F, float2, 0.01F);
      
      Float float3 = new Float((-2068.17847388046));
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((-2068.1785F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      float float4 = float3.floatValue();
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertEquals((-2068.1785F), float4, 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone(list0);
      assertTrue(list1.equals((Object)list0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      wall1.setHeight((Float) (-2068.1785F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-1.1121188F), wall1.getXEnd(), 0.01F);
      assertEquals(1.5727736F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-0.5560594F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.5727736F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.1121188F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5560594F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-2068.1785F), wall1.getHeight(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall1.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-1.1121188F), wall1.getXEnd(), 0.01F);
      assertEquals(1.5727736F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-0.5560594F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.5727736F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.1121188F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5560594F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-2068.1785F), wall1.getHeight(), 0.01F);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      float float5 = Float.sum(0.0F, 0.0F);
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertEquals(0.0F, float5, 0.01F);
      
      Float float6 = new Float(2544.9038F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertEquals(2544.9038F, (float)float6, 0.01F);
      assertNotNull(float6);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.1121188F), wall1.getXEnd(), 0.01F);
      assertEquals(1.5727736F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-0.5560594F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.5727736F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.1121188F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5560594F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-2068.1785F), wall1.getHeight(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle((-3.003345F), (-1757.709F), 542.768F, (-1.1121188F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      boolean boolean1 = wall0.containsPoint(0.0F, 665.9399F, (-1.1121188F));
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      wall1.setArcExtent((Float) null);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-1.1121188F), wall1.getXEnd(), 0.01F);
      assertEquals(1.5727736F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-0.5560594F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.5727736F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.1121188F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5560594F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-2068.1785F), wall1.getHeight(), 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall1, wall0);
      assertEquals((-1.1121188F), wall1.getXEnd(), 0.01F);
      assertEquals(1.5727736F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-0.5560594F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.5727736F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.1121188F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5560594F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-2068.1785F), wall1.getHeight(), 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 784.36F, 0.0F, 1685.6F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(784.35F, wall0.getLength(), 0.01F);
      assertEquals(784.35F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1685.6F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(392.185F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(784.36F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess((-2101.0952F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(784.35F, wall0.getLength(), 0.01F);
      assertEquals(784.35F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1685.6F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(392.185F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(784.36F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals((-2101.0952F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Wall wall0 = new Wall(49.58068F, 49.58068F, 49.58068F, 49.58068F, 49.58068F, 49.58068F);
      assertEquals(49.58068F, wall0.getXEnd(), 0.01F);
      assertEquals(49.58068F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(49.58068F, wall0.getHeight(), 0.01F);
      assertEquals(49.58068F, wall0.getThickness(), 0.01F);
      assertEquals(49.58068F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(49.58068F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(49.58068F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(49.58068F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", (PropertyChangeListener) null);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(49.58068F, wall0.getXEnd(), 0.01F);
      assertEquals(49.58068F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(49.58068F, wall0.getHeight(), 0.01F);
      assertEquals(49.58068F, wall0.getThickness(), 0.01F);
      assertEquals(49.58068F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(49.58068F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(49.58068F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(49.58068F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtEnd(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setWallAtStart(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setWallAtStart((Wall) null);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setWallAtEnd((Wall) null);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(float0);
      
      Float float1 = new Float(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight(float1);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, (-2851.1F), 0.0F, 0.0F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2851.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-1425.55F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2851.1F, wall1.getLength(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotNull(wall1);
      
      Float float2 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float(1.0F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(1.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall0.setHeight((Float) null);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2851.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-1425.55F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2851.1F, wall1.getLength(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      boolean boolean0 = wall0.intersectsRectangle(512.7397F, 0.01F, 0.0F, 2.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      wall0.move((-2851.1F), 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2851.1F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      float float4 = wall1.getXEnd();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, float4, 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2851.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-1425.55F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2851.1F, wall1.getLength(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      float float5 = wall1.getXStart();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(float5, float4, 0.01F);
      assertEquals(0.0F, float5, 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2851.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-1425.55F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2851.1F, wall1.getLength(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      Wall wall2 = wall0.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2851.1F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall2.getHeight());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-2851.1F), wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2851.1F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals((-2851.1F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNotNull(wall2);
      
      float float6 = wall0.getYArcCircleCenter();
      assertEquals(float6, float5, 0.01F);
      assertEquals(float6, float4, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, float6, 0.01F);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2851.1F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(4, floatArray0.length);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2851.1F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, (-1739.4F), (-1.0F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertNotNull(wall1);
      
      Float float0 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(float0);
      
      Float float1 = new Float(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall1.setHeight(float1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      
      Wall wall2 = new Wall((-1724.0364F), (-2851.1F), 0.0F, 0.0F, 0.0F);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-1425.55F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(3331.8274F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1724.0364F), wall2.getXStart(), 0.01F);
      assertEquals(3331.8274F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-862.0182F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNotNull(wall2);
      
      Float float2 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(float2);
      
      Float float3 = new Float(1.0F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(1.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall0.setHeight((Float) null);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      wall2.setWallAtStart(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertEquals((-1425.55F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(3331.8274F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1724.0364F), wall2.getXStart(), 0.01F);
      assertEquals(3331.8274F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-862.0182F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      
      boolean boolean0 = wall1.intersectsRectangle(512.7397F, 0.01F, 0.0F, 2.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(boolean0);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      
      wall1.move((-2851.1F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2851.1F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2851.1F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      
      float float4 = wall2.getXEnd();
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.0F, float4, 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-1425.55F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(3331.8274F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1724.0364F), wall2.getXStart(), 0.01F);
      assertEquals(3331.8274F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-862.0182F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      
      float float5 = wall2.getXStart();
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotEquals(float5, float4, 0.01F);
      assertEquals((-1724.0364F), float5, 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-1425.55F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(3331.8274F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1724.0364F), wall2.getXStart(), 0.01F);
      assertEquals(3331.8274F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-862.0182F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      
      Wall wall3 = wall0.getWallAtEnd();
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall3, wall2);
      assertSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertEquals((-869.7F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall3.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall3.getThickness(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals((-2851.1F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(1739.4F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals((-2851.1F), wall3.getXStart(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(1739.4F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getHeight(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertEquals((-1739.4F), wall3.getYEnd(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall3);
      
      float float6 = wall1.getYArcCircleCenter();
      assertNotEquals(float6, float4, 0.01F);
      assertNotEquals(float6, float5, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals((-869.7F), float6, 0.01F);
      assertNotSame(wall1, wall0);
      assertSame(wall1, wall3);
      assertNotSame(wall1, wall2);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2851.1F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2851.1F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall1, wall0);
      assertSame(wall1, wall3);
      assertNotSame(wall1, wall2);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2851.1F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2851.1F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Wall wall0 = new Wall((-1121.2971F), (-1678.2F), 0.0F, (-1678.2F), 0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-560.64856F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1121.2971F, wall1.getLength(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1121.2971F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1121.2971F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall1);
      
      Integer integer0 = new Integer(2268);
      assertEquals(2268, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.compare(2268, 2268);
      assertEquals(0, int0);
      
      int int1 = Integer.min(2268, 15);
      assertFalse(int1 == int0);
      assertEquals(15, int1);
      
      wall1.setLeftSideColor(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-560.64856F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1121.2971F, wall1.getLength(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1121.2971F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1121.2971F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      
      wall0.setRightSideShininess((-1121.2971F));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float float0 = wall0.getXEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall1.setXStart((-1678.2F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 22.939007F, (-1121.2971F), 3088.55F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1121.2971F, wall0.getLength(), 0.01F);
      assertEquals(1121.2971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1121.2971F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-560.64856F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setXStart(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall1.setThickness((-4470.84F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      
      Integer integer1 = wall1.getRightSideColor();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertNull(integer1);
      
      wall1.setLeftSideColor(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      
      wall1.setXEnd(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      
      boolean boolean1 = wall1.containsWallStartAt(0.0F, 3110.0F, 15);
      assertTrue(boolean1 == boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertNull(homeTexture0);
      
      Integer integer2 = wall0.getLeftSideColor();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(integer2);
      
      HomeTexture homeTexture1 = wall1.getLeftSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1678.2F), wall1.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1678.2F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1678.2F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-839.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-4470.84F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1678.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1678.2F, wall1.getLength(), 0.01F);
      assertEquals(2268, (int)wall1.getLeftSideColor());
      assertNull(homeTexture1);
      
      float float1 = wall0.getXArcCircleCenter();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1678.2F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1678.2F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1678.2F), wall0.getYEnd(), 0.01F);
      assertEquals((-1121.2971F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall1 = new Wall(5.6169157F, 5.6169157F, 0.0F, 0.0F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.8084579F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(7.943518F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5.6169157F, wall1.getXStart(), 0.01F);
      assertEquals(7.943518F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2.8084579F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(5.6169157F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotNull(wall1);
      
      wall0.setYStart(5.6169157F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(5.6169157F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.8084579F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5.6169157F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5.6169157F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(5.6169157F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.8084579F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5.6169157F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5.6169157F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.8084579F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(7.943518F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5.6169157F, wall1.getXStart(), 0.01F);
      assertEquals(7.943518F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2.8084579F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(5.6169157F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      Float float1 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.8084579F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(7.943518F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5.6169157F, wall1.getXStart(), 0.01F);
      assertEquals(7.943518F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2.8084579F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(5.6169157F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(float1);
      
      Float float2 = new Float(0.0F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall1.setHeight(float0);
      assertEquals((float)float0, (float)float2, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.8084579F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(7.943518F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5.6169157F, wall1.getXStart(), 0.01F);
      assertEquals(7.943518F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2.8084579F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(5.6169157F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      Float float3 = new Float(5.6169157F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(5.6169157F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(5.6169157F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.8084579F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5.6169157F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5.6169157F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.8084579F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(7.943518F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5.6169157F, wall1.getXStart(), 0.01F);
      assertEquals(7.943518F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2.8084579F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(5.6169157F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      boolean boolean0 = wall1.intersectsRectangle(0.0F, 0.0F, 3238.7983F, 390.2F);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean0);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.8084579F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(7.943518F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5.6169157F, wall1.getXStart(), 0.01F);
      assertEquals(7.943518F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2.8084579F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(5.6169157F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      boolean boolean1 = wall0.containsPoint(0.0F, 110.02F, (float) float2);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float2, (float)float3, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertEquals(5.6169157F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.8084579F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5.6169157F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5.6169157F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      wall0.setArcExtent(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(5.6169157F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-2.808458F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5.6169157F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5.6169157F, wall0.getYStart(), 0.01F);
      assertEquals(4.5865599E16F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      float float4 = wall0.getStartPointToEndPointDistance();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(5.6169157F, float4, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(5.6169157F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-2.808458F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5.6169157F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5.6169157F, wall0.getYStart(), 0.01F);
      assertEquals(4.5865599E16F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Wall wall0 = new Wall((-1739.4F), (-1.0F), 3481.1F, 2015.25F, (-1.0F));
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(5596.3276F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5596.3276F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1007.125F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallEndAt(2015.25F, (-1739.4F), 2015.25F);
      assertFalse(boolean0);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(5596.3276F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5596.3276F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1007.125F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      
      wall0.setYStart(0.0F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(1007.625F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(5595.968F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(5595.968F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      
      Level level0 = new Level((String) null, (-1413.0F), (-1601.39F), 0.0F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertNull(level0.getName());
      assertNotNull(level0);
      
      wall0.setLevel(level0);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(1007.625F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(5595.968F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(5595.968F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertNull(level0.getName());
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertNull(level0.getName());
      assertTrue(level1.isVisible());
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertNull(level1.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      assertNotNull(level1);
      
      level1.setFloorThickness((-1601.39F));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertNull(level0.getName());
      assertTrue(level1.isVisible());
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertNull(level1.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      
      boolean boolean1 = wall0.isAtLevel(level1);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(1007.625F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(5595.968F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(5595.968F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-1601.39F), level0.getFloorThickness(), 0.01F);
      assertEquals((-1413.0F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertNull(level0.getName());
      assertTrue(level1.isVisible());
      assertEquals((-1601.39F), level1.getFloorThickness(), 0.01F);
      assertNull(level1.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals((-1413.0F), level1.getElevation(), 0.01F);
      
      boolean boolean2 = wall0.containsPoint(1.0F, (-2311.0F), 3481.1F);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(1007.625F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(5595.968F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(5595.968F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 362.4303F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(362.4303F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Float float0 = wall0.getArcExtent();
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(362.4303F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(float0);
      
      boolean boolean0 = wall0.isAtLevel((Level) null);
      assertTrue(boolean0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(362.4303F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Wall wall0 = new Wall(0.2215297F, 0.2215297F, 0.2215297F, 0.2215297F, 0.2215297F);
      assertEquals(0.2215297F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2215297F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.2215297F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.2215297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall0.getYStart(), 0.01F);
      assertEquals(0.2215297F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.2215297F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.2215297F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2215297F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.2215297F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.2215297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall0.getYStart(), 0.01F);
      assertEquals(0.2215297F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.2215297F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = new Wall((-6.4098854F), (-6.4098854F), 0.2215297F, (-6.4098854F), (-6.4098854F), 0.2215297F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-3.094178F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(6.631415F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-6.4098854F), wall1.getYStart(), 0.01F);
      assertEquals((-6.4098854F), wall1.getThickness(), 0.01F);
      assertEquals((-6.4098854F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.2215297F, wall1.getHeight(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(6.631415F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.2215297F, wall1.getXEnd(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYEnd(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.2215297F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2215297F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.2215297F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.2215297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall0.getYStart(), 0.01F);
      assertEquals(0.2215297F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.2215297F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3.094178F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(6.631415F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-6.4098854F), wall1.getYStart(), 0.01F);
      assertEquals((-6.4098854F), wall1.getThickness(), 0.01F);
      assertEquals((-6.4098854F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.2215297F, wall1.getHeight(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(6.631415F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.2215297F, wall1.getXEnd(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYEnd(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.2215297F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2215297F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.2215297F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.2215297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall0.getYStart(), 0.01F);
      assertEquals(0.2215297F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.2215297F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3.094178F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(6.631415F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-6.4098854F), wall1.getYStart(), 0.01F);
      assertEquals((-6.4098854F), wall1.getThickness(), 0.01F);
      assertEquals((-6.4098854F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.2215297F, wall1.getHeight(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(6.631415F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.2215297F, wall1.getXEnd(), 0.01F);
      assertEquals((-6.4098854F), wall1.getYEnd(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      assertEquals(0.2215297F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2215297F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.2215297F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.2215297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.2215297F, wall0.getYStart(), 0.01F);
      assertEquals(0.2215297F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.2215297F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      Float float0 = new Float((-3.003345F));
      assertEquals((-3.003345F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      wall0.setYStart(0.0F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, (-3.003345F), 0.0F, (-3.003345F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3.003345F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNotNull(wall1);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3.003345F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      
      wall1.setYStart(0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      
      boolean boolean0 = wall0.intersectsRectangle((-1393.8447F), 0.01F, 0.0F, (-2247.7522F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      
      Float float1 = wall1.getHeightAtEnd();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(float1);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3.003345F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3.003345F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      
      wall0.move(0.0F, (-3241.7F));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3241.7F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-3241.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-3241.7F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float float2 = wall0.getXEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3241.7F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-3241.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-3241.7F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float3 = new Float((-1.0F));
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((-1.0F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3241.7F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-3241.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-3241.7F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 3481.1F, (-2169.3F), 3481.1F, 0.897F, 0.897F);
      assertEquals(0.897F, wall0.getHeight(), 0.01F);
      assertEquals((-1085.15F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2169.3F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2168.3F, wall0.getLength(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2168.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.897F, wall0.getThickness(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsPoint((-1.0F), 393.0F, (-1.0F));
      assertFalse(boolean0);
      assertEquals(0.897F, wall0.getHeight(), 0.01F);
      assertEquals((-1085.15F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2169.3F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2168.3F, wall0.getLength(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2168.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.897F, wall0.getThickness(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      
      Level level0 = new Level("", (-937.149F), 0.897F, (-2365.11F));
      assertEquals("", level0.getName());
      assertEquals(0.897F, level0.getFloorThickness(), 0.01F);
      assertEquals((-2365.11F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-937.149F), level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      wall0.setLevel(level0);
      assertEquals(0.897F, wall0.getHeight(), 0.01F);
      assertEquals((-1085.15F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2169.3F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2168.3F, wall0.getLength(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2168.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.897F, wall0.getThickness(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(0.897F, level0.getFloorThickness(), 0.01F);
      assertEquals((-2365.11F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-937.149F), level0.getElevation(), 0.01F);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals("", level0.getName());
      assertEquals(0.897F, level0.getFloorThickness(), 0.01F);
      assertEquals((-2365.11F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-937.149F), level0.getElevation(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals((-937.149F), level1.getElevation(), 0.01F);
      assertEquals((-2365.11F), level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.897F, level1.getFloorThickness(), 0.01F);
      assertNotNull(level1);
      
      wall0.setArcExtent((Float) null);
      assertEquals(0.897F, wall0.getHeight(), 0.01F);
      assertEquals((-1085.15F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2169.3F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2168.3F, wall0.getLength(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2168.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.897F, wall0.getThickness(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      
      level0.setFloorThickness(4410.804F);
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level1);
      assertEquals("", level0.getName());
      assertEquals(4410.804F, level0.getFloorThickness(), 0.01F);
      assertEquals((-2365.11F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-937.149F), level0.getElevation(), 0.01F);
      
      boolean boolean1 = wall0.isAtLevel(level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(level0, level1);
      assertEquals(0.897F, wall0.getHeight(), 0.01F);
      assertEquals((-1085.15F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2169.3F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2168.3F, wall0.getLength(), 0.01F);
      assertEquals(3481.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2168.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.897F, wall0.getThickness(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(4410.804F, level0.getFloorThickness(), 0.01F);
      assertEquals((-2365.11F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-937.149F), level0.getElevation(), 0.01F);
      
      int int0 = Float.floatToIntBits(2.0F);
      assertEquals(1073741824, int0);
      
      wall0.setArcExtent((Float) 2.0F);
      assertEquals(0.897F, wall0.getHeight(), 0.01F);
      assertEquals((-1085.15F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2169.3F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2784.9753F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2576.797F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2168.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.897F, wall0.getThickness(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      
      boolean boolean2 = wall0.containsWallEndAt(4410.804F, (-3594.0F), 4410.804F);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(0.897F, wall0.getHeight(), 0.01F);
      assertEquals((-1085.15F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2169.3F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2784.9753F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2576.797F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2168.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.897F, wall0.getThickness(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      
      Integer integer0 = Integer.valueOf(2359);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(2359, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0.897F, wall0.getHeight(), 0.01F);
      assertEquals(2359, (int)wall0.getRightSideColor());
      assertEquals((-1085.15F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2169.3F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2784.9753F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2576.797F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2168.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.897F, wall0.getThickness(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
      
      float float0 = wall0.getYArcCircleCenter();
      assertEquals(2784.9753F, float0, 0.01F);
      assertEquals(0.897F, wall0.getHeight(), 0.01F);
      assertEquals(2359, (int)wall0.getRightSideColor());
      assertEquals((-1085.15F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2169.3F), wall0.getXEnd(), 0.01F);
      assertEquals(3481.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2784.9753F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2576.797F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2168.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.897F, wall0.getThickness(), 0.01F);
      assertEquals(3481.1F, wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 0.01F, 0.01F, 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall0));
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1, linkedList0.size());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
      assertNotNull(wall_PropertyArray0);
      
      Wall wall0 = new Wall(1491.795F, 1491.795F, 1491.795F, 1491.795F, 1491.795F);
      assertEquals(1491.795F, wall0.getXEnd(), 0.01F);
      assertEquals(1491.795F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1491.795F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1491.795F, wall0.getThickness(), 0.01F);
      assertEquals(1491.795F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1491.795F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1491.795F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertEquals(1491.795F, wall0.getXEnd(), 0.01F);
      assertEquals(1491.795F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1491.795F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1491.795F, wall0.getThickness(), 0.01F);
      assertEquals(1491.795F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1491.795F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1491.795F, wall0.getXStart(), 0.01F);
      assertNull(textureImage0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-1.0791351F), 0.0F, (-1.0791351F));
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float0 = wall0.getHeight();
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(float0);
      
      Float float1 = new Float(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight(float1);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setWallAtEnd(wall0);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = new Wall(0.0F, (-2851.1F), 0.0F, 0.0F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2851.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1425.55F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2851.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall1);
      
      Float float2 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(float2);
      
      Float float3 = new Float(0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals(0.01F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall0.setHeight((Float) null);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2851.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1425.55F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2851.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(512.7397F, 0.01F, 0.0F, 2.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.move((-2851.1F), (-25.673447F));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-25.673447F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-25.673447F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2851.6396F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(1.0791016F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2852.1792F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0791016F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-25.673447F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float float4 = wall0.getXEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-2852.1792F), float4, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-25.673447F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-25.673447F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2851.6396F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(1.0791016F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2852.1792F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0791016F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-25.673447F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall2 = wall0.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-25.673447F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-25.673447F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2851.6396F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(1.0791016F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2852.1792F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0791016F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-25.673447F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2852.1792F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1.0791016F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-25.673447F), wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-2851.6396F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertEquals(1.0791016F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-25.673447F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-25.673447F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotNull(wall2);
      
      wall2.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-25.673447F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-25.673447F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2851.6396F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(1.0791016F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2852.1792F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0791016F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-25.673447F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2852.1792F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1.0791016F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-25.673447F), wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-2851.6396F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertEquals(1.0791016F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-25.673447F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-25.673447F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      
      float float5 = wall2.getYArcCircleCenter();
      assertNotEquals(float5, float4, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-25.673447F), float5, 0.01F);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-25.673447F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-25.673447F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2851.6396F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(1.0791016F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2852.1792F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0791016F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-25.673447F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2852.1792F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1.0791016F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-25.673447F), wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-2851.6396F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertEquals(1.0791016F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-25.673447F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-25.673447F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertEquals((-25.673447F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-25.673447F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2851.6396F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(1.0791016F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2852.1792F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0791016F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-25.673447F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Wall wall0 = new Wall(48.392612F, 48.392612F, 48.392612F, 48.392612F, 48.392612F, 48.392612F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(48.392612F, wall0.getXEnd(), 0.01F);
      assertEquals(48.392612F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(48.392612F, wall0.getYEnd(), 0.01F);
      assertEquals(48.392612F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(48.392612F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(48.392612F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(48.392612F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(48.392612F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(48.392612F, wall0.getXEnd(), 0.01F);
      assertEquals(48.392612F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(48.392612F, wall0.getYEnd(), 0.01F);
      assertEquals(48.392612F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(48.392612F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(48.392612F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(48.392612F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(48.392612F, wall0.getThickness(), 0.01F);
      assertNull(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-1.0791351F), 0.0F, (-1.0791351F));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      
      Float float0 = new Float((-0.8752656F));
      assertEquals((-0.8752656F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall1 = new Wall((-1739.4F), (-1739.4F), (-0.367321F), 0.0F, (-625.596F));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2459.6233F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.367321F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-869.88367F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.6233F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall1);
      
      Float float1 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2459.6233F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.367321F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-869.88367F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.6233F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(float1);
      
      Float float2 = new Float((-2851.1F));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-2851.1F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float(944.7096F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(944.7096F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall1.setHeight(float2);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float3, 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2459.6233F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.367321F), wall1.getXEnd(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-869.88367F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.6233F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      wall1.setHeight(float0);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2459.6233F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.367321F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-869.88367F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.6233F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.8752656F), wall1.getHeight(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2459.6233F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.367321F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-869.88367F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.6233F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.8752656F), wall1.getHeight(), 0.01F);
      
      Float float4 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((-0.8752656F), (float)float4, 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2459.6233F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.367321F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-869.88367F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.6233F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.8752656F), wall1.getHeight(), 0.01F);
      assertNotNull(float4);
      
      Float float5 = new Float(0.0F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2459.6233F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.367321F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-869.88367F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.6233F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.8752656F), wall1.getHeight(), 0.01F);
      
      boolean boolean0 = wall1.intersectsRectangle(974.55786F, 0.0F, (-1.0791351F), (-1.0791351F));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean0);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2459.6233F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.367321F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-869.88367F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.6233F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.8752656F), wall1.getHeight(), 0.01F);
      
      wall0.move((-0.8752656F), 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.8752656F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.9544007F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.4148331F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      
      float float6 = wall0.getXEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-1.9544007F), float6, 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.8752656F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.9544007F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.4148331F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      
      float float7 = new Float((-0.8752656F));
      assertNotEquals(float7, float6, 0.01F);
      assertEquals((-0.8752656F), float7, 0.01F);
      
      Wall wall2 = wall1.getWallAtEnd();
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-1.9544007F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-0.8752656F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-1.4148331F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0791351F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2459.6233F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.367321F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-869.88367F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.6233F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.8752656F), wall1.getHeight(), 0.01F);
      assertNotNull(wall2);
      
      float float8 = wall1.getYArcCircleCenter();
      assertNotEquals(float8, float6, 0.01F);
      assertNotEquals(float8, float7, 0.01F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-869.7F), float8, 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2459.6233F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.367321F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-869.88367F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.6233F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.8752656F), wall1.getHeight(), 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2459.6233F, wall1.getLength(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.367321F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-869.88367F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.6233F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.8752656F), wall1.getHeight(), 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Wall wall0 = new Wall((-22.129295F), 780.7F, 780.7F, (-22.129295F), (-22.129295F));
      assertEquals((-22.129295F), wall0.getThickness(), 0.01F);
      assertEquals((-22.129295F), wall0.getXStart(), 0.01F);
      assertEquals(379.28537F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-22.129295F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1135.3721F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(780.7F, wall0.getYStart(), 0.01F);
      assertEquals(379.28537F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1135.3721F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(780.7F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setThickness(169.5746F);
      assertEquals((-22.129295F), wall0.getXStart(), 0.01F);
      assertEquals(379.28537F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-22.129295F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1135.3721F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(780.7F, wall0.getYStart(), 0.01F);
      assertEquals(379.28537F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1135.3721F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(780.7F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(169.5746F, wall0.getThickness(), 0.01F);
      
      Integer integer0 = wall0.getRightSideColor();
      assertEquals((-22.129295F), wall0.getXStart(), 0.01F);
      assertEquals(379.28537F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-22.129295F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1135.3721F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(780.7F, wall0.getYStart(), 0.01F);
      assertEquals(379.28537F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1135.3721F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(780.7F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(169.5746F, wall0.getThickness(), 0.01F);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 362.4303F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(362.4303F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setLeftSideShininess(1.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(362.4303F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Float float0 = new Float(82.1F);
      assertEquals(82.1F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf((-2889.286F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2889.286F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = Float.valueOf(0.0F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = Float.valueOf(0.0F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      Float float4 = Float.valueOf(0.0F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      Float float5 = Float.valueOf(0.0F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertEquals((float)float5, (float)float4, 0.01F);
      assertEquals((float)float5, (float)float3, 0.01F);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      
      Float float6 = Float.valueOf(2870.75F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertEquals(2870.75F, (float)float6, 0.01F);
      assertNotNull(float6);
      
      wall0.setHeight(float6);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2870.75F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(362.4303F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      Wall wall1 = new Wall((-1739.4F), (-1739.4F), 0.0F, 0.0F, (-625.596F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      
      Float float7 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(float7);
      
      Float float8 = new Float((-2851.1F));
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertEquals((-2851.1F), (float)float8, 0.01F);
      assertNotNull(float8);
      
      wall1.setHeight(float8);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2870.75F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(362.4303F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      
      Wall wall2 = wall0.clone();
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getYEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertEquals(1.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(362.4303F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2870.75F, wall2.getHeight(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2870.75F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(362.4303F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall2);
      
      boolean boolean0 = wall2.intersectsRectangle((-2851.1F), 0.0F, 27.582699F, 0.0F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(boolean0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getYEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertEquals(1.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(362.4303F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2870.75F, wall2.getHeight(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2870.75F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(362.4303F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(float0);
      
      Float float1 = new Float(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight(float1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, (-2851.1F), 0.0F, 0.0F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1425.55F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2851.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2851.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(wall1);
      
      Float float2 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float(0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals(0.01F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall0.setHeight((Float) null);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1425.55F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2851.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2851.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      boolean boolean0 = wall0.intersectsRectangle(512.7397F, 0.01F, 0.0F, 2.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      
      Integer integer0 = Integer.valueOf((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      
      wall1.setXEnd((-3289.0F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-1425.55F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(4352.734F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-3289.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(4352.734F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1644.5F), wall1.getXArcCircleCenter(), 0.01F);
      
      boolean boolean1 = wall0.containsWallStartAt(0.0F, (-517.5586F), 18.022617F);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-1425.55F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(4352.734F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-3289.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(4352.734F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1644.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(homeTexture0);
      
      Integer integer1 = wall0.getLeftSideColor();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-1), (int)integer1);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Wall wall0 = new Wall((-0.507157F), (-0.507157F), (-0.507157F), (-0.507157F), (-0.507157F));
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals((-0.507157F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.507157F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.507157F), wall0.getThickness(), 0.01F);
      assertEquals((-0.507157F), wall0.getYStart(), 0.01F);
      assertEquals((-0.507157F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.507157F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.507157F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals((-0.507157F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.507157F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.507157F), wall0.getThickness(), 0.01F);
      assertEquals((-0.507157F), wall0.getYStart(), 0.01F);
      assertEquals((-0.507157F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.507157F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.507157F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = new Wall((-0.507157F), (-0.507157F), (-0.507157F), (-0.507157F), (-0.507157F), (-0.507157F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-0.507157F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.507157F), wall1.getYStart(), 0.01F);
      assertEquals((-0.507157F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-0.507157F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.507157F), wall1.getXStart(), 0.01F);
      assertEquals((-0.507157F), wall1.getXEnd(), 0.01F);
      assertEquals((-0.507157F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.507157F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(wall1);
      
      Float float0 = new Float(818.91223F);
      assertEquals(818.91223F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals(818.91223F, float1, 0.01F);
      
      wall1.setArcExtent((Float) 818.91223F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals((-0.507157F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.507157F), wall1.getYStart(), 0.01F);
      assertEquals((-0.507157F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-0.507157F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.507157F), wall1.getXStart(), 0.01F);
      assertEquals((-0.507157F), wall1.getXEnd(), 0.01F);
      assertEquals(818.91223F, wall1.getArcExtent(), 0.01F);
      assertEquals((-0.507157F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.507157F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals((-0.507157F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.507157F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.507157F), wall0.getThickness(), 0.01F);
      assertEquals((-0.507157F), wall0.getYStart(), 0.01F);
      assertEquals((-0.507157F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.507157F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.507157F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals((-0.507157F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.507157F), wall1.getYStart(), 0.01F);
      assertEquals((-0.507157F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-0.507157F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.507157F), wall1.getXStart(), 0.01F);
      assertEquals((-0.507157F), wall1.getXEnd(), 0.01F);
      assertEquals(818.91223F, wall1.getArcExtent(), 0.01F);
      assertEquals((-0.507157F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.507157F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals((-0.507157F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.507157F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.507157F), wall0.getThickness(), 0.01F);
      assertEquals((-0.507157F), wall0.getYStart(), 0.01F);
      assertEquals((-0.507157F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.507157F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.507157F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals((-0.507157F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.507157F), wall1.getYStart(), 0.01F);
      assertEquals((-0.507157F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-0.507157F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.507157F), wall1.getXStart(), 0.01F);
      assertEquals((-0.507157F), wall1.getXEnd(), 0.01F);
      assertEquals(818.91223F, wall1.getArcExtent(), 0.01F);
      assertEquals((-0.507157F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.507157F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals((-0.507157F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.507157F), wall1.getYStart(), 0.01F);
      assertEquals((-0.507157F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-0.507157F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.507157F), wall1.getXStart(), 0.01F);
      assertEquals((-0.507157F), wall1.getXEnd(), 0.01F);
      assertEquals(818.91223F, wall1.getArcExtent(), 0.01F);
      assertEquals((-0.507157F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.507157F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals((-0.507157F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.507157F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.507157F), wall0.getThickness(), 0.01F);
      assertEquals((-0.507157F), wall0.getYStart(), 0.01F);
      assertEquals((-0.507157F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.507157F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.507157F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Wall wall0 = new Wall((-1739.4F), (-1739.4F), 0.0F, 0.0F, (-625.596F));
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(float0);
      
      Float float1 = new Float((-2851.1F));
      assertEquals((-2851.1F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      float float2 = Float.min((-721.14F), 352.465F);
      assertEquals((-721.14F), float2, 0.01F);
      
      wall0.setHeight(float1);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotNull(wall1);
      
      boolean boolean0 = wall1.containsWallEndAt(0.0F, 0.0F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      float float3 = wall0.getThickness();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float3, float2, 0.01F);
      assertEquals((-625.596F), float3, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-869.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2851.1F), wall0.getHeight(), 0.01F);
      assertEquals(2459.883F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-625.596F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2459.883F, wall0.getLength(), 0.01F);
      assertEquals((-869.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      float float0 = 0.0F;
      Wall wall0 = new Wall((-26.0F), 0.0F, 0.0F, (-26.0F), (-7.45F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-26.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-13.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-26.0F), wall0.getYEnd(), 0.01F);
      assertEquals(36.769554F, wall0.getLength(), 0.01F);
      assertEquals((-7.45F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(36.769554F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-13.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      wall0.setXEnd(0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-26.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-13.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-26.0F), wall0.getYEnd(), 0.01F);
      assertEquals(36.769554F, wall0.getLength(), 0.01F);
      assertEquals((-7.45F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(36.769554F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-13.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      
      wall0.setXStart(0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(26.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(26.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-13.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-26.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-7.45F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      
      boolean boolean0 = wall0.containsWallEndAt((-7.45F), (-26.0F), (-2371.0F));
      assertFalse(boolean0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(26.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(26.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-13.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-26.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-7.45F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 0.01F, 0.01F, 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      
      Float float0 = new Float(1757.7546F);
      assertEquals(1757.7546F, (float)float0, 0.01F);
      assertNotNull(float0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Float float0 = new Float((-3.003345F));
      assertEquals((-3.003345F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setWallAtEnd(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      wall0.setYStart(0.1F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, (-2851.1F), 0.1F, (-3.003345F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNotNull(wall1);
      
      Float float1 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(float1);
      
      Float float2 = new Float(0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.01F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      
      wall1.setYStart(0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3.0050094F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3.0050094F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle((-1393.8479F), (-2851.1F), 0.0F, (-2247.7522F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3.0050094F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3.0050094F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      
      Float float3 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(float3);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3.0050094F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3.0050094F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      
      boolean boolean1 = wall1.intersectsRectangle(1.15652966E9F, 512.7397F, 0.13753456F, 2.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3.0050094F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3.0050094F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      
      Float float4 = wall1.getArcExtent();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3.0050094F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3.0050094F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(float4);
      
      wall1.setRightSideColor((Integer) null);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3.0050094F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3.0050094F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(homeTexture0);
      
      Wall wall2 = wall1.getWallAtStart();
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.1F, wall2.getLength(), 0.01F);
      assertEquals(0.05F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3.0050094F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3.0050094F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.5016725F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNotNull(wall2);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-1.0791351F), 0.0F, (-1.0791351F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      Float float0 = new Float((-3.003345F));
      assertEquals((-3.003345F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, (-2851.1F), 0.0F, (-3.003345F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall1);
      
      Float float1 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-3.003345F), (float)float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.01F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle((-1393.8479F), (-2851.1F), (-1.0791351F), (-2247.7522F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy(":DlBwochr>-Lsco", propertyChangeListener0);
      assertEquals(":DlBwochr>-Lsco", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall1.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(":DlBwochr>-Lsco", propertyChangeListenerProxy0.getPropertyName());
      
      float float3 = Float.max((-1.0791351F), (-1.0791351F));
      assertEquals((-1.0791351F), float3, 0.01F);
      
      boolean boolean1 = wall0.intersectsRectangle(512.7397F, 0.01F, 0.0F, 512.7397F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      float float4 = wall0.getXEnd();
      assertEquals(float4, float3, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-1.0791351F), float4, 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      Wall wall2 = wall0.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.0791351F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-3.003345F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(1.0791351F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.53956753F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertNotNull(wall2);
      
      wall0.setArcExtent(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float0, (float)float4, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(1.6243867F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.037356485F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      float[][] floatArray0 = wall2.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(1.6243867F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.037356485F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.0791351F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-3.003345F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall2.getArcExtent(), 0.01F);
      assertEquals(1.0791351F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.53956753F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1.6243867F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.037356485F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      assertNotNull(floatArray0);
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(homeTexture0);
      
      Integer integer0 = wall1.getRightSideColor();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals((-1427.0518F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2851.1F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2848.0967F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-3.003345F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2848.0967F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(integer0);
      
      Integer integer1 = Integer.valueOf(33);
      assertEquals(33, (int)integer1);
      assertNotNull(integer1);
      
      wall2.setLeftSideColor(integer1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(1.6243867F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(33, (int)wall0.getLeftSideColor());
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.037356485F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.0791351F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(33, (int)wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-3.003345F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall2.getArcExtent(), 0.01F);
      assertEquals(1.0791351F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.53956753F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1.6243867F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.037356485F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0791351F), wall2.getThickness(), 0.01F);
      
      wall0.setXEnd((-1853.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(33, (int)wall0.getLeftSideColor());
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall0.getArcExtent(), 0.01F);
      assertEquals(1853.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-926.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(64.14542F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2789.2603F, wall0.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1853.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      Float float5 = wall0.getArcExtent();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertEquals((-3.003345F), (float)float5, 0.01F);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(33, (int)wall0.getLeftSideColor());
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall0.getArcExtent(), 0.01F);
      assertEquals(1853.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-926.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(64.14542F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2789.2603F, wall0.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1853.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotNull(float5);
      
      wall0.setRightSideColor((Integer) null);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(33, (int)wall0.getLeftSideColor());
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-3.003345F), wall0.getArcExtent(), 0.01F);
      assertEquals(1853.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-926.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(64.14542F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2789.2603F, wall0.getLength(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1853.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Wall wall0 = new Wall((-0.16079742F), (-0.16079742F), (-0.16079742F), (-0.16079742F), (-0.16079742F), (-0.16079742F));
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.16079742F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.16079742F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getThickness(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXStart(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.16079742F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.16079742F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.16079742F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.16079742F), wall0.getThickness(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXStart(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.16079742F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYEnd(), 0.01F);
      assertNull(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Wall wall0 = new Wall(3904.6F, (-1023.02F), (-830.6896F), (-830.6896F), (-1023.02F), (-2170.124F));
      assertEquals((-926.8548F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4739.194F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals((-830.6896F), wall0.getYEnd(), 0.01F);
      assertEquals(4739.194F, wall0.getLength(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1023.02F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      wall0.setYEnd(2110.9646F);
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(5678.453F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertEquals(543.9723F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1023.02F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setThickness(0.0F);
      assertEquals(1536.9553F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(5678.453F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertEquals(543.9723F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone(list0);
      assertTrue(list1.equals((Object)list0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      Float float0 = new Float(1.0E-10);
      assertEquals(1.0E-10F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4.7352832E13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals((-3.13398059E13F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0E-10F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5678.4453F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float float1 = wall0.getLength();
      assertEquals(5678.4453F, float1, 0.01F);
      assertEquals(5678.453F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2110.9646F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4.7352832E13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1023.02F), wall0.getYStart(), 0.01F);
      assertEquals(3904.6F, wall0.getXStart(), 0.01F);
      assertEquals((-3.13398059E13F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0E-10F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-830.6896F), wall0.getXEnd(), 0.01F);
      assertEquals((-2170.124F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5678.4453F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-1.0791351F), 0.0F, (-1.0791351F));
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float0 = new Float((-3.003345F));
      assertEquals((-3.003345F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = wall0.getWallAtEnd();
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0791351F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-0.53956753F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0791351F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-3.003345F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0791351F, wall1.getLength(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setArcExtent(float0);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.6243867F, wall0.getLength(), 0.01F);
      assertEquals(0.037356485F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-3.003345F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0791351F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-0.53956753F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0791351F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-3.003345F), wall1.getHeight(), 0.01F);
      assertEquals((-3.003345F), wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.037356485F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.6243867F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall1.getXEnd(), 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.003345F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.6243867F, wall0.getLength(), 0.01F);
      assertEquals(0.037356485F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-3.003345F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0791351F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-0.53956753F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0791351F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-3.003345F), wall1.getHeight(), 0.01F);
      assertEquals((-3.003345F), wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.037356485F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.6243867F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall1.getXEnd(), 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-609.24927F), (-4470.84F), (-735.664F), 0.0F);
      assertEquals((-4470.84F), wall0.getXEnd(), 0.01F);
      assertEquals(4472.6265F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-735.664F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2235.42F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-672.45667F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-609.24927F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4472.6265F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Integer integer0 = Integer.valueOf((-355));
      assertEquals((-355), (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertEquals((-4470.84F), wall0.getXEnd(), 0.01F);
      assertEquals(4472.6265F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-735.664F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2235.42F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-672.45667F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-355), (int)wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-609.24927F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(4472.6265F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Float float0 = wall0.getHeight();
      assertEquals((-4470.84F), wall0.getXEnd(), 0.01F);
      assertEquals(4472.6265F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-735.664F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2235.42F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-672.45667F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-355), (int)wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-609.24927F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(4472.6265F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(float0);
      
      Float float1 = new Float((-735.664F));
      assertEquals((-735.664F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-4470.84F), wall0.getXEnd(), 0.01F);
      assertEquals(4472.6265F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-735.664F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2235.42F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-672.45667F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-355), (int)wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-609.24927F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(4472.6265F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-672.45667F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2235.42F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(4472.6265F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-4470.84F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-609.24927F), wall1.getYStart(), 0.01F);
      assertEquals(4472.6265F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-735.664F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-355), (int)wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setYEnd((-7.45F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-4470.84F), wall0.getXEnd(), 0.01F);
      assertEquals(4472.6265F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-735.664F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2235.42F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-672.45667F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-355), (int)wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-609.24927F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(4472.6265F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2235.42F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-4470.84F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-7.45F), wall1.getYEnd(), 0.01F);
      assertEquals((-609.24927F), wall1.getYStart(), 0.01F);
      assertEquals(4511.1606F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-308.34964F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(4511.1606F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-355), (int)wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      float float2 = wall0.getLength();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(4472.6265F, float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-4470.84F), wall0.getXEnd(), 0.01F);
      assertEquals(4472.6265F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-735.664F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2235.42F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-672.45667F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-355), (int)wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-609.24927F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(4472.6265F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float float3 = wall0.getLeftSideShininess();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(0.0F, float3, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-4470.84F), wall0.getXEnd(), 0.01F);
      assertEquals(4472.6265F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-735.664F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2235.42F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-672.45667F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-355), (int)wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-609.24927F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(4472.6265F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Integer integer1 = wall0.getRightSideColor();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-355), (int)integer1);
      assertNotSame(wall0, wall1);
      assertEquals((-4470.84F), wall0.getXEnd(), 0.01F);
      assertEquals(4472.6265F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-735.664F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2235.42F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-672.45667F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-355), (int)wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-609.24927F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(4472.6265F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(float0);
      
      Float float1 = new Float(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight(float1);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float float2 = wall0.getXEnd();
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setXStart((-1413.0F));
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1413.0F), wall0.getXStart(), 0.01F);
      assertEquals((-706.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1413.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1413.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 2765.5F, 758.1893F, (-1.0F));
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1413.0F), wall0.getXStart(), 0.01F);
      assertEquals((-706.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1413.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1413.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setXStart(3732.0F);
      assertEquals(3732.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1866.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3732.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3732.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setThickness(3088.55F);
      assertEquals(3732.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3088.55F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1866.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3732.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3732.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Integer integer0 = wall0.getRightSideColor();
      assertEquals(3732.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3088.55F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1866.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3732.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3732.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(integer0);
      
      Integer integer1 = new Integer(3075);
      assertEquals(3075, (int)integer1);
      assertNotNull(integer1);
      
      wall0.setLeftSideColor(integer1);
      assertEquals(3732.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3088.55F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1866.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3732.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3075, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3732.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setXEnd(0.1F);
      assertEquals(1866.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3088.55F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3732.0F, wall0.getXStart(), 0.01F);
      assertEquals(3731.9F, wall0.getLength(), 0.01F);
      assertEquals(3075, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(3731.9F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      boolean boolean1 = wall0.containsWallStartAt(816.0F, 1017.3F, 18.022617F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1866.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3088.55F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3732.0F, wall0.getXStart(), 0.01F);
      assertEquals(3731.9F, wall0.getLength(), 0.01F);
      assertEquals(3075, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(3731.9F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(1866.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3088.55F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3732.0F, wall0.getXStart(), 0.01F);
      assertEquals(3731.9F, wall0.getLength(), 0.01F);
      assertEquals(3075, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(3731.9F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(homeTexture0);
      
      Integer integer2 = wall0.getLeftSideColor();
      assertEquals(3075, (int)integer2);
      assertEquals(1866.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3088.55F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3732.0F, wall0.getXStart(), 0.01F);
      assertEquals(3731.9F, wall0.getLength(), 0.01F);
      assertEquals(3075, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(3731.9F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(integer2);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-1.0791351F), 0.0F, (-1.0791351F));
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Wall wall0 = new Wall((-0.16079742F), (-0.16079742F), (-0.16079742F), (-0.16079742F), (-0.16079742F), (-0.16079742F));
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.16079742F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.16079742F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.16079742F), wall0.getThickness(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYStart(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.16079742F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.16079742F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.16079742F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.16079742F), wall0.getThickness(), 0.01F);
      assertEquals((-0.16079742F), wall0.getYStart(), 0.01F);
      assertEquals((-0.16079742F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.16079742F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      wall0.setYEnd((-819.6F));
      assertEquals((-409.8F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(819.6F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-819.6F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(819.6F, wall0.getLength(), 0.01F);
      
      Float float0 = new Float(5.011963066792191E-13);
      assertEquals(5.011963E-13F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(819.105F, wall0.getLength(), 0.01F);
      assertEquals((-410.00012F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(819.6F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(5.011963E-13F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-819.6F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.63429975E15F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(58, floatArray0.length);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(819.105F, wall0.getLength(), 0.01F);
      assertEquals((-410.00012F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(819.6F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(5.011963E-13F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-819.6F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.63429975E15F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, (-1739.4F), (-1.0F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotNull(wall1);
      
      Float float0 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.0F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      Float float2 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(float2);
      
      wall0.setHeight(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float0, (float)float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      wall1.setWallAtStart(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      Float float3 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(float3);
      
      Float float4 = new Float(0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertEquals(0.01F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      wall1.setHeight(float4);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      Float float5 = new Float((-1.0));
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertEquals((-1.0F), (float)float5, 0.01F);
      assertNotNull(float5);
      
      float float6 = float5.floatValue();
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertEquals((-1.0F), float6, 0.01F);
      
      wall0.setArcExtent((Float) (-1.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      float float7 = wall0.getStartPointToEndPointDistance();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float7, float6, 0.01F);
      assertEquals(0.0F, float7, 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      wall1.setLeftSideTexture((HomeTexture) null);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall1.getYEnd(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1739.4F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1739.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Wall wall0 = new Wall((-4.7919436F), 780.7F, 780.7F, (-4.7919436F), (-4.7919436F));
      assertEquals(387.95404F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1110.8534F, wall0.getLength(), 0.01F);
      assertEquals(780.7F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1110.8534F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(387.95404F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4.7919436F), wall0.getThickness(), 0.01F);
      assertEquals((-4.7919436F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4.7919436F), wall0.getYEnd(), 0.01F);
      assertEquals(780.7F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = new Integer(11);
      assertEquals(11, (int)integer0);
      assertNotNull(integer0);
      
      Wall wall1 = new Wall((-4.7919436F), 2.0F, 202.236F, (-4.7919436F), 2.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4.7919436F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(207.13931F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(98.72202F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.3959718F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertEquals(207.13931F, wall1.getLength(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals((-4.7919436F), wall1.getYEnd(), 0.01F);
      assertEquals(202.236F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(wall1);
      
      Float float0 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(387.95404F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1110.8534F, wall0.getLength(), 0.01F);
      assertEquals(780.7F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1110.8534F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(387.95404F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4.7919436F), wall0.getThickness(), 0.01F);
      assertEquals((-4.7919436F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4.7919436F), wall0.getYEnd(), 0.01F);
      assertEquals(780.7F, wall0.getXEnd(), 0.01F);
      assertNull(float0);
      
      Float float1 = new Float(33.111076F);
      assertEquals(33.111076F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(387.95404F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1110.8534F, wall0.getLength(), 0.01F);
      assertEquals(780.7F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1110.8534F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(387.95404F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4.7919436F), wall0.getThickness(), 0.01F);
      assertEquals((-4.7919436F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4.7919436F), wall0.getYEnd(), 0.01F);
      assertEquals(780.7F, wall0.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4.7919436F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(207.13931F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(98.72202F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.3959718F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertEquals(207.13931F, wall1.getLength(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals((-4.7919436F), wall1.getYEnd(), 0.01F);
      assertEquals(202.236F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      wall0.setYStart(Float.POSITIVE_INFINITY);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(Float.POSITIVE_INFINITY, wall0.getLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(387.95404F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4.7919436F), wall0.getThickness(), 0.01F);
      assertEquals((-4.7919436F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4.7919436F), wall0.getYEnd(), 0.01F);
      assertEquals(780.7F, wall0.getXEnd(), 0.01F);
      
      boolean boolean0 = wall1.intersectsRectangle((-1.0F), 1.890526E-12F, (-1.0F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4.7919436F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(207.13931F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(98.72202F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.3959718F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertEquals(207.13931F, wall1.getLength(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals((-4.7919436F), wall1.getYEnd(), 0.01F);
      assertEquals(202.236F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(Float.POSITIVE_INFINITY, wall0.getLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(387.95404F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4.7919436F), wall0.getThickness(), 0.01F);
      assertEquals((-4.7919436F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4.7919436F), wall0.getYEnd(), 0.01F);
      assertEquals(780.7F, wall0.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4.7919436F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(207.13931F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(98.72202F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.3959718F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertEquals(207.13931F, wall1.getLength(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals((-4.7919436F), wall1.getYEnd(), 0.01F);
      assertEquals(202.236F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      Float float2 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4.7919436F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(207.13931F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(98.72202F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.3959718F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertEquals(207.13931F, wall1.getLength(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals((-4.7919436F), wall1.getYEnd(), 0.01F);
      assertEquals(202.236F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(float2);
      
      Float float3 = wall0.getHeightAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(Float.POSITIVE_INFINITY, wall0.getLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(387.95404F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4.7919436F), wall0.getThickness(), 0.01F);
      assertEquals((-4.7919436F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4.7919436F), wall0.getYEnd(), 0.01F);
      assertEquals(780.7F, wall0.getXEnd(), 0.01F);
      assertNull(float3);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(Float.POSITIVE_INFINITY, wall0.getLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(387.95404F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4.7919436F), wall0.getThickness(), 0.01F);
      assertEquals((-4.7919436F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4.7919436F), wall0.getYEnd(), 0.01F);
      assertEquals(780.7F, wall0.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4.7919436F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(207.13931F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(98.72202F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.3959718F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertEquals(207.13931F, wall1.getLength(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals((-4.7919436F), wall1.getYEnd(), 0.01F);
      assertEquals(202.236F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      boolean boolean1 = wall0.intersectsRectangle(512.7397F, Float.POSITIVE_INFINITY, 2.0F, 1.15652966E9F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(wall0, wall1);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(Float.POSITIVE_INFINITY, wall0.getLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(387.95404F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4.7919436F), wall0.getThickness(), 0.01F);
      assertEquals((-4.7919436F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4.7919436F), wall0.getYEnd(), 0.01F);
      assertEquals(780.7F, wall0.getXEnd(), 0.01F);
      
      wall0.move(33.111076F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(Float.POSITIVE_INFINITY, wall0.getLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(28.319134F, wall0.getXStart(), 0.01F);
      assertEquals((-4.7919436F), wall0.getThickness(), 0.01F);
      assertEquals(813.8111F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(421.06512F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4.7919436F), wall0.getYEnd(), 0.01F);
      
      Float float4 = wall0.getArcExtent();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(Float.POSITIVE_INFINITY, wall0.getLength(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(28.319134F, wall0.getXStart(), 0.01F);
      assertEquals((-4.7919436F), wall0.getThickness(), 0.01F);
      assertEquals(813.8111F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(421.06512F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4.7919436F), wall0.getYEnd(), 0.01F);
      assertNull(float4);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-1.0791351F), 0.0F, (-1.0791351F));
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float1 = wall0.getHeight();
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.01F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      boolean boolean0 = Float.isFinite((-4092.3694F));
      assertTrue(boolean0);
      
      wall0.setHeightAtEnd(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      
      wall0.setWallAtStart(wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      
      boolean boolean1 = wall0.intersectsRectangle(512.7397F, 0.01F, 0.0F, 2.0F);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0791351F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0791351F, wall0.getLength(), 0.01F);
      assertEquals(1.0791351F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.53956753F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      
      wall0.move((-2851.1F), (-25.673447F));
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-25.673447F), wall0.getYEnd(), 0.01F);
      assertEquals((-25.673447F), wall0.getYStart(), 0.01F);
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertEquals((-25.673447F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2851.6396F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0791016F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0791016F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals((-2852.1792F), wall0.getXEnd(), 0.01F);
      
      float float3 = wall0.getXEnd();
      assertEquals((-2852.1792F), float3, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-25.673447F), wall0.getYEnd(), 0.01F);
      assertEquals((-25.673447F), wall0.getYStart(), 0.01F);
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertEquals((-25.673447F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2851.6396F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0791016F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0791016F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals((-2852.1792F), wall0.getXEnd(), 0.01F);
      
      Wall wall1 = wall0.getWallAtEnd();
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-25.673447F), wall0.getYEnd(), 0.01F);
      assertEquals((-25.673447F), wall0.getYStart(), 0.01F);
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertEquals((-25.673447F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2851.6396F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0791016F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0791016F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals((-2852.1792F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0791016F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(1.0791016F, wall1.getLength(), 0.01F);
      assertEquals((-2852.1792F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0791351F), wall1.getThickness(), 0.01F);
      assertEquals((-25.673447F), wall1.getYEnd(), 0.01F);
      assertEquals((-25.673447F), wall1.getYStart(), 0.01F);
      assertEquals((-2851.1F), wall1.getXStart(), 0.01F);
      assertEquals((-25.673447F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2851.6396F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      
      float float4 = wall0.getYArcCircleCenter();
      assertNotEquals(float4, float3, 0.01F);
      assertEquals((-25.673447F), float4, 0.01F);
      assertSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-25.673447F), wall0.getYEnd(), 0.01F);
      assertEquals((-25.673447F), wall0.getYStart(), 0.01F);
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertEquals((-25.673447F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2851.6396F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0791016F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0791016F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals((-2852.1792F), wall0.getXEnd(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0791351F), wall0.getThickness(), 0.01F);
      assertEquals((-25.673447F), wall0.getYEnd(), 0.01F);
      assertEquals((-25.673447F), wall0.getYStart(), 0.01F);
      assertEquals((-2851.1F), wall0.getXStart(), 0.01F);
      assertEquals((-25.673447F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2851.6396F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0791016F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0791016F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals((-2852.1792F), wall0.getXEnd(), 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      Wall wall1 = new Wall((-1739.4F), (-1739.4F), 0.0F, 0.0F, (-625.596F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotNull(wall1);
      
      Float float0 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(float0);
      
      Float float1 = new Float((-2851.1F));
      assertEquals((-2851.1F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall1.setHeight(float1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-869.7F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2459.883F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(2459.883F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-625.596F), wall1.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1739.4F), wall1.getXStart(), 0.01F);
      assertEquals((-869.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2851.1F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      Wall wall2 = new Wall((-1739.4F), (-1739.4F), 0.0F, 0.0F, (-625.596F));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-869.7F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2459.883F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-1739.4F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2459.883F, wall2.getLength(), 0.01F);
      assertEquals((-1739.4F), wall2.getYStart(), 0.01F);
      assertEquals((-869.7F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall2.getThickness(), 0.01F);
      assertNotNull(wall2);
      
      Float float2 = wall2.getHeight();
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-869.7F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2459.883F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-1739.4F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2459.883F, wall2.getLength(), 0.01F);
      assertEquals((-1739.4F), wall2.getYStart(), 0.01F);
      assertEquals((-869.7F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall2.getThickness(), 0.01F);
      assertNull(float2);
      
      Float float3 = new Float((-2851.1F));
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((-2851.1F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall2.setHeight(float3);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-2851.1F), wall2.getHeight(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-869.7F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2459.883F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2459.883F, wall2.getLength(), 0.01F);
      assertEquals((-1739.4F), wall2.getYStart(), 0.01F);
      assertEquals((-869.7F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall2.getThickness(), 0.01F);
      
      wall0.setWallAtStart(wall2);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-2851.1F), wall2.getHeight(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-869.7F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2459.883F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2459.883F, wall2.getLength(), 0.01F);
      assertEquals((-1739.4F), wall2.getYStart(), 0.01F);
      assertEquals((-869.7F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-625.596F), wall2.getThickness(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 0.0F, 0.01F, 0.0F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      wall0.move(0.0F, 0.0F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      float float4 = wall0.getXEnd();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, float4, 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      float float5 = wall0.getXStart();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float5, float4, 0.01F);
      assertEquals(0.0F, float5, 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      Wall wall3 = wall0.getWallAtEnd();
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      assertSame(wall3, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-869.7F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(2459.883F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-2851.1F), wall3.getHeight(), 0.01F);
      assertEquals((-1739.4F), wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals((-625.596F), wall3.getThickness(), 0.01F);
      assertEquals((-1739.4F), wall3.getXStart(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(2459.883F, wall3.getLength(), 0.01F);
      assertEquals((-869.7F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotNull(wall3);
      
      float float6 = wall0.getYArcCircleCenter();
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float6, float4, 0.01F);
      assertEquals(float6, float5, 0.01F);
      assertEquals(0.0F, float6, 0.01F);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Wall wall0 = new Wall((-1739.4F), (-1739.4F), 3481.1F, 2015.25F, (-1739.4F));
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(6430.4756F, wall0.getLength(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-1739.4F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(6430.4756F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(137.92499F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      wall0.setThickness((-1739.4F));
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(6430.4756F, wall0.getLength(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-1739.4F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(6430.4756F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(137.92499F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall0));
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(6430.4756F, wall0.getLength(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-1739.4F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(6430.4756F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(137.92499F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertEquals(870.85004F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1, linkedList0.size());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Float float0 = new Float((double) (-2311.0F));
      assertEquals((-2311.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-1837.6465F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2311.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(3903.8438F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(6430.4756F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.3043513E7F, wall0.getLength(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(6646, floatArray0.length);
      assertEquals(2015.25F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1739.4F), wall0.getYStart(), 0.01F);
      assertEquals((-1837.6465F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1739.4F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2311.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(3481.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(3903.8438F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(6430.4756F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1739.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.3043513E7F, wall0.getLength(), 0.01F);
      assertNotNull(floatArray0);
      
      // Undeclared exception!
      wall0.containsWallStartAt((-1739.4F), (-2311.0F), (-1739.4F));
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Wall wall0 = new Wall(8.007533F, 8.007533F, 8.007533F, 8.007533F, 8.007533F, 8.007533F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(8.007533F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(8.007533F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(8.007533F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(8.007533F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(8.007533F, wall0.getXStart(), 0.01F);
      assertEquals(8.007533F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(8.007533F, wall0.getXEnd(), 0.01F);
      assertEquals(8.007533F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(8.007533F);
      assertEquals(8.007533F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeightAtEnd(float0);
      assertEquals(8.007533F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(8.007533F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(8.007533F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(8.007533F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(8.007533F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(8.007533F, wall0.getXStart(), 0.01F);
      assertEquals(8.007533F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(8.007533F, wall0.getXEnd(), 0.01F);
      assertEquals(8.007533F, wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setRightSideShininess(0.0F);
      Wall wall1 = new Wall((-1739.4F), (-1739.4F), 0.0F, 0.0F, (-625.596F));
      wall1.getHeight();
      Float float0 = new Float((-2851.1F));
      Float.isFinite((-1.0F));
      wall1.setHeight(float0);
      wall0.setWallAtEnd(wall1);
      Wall wall2 = new Wall((-1739.4F), (-1739.4F), 0.0F, 0.0F, (-625.596F));
      wall2.getHeight();
      assertEquals((-625.596F), wall2.getThickness(), 0.01F);
      assertEquals(2459.883F, wall2.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.containsWallEndAt((-1244.6F), (-625.596F), (-1739.4F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.model.Level", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      float float1 = wall0.getLeftSideShininess();
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Wall wall0 = new Wall(48.27619F, 48.27619F, 48.27619F, 48.27619F, 48.27619F);
      Float float0 = new Float(48.27619F);
      wall0.setArcExtent(float0);
      assertEquals(48.27619F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Wall wall0 = new Wall(48.392612F, 48.392612F, 48.392612F, 48.392612F, 48.392612F, 48.392612F);
      wall0.getRightSideTexture();
      wall0.setPattern((TextureImage) null);
      wall0.getRightSideColor();
      Float float0 = new Float(48.392612F);
      assertEquals(48.392612F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Wall wall0 = new Wall((-1121.2971F), (-1121.2971F), 0.0F, (-1121.2971F), 0.0F);
      wall0.setRightSideTexture((HomeTexture) null);
      Wall wall1 = wall0.clone();
      Integer integer0 = new Integer(2268);
      Integer.min(2268, 15);
      wall1.setLeftSideColor(integer0);
      wall0.setRightSideShininess((-1121.2971F));
      wall0.getXEnd();
      wall1.setXStart((-1121.2971F));
      wall0.intersectsRectangle(0.0F, 0.0F, (-1121.2971F), 3088.55F);
      wall0.setXStart(0.0F);
      wall1.setThickness((-4470.84F));
      wall0.getYStart();
      wall1.getRightSideColor();
      Integer.valueOf((-715));
      Integer integer1 = Integer.valueOf(117);
      wall1.setLeftSideColor(integer1);
      wall0.setXEnd(3088.55F);
      wall1.containsWallStartAt((-1341.63F), (-4470.84F), (-2231.45F));
      wall1.getRightSideTexture();
      wall1.getLeftSideColor();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Wall wall0 = new Wall(8.007533F, 8.007533F, 8.007533F, 8.007533F, 8.007533F);
      wall0.getHeight();
      wall0.setHeightAtEnd((Float) null);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(8.007533F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Wall wall0 = new Wall(3611.029F, 3611.029F, 3611.029F, 3611.029F, 3611.029F);
      Integer integer0 = new Integer(1908);
      wall0.setRightSideColor(integer0);
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, float0, 0.01F);
      
      wall0.setRightSideColor(integer0);
      wall0.getPoints();
      assertEquals(3611.029F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Wall wall0 = new Wall((-1447.0F), 1.0F, (-1200.5F), (-1447.0F), (-1200.5F));
      assertEquals((-1447.0F), wall0.getYEnd(), 0.01F);
      
      wall0.setYEnd((-1200.5F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      Float float0 = new Float(0.0F);
      float0.floatValue();
      float0.floatValue();
      Float float1 = new Float((double) 0.0F);
      float1.floatValue();
      wall0.setHeight((Float) 0.0F);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.getLeftSideTexture();
      wall0.getRightSideColor();
      assertEquals(1226.5254F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Wall wall0 = new Wall(8.007533F, 8.007533F, 8.007533F, 8.007533F, 8.007533F);
      wall0.setRightSideShininess(8.007533F);
      wall0.getHeight();
      wall0.setHeightAtEnd((Float) null);
      boolean boolean0 = wall0.isTrapezoidal();
      assertEquals(8.007533F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Wall wall0 = new Wall(8.511597F, 8.511597F, 8.511597F, 8.511597F, 8.511597F);
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall1.setWallAtEnd(wall0);
      wall1.getPoints();
      float float0 = wall0.getLeftSideShininess();
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setRightSideShininess(0.0F);
      Float float0 = new Float(0.0F);
      Wall wall1 = new Wall(5.6169157F, 5.6169157F, 0.0F, 0.0F, 0.0F);
      wall1.getHeight();
      Float.sum(0.0F, 944.7096F);
      wall1.setHeight(float0);
      wall1.setWallAtEnd(wall0);
      Float float1 = new Float(5.6169157F);
      wall0.setWallAtStart(wall1);
      boolean boolean0 = wall1.intersectsRectangle(0.0F, (-2851.1F), 3238.7983F, 390.2F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(7.943518F, wall1.getLength(), 0.01F);
      
      boolean boolean1 = wall0.containsPoint(0.0F, 110.02F, 944.7096F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Wall wall0 = new Wall((-1698.0676F), 3481.1F, (-1698.0676F), 3481.1F, (-1698.0676F), 3481.1F);
      wall0.intersectsRectangle(-0.0F, 652.6F, (-1.0F), 652.6F);
      Level level0 = new Level((String) null, 3481.1F, (-1.0F), (-1.0F));
      Level level1 = new Level((String) null, (-1413.0F), (-1601.39F), 0.0F);
      Level level2 = level1.clone();
      wall0.setLevel(level2);
      level0.clone();
      boolean boolean0 = wall0.isAtLevel((Level) null);
      assertFalse(boolean0);
      
      wall0.getPoints();
      assertEquals(3481.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1698.0676F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Wall wall0 = new Wall((-1739.4F), (-1739.4F), 0.0F, 0.0F, (-625.596F));
      wall0.getHeight();
      Float float0 = new Float((-2851.1F));
      wall0.setHeight(float0);
      Wall wall1 = wall0.clone();
      Float.compare(504.0F, (-1.0F));
      wall1.setHeightAtEnd((Float) (-1.0F));
      float float1 = wall1.getLength();
      assertTrue(wall1.isTrapezoidal());
      assertEquals(2459.883F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Wall wall0 = new Wall(587.69995F, 587.69995F, 1.0F, 1.890526E-12F, 1.890526E-12F, 582.6444F);
      wall0.containsWallStartAt(1.890526E-12F, 1.0F, 1.0F);
      assertEquals(1.890526E-12F, wall0.getThickness(), 0.01F);
      assertEquals(582.6444F, wall0.getHeight(), 0.01F);
      assertEquals(587.69995F, wall0.getYStart(), 0.01F);
      assertEquals(1.890526E-12F, wall0.getYEnd(), 0.01F);
      assertEquals(830.42645F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-0.7400787F), 0.0F, (-0.7400787F));
      wall0.setRightSideShininess(0.0F);
      wall0.getArcExtent();
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.7400787F), wall0.getThickness(), 0.01F);
      assertEquals(0.7400787F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.37003934F), wall0.getXArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setWallAtEnd(wall0);
      Float float0 = new Float(0.0F);
      wall0.getPoints();
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Wall wall0 = new Wall((-1739.4F), (-1.0F), 3481.1F, 2015.25F, (-1.0F));
      wall0.containsPoint(3481.1F, (-2311.0F), (-1.0F));
      wall0.setYStart(0.0F);
      Level level0 = new Level((String) null, (-1413.0F), (-1601.39F), 0.0F);
      Level level1 = level0.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      level0.addPropertyChangeListener(propertyChangeListenerProxy0);
      level0.setHeight((-2419.0046F));
      level1.setFloorThickness((-1601.39F));
      boolean boolean0 = wall0.isAtLevel(level1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-2691.0F), 1639.907F, 1639.907F, 1.0195056F);
      wall0.setRightSideShininess((-1452.0F));
      wall0.setThickness(0.0F);
      wall0.intersectsRectangle(0.0F, 372.69058F, 1.0195056F, 1469.036F);
      wall0.setThickness(1639.907F);
      wall0.getStartPointToEndPointDistance();
      wall0.isTrapezoidal();
      wall0.getRightSideTexture();
      wall0.containsPoint((-2691.0F), 1816.0F, 1.0F);
      wall0.setLeftSideTexture((HomeTexture) null);
      Float.floatToIntBits(2.0F);
      wall0.setHeightAtEnd((Float) 2.0F);
      wall0.getRightSideTexture();
      Wall wall1 = wall0.clone();
      wall0.setRightSideTexture((HomeTexture) null);
      Float float0 = new Float(0.0F);
      float0.equals((Object) null);
      wall1.setHeight(float0);
      wall0.getHeightAtEnd();
      wall1.setLeftSideTexture((HomeTexture) null);
      wall0.getLeftSideShininess();
      wall1.isTrapezoidal();
      wall1.getPoints();
      wall0.getHeightAtEnd();
      assertEquals((-1452.0F), wall0.getRightSideShininess(), 0.01F);
  }
}

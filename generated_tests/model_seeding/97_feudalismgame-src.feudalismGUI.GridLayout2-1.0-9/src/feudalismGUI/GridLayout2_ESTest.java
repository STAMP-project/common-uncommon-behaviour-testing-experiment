/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 01:00:07 GMT 2019
 */

package src.feudalismGUI;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Insets;
import java.awt.LayoutManager;
import java.awt.event.ActionListener;
import java.text.Format;
import java.util.Hashtable;
import java.util.Locale;
import javax.swing.DebugGraphics;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JEditorPane;
import javax.swing.JInternalFrame;
import javax.swing.JLayeredPane;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPasswordField;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JSeparator;
import javax.swing.JTabbedPane;
import javax.swing.JTextPane;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.JTree;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.colorchooser.DefaultColorSelectionModel;
import javax.swing.plaf.multi.MultiColorChooserUI;
import javax.swing.plaf.synth.SynthRadioButtonUI;
import javax.swing.plaf.synth.SynthScrollBarUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StringContent;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import src.feudalismGUI.GridLayout2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GridLayout2_ESTest extends GridLayout2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      assertEquals(0, gridLayout2_0.getVgap());
      
      JColorChooser jColorChooser0 = new JColorChooser();
      GridLayout2 gridLayout2_1 = new GridLayout2((-1752), (-1752), (-1752), (-1752));
      // Undeclared exception!
      try { 
        gridLayout2_1.minimumLayoutSize(jColorChooser0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      JTextPane jTextPane0 = new JTextPane();
      jTextPane0.setLayout((LayoutManager) null);
      JColorChooser jColorChooser0 = new JColorChooser();
      gridLayout2_0.layoutContainer(jColorChooser0);
      Color color0 = Color.GRAY;
      DefaultColorSelectionModel defaultColorSelectionModel0 = new DefaultColorSelectionModel(color0);
      defaultColorSelectionModel0.getChangeListeners();
      DefaultTableCellRenderer.UIResource defaultTableCellRenderer_UIResource0 = new DefaultTableCellRenderer.UIResource();
      defaultTableCellRenderer_UIResource0.getVerticalTextPosition();
      defaultColorSelectionModel0.getSelectedColor();
      GridLayout2 gridLayout2_1 = new GridLayout2();
      GridLayout2 gridLayout2_2 = new GridLayout2((-1558), 0);
      // Undeclared exception!
      try { 
        gridLayout2_2.layoutContainer(jColorChooser0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      JEditorPane jEditorPane0 = new JEditorPane();
      JComboBox<SynthRadioButtonUI> jComboBox0 = new JComboBox<SynthRadioButtonUI>();
      jEditorPane0.registerKeyboardAction((ActionListener) jComboBox0, (KeyStroke) null, 0);
      Color color0 = Color.PINK;
      jEditorPane0.setForeground(color0);
      jEditorPane0.setLayout(gridLayout2_0);
      jEditorPane0.getBackground();
      JColorChooser jColorChooser0 = new JColorChooser();
      ComponentOrientation componentOrientation0 = ComponentOrientation.LEFT_TO_RIGHT;
      jComboBox0.setComponentOrientation(componentOrientation0);
      JColorChooser jColorChooser1 = (JColorChooser)jEditorPane0.add((Component) jColorChooser0);
      gridLayout2_0.layoutContainer(jColorChooser0);
      jColorChooser0.getAlignmentY();
      gridLayout2_0.layoutContainer(jColorChooser0);
      gridLayout2_0.minimumLayoutSize(jColorChooser0);
      gridLayout2_0.minimumLayoutSize(jComboBox0);
      DefaultColorSelectionModel defaultColorSelectionModel0 = new DefaultColorSelectionModel();
      JColorChooser jColorChooser2 = new JColorChooser(defaultColorSelectionModel0);
      jComboBox0.add((Component) jColorChooser0);
      gridLayout2_0.preferredLayoutSize(jColorChooser1);
      gridLayout2_0.preferredLayoutSize(jColorChooser1);
      GridLayout2 gridLayout2_1 = new GridLayout2(12, 1);
      gridLayout2_1.preferredLayoutSize(jComboBox0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      JColorChooser jColorChooser0 = new JColorChooser();
      GridLayout2 gridLayout2_1 = new GridLayout2(436, 436);
      gridLayout2_1.layoutContainer(jColorChooser0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField();
      JColorChooser jColorChooser0 = new JColorChooser();
      GridLayout2 gridLayout2_0 = new GridLayout2(1201, 1201, 1201, 1201);
      gridLayout2_0.minimumLayoutSize(jColorChooser0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator();
      jToolBar_Separator0.getTreeLock();
      Insets insets0 = jToolBar_Separator0.getInsets();
      jToolBar_Separator0.getComponentCount();
      insets0.set(0, 0, 0, 1);
      // Undeclared exception!
      try { 
        jToolBar_Separator0.getComponent(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // No such child: 0
         //
         verifyException("java.awt.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      // Undeclared exception!
      try { 
        gridLayout2_0.layoutContainer((Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(5, 5);
      JPasswordField jPasswordField0 = new JPasswordField();
      GridLayout2 gridLayout2_1 = new GridLayout2();
      jPasswordField0.setLayout(gridLayout2_1);
      JViewport jViewport0 = new JViewport();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      Hashtable<Format.Field, SynthRadioButtonUI> hashtable0 = new Hashtable<Format.Field, SynthRadioButtonUI>();
      Font font0 = new Font(hashtable0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.setFont(font0);
      JMenu jMenu0 = new JMenu("ZA%PmB1jzyp4Rqk'Y<Z", false);
      jMenu0.paintComponents(debugGraphics0);
      GridLayout2 gridLayout2_2 = new GridLayout2();
      gridLayout2_2.preferredLayoutSize(jMenu0);
      gridLayout2_2.preferredLayoutSize(jViewport0);
      gridLayout2_1.layoutContainer(defaultTreeCellRenderer0);
      DefaultColorSelectionModel defaultColorSelectionModel0 = new DefaultColorSelectionModel();
      JColorChooser jColorChooser0 = new JColorChooser(defaultColorSelectionModel0);
      jColorChooser0.setLayout((LayoutManager) null);
      DefaultTableCellRenderer.UIResource defaultTableCellRenderer_UIResource0 = new DefaultTableCellRenderer.UIResource();
      jColorChooser0.add((Component) defaultTableCellRenderer_UIResource0);
      gridLayout2_1.layoutContainer(defaultTableCellRenderer_UIResource0);
      gridLayout2_0.preferredLayoutSize(defaultTableCellRenderer_UIResource0);
      gridLayout2_2.preferredLayoutSize(jMenu0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2((-1), (-1));
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      JTree jTree0 = new JTree(objectArray0);
      jTree0.getTreeLock();
      jTree0.getInsets();
      DefaultTableCellRenderer.UIResource defaultTableCellRenderer_UIResource0 = new DefaultTableCellRenderer.UIResource();
      defaultTableCellRenderer_UIResource0.getVerticalTextPosition();
      StringContent stringContent0 = new StringContent();
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      JTextPane jTextPane0 = new JTextPane();
      AttributeSet attributeSet0 = jTextPane0.getCharacterAttributes();
      Color color0 = defaultStyledDocument0.getBackground(attributeSet0);
      DefaultColorSelectionModel defaultColorSelectionModel0 = new DefaultColorSelectionModel(color0);
      defaultColorSelectionModel0.getSelectedColor();
      GridLayout2 gridLayout2_1 = new GridLayout2();
      gridLayout2_1.layoutContainer(defaultTableCellRenderer_UIResource0);
      gridLayout2_1.layoutContainer(defaultTableCellRenderer_UIResource0);
      gridLayout2_1.layoutContainer(jTree0);
      int int0 = 0;
      JTabbedPane jTabbedPane0 = null;
      try {
        jTabbedPane0 = new JTabbedPane(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal tab placement: must be TOP, BOTTOM, LEFT, or RIGHT
         //
         verifyException("javax.swing.JTabbedPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      JInternalFrame jInternalFrame0 = new JInternalFrame("t&M}*|y=i", true, true, true);
      JLayeredPane jLayeredPane0 = jInternalFrame0.getLayeredPane();
      jLayeredPane0.getTreeLock();
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = jInternalFrame0.getDesktopIcon();
      jInternalFrame_JDesktopIcon0.getInsets();
      jInternalFrame_JDesktopIcon0.getComponentCount();
      jInternalFrame0.getWidth();
      jInternalFrame0.getHeight();
      jInternalFrame0.getComponent(0);
      jInternalFrame0.setBounds(0, (-2417), 0, (-3246));
      gridLayout2_0.layoutContainer(jInternalFrame_JDesktopIcon0);
      gridLayout2_0.preferredLayoutSize(jInternalFrame_JDesktopIcon0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField();
      GridLayout2 gridLayout2_0 = new GridLayout2();
      gridLayout2_0.layoutContainer(jPasswordField0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      JEditorPane jEditorPane0 = new JEditorPane();
      JComboBox<SynthRadioButtonUI> jComboBox0 = new JComboBox<SynthRadioButtonUI>();
      jEditorPane0.registerKeyboardAction((ActionListener) jComboBox0, (KeyStroke) null, 0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      jComboBox0.getPreferredSize();
      JSeparator jSeparator0 = new JSeparator();
      jSeparator0.add("^6K:", (Component) defaultTreeCellRenderer0);
      gridLayout2_0.minimumLayoutSize(jSeparator0);
      JMenu jMenu0 = new JMenu("Pc;9d$O&=M-Hl", false);
      defaultTreeCellRenderer0.add((Component) jEditorPane0);
      GridLayout2 gridLayout2_1 = new GridLayout2(2547, 24);
      gridLayout2_1.minimumLayoutSize(jComboBox0);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jMenu0.paintComponents(debugGraphics0);
      gridLayout2_0.preferredLayoutSize(jSeparator0);
      GridLayout2 gridLayout2_2 = new GridLayout2(20, 1, 849, 1);
      gridLayout2_2.preferredLayoutSize(jSeparator0);
      gridLayout2_2.layoutContainer(jEditorPane0);
      gridLayout2_0.layoutContainer(jMenu0);
      gridLayout2_0.minimumLayoutSize(jMenu0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      JColorChooser jColorChooser0 = new JColorChooser();
      gridLayout2_0.layoutContainer(jColorChooser0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      JEditorPane jEditorPane0 = new JEditorPane();
      JComboBox<SynthRadioButtonUI> jComboBox0 = new JComboBox<SynthRadioButtonUI>();
      jEditorPane0.registerKeyboardAction((ActionListener) jComboBox0, (KeyStroke) null, 0);
      Color color0 = Color.PINK;
      jEditorPane0.setForeground(color0);
      jEditorPane0.setLayout((LayoutManager) null);
      jEditorPane0.getBackground();
      JColorChooser jColorChooser0 = new JColorChooser();
      ComponentOrientation componentOrientation0 = ComponentOrientation.LEFT_TO_RIGHT;
      jComboBox0.setComponentOrientation(componentOrientation0);
      jEditorPane0.add((Component) jColorChooser0);
      gridLayout2_0.layoutContainer(jColorChooser0);
      jColorChooser0.getAlignmentY();
      gridLayout2_0.layoutContainer(jColorChooser0);
      gridLayout2_0.minimumLayoutSize(jColorChooser0);
      gridLayout2_0.minimumLayoutSize(jComboBox0);
      DefaultColorSelectionModel defaultColorSelectionModel0 = new DefaultColorSelectionModel();
      JColorChooser jColorChooser1 = new JColorChooser(defaultColorSelectionModel0);
      jColorChooser1.setLayout((LayoutManager) null);
      DefaultTableCellRenderer.UIResource defaultTableCellRenderer_UIResource0 = new DefaultTableCellRenderer.UIResource();
      jColorChooser1.add((Component) defaultTableCellRenderer_UIResource0);
      defaultColorSelectionModel0.getChangeListeners();
      defaultTableCellRenderer_UIResource0.getVerticalTextPosition();
      defaultColorSelectionModel0.getSelectedColor();
      gridLayout2_0.layoutContainer(defaultTableCellRenderer_UIResource0);
      gridLayout2_0.layoutContainer(jColorChooser1);
      gridLayout2_0.layoutContainer(jComboBox0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2((-2264), (-1166), (-1), (-1166));
      JInternalFrame jInternalFrame0 = new JInternalFrame("t&M}*|y=i", true, true, true);
      JLayeredPane jLayeredPane0 = jInternalFrame0.getLayeredPane();
      jLayeredPane0.getTreeLock();
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = jInternalFrame0.getDesktopIcon();
      jInternalFrame_JDesktopIcon0.getInsets();
      jInternalFrame_JDesktopIcon0.getComponentCount();
      jInternalFrame0.getWidth();
      jInternalFrame0.getHeight();
      jInternalFrame0.getComponent(0);
      jInternalFrame0.setBounds(0, (-2417), 0, (-3246));
      // Undeclared exception!
      try { 
        gridLayout2_0.minimumLayoutSize(jInternalFrame_JDesktopIcon0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField();
      GridLayout2 gridLayout2_0 = null;
      try {
        gridLayout2_0 = new GridLayout2(0, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rows and cols cannot both be zero
         //
         verifyException("java.awt.GridLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField();
      GridLayout2 gridLayout2_0 = new GridLayout2();
      jPasswordField0.setLayout(gridLayout2_0);
      JViewport jViewport0 = new JViewport();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      Hashtable<Format.Field, SynthRadioButtonUI> hashtable0 = new Hashtable<Format.Field, SynthRadioButtonUI>();
      Font font0 = new Font(hashtable0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.setFont(font0);
      JMenu jMenu0 = new JMenu("vp", false);
      jMenu0.paintComponents(debugGraphics0);
      GridLayout2 gridLayout2_1 = new GridLayout2();
      gridLayout2_1.preferredLayoutSize(defaultTreeCellRenderer0);
      gridLayout2_1.preferredLayoutSize(jViewport0);
      gridLayout2_0.layoutContainer(jViewport0);
      DefaultColorSelectionModel defaultColorSelectionModel0 = new DefaultColorSelectionModel();
      JColorChooser jColorChooser0 = new JColorChooser(defaultColorSelectionModel0);
      DefaultTableCellRenderer.UIResource defaultTableCellRenderer_UIResource0 = new DefaultTableCellRenderer.UIResource();
      defaultTableCellRenderer_UIResource0.add((Component) jViewport0);
      GridLayout2 gridLayout2_2 = new GridLayout2((-2650), 277, (-2285), (-760));
      gridLayout2_2.preferredLayoutSize(defaultTreeCellRenderer0);
      gridLayout2_2.preferredLayoutSize(jColorChooser0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField();
      Color color0 = Color.PINK;
      JEditorPane jEditorPane0 = new JEditorPane("", "");
      jEditorPane0.setForeground(color0);
      SynthScrollBarUI synthScrollBarUI0 = new SynthScrollBarUI();
      jPasswordField0.setLayout(synthScrollBarUI0);
      jEditorPane0.getBackground();
      JColorChooser jColorChooser0 = new JColorChooser();
      ComponentOrientation componentOrientation0 = ComponentOrientation.LEFT_TO_RIGHT;
      SynthRadioButtonUI[] synthRadioButtonUIArray0 = new SynthRadioButtonUI[1];
      SynthRadioButtonUI synthRadioButtonUI0 = new SynthRadioButtonUI();
      synthRadioButtonUIArray0[0] = synthRadioButtonUI0;
      DefaultComboBoxModel<SynthRadioButtonUI> defaultComboBoxModel0 = new DefaultComboBoxModel<SynthRadioButtonUI>(synthRadioButtonUIArray0);
      JComboBox<SynthRadioButtonUI> jComboBox0 = new JComboBox<SynthRadioButtonUI>(defaultComboBoxModel0);
      jComboBox0.setComponentOrientation(componentOrientation0);
      jEditorPane0.add((Component) jColorChooser0);
      GridLayout2 gridLayout2_0 = new GridLayout2((-3323), 1002);
      gridLayout2_0.layoutContainer(jColorChooser0);
      JColorChooser jColorChooser1 = new JColorChooser();
      jColorChooser1.getAlignmentY();
      gridLayout2_0.layoutContainer(jColorChooser1);
      gridLayout2_0.minimumLayoutSize(jComboBox0);
      gridLayout2_0.minimumLayoutSize(jPasswordField0);
      DefaultColorSelectionModel defaultColorSelectionModel0 = new DefaultColorSelectionModel();
      JColorChooser jColorChooser2 = new JColorChooser(defaultColorSelectionModel0);
      jColorChooser2.setLayout(synthScrollBarUI0);
      DefaultTableCellRenderer.UIResource defaultTableCellRenderer_UIResource0 = new DefaultTableCellRenderer.UIResource();
      jPasswordField0.add((Component) defaultTableCellRenderer_UIResource0);
      defaultColorSelectionModel0.getChangeListeners();
      defaultTableCellRenderer_UIResource0.getVerticalTextPosition();
      defaultColorSelectionModel0.getSelectedColor();
      gridLayout2_0.layoutContainer(jComboBox0);
      gridLayout2_0.layoutContainer(jComboBox0);
      // Undeclared exception!
      gridLayout2_0.layoutContainer(jColorChooser2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(313, 313, 313, 313);
      JSeparator jSeparator0 = new JSeparator();
      jSeparator0.setLayout((LayoutManager) null);
      Dimension dimension0 = gridLayout2_0.minimumLayoutSize(jSeparator0);
      assertEquals(97656, dimension0.height);
      assertEquals((-313), dimension0.width);
      
      JMenu jMenu0 = new JMenu("", false);
      jSeparator0.add((Component) jMenu0);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      Hashtable<Format.Field, SynthRadioButtonUI> hashtable0 = new Hashtable<Format.Field, SynthRadioButtonUI>();
      Font font0 = new Font(hashtable0);
      jMenu0.paintComponents(debugGraphics0);
      gridLayout2_0.preferredLayoutSize(jMenu0);
      Dimension dimension1 = gridLayout2_0.preferredLayoutSize(jSeparator0);
      assertEquals(17, dimension1.width);
      assertEquals(97669, dimension1.height);
      
      gridLayout2_0.layoutContainer(jMenu0);
      gridLayout2_0.preferredLayoutSize(jMenu0);
      Dimension dimension2 = gridLayout2_0.preferredLayoutSize(jMenu0);
      assertEquals(97660.0, dimension2.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2((-1), 615, 615, (-455));
      DefaultTableCellRenderer defaultTableCellRenderer0 = new DefaultTableCellRenderer();
      defaultTableCellRenderer0.getTreeLock();
      defaultTableCellRenderer0.getInsets();
      defaultTableCellRenderer0.getComponentCount();
      defaultTableCellRenderer0.getWidth();
      defaultTableCellRenderer0.getHeight();
      // Undeclared exception!
      try { 
        defaultTableCellRenderer0.getComponent(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // No such child: 1
         //
         verifyException("java.awt.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField();
      GridLayout2 gridLayout2_0 = new GridLayout2();
      JInternalFrame jInternalFrame0 = new JInternalFrame("t&M}*|y=i", true, true, true);
      JLayeredPane jLayeredPane0 = jInternalFrame0.getLayeredPane();
      jLayeredPane0.getTreeLock();
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = jInternalFrame0.getDesktopIcon();
      jInternalFrame_JDesktopIcon0.getInsets();
      jInternalFrame_JDesktopIcon0.getComponentCount();
      jInternalFrame0.getWidth();
      jInternalFrame0.getHeight();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-117);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jInternalFrame0.getComponent(0);
      gridLayout2_0.setRows(622);
      jInternalFrame0.setBounds(0, (-2417), 0, (-3246));
      gridLayout2_0.layoutContainer(jInternalFrame_JDesktopIcon0);
      Dimension dimension0 = gridLayout2_0.minimumLayoutSize(jLayeredPane0);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GridLayout2 gridLayout2_0 = null;
      try {
        gridLayout2_0 = new GridLayout2(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rows and cols cannot both be zero
         //
         verifyException("java.awt.GridLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField();
      GridLayout2 gridLayout2_0 = new GridLayout2((-23), (-23), (-23), (-23));
      // Undeclared exception!
      try { 
        gridLayout2_0.preferredLayoutSize(jPasswordField0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      gridLayout2_0.setRows((-94));
      JColorChooser jColorChooser0 = new JColorChooser();
      // Undeclared exception!
      try { 
        gridLayout2_0.minimumLayoutSize(jColorChooser0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      JColorChooser jColorChooser0 = new JColorChooser();
      GridLayout2 gridLayout2_1 = new GridLayout2((-3173), (-3173));
      // Undeclared exception!
      try { 
        gridLayout2_1.layoutContainer(jColorChooser0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      // Undeclared exception!
      try { 
        gridLayout2_0.minimumLayoutSize((Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(313, 313);
      JSeparator jSeparator0 = new JSeparator();
      jSeparator0.setLayout((LayoutManager) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getPreferredSize();
      jSeparator0.add("K?F05ZySI?idvu/(i", (Component) defaultTreeCellRenderer0);
      gridLayout2_0.minimumLayoutSize(jSeparator0);
      JMenu jMenu0 = new JMenu("", false);
      JMenu jMenu1 = (JMenu)jSeparator0.add((Component) jMenu0);
      gridLayout2_0.minimumLayoutSize(jMenu0);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      gridLayout2_0.minimumLayoutSize(jSeparator0);
      DefaultColorSelectionModel defaultColorSelectionModel0 = new DefaultColorSelectionModel();
      JColorChooser jColorChooser0 = new JColorChooser(defaultColorSelectionModel0);
      jMenu1.setLayout((LayoutManager) null);
      DefaultTableCellRenderer.UIResource defaultTableCellRenderer_UIResource0 = new DefaultTableCellRenderer.UIResource();
      jMenu0.add((Component) jSeparator0);
      defaultColorSelectionModel0.getChangeListeners();
      DefaultTableCellRenderer.UIResource defaultTableCellRenderer_UIResource1 = new DefaultTableCellRenderer.UIResource();
      defaultTableCellRenderer_UIResource1.getVerticalTextPosition();
      defaultColorSelectionModel0.getSelectedColor();
      GridLayout2 gridLayout2_1 = new GridLayout2(313, 313, 493, 313);
      gridLayout2_1.layoutContainer(jColorChooser0);
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator();
      jToolBar_Separator0.getTreeLock();
      jToolBar_Separator0.getInsets();
      jToolBar_Separator0.getComponentCount();
      // Undeclared exception!
      try { 
        jToolBar_Separator0.getComponent(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // No such child: 0
         //
         verifyException("java.awt.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField();
      GridLayout2 gridLayout2_0 = new GridLayout2();
      Dimension dimension0 = new Dimension();
      GridLayout2 gridLayout2_1 = new GridLayout2((-2105), 0);
      // Undeclared exception!
      try { 
        gridLayout2_1.preferredLayoutSize(jPasswordField0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(5, 5);
      JPasswordField jPasswordField0 = new JPasswordField();
      GridLayout2 gridLayout2_1 = new GridLayout2();
      jPasswordField0.setLayout(gridLayout2_1);
      GridLayout2 gridLayout2_2 = new GridLayout2(2547, 740);
      gridLayout2_2.minimumLayoutSize(jPasswordField0);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      JMenu jMenu0 = new JMenu("", true);
      jMenu0.paintComponents(debugGraphics0);
      gridLayout2_1.preferredLayoutSize(jMenu0);
      GridLayout2 gridLayout2_3 = new GridLayout2(2533, 1, 2507, (-872));
      gridLayout2_1.preferredLayoutSize(jPasswordField0);
      gridLayout2_1.layoutContainer(jMenu0);
      gridLayout2_1.layoutContainer(jMenu0);
      gridLayout2_2.minimumLayoutSize(jMenu0);
      Dimension dimension0 = gridLayout2_3.minimumLayoutSize(jPasswordField0);
      assertEquals((-2207900), dimension0.height);
      assertEquals((-2503), dimension0.width);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(0, 2030);
      JSeparator jSeparator0 = new JSeparator();
      jSeparator0.setLayout(gridLayout2_0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      jSeparator0.getPreferredSize();
      Component component0 = jSeparator0.add("K?F05ZySI?idvu/(i", (Component) defaultTreeCellRenderer0);
      gridLayout2_0.minimumLayoutSize(jSeparator0);
      JMenu jMenu0 = new JMenu("minimumLayoutSize", false);
      // Undeclared exception!
      try { 
        defaultTreeCellRenderer0.add(component0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // adding container's parent to itself
         //
         verifyException("java.awt.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2((-1), (-1));
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      JTree jTree0 = new JTree(objectArray0);
      jTree0.getTreeLock();
      jTree0.getInsets();
      jTree0.getComponentCount();
      jTree0.getComponent(0);
      // Undeclared exception!
      try { 
        gridLayout2_0.layoutContainer(jTree0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      JEditorPane jEditorPane0 = new JEditorPane();
      JComboBox<SynthRadioButtonUI> jComboBox0 = new JComboBox<SynthRadioButtonUI>();
      jEditorPane0.registerKeyboardAction((ActionListener) jComboBox0, (KeyStroke) null, 0);
      jEditorPane0.setLayout(gridLayout2_0);
      JColorChooser jColorChooser0 = new JColorChooser();
      ComponentOrientation componentOrientation0 = ComponentOrientation.LEFT_TO_RIGHT;
      jComboBox0.setComponentOrientation(componentOrientation0);
      JColorChooser jColorChooser1 = (JColorChooser)jEditorPane0.add((Component) jColorChooser0);
      gridLayout2_0.layoutContainer(jColorChooser0);
      jColorChooser0.getAlignmentY();
      gridLayout2_0.layoutContainer(jColorChooser0);
      gridLayout2_0.minimumLayoutSize(jColorChooser0);
      gridLayout2_0.minimumLayoutSize(jComboBox0);
      DefaultColorSelectionModel defaultColorSelectionModel0 = new DefaultColorSelectionModel();
      JColorChooser jColorChooser2 = new JColorChooser(defaultColorSelectionModel0);
      SynthScrollBarUI synthScrollBarUI0 = new SynthScrollBarUI();
      jColorChooser1.setLayout(synthScrollBarUI0);
      DefaultTableCellRenderer.UIResource defaultTableCellRenderer_UIResource0 = new DefaultTableCellRenderer.UIResource();
      jColorChooser1.add((Component) defaultTableCellRenderer_UIResource0);
      gridLayout2_0.layoutContainer(defaultTableCellRenderer_UIResource0);
      defaultColorSelectionModel0.getChangeListeners();
      defaultTableCellRenderer_UIResource0.getVerticalTextPosition();
      defaultColorSelectionModel0.getSelectedColor();
      gridLayout2_0.layoutContainer(jComboBox0);
      gridLayout2_0.layoutContainer(defaultTableCellRenderer_UIResource0);
      // Undeclared exception!
      try { 
        gridLayout2_0.layoutContainer(jEditorPane0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.plaf.synth.SynthScrollBarUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(313, 313);
      JSeparator jSeparator0 = new JSeparator();
      jSeparator0.setLayout((LayoutManager) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getPreferredSize();
      jSeparator0.add("K?F05ZySI?idvu/(i", (Component) defaultTreeCellRenderer0);
      gridLayout2_0.minimumLayoutSize(jSeparator0);
      JMenu jMenu0 = new JMenu("", false);
      jSeparator0.add((Component) jMenu0);
      gridLayout2_0.minimumLayoutSize(jMenu0);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      Hashtable<Format.Field, SynthRadioButtonUI> hashtable0 = new Hashtable<Format.Field, SynthRadioButtonUI>();
      Font font0 = new Font(hashtable0);
      defaultTreeCellRenderer0.setFont(font0);
      jMenu0.paintComponents(debugGraphics0);
      Dimension dimension0 = gridLayout2_0.preferredLayoutSize(jMenu0);
      gridLayout2_0.preferredLayoutSize(jSeparator0);
      gridLayout2_0.layoutContainer(defaultTreeCellRenderer0);
      gridLayout2_0.layoutContainer(jMenu0);
      gridLayout2_0.preferredLayoutSize(jMenu0);
      Dimension dimension1 = gridLayout2_0.preferredLayoutSize(jMenu0);
      assertNotSame(dimension1, dimension0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField();
      GridLayout2 gridLayout2_0 = new GridLayout2();
      Dimension dimension0 = gridLayout2_0.preferredLayoutSize(jPasswordField0);
      assertEquals(4, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(5, 5);
      JPasswordField jPasswordField0 = new JPasswordField();
      GridLayout2 gridLayout2_1 = new GridLayout2();
      jPasswordField0.setLayout(gridLayout2_1);
      JViewport jViewport0 = new JViewport();
      jViewport0.add((Component) jPasswordField0);
      Component component0 = jViewport0.add((Component) jPasswordField0);
      jViewport0.add(component0);
      Dimension dimension0 = gridLayout2_0.preferredLayoutSize(jViewport0);
      Dimension dimension1 = gridLayout2_0.minimumLayoutSize(jViewport0);
      assertTrue(dimension1.equals((Object)dimension0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(313, 313);
      JSeparator jSeparator0 = new JSeparator();
      jSeparator0.setLayout((LayoutManager) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Locale locale0 = Locale.JAPANESE;
      jSeparator0.setLocale(locale0);
      defaultTreeCellRenderer0.getPreferredSize();
      jSeparator0.add("K?F05ZySI?idvu/(i", (Component) defaultTreeCellRenderer0);
      Dimension dimension0 = new Dimension();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      Hashtable<Format.Field, SynthRadioButtonUI> hashtable0 = new Hashtable<Format.Field, SynthRadioButtonUI>();
      Font font0 = new Font(hashtable0);
      defaultTreeCellRenderer0.setFont(font0);
      Dimension dimension1 = gridLayout2_0.preferredLayoutSize(jSeparator0);
      assertEquals(3, dimension1.width);
      
      gridLayout2_0.layoutContainer(jSeparator0);
      Dimension dimension2 = gridLayout2_0.minimumLayoutSize(defaultTreeCellRenderer0);
      assertFalse(dimension2.equals((Object)dimension1));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      JColorChooser jColorChooser0 = new JColorChooser();
      MultiColorChooserUI multiColorChooserUI0 = new MultiColorChooserUI();
      jColorChooser0.setUI(multiColorChooserUI0);
      // Undeclared exception!
      try { 
        gridLayout2_0.minimumLayoutSize(jColorChooser0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // No such child: 0
         //
         verifyException("java.awt.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      JColorChooser jColorChooser0 = new JColorChooser();
      Dimension dimension0 = gridLayout2_0.minimumLayoutSize(jColorChooser0);
      assertEquals(224, dimension0.height);
      assertEquals(946, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(5, 5);
      JPasswordField jPasswordField0 = new JPasswordField();
      GridLayout2 gridLayout2_1 = new GridLayout2();
      jPasswordField0.setLayout(gridLayout2_1);
      JViewport jViewport0 = new JViewport();
      gridLayout2_0.layoutContainer(jViewport0);
      gridLayout2_0.minimumLayoutSize(jPasswordField0);
      gridLayout2_0.minimumLayoutSize(jViewport0);
      DefaultColorSelectionModel defaultColorSelectionModel0 = new DefaultColorSelectionModel();
      JColorChooser jColorChooser0 = new JColorChooser(defaultColorSelectionModel0);
      jPasswordField0.setLayout((LayoutManager) null);
      DefaultTableCellRenderer.UIResource defaultTableCellRenderer_UIResource0 = new DefaultTableCellRenderer.UIResource();
      JPasswordField jPasswordField1 = new JPasswordField();
      GridLayout2 gridLayout2_2 = new GridLayout2();
      jPasswordField1.setLayout(gridLayout2_2);
      JViewport jViewport1 = new JViewport();
      jViewport1.add((Component) jPasswordField1);
      Component component0 = jViewport1.add((Component) jPasswordField1);
      Component component1 = jViewport1.add(component0);
      jViewport1.add(component1);
      defaultColorSelectionModel0.getChangeListeners();
      defaultTableCellRenderer_UIResource0.getVerticalTextPosition();
      defaultColorSelectionModel0.getSelectedColor();
      gridLayout2_0.layoutContainer(jViewport0);
      gridLayout2_2.layoutContainer(jPasswordField1);
      GridLayout2 gridLayout2_3 = new GridLayout2(0, (-521));
      // Undeclared exception!
      try { 
        gridLayout2_3.layoutContainer(jViewport1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      // Undeclared exception!
      try { 
        gridLayout2_0.preferredLayoutSize((Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(1823, 1823);
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("7YE\":K7;L)[?H[W@Vk", true);
      JMenuItem jMenuItem0 = jPopupMenu0.add((JMenuItem) jRadioButtonMenuItem0);
      jMenuItem0.getTreeLock();
      Insets insets0 = jRadioButtonMenuItem0.getInsets();
      insets0.bottom = 1823;
      jMenuItem0.getComponentCount();
      jRadioButtonMenuItem0.getWidth();
      jPopupMenu0.getHeight();
      ImageIcon imageIcon0 = new ImageIcon();
      insets0.bottom = (-421);
      insets0.clone();
      JToggleButton jToggleButton0 = new JToggleButton(imageIcon0, true);
      // Undeclared exception!
      try { 
        jToggleButton0.getComponent(426);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // No such child: 426
         //
         verifyException("java.awt.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JColorChooser jColorChooser0 = new JColorChooser();
      GridLayout2 gridLayout2_0 = new GridLayout2(1832, 1832, 1832, 1832);
      Dimension dimension0 = gridLayout2_0.preferredLayoutSize(jColorChooser0);
      assertEquals(3354698, dimension0.height);
      assertEquals(626, dimension0.width);
  }
}

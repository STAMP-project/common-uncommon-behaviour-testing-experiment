/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 19:13:32 GMT 2019
 */

package com.ib.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ib.client.EClientErrors;
import com.ib.client.EException;
import com.ib.client.EReader;
import com.ib.client.EWrapper;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.SyncFailedException;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EReader_ESTest extends EReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 541);
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(40);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 49);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      assertNotNull(dataInputStream1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      EReader eReader1 = new EReader(dataInputStream1, (EWrapper) null, 49);
      assertNotNull(eReader1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertFalse(eReader1.equals((Object)eReader0));
      
      try { 
        eReader0.processMsg(4);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 11);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.processMsg(11);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)88;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)88);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      eReader0.run();
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      int int0 = eReader0.readIntMax();
      assertEquals(6, int0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      int int1 = eReader0.readIntMax();
      assertEquals(Integer.MAX_VALUE, int1);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      try { 
        eReader0.processMsg(2);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1821), 55);
      assertNotNull(byteArrayInputStream0);
      assertEquals(55, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)39, (byte)15, (byte)58, (byte)53, (byte)10, (byte)13, (byte) (-105), (byte)117}, byteArray0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertNotNull(pushbackInputStream0);
      assertEquals(55, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)39, (byte)15, (byte)58, (byte)53, (byte)10, (byte)13, (byte) (-105), (byte)117}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(55, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)39, (byte)15, (byte)58, (byte)53, (byte)10, (byte)13, (byte) (-105), (byte)117}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)117);
      assertNotNull(eReader0);
      assertEquals(55, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)39, (byte)15, (byte)58, (byte)53, (byte)10, (byte)13, (byte) (-105), (byte)117}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.readLong();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[1] = (byte)54;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      
      boolean boolean1 = sequenceInputStream0.markSupported();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)54);
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(54);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 19);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = eReader0.processMsg(4);
      assertTrue(boolean1);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream1, (EWrapper) null, 109);
      assertNotNull(eReader1);
      assertFalse(eReader1.equals((Object)eReader0));
      
      // Undeclared exception!
      try { 
        eReader1.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)57;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-1143));
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg((byte)3);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 15);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = EReader.MARKET_DEPTH_L2;
      assertEquals(13, int0);
      
      int int1 = EReader.TICK_EFP;
      assertEquals(47, int1);
      assertFalse(int1 == int0);
      
      try { 
        eReader0.processMsg(47);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 14);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.processMsg(14);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[1] = (byte)54;
      byteArray0[4] = (byte)57;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)88;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(22, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(22, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn("BOND").when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)88);
      assertNotNull(eReader0);
      assertEquals(22, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      boolean boolean0 = eReader0.processMsg((byte)54);
      assertTrue(boolean0);
      assertEquals(19, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 49);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, 49);
      assertNotNull(eReader1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      eReader1.stop();
      assertEquals(0, pipedInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotSame(eReader1, eReader0);
      
      eReader0.run();
      assertEquals(0, pipedInputStream0.available());
      assertFalse(eReader0.equals((Object)eReader1));
      assertNotSame(eReader0, eReader1);
      
      try { 
        eReader0.processMsg(41);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 2);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.processMsg(55);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = 20;
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 20);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      long long0 = eReader0.readLong();
      assertEquals(0L, long0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EClientErrors.CodeMsgPair eClientErrors_CodeMsgPair0 = new EClientErrors.CodeMsgPair(20, "hnk(d`SHhyf");
      assertNotNull(eClientErrors_CodeMsgPair0);
      assertEquals(20, eClientErrors_CodeMsgPair0.code());
      assertEquals("hnk(d`SHhyf", eClientErrors_CodeMsgPair0.msg());
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      assertNotNull(pipedInputStream1);
      assertEquals(0, pipedInputStream1.available());
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream1));
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 53);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream1));
      
      try { 
        eReader0.processMsg(53);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 53);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        eReader0.processMsg(5);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 49);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.readIntMax();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (-223));
      assertNotNull(eReader0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = eReader0.readIntMax();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.readBoolFromInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\b\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      DataInputStream dataInputStream0 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = 33;
      EReader eReader0 = new EReader(dataInputStream0, eWrapper1, 33);
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(25);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = (-698);
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (-698));
      assertNotNull(eReader0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(56);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\b\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(30);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 17);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.processMsg(17);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 24);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        eReader0.processMsg(28);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream1 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream1);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (-3110));
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      
      try { 
        eReader0.processMsg(56);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)54;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)88;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)54, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)54, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)88);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)54, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      eReader0.run();
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)54, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      int int0 = eReader0.readIntMax();
      assertEquals(66, int0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)54, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      int int1 = eReader0.readIntMax();
      assertEquals(9, int1);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)54, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      double double0 = eReader0.readDoubleMax();
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)54, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      try { 
        eReader0.processMsg(17);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      DataInputStream dataInputStream0 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(11, 11, 11, 11, 11).when(dataInputStream0).read();
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      assertNotNull(dataInputStream1);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      int int0 = 11;
      EReader eReader0 = new EReader(dataInputStream1, eWrapper0, 11);
      assertNotNull(eReader0);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      // Undeclared exception!
      EReader.readStr(dataInputStream1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      // Undeclared exception!
      try { 
        EReader.readStr((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 2);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.processMsg(55);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)54;
      byteArray0[0] = (byte)57;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)0;
      DataInputStream dataInputStream0 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(dataInputStream0).read();
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      assertNotNull(dataInputStream1);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = dataInputStream1.readByte();
      assertEquals((byte)0, byte0);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      String string0 = EReader.readStr(dataInputStream1);
      assertNull(string0);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      EReader eReader0 = new EReader(dataInputStream1, eWrapper0, 31);
      assertNotNull(eReader0);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      boolean boolean1 = eReader0.readBoolFromInt();
      assertFalse(boolean1);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertFalse(boolean1 == boolean0);
      
      eReader0.run();
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)54);
      assertNotNull(pushbackInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn(">ak:CHmnA0Kwk4Tq3)").when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)54);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = eReader0.processMsg(56);
      assertTrue(boolean0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 2);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.processMsg(2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(31);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      assertNotNull(dataInputStream1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream1, eWrapper0, 529);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      try { 
        eReader0.processMsg(42);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (-192));
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.processMsg(18);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      assertNotNull(dataInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = (-1604);
      EReader eReader0 = new EReader(dataInputStream1, eWrapper0, (-1604));
      assertNotNull(eReader0);
      
      eReader0.run();
      // Undeclared exception!
      try { 
        eReader0.readLong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 0);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.readLong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DataInputStream dataInputStream0 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 1288);
      assertNotNull(eReader0);
      
      EClientErrors.CodeMsgPair eClientErrors_CodeMsgPair0 = new EClientErrors.CodeMsgPair((-4273), (String) null);
      assertNotNull(eClientErrors_CodeMsgPair0);
      assertEquals((-4273), eClientErrors_CodeMsgPair0.code());
      assertNull(eClientErrors_CodeMsgPair0.msg());
      
      eClientErrors_CodeMsgPair0.m_errorMsg = "finished";
      assertEquals((-4273), eClientErrors_CodeMsgPair0.code());
      assertEquals("finished", eClientErrors_CodeMsgPair0.msg());
      
      eClientErrors_CodeMsgPair0.m_errorMsg = null;
      assertEquals((-4273), eClientErrors_CodeMsgPair0.code());
      assertNull(eClientErrors_CodeMsgPair0.msg());
      
      eClientErrors_CodeMsgPair0.m_errorMsg = "finished";
      assertEquals((-4273), eClientErrors_CodeMsgPair0.code());
      assertEquals("finished", eClientErrors_CodeMsgPair0.msg());
      
      eClientErrors_CodeMsgPair0.m_errorMsg = null;
      assertEquals((-4273), eClientErrors_CodeMsgPair0.code());
      assertNull(eClientErrors_CodeMsgPair0.msg());
      
      EException eException0 = eReader0.createEException((-3010), eClientErrors_CodeMsgPair0);
      assertNotNull(eException0);
      assertEquals((-4273), eClientErrors_CodeMsgPair0.code());
      assertNull(eClientErrors_CodeMsgPair0.msg());
      assertEquals((-3010), eException0.getId());
      assertEquals((-4273), eException0.getErrorCode());
      assertEquals((-1), EException.NO_VALID_CODE);
      
      // Undeclared exception!
      try { 
        eReader0.readInt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      int int0 = 49;
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 49);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.readDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)54);
      assertNotNull(pushbackInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn("m").when(eWrapper1).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper1, (byte)54);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = eReader0.processMsg(1);
      assertTrue(boolean0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 0);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.readLong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream1 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 30);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      
      try { 
        eReader0.processMsg(51);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 37);
      assertNotNull(eReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        eReader0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 2);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.processMsg(21);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      long long0 = dataInputStream0.skip((-2900L));
      assertEquals(0L, long0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        EReader.readInt(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 15);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = eReader0.readIntMax();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int1 = EReader.TICK_EFP;
      assertEquals(47, int1);
      assertFalse(int1 == int0);
      
      try { 
        eReader0.processMsg(47);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)88;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)102, (byte)3, (byte)57, (byte)10, (byte)0, (byte)88}, byteArray0);
      
      DataInputStream dataInputStream0 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 735);
      assertNotNull(eReader0);
      
      eReader0.stop();
      eReader0.run();
      // Undeclared exception!
      try { 
        eReader0.readStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = 57;
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 57);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream1);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 37);
      assertNotNull(eReader0);
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      
      try { 
        eReader0.processMsg(16);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream1);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream1, (EWrapper) null, (byte)54);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 17);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.readBoolFromInt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream1 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 31);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      
      EReader eReader1 = new EReader(dataInputStream1, (EWrapper) null, 31);
      assertNotNull(eReader1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertFalse(eReader1.equals((Object)eReader0));
      
      try { 
        eReader1.processMsg(31);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 49);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      eReader0.stop();
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      eReader0.run();
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.processMsg(12);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 53);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.processMsg(26);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 17);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        eReader0.processMsg(22);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = (-1028);
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (-1028));
      assertNotNull(eReader0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int1 = eReader0.readIntMax();
      assertEquals(Integer.MAX_VALUE, int1);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        eReader0.processMsg((byte)29);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)54);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg((byte)54);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 21);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)54;
      byteArray0[4] = (byte)57;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)88;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88, (byte)0}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)88);
      assertNotNull(eReader0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88, (byte)0}, byteArray0);
      
      int int0 = dataInputStream0.readInt();
      assertEquals(3538944, int0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88, (byte)0}, byteArray0);
      
      double double0 = eReader0.readDouble();
      assertEquals(9.0, double0, 0.01);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88, (byte)0}, byteArray0);
      
      int int1 = EReader.TICK_SNAPSHOT_END;
      assertEquals(57, int1);
      assertFalse(int1 == int0);
      
      double double1 = eReader0.readDoubleMax();
      assertEquals(1.7976931348623157E308, double1, 0.01);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(57);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"X\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      DataInputStream dataInputStream0 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper1, 42);
      assertNotNull(eReader0);
      
      eReader0.stop();
      eReader0.run();
      try { 
        eReader0.processMsg(48);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 53);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader1 = new EReader(dataInputStream0, (EWrapper) null, 2974);
      assertNotNull(eReader1);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(eReader1.equals((Object)eReader0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-23);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)54);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.readIntMax();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\uFFE9\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 3426);
      assertNotNull(pushbackInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (-636));
      assertNotNull(eReader0);
      
      EReader eReader1 = new EReader(dataInputStream0, (EWrapper) null, 139);
      assertNotNull(eReader1);
      assertFalse(eReader1.equals((Object)eReader0));
      
      try { 
        eReader1.processMsg(40);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 39);
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(39);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 5);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(56);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)57;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-1143));
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg((byte)22);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[1] = (byte)54;
      byteArray0[4] = (byte)57;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)88;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(22, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(22, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)88);
      assertNotNull(eReader0);
      assertEquals(22, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      double double0 = eReader0.readDouble();
      assertEquals(0.0, double0, 0.01);
      assertEquals(21, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      int int0 = eReader0.readIntMax();
      assertEquals(6, int0);
      assertEquals(19, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(50);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)3;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (-526));
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg((byte)3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)54);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)54);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.readIntMax();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)88;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)88);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      eReader0.run();
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      int int0 = eReader0.readIntMax();
      assertEquals(6, int0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      int int1 = EReader.SCANNER_DATA;
      assertEquals(20, int1);
      assertFalse(int1 == int0);
      
      try { 
        eReader0.processMsg(2);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)88;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)54, (byte)102, (byte)3, (byte) (-23), (byte)10, (byte)0, (byte)88}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)54, (byte)102, (byte)3, (byte) (-23), (byte)10, (byte)0, (byte)88}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)0);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)54, (byte)102, (byte)3, (byte) (-23), (byte)10, (byte)0, (byte)88}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.readBoolFromInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\uFFE96f\u0003\uFFE9
         // \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        EReader.readStr((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 34);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.readDouble();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)54);
      assertNotNull(pushbackInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper1).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper1, (byte)54);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = eReader0.processMsg(1);
      assertTrue(boolean0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 15);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = eReader0.readBoolFromInt();
      assertFalse(boolean0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-23);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)54);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = EReader.OPEN_ORDER_END;
      assertEquals(53, int0);
      
      // Undeclared exception!
      try { 
        eReader0.readDoubleMax();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 5327);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.processMsg(25);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      DataInputStream dataInputStream0 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(464, 1123, 16, 1123, 24).when(dataInputStream0).read();
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      assertNotNull(dataInputStream1);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      int int0 = 11;
      EReader eReader0 = new EReader(dataInputStream1, eWrapper0, 11);
      assertNotNull(eReader0);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      // Undeclared exception!
      eReader0.readIntMax();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-33);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)126, (byte)127, (byte) (-33), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)126, (byte)127, (byte) (-33), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 28);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)126, (byte)127, (byte) (-33), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.readLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"~\uFFDF\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)54;
      byteArray0[4] = (byte)57;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)0);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = eReader0.readBoolFromInt();
      assertFalse(boolean0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg((byte)57);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)88;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)102, (byte)3, (byte)57, (byte)10, (byte)0, (byte)88}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)102, (byte)3, (byte)57, (byte)10, (byte)0, (byte)88}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)88);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)102, (byte)3, (byte)57, (byte)10, (byte)0, (byte)88}, byteArray0);
      
      double double0 = eReader0.readDoubleMax();
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)102, (byte)3, (byte)57, (byte)10, (byte)0, (byte)88}, byteArray0);
      
      int int0 = eReader0.readInt();
      assertEquals(0, int0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)102, (byte)3, (byte)57, (byte)10, (byte)0, (byte)88}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 19);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader1 = new EReader(dataInputStream0, (EWrapper) null, 4);
      assertNotNull(eReader1);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(eReader1.equals((Object)eReader0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      assertNotNull(dataInputStream1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      DataInputStream dataInputStream2 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream2);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream2.equals((Object)dataInputStream0));
      assertFalse(dataInputStream2.equals((Object)dataInputStream1));
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-15);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)46, (byte) (-15)}, byteArray0);
      
      DataInputStream dataInputStream3 = new DataInputStream(dataInputStream0);
      assertNotNull(dataInputStream3);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream2));
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertFalse(dataInputStream3.equals((Object)dataInputStream0));
      assertFalse(dataInputStream3.equals((Object)dataInputStream1));
      assertFalse(dataInputStream3.equals((Object)dataInputStream2));
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte) (-15));
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream3));
      assertFalse(dataInputStream0.equals((Object)dataInputStream2));
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      
      try { 
        eReader0.processMsg((byte)46);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream1 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      int int0 = 30;
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 30);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      
      EReader eReader1 = new EReader(dataInputStream0, (EWrapper) null, 18);
      assertNotNull(eReader1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertFalse(eReader1.equals((Object)eReader0));
      
      EClientErrors.CodeMsgPair eClientErrors_CodeMsgPair0 = new EClientErrors.CodeMsgPair(0, "");
      assertNotNull(eClientErrors_CodeMsgPair0);
      assertEquals("", eClientErrors_CodeMsgPair0.msg());
      assertEquals(0, eClientErrors_CodeMsgPair0.code());
      
      EException eException0 = eReader1.createEException(18, eClientErrors_CodeMsgPair0);
      assertNotNull(eException0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("", eClientErrors_CodeMsgPair0.msg());
      assertEquals(0, eClientErrors_CodeMsgPair0.code());
      assertEquals(0, eException0.getErrorCode());
      assertEquals(18, eException0.getId());
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertFalse(eReader1.equals((Object)eReader0));
      assertEquals((-1), EException.NO_VALID_CODE);
      assertNotSame(dataInputStream0, dataInputStream1);
      assertNotSame(eReader1, eReader0);
      
      // Undeclared exception!
      try { 
        eReader1.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 17);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 49);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, 49);
      assertNotNull(eReader1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      try { 
        eReader0.processMsg(56);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream1 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream1);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      DataInputStream dataInputStream2 = new DataInputStream(dataInputStream1);
      assertNotNull(dataInputStream2);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertFalse(dataInputStream2.equals((Object)dataInputStream0));
      assertFalse(dataInputStream2.equals((Object)dataInputStream1));
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 19);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream2));
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      
      try { 
        eReader0.processMsg(19);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)57;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream1, eWrapper1, (-553));
      assertNotNull(eReader0);
      
      eReader0.stop();
      eReader0.run();
      try { 
        eReader0.processMsg(37);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)102;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14, (byte)15, (byte)14, (byte)106, (byte) (-123), (byte) (-18), (byte)0, (byte)0, (byte)102}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14, (byte)15, (byte)14, (byte)106, (byte) (-123), (byte) (-18), (byte)0, (byte)0, (byte)102}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 1049);
      assertNotNull(eReader0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14, (byte)15, (byte)14, (byte)106, (byte) (-123), (byte) (-18), (byte)0, (byte)0, (byte)102}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.readDoubleMax();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 0);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.readStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 30);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.processMsg(30);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)88;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)102, (byte)3, (byte)57, (byte)10, (byte)0, (byte)88}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)102, (byte)3, (byte)57, (byte)10, (byte)0, (byte)88}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)88);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)102, (byte)3, (byte)57, (byte)10, (byte)0, (byte)88}, byteArray0);
      
      int int0 = eReader0.readIntMax();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)102, (byte)3, (byte)57, (byte)10, (byte)0, (byte)88}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.readDoubleMax();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)54;
      byteArray0[4] = (byte)57;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 2026);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = eReader0.processMsg((byte)57);
      assertTrue(boolean0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 15);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        eReader0.processMsg(34);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)102;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 27, (byte)54);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-19), byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)102, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals((-19), byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)102, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)54);
      assertNotNull(eReader0);
      assertEquals((-19), byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)102, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      eReader0.stop();
      assertEquals((-19), byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)102, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      eReader0.run();
      assertEquals((-19), byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)102, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        eReader0.readStr();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)54;
      byteArray0[4] = (byte)57;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)57);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg((byte)54);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 15);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = eReader0.readIntMax();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = eReader0.readBoolFromInt();
      assertTrue(boolean0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream1 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      long long0 = pipedInputStream0.skip(0L);
      assertEquals(0L, long0);
      assertEquals(0, pipedInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 30);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      
      try { 
        eReader0.processMsg(38);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream1 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 30);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      
      try { 
        eReader0.processMsg(30);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper1, (byte)13);
      assertNotNull(eReader0);
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      
      try { 
        eReader0.processMsg(43);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 1449);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.readBoolFromInt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)8);
      assertNotNull(eReader0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg((byte)8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 30);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.readInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      File file0 = MockFile.createTempFile("qa<R>", (String) null);
      assertNotNull(file0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/qa<R>0.tmp", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals("qa<R>0.tmp", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      assertNotNull(dataInputStream0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/qa<R>0.tmp", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals("qa<R>0.tmp", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0, mockFileInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 2);
      assertNotNull(eReader0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/qa<R>0.tmp", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals("qa<R>0.tmp", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0, mockFileInputStream0.available());
      
      try { 
        eReader0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)64;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)43, (byte)56, (byte) (-10), (byte) (-40), (byte)64}, byteArray0);
      
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      assertNotNull(dataInputStream1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte) (-40));
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      
      try { 
        eReader0.processMsg(27);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)88;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)102, (byte)3, (byte)57, (byte)10, (byte)0, (byte)88}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)102, (byte)3, (byte)57, (byte)10, (byte)0, (byte)88}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)88);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)102, (byte)3, (byte)57, (byte)10, (byte)0, (byte)88}, byteArray0);
      
      double double0 = eReader0.readDoubleMax();
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)102, (byte)3, (byte)57, (byte)10, (byte)0, (byte)88}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.readInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"6f\u00039
         // \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 15);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream1 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream1);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)43;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-19), (byte)12, (byte)12, (byte)43, (byte)43, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream2 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream2);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(dataInputStream2.equals((Object)dataInputStream1));
      assertFalse(dataInputStream2.equals((Object)dataInputStream0));
      assertArrayEquals(new byte[] {(byte) (-19), (byte)12, (byte)12, (byte)43, (byte)43, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream1, (EWrapper) null, (byte)43);
      assertNotNull(eReader0);
      assertFalse(dataInputStream1.equals((Object)dataInputStream2));
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      try { 
        eReader0.processMsg((byte)12);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[1] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(11, byteArrayInputStream0.available());
      assertEquals(11, byteArray0.length);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(11, byteArrayInputStream0.available());
      assertEquals(11, byteArray0.length);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 356);
      assertNotNull(eReader0);
      assertEquals(11, byteArrayInputStream0.available());
      assertEquals(11, byteArray0.length);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 39);
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg((-153));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 603);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.processMsg(603);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      DataInputStream dataInputStream0 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(27, 27, 27, 27, 8).when(dataInputStream0).read();
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      assertNotNull(dataInputStream1);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      EReader eReader0 = new EReader(dataInputStream1, eWrapper0, 11);
      assertNotNull(eReader0);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      // Undeclared exception!
      eReader0.processMsg(11);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      assertNotNull(dataInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 14);
      assertNotNull(eReader0);
      assertFalse(fileDescriptor0.valid());
      
      try { 
        eReader0.processMsg(3829);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 5);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        eReader0.processMsg(5);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream1 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)46);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      
      try { 
        eReader0.processMsg((byte)46);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[1] = (byte)54;
      byteArray0[4] = (byte)57;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)88;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(22, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(22, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)88);
      assertNotNull(eReader0);
      assertEquals(22, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      double double0 = eReader0.readDouble();
      assertEquals(0.0, double0, 0.01);
      assertEquals(21, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      int int0 = eReader0.readIntMax();
      assertEquals(6, int0);
      assertEquals(19, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      double double1 = eReader0.readDoubleMax();
      assertEquals(1.7976931348623157E308, double1, 0.01);
      assertEquals(18, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      assertNotEquals(double1, double0, 0.01);
      
      boolean boolean0 = eReader0.processMsg(6);
      assertTrue(boolean0);
      assertEquals(11, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream1 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      try { 
        EReader.readStr(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)54);
      assertNotNull(pushbackInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)54);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double double0 = eReader0.readDouble();
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = eReader0.readIntMax();
      assertEquals(6, int0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double double1 = eReader0.readDoubleMax();
      assertEquals(1.7976931348623157E308, double1, 0.01);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        eReader0.processMsg(56);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)54;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)88;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)54, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)54, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)88);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)54, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      eReader0.stop();
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)54, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      eReader0.run();
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)54, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream1, eWrapper1, (-532));
      assertNotNull(eReader1);
      assertFalse(eReader1.equals((Object)eReader0));
      
      eReader1.stop();
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotSame(eReader1, eReader0);
      
      eReader1.run();
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotSame(eReader1, eReader0);
      
      try { 
        eReader1.processMsg(41);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 19);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      long long0 = eReader0.readLong();
      assertEquals(0L, long0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean3 = eReader0.processMsg(4);
      assertTrue(boolean3);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      boolean boolean4 = eReader0.processMsg(55);
      assertTrue(boolean4);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = eReader0.readInt();
      assertEquals(0, int0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 47);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        eReader0.processMsg(18);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[1] = (byte)54;
      byteArray0[4] = (byte)57;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)88;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(22, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(22, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn("").when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)88);
      assertNotNull(eReader0);
      assertEquals(22, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      double double0 = eReader0.readDouble();
      assertEquals(0.0, double0, 0.01);
      assertEquals(21, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      int int0 = eReader0.readIntMax();
      assertEquals(6, int0);
      assertEquals(19, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      double double1 = dataInputStream0.readDouble();
      assertEquals(1.3906714533414221E-307, double1, 0.01);
      assertEquals(11, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      assertEquals(double1, double0, 0.01);
      
      boolean boolean0 = eReader0.processMsg(50);
      assertTrue(boolean0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      double double2 = eReader0.readDouble();
      assertEquals(0.0, double2, 0.01);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 49);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.processMsg(35);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-902));
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.readStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      DataInputStream dataInputStream0 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = 33;
      EReader eReader0 = new EReader(dataInputStream0, eWrapper1, 33);
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(33);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream1);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 39);
      assertNotNull(eReader0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(45);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byte byte0 = (byte)54;
      byteArray0[1] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(11, byteArrayInputStream0.available());
      assertEquals(11, byteArray0.length);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(11, byteArrayInputStream0.available());
      assertEquals(11, byteArray0.length);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 15);
      assertNotNull(eReader0);
      assertEquals(11, byteArrayInputStream0.available());
      assertEquals(11, byteArray0.length);
      
      int int0 = eReader0.readIntMax();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(11, byteArray0.length);
      
      // Undeclared exception!
      try { 
        eReader0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(30);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 541);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.processMsg(13);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 19);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.processMsg(1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)54;
      byteArray0[4] = (byte)57;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream1);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream2 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream2);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(dataInputStream2.equals((Object)dataInputStream0));
      assertFalse(dataInputStream2.equals((Object)dataInputStream1));
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream2, eWrapper0, (-3078));
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(dataInputStream2.equals((Object)dataInputStream0));
      assertFalse(dataInputStream2.equals((Object)dataInputStream1));
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = eReader0.readIntMax();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(dataInputStream2.equals((Object)dataInputStream0));
      assertFalse(dataInputStream2.equals((Object)dataInputStream1));
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(dataInputStream2, dataInputStream0);
      assertNotSame(dataInputStream2, dataInputStream1);
      
      try { 
        eReader0.processMsg(7);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream1 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 31);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      
      try { 
        eReader0.processMsg(6);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)3);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = eReader0.readBoolFromInt();
      assertFalse(boolean1);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        eReader0.processMsg(13);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      assertNotNull(dataInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 30);
      assertNotNull(eReader0);
      assertFalse(fileDescriptor0.valid());
      
      try { 
        eReader0.processMsg(10);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream1);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream1, (EWrapper) null, (-1028));
      assertNotNull(eReader0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = eReader0.readIntMax();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(dataInputStream1, dataInputStream0);
      
      // Undeclared exception!
      try { 
        EReader.readInt(dataInputStream1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\b\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)8);
      assertNotNull(eReader0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = eReader0.processMsg((byte)8);
      assertTrue(boolean0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = eReader0.readBoolFromInt();
      assertFalse(boolean1);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      
      try { 
        EReader.readStr(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)54;
      byteArray0[4] = (byte)57;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EWrapper eWrapper0 = null;
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)0);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = eReader0.readIntMax();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double double0 = eReader0.readDoubleMax();
      assertEquals(6.0, double0, 0.01);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = eReader0.readBoolFromInt();
      assertFalse(boolean0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)57;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 15);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        eReader0.processMsg(36);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)57);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.processMsg((byte)57);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)54;
      byteArray0[4] = (byte)57;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)0);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = eReader0.readIntMax();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 49);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.processMsg(49);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[1] = (byte)54;
      byteArray0[4] = (byte)57;
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)88;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(22, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(22, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)88);
      assertNotNull(eReader0);
      assertEquals(22, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      double double0 = eReader0.readDouble();
      assertEquals(0.0, double0, 0.01);
      assertEquals(21, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      int int0 = eReader0.readIntMax();
      assertEquals(6, int0);
      assertEquals(19, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      double double1 = eReader0.readDoubleMax();
      assertEquals(1.7976931348623157E308, double1, 0.01);
      assertEquals(18, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      assertNotEquals(double1, double0, 0.01);
      
      boolean boolean0 = eReader0.readBoolFromInt();
      assertTrue(boolean0);
      assertEquals(16, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      assertNotNull(dataInputStream1);
      assertEquals(16, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      String string0 = EReader.readStr(dataInputStream1);
      assertNotNull(string0);
      assertEquals("9X", string0);
      assertEquals(13, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertNotSame(dataInputStream0, dataInputStream1);
      assertNotSame(dataInputStream1, dataInputStream0);
      
      long long0 = eReader0.readLong();
      assertEquals(0L, long0);
      assertEquals(12, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertNotSame(dataInputStream0, dataInputStream1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-2174));
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = eReader0.processMsg(1);
      assertTrue(boolean1);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader1 = new EReader(dataInputStream0, (EWrapper) null, 4);
      assertNotNull(eReader1);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(eReader1.equals((Object)eReader0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      long long0 = eReader1.readLong();
      assertEquals(0L, long0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(eReader1.equals((Object)eReader0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(eReader1, eReader0);
      
      // Undeclared exception!
      try { 
        eReader1.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)54;
      byteArray0[4] = (byte)57;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)0);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = EReader.readStr(dataInputStream0);
      assertNull(string0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = eReader0.readIntMax();
      assertEquals(6, int0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = 19;
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 19);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.processMsg(32);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)54;
      byteArray0[4] = (byte)57;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 2701);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = eReader0.processMsg(49);
      assertTrue(boolean0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = eReader0.readBoolFromInt();
      assertFalse(boolean1);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)54;
      byteArray0[4] = (byte)57;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)0);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = eReader0.readIntMax();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double double0 = eReader0.readDoubleMax();
      assertEquals(6.0, double0, 0.01);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = eReader0.readBoolFromInt();
      assertFalse(boolean0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      long long0 = eReader0.readLong();
      assertEquals(9L, long0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      assertNotNull(dataInputStream1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      DataInputStream dataInputStream2 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream2);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream2.equals((Object)dataInputStream0));
      assertFalse(dataInputStream2.equals((Object)dataInputStream1));
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EReader eReader0 = new EReader(dataInputStream1, eWrapper0, 12);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream2));
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertFalse(dataInputStream1.equals((Object)dataInputStream2));
      
      try { 
        eReader0.processMsg(23);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = sequenceInputStream0.available();
      assertEquals(0, int0);
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 1153);
      assertNotNull(eReader0);
      
      eReader0.run();
      try { 
        eReader0.readDouble();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 21);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.processMsg(42);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 17);
      assertNotNull(eReader0);
      
      eReader0.stop();
      // Undeclared exception!
      try { 
        eReader0.readBoolFromInt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 19);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        eReader0.processMsg(27);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      DataInputStream dataInputStream0 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(54, 45, 54, 1255, 54).when(dataInputStream0).read();
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      assertNotNull(dataInputStream1);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      int int0 = 53;
      EReader eReader0 = new EReader(dataInputStream1, eWrapper0, 53);
      assertNotNull(eReader0);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      // Undeclared exception!
      eReader0.readBoolFromInt();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)88;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)102, (byte)3, (byte)57, (byte)10, (byte)0, (byte)88}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)102, (byte)3, (byte)57, (byte)10, (byte)0, (byte)88}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)0);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)102, (byte)3, (byte)57, (byte)10, (byte)0, (byte)88}, byteArray0);
      
      boolean boolean0 = eReader0.readBoolFromInt();
      assertFalse(boolean0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)102, (byte)3, (byte)57, (byte)10, (byte)0, (byte)88}, byteArray0);
      
      try { 
        eReader0.processMsg(916);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)54;
      byteArray0[4] = (byte)57;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)0);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = eReader0.readIntMax();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double double0 = eReader0.readDoubleMax();
      assertEquals(6.0, double0, 0.01);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        eReader0.processMsg((byte)0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 4166);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream1);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream1, (EWrapper) null, (byte)8);
      assertNotNull(eReader0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg((byte)8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 15);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = eReader0.readIntMax();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int1 = eReader0.readIntMax();
      assertEquals(Integer.MAX_VALUE, int1);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        eReader0.processMsg(Integer.MAX_VALUE);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)29);
      assertNotNull(eReader0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(46);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\b\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream1 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream1);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-19);
      EReader eReader0 = new EReader(dataInputStream1, (EWrapper) null, 26);
      assertNotNull(eReader0);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      eReader0.stop();
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertNotSame(dataInputStream1, dataInputStream0);
      
      DataInputStream dataInputStream2 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream2, eWrapper0, (-2911));
      assertNotNull(eReader1);
      assertFalse(eReader1.equals((Object)eReader0));
      
      eReader1.stop();
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotSame(eReader1, eReader0);
      
      eReader1.run();
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotSame(eReader1, eReader0);
      
      eReader1.run();
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotSame(eReader1, eReader0);
      
      try { 
        eReader1.processMsg(26);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 3);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.readDoubleMax();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = 53;
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 53);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[1] = (byte)54;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[4] = (byte)57;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)88;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(22, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(22, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)88);
      assertNotNull(eReader0);
      assertEquals(22, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      double double0 = eReader0.readDouble();
      assertEquals(0.0, double0, 0.01);
      assertEquals(21, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      int int0 = eReader0.readIntMax();
      assertEquals(6, int0);
      assertEquals(19, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      int int1 = eReader0.readInt();
      assertEquals(0, int1);
      assertEquals(18, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(50);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"X\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, (-239));
      assertNotNull(eReader0);
      
      eReader0.stop();
      // Undeclared exception!
      try { 
        eReader0.readLong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 2);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, (-1292));
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.readInt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[1] = (byte)54;
      byteArray0[4] = (byte)57;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)88;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(22, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(22, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)88);
      assertNotNull(eReader0);
      assertEquals(22, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      double double0 = eReader0.readDouble();
      assertEquals(0.0, double0, 0.01);
      assertEquals(21, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      int int0 = eReader0.readIntMax();
      assertEquals(6, int0);
      assertEquals(19, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      
      double double1 = eReader0.readDoubleMax();
      assertEquals(1.7976931348623157E308, double1, 0.01);
      assertEquals(18, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
      assertNotEquals(double1, double0, 0.01);
      
      boolean boolean0 = eReader0.readBoolFromInt();
      assertTrue(boolean0);
      assertEquals(16, byteArrayInputStream0.available());
      assertEquals(22, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      assertNotNull(dataInputStream1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      DataInputStream dataInputStream2 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream2);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream2.equals((Object)dataInputStream0));
      assertFalse(dataInputStream2.equals((Object)dataInputStream1));
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      DataInputStream dataInputStream3 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream3);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream3.equals((Object)dataInputStream0));
      assertFalse(dataInputStream3.equals((Object)dataInputStream2));
      assertFalse(dataInputStream3.equals((Object)dataInputStream1));
      
      EReader eReader0 = new EReader(dataInputStream3, (EWrapper) null, 29);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream3.equals((Object)dataInputStream0));
      assertFalse(dataInputStream3.equals((Object)dataInputStream2));
      assertFalse(dataInputStream3.equals((Object)dataInputStream1));
      
      try { 
        eReader0.processMsg(32);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)54;
      byteArray0[4] = (byte)57;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream0.mark((byte)54);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)57);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(45);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream1, eWrapper1, (byte)13);
      assertNotNull(eReader0);
      
      eReader0.stop();
      eReader0.run();
      DataInputStream dataInputStream2 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper2 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream2, eWrapper2, 18);
      assertNotNull(eReader1);
      assertFalse(eReader1.equals((Object)eReader0));
      
      eReader1.stop();
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotSame(eReader1, eReader0);
      
      eReader1.run();
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotSame(eReader1, eReader0);
      
      // Undeclared exception!
      try { 
        eReader1.processMsg(18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 49);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.processMsg(35);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 43);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 43);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.processMsg(43);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 541);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = eReader0.processMsg(13);
      assertTrue(boolean0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        eReader0.readDoubleMax();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 5);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = eReader0.readIntMax();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double double0 = eReader0.readDoubleMax();
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader1 = new EReader(dataInputStream0, (EWrapper) null, 53);
      assertNotNull(eReader1);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(eReader1.equals((Object)eReader0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader1.processMsg(53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 49);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.processMsg(50);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = dataInputStream0.readUnsignedByte();
      assertEquals(0, int0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      assertNotNull(dataInputStream1);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (-1028));
      assertNotNull(eReader0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int1 = eReader0.readIntMax();
      assertEquals(Integer.MAX_VALUE, int1);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(dataInputStream0, dataInputStream1);
      
      try { 
        eReader0.processMsg(44);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)54;
      byteArray0[4] = (byte)57;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream1);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream2 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream2);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(dataInputStream2.equals((Object)dataInputStream1));
      assertFalse(dataInputStream2.equals((Object)dataInputStream0));
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream2, eWrapper0, (-3078));
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(dataInputStream2.equals((Object)dataInputStream1));
      assertFalse(dataInputStream2.equals((Object)dataInputStream0));
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = eReader0.readIntMax();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(dataInputStream2.equals((Object)dataInputStream1));
      assertFalse(dataInputStream2.equals((Object)dataInputStream0));
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(dataInputStream2, dataInputStream1);
      assertNotSame(dataInputStream2, dataInputStream0);
      
      int int1 = dataInputStream2.readInt();
      assertEquals(905969721, int1);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(dataInputStream2.equals((Object)dataInputStream1));
      assertFalse(dataInputStream2.equals((Object)dataInputStream0));
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(dataInputStream2, dataInputStream1);
      assertNotSame(dataInputStream2, dataInputStream0);
      
      byteArrayInputStream0.reset();
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        eReader0.processMsg(7);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(30);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      assertNotNull(dataInputStream1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream1, eWrapper0, 541);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      try { 
        eReader0.processMsg(53);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)24;
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      assertNotNull(dataInputStream1);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      EReader eReader0 = new EReader((DataInputStream) null, (EWrapper) null, 512);
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg((byte)24);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)110;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)24, (byte)8, (byte)110, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream1);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertArrayEquals(new byte[] {(byte)24, (byte)8, (byte)110, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream2 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream2);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertFalse(dataInputStream2.equals((Object)dataInputStream1));
      assertFalse(dataInputStream2.equals((Object)dataInputStream0));
      assertArrayEquals(new byte[] {(byte)24, (byte)8, (byte)110, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream2, (EWrapper) null, (-1028));
      assertNotNull(eReader0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertFalse(dataInputStream2.equals((Object)dataInputStream1));
      assertFalse(dataInputStream2.equals((Object)dataInputStream0));
      assertArrayEquals(new byte[] {(byte)24, (byte)8, (byte)110, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        eReader0.processMsg((byte)29);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream1);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 37);
      assertNotNull(eReader0);
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      
      try { 
        eReader0.processMsg(45);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 49);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, 49);
      assertNotNull(eReader1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      eReader1.run();
      assertEquals(0, pipedInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      assertNotSame(eReader1, eReader0);
      
      try { 
        eReader0.processMsg(47);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      DataInputStream dataInputStream0 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(dataInputStream0).read();
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      assertNotNull(dataInputStream1);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      EReader eReader0 = new EReader(dataInputStream1, eWrapper0, 11);
      assertNotNull(eReader0);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      boolean boolean1 = eReader0.processMsg(11);
      assertTrue(boolean1);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 21);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double double0 = eReader0.readDoubleMax();
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(21);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 519);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        eReader0.processMsg(7);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 30);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.readLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream1 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 1881);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      
      try { 
        eReader0.processMsg(16);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 21);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.processMsg(21);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)88;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)88);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      eReader0.run();
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      int int0 = eReader0.readIntMax();
      assertEquals(6, int0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      int int1 = eReader0.readIntMax();
      assertEquals(Integer.MAX_VALUE, int1);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      int int2 = byteArrayInputStream0.read();
      assertEquals(57, int2);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      try { 
        eReader0.processMsg(20);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)88;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)88);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      eReader0.run();
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      int int0 = eReader0.readIntMax();
      assertEquals(6, int0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      int int1 = eReader0.readIntMax();
      assertEquals(Integer.MAX_VALUE, int1);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      boolean boolean0 = eReader0.processMsg(52);
      assertTrue(boolean0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 19);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.processMsg(4);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 1881);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.processMsg(47);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 3426);
      assertNotNull(pushbackInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (-636));
      assertNotNull(eReader0);
      
      EReader eReader1 = new EReader(dataInputStream0, (EWrapper) null, 139);
      assertNotNull(eReader1);
      assertFalse(eReader1.equals((Object)eReader0));
      
      try { 
        eReader0.processMsg(11);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-33);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)126, (byte)127, (byte) (-33)}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)126, (byte)127, (byte) (-33)}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 28);
      assertNotNull(eReader0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)126, (byte)127, (byte) (-33)}, byteArray0);
      
      try { 
        eReader0.readBoolFromInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 15);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double double0 = dataInputStream0.readDouble();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        eReader0.readIntMax();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)54;
      byteArray0[1] = (byte)54;
      byteArray0[4] = (byte)57;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)0);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = eReader0.readIntMax();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double double0 = eReader0.readDoubleMax();
      assertEquals(6.0, double0, 0.01);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = eReader0.readBoolFromInt();
      assertFalse(boolean0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertEquals(8, int0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int1 = 15;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int2 = dataInputStream0.read(byteArray0);
      assertEquals((-1), int2);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 17);
      assertNotNull(eReader0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        EReader.readInt(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 0);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double double0 = eReader0.readDouble();
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 513);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      // Undeclared exception!
      try { 
        eReader0.createEException(152, (EClientErrors.CodeMsgPair) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EException", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)57;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)88;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)88);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      int int0 = eReader0.readIntMax();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      double double0 = eReader0.readDoubleMax();
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      int int1 = eReader0.readIntMax();
      assertEquals(Integer.MAX_VALUE, int1);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      double double1 = eReader0.readDoubleMax();
      assertEquals(1.7976931348623157E308, double1, 0.01);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      int int2 = eReader0.readInt();
      assertEquals(9, int2);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
      
      eReader0.run();
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)88}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)54);
      assertNotNull(pushbackInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)54);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double double0 = eReader0.readDouble();
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = eReader0.readIntMax();
      assertEquals(6, int0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double double1 = eReader0.readDoubleMax();
      assertEquals(1.7976931348623157E308, double1, 0.01);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = eReader0.processMsg(6);
      assertTrue(boolean0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-8);
      byte byte0 = (byte) (-9);
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)51;
      byteArray0[7] = (byte) (-70);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-9), (byte)78);
      assertNotNull(byteArrayInputStream0);
      assertEquals(17, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)78, (byte) (-8), (byte) (-9), (byte)81, (byte)15, (byte)10, (byte)51, (byte) (-70)}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(17, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)78, (byte) (-8), (byte) (-9), (byte)81, (byte)15, (byte)10, (byte)51, (byte) (-70)}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte) (-70));
      assertNotNull(eReader0);
      assertEquals(17, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)78, (byte) (-8), (byte) (-9), (byte)81, (byte)15, (byte)10, (byte)51, (byte) (-70)}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.readDouble();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (-324));
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        eReader0.processMsg(47);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[1] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(11, byteArrayInputStream0.available());
      assertEquals(11, byteArray0.length);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(11, byteArrayInputStream0.available());
      assertEquals(11, byteArray0.length);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 15);
      assertNotNull(eReader0);
      assertEquals(11, byteArrayInputStream0.available());
      assertEquals(11, byteArray0.length);
      
      int int0 = eReader0.readIntMax();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(11, byteArray0.length);
      
      boolean boolean0 = eReader0.readBoolFromInt();
      assertTrue(boolean0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(11, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)0;
      DataInputStream dataInputStream0 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 1140);
      assertNotNull(eReader0);
      
      eReader0.run();
      // Undeclared exception!
      try { 
        eReader0.processMsg((byte)10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      assertNotNull(dataInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 239);
      assertNotNull(eReader0);
      assertFalse(fileDescriptor0.valid());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)36;
      EClientErrors.CodeMsgPair eClientErrors_CodeMsgPair0 = new EClientErrors.CodeMsgPair((-37), "#AYigdk+3_H=#3uX");
      assertNotNull(eClientErrors_CodeMsgPair0);
      assertEquals("#AYigdk+3_H=#3uX", eClientErrors_CodeMsgPair0.msg());
      assertEquals((-37), eClientErrors_CodeMsgPair0.code());
      
      EException eException0 = eReader0.createEException(82, eClientErrors_CodeMsgPair0);
      assertNotNull(eException0);
      assertFalse(fileDescriptor0.valid());
      assertEquals("#AYigdk+3_H=#3uX", eClientErrors_CodeMsgPair0.msg());
      assertEquals((-37), eClientErrors_CodeMsgPair0.code());
      assertEquals((-37), eException0.getErrorCode());
      assertEquals(82, eException0.getId());
      assertEquals((-1), EException.NO_VALID_CODE);
      
      byteArray0[3] = (byte)35;
      byte byte0 = (byte)11;
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)54);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)54);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.processMsg((byte)54);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 46);
      assertNotNull(eReader0);
      
      eReader0.run();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)122);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      eReader0.stop();
      assertEquals(0, pipedInputStream0.available());
      
      eReader0.run();
      assertEquals(0, pipedInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, (byte)57);
      assertNotNull(eReader1);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      try { 
        eReader1.processMsg(1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)54;
      byteArray0[4] = (byte)57;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)0);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = EReader.MANAGED_ACCTS;
      assertEquals(15, int0);
      
      int int1 = EReader.readInt(dataInputStream0);
      assertEquals(0, int1);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double double0 = eReader0.readDoubleMax();
      assertEquals(6.0, double0, 0.01);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = eReader0.readBoolFromInt();
      assertFalse(boolean0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int2 = dataInputStream0.readInt();
      assertEquals(956301312, int2);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = eReader0.processMsg((-1));
      assertFalse(boolean1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      boolean boolean0 = mockFileInputStream0.markSupported();
      assertFalse(boolean0);
      assertFalse(fileDescriptor0.valid());
      
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      assertNotNull(dataInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = (-1604);
      EReader eReader0 = new EReader(dataInputStream1, eWrapper0, (-1604));
      assertNotNull(eReader0);
      
      eReader0.run();
      // Undeclared exception!
      try { 
        eReader0.readDouble();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, Integer.MAX_VALUE);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.readBoolFromInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)3;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)88;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)102, (byte)3, (byte)0, (byte)10, (byte)0, (byte)88}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      byteArrayInputStream0.mark((byte)102);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)102, (byte)3, (byte)0, (byte)10, (byte)0, (byte)88}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)102, (byte)3, (byte)0, (byte)10, (byte)0, (byte)88}, byteArray0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)0);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)102, (byte)3, (byte)0, (byte)10, (byte)0, (byte)88}, byteArray0);
      
      boolean boolean1 = eReader0.readBoolFromInt();
      assertFalse(boolean1);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)102, (byte)3, (byte)0, (byte)10, (byte)0, (byte)88}, byteArray0);
      
      // Undeclared exception!
      try { 
        EReader.readInt(dataInputStream0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"6f\u0003\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 39);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.processMsg(39);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      assertNotNull(pipedInputStream1);
      assertEquals(0, pipedInputStream1.available());
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream1);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream1.available());
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-2853));
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream1.available());
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      
      try { 
        eReader0.processMsg(44);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 231);
      assertNotNull(eReader0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(13);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\b\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 502);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.processMsg(37);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 2428);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.processMsg(23);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)54;
      byteArray0[4] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)54, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)54, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)54);
      assertNotNull(eReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)0, (byte)54, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 376);
      // Undeclared exception!
      try { 
        eReader0.processMsg(51);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 15);
      try { 
        eReader0.processMsg(36);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)54;
      byteArray0[4] = (byte)57;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)0);
      eReader0.readIntMax();
      eReader0.readDoubleMax();
      eReader0.readStr();
      try { 
        eReader0.processMsg(Integer.MAX_VALUE);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)54;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)88;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)88);
      eReader0.run();
      eReader0.readIntMax();
      eReader0.readIntMax();
      try { 
        eReader0.processMsg(2);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 19);
      try { 
        eReader0.processMsg(19);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 15);
      EReader eReader1 = new EReader(dataInputStream0, (EWrapper) null, 15);
      // Undeclared exception!
      try { 
        eReader0.processMsg(52);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(pipedInputStream0);
      EWrapper eWrapper0 = null;
      EClientErrors.CodeMsgPair eClientErrors_CodeMsgPair0 = new EClientErrors.CodeMsgPair(1269, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      EReader eReader0 = new EReader(dataInputStream1, (EWrapper) null, (-1515));
      eReader0.createEException((-1515), eClientErrors_CodeMsgPair0);
      try { 
        eReader0.readDoubleMax();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)88;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)88);
      eReader0.readIntMax();
      // Undeclared exception!
      try { 
        eReader0.readIntMax();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"6f\u00039
         // \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 33);
      // Undeclared exception!
      try { 
        eReader0.processMsg(19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (-192));
      try { 
        eReader0.processMsg(5);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      DataInputStream dataInputStream2 = new DataInputStream(dataInputStream1);
      EReader eReader0 = new EReader(dataInputStream2, (EWrapper) null, 37);
      try { 
        eReader0.processMsg((byte)8);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)54;
      byteArray0[4] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)0);
      // Undeclared exception!
      try { 
        eReader0.processMsg(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, Integer.MAX_VALUE);
      eReader0.stop();
      eReader0.run();
      try { 
        eReader0.readStr();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EReader.readInt((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 21);
      eReader0.readDoubleMax();
      // Undeclared exception!
      try { 
        eReader0.processMsg(20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 3);
      try { 
        eReader0.readDoubleMax();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
}

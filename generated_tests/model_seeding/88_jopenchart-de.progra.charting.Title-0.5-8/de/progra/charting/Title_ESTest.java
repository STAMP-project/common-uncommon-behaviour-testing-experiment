/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 21:01:03 GMT 2019
 */

package de.progra.charting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.progra.charting.Title;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.text.AttributedCharacterIterator;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Title_ESTest extends Title_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Title title0 = new Title();
      String string0 = title0.getText();
      assertEquals("Chart Title", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Title title0 = new Title();
      title0.setText("");
      title0.getText();
      assertEquals("", title0.getText());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Title title0 = new Title();
      title0.setText("");
      title0.getPreferredSize();
      assertEquals("", title0.getText());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Title title0 = new Title();
      Font font0 = new Font("de.progra.charting.render.AbstractRenderer", (-826), (-826));
      title0.font = font0;
      Dimension dimension0 = title0.getPreferredSize();
      assertEquals((-4318), dimension0.width);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Title title0 = new Title("de.progra.charting.render.AbstractRenderer", (Font) null);
      Font font0 = title0.getFont();
      assertEquals("de.progra.charting.render.AbstractRenderer", title0.getText());
      assertNull(font0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Title title0 = new Title();
      HashMap<AttributedCharacterIterator.Attribute, Object> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, Object>();
      Font font0 = Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashMap0);
      Font font1 = font0.deriveFont(1042);
      title0.font = font1;
      Font font2 = title0.getFont();
      assertNotSame(font2, font0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Title title0 = new Title();
      TitledBorder titledBorder0 = new TitledBorder((Border) null);
      Font font0 = titledBorder0.getTitleFont();
      title0.font = font0;
      Font font1 = title0.getFont();
      assertFalse(font1.isItalic());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      Font font0 = styleContext0.getFont("", (-4980), (-4980));
      Title title0 = new Title("", font0);
      Font font1 = title0.getFont();
      assertEquals("", title0.getText());
      assertEquals((-4980), font1.getSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Title title0 = new Title();
      // Undeclared exception!
      try { 
        title0.paintDefault((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.Title", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Title title0 = new Title();
      BufferedImage bufferedImage0 = new BufferedImage(2404, 4, 4);
      title0.setText("");
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        title0.paintDefault(graphics2D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Zero length string passed to TextLayout constructor.
         //
         verifyException("java.awt.font.TextLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Title title0 = new Title((String) null);
      // Undeclared exception!
      try { 
        title0.getPreferredSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Title title0 = new Title();
      Hashtable<AttributedCharacterIterator.Attribute, String> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, String>();
      Font font0 = new Font(hashtable0);
      title0.setFont(font0);
      assertFalse(font0.hasUniformLineMetrics());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Title title0 = new Title();
      Dimension dimension0 = title0.getPreferredSize();
      assertEquals(115, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Title title0 = new Title((String) null);
      String string0 = title0.getText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Title title0 = new Title();
      BufferedImage bufferedImage0 = new BufferedImage(2404, 4, 4);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      title0.paintDefault(graphics2D0);
      assertEquals("Chart Title", title0.getText());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Font font0 = new Font("PQ$!7*42BIGh-,I~%[", 0, 0);
      Title title0 = new Title("PQ$!7*42BIGh-,I~%[", font0);
      Font font1 = title0.getFont();
      assertEquals(0.0F, font1.getSize2D(), 0.01F);
      assertEquals("PQ$!7*42BIGh-,I~%[", title0.getText());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 05 15:10:11 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.ImageProducer;
import javax.swing.Box;
import javax.swing.JLayeredPane;
import javax.swing.TransferHandler;
import jigl.image.ROI;
import jigl.image.types.ComplexImage;
import jigl.image.types.RealGrayImage;
import jigl.math.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ComplexImage_ESTest extends ComplexImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 6);
      assertNotNull(complexImage0);
      assertEquals(6, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.multiply((float) 6, (float) 0);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(6, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(6, complexImage1.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertEquals(6, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(6, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      int int0 = 2722;
      String string0 = complexImage1.toString();
      assertNotNull(string0);
      assertEquals("0:6\n0:6\n", string0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(6, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(6, complexImage1.Y());
      
      ROI rOI0 = new ROI(0, 0, 0, 2722);
      assertNotNull(rOI0);
      assertEquals(2723, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.ux();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(2723, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      int int2 = rOI0.uy();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(2723, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      assertEquals(2723, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      ComplexImage complexImage2 = complexImage1.clear();
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertEquals(6, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(6, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(6, complexImage2.Y());
      
      int int4 = rOI0.ly();
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertTrue(int4 == int0);
      assertFalse(int4 == int2);
      assertEquals(2722, int4);
      assertEquals(2723, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      RealGrayImage realGrayImage1 = complexImage1.magnitudeImage();
      assertNotNull(realGrayImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertEquals(6, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(6, complexImage1.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(6, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      
      complexImage0.subtract(complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertEquals(6, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(6, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.setReal((-183), 34, (-281.821F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      
      RealGrayImage realGrayImage0 = complexImage0.imag();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      complexImage0.setImag((RealGrayImage) null);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      RealGrayImage realGrayImage1 = complexImage1.real();
      assertNull(realGrayImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      complexImage0.add(complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      RealGrayImage realGrayImage2 = complexImage1.phaseImage();
      assertNotNull(realGrayImage2);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0, realGrayImage2.X());
      
      complexImage0.subtract(complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ROI rOI0 = new ROI((-321), (-321), (-321), 2722);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      
      int int0 = rOI0.ux();
      assertEquals((-321), int0);
      assertEquals(1, rOI0.X());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      
      int int1 = rOI0.lx();
      assertTrue(int1 == int0);
      assertEquals((-321), int1);
      assertEquals(1, rOI0.X());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      
      int int2 = rOI0.uy();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-321), int2);
      assertEquals(1, rOI0.X());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals((-321), int3);
      assertEquals(1, rOI0.X());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      
      int int4 = rOI0.ly();
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertEquals(2722, int4);
      assertEquals(1, rOI0.X());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage1.add(1, 1, (-4053.3F), (float) 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI((-321), (-321), (-321), 2722);
      assertNotNull(rOI0);
      assertEquals((-321), rOI0.lx());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.ux());
      
      int int0 = rOI0.ux();
      assertEquals((-321), int0);
      assertEquals((-321), rOI0.lx());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.ux());
      
      rOI0.setROI((-321), (-2319), (-2319), 1089);
      assertEquals((-321), rOI0.lx());
      assertEquals(3409, rOI0.Y());
      assertEquals(1999, rOI0.X());
      assertEquals(1089, rOI0.ly());
      assertEquals((-2319), rOI0.ux());
      assertEquals((-2319), rOI0.uy());
      
      Integer integer0 = new Integer((-321));
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-321), (int)integer0);
      
      int int1 = rOI0.uy();
      assertFalse(int1 == int0);
      assertEquals((-2319), int1);
      assertEquals((-321), rOI0.lx());
      assertEquals(3409, rOI0.Y());
      assertEquals(1999, rOI0.X());
      assertEquals(1089, rOI0.ly());
      assertEquals((-2319), rOI0.ux());
      assertEquals((-2319), rOI0.uy());
      
      int int2 = rOI0.ux();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-2319), int2);
      assertEquals((-321), rOI0.lx());
      assertEquals(3409, rOI0.Y());
      assertEquals(1999, rOI0.X());
      assertEquals(1089, rOI0.ly());
      assertEquals((-2319), rOI0.ux());
      assertEquals((-2319), rOI0.uy());
      
      int int3 = rOI0.ly();
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(1089, int3);
      assertEquals((-321), rOI0.lx());
      assertEquals(3409, rOI0.Y());
      assertEquals(1999, rOI0.X());
      assertEquals(1089, rOI0.ly());
      assertEquals((-2319), rOI0.ux());
      assertEquals((-2319), rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(0.0F, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ROI rOI0 = new ROI((-344), (-344), (-344), 2722);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals((-344), rOI0.lx());
      assertEquals(3067, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      assertEquals((-344), rOI0.uy());
      assertEquals((-344), rOI0.ux());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      int int0 = new Integer(2722);
      assertEquals(2722, int0);
      
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(0, (int)integer1);
      
      ComplexImage complexImage0 = new ComplexImage(2722, 2722);
      assertNotNull(complexImage0);
      assertEquals(2722, complexImage0.X());
      assertEquals(2722, complexImage0.Y());
      
      // Undeclared exception!
      complexImage0.toString();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      
      ComplexImage complexImage1 = new ComplexImage(0, 1);
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(1, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage1.multiply((float) 1, (float) 0);
      assertNotNull(complexImage2);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertEquals(1, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      RealGrayImage realGrayImage0 = complexImage1.phaseImage();
      assertNotNull(realGrayImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertEquals(1, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      complexImage0.multiply(complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      int int0 = 2722;
      ROI rOI0 = new ROI((-321), (-321), (-321), 2722);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      
      int int1 = rOI0.ux();
      assertFalse(int1 == int0);
      assertEquals((-321), int1);
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      
      int int2 = rOI0.lx();
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-321), int2);
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      
      int int3 = rOI0.uy();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-321), int3);
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertEquals((-321), int4);
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      
      int int5 = rOI0.ly();
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertTrue(int5 == int0);
      assertFalse(int5 == int4);
      assertEquals(2722, int5);
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage2.setReal(14, 34, (-281.821F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      
      // Undeclared exception!
      try { 
        complexImage0.set(7, 7, complex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 6);
      assertNotNull(complexImage0);
      assertEquals(6, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.multiply((float) 6, (float) 0);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(6, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(6, complexImage1.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertEquals(6, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(6, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      Integer integer0 = new Integer(908);
      assertNotNull(integer0);
      assertEquals(908, (int)integer0);
      
      ROI rOI0 = new ROI((-321), (-321), (-321), 2722);
      assertNotNull(rOI0);
      assertEquals((-321), rOI0.lx());
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.ux();
      assertEquals((-321), int0);
      assertEquals((-321), rOI0.lx());
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals(1, rOI0.X());
      
      ComplexImage complexImage2 = new ComplexImage();
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      
      RealGrayImage realGrayImage1 = complexImage2.real();
      assertNull(realGrayImage1);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      
      ComplexImage complexImage3 = complexImage0.diff(complexImage2);
      assertNotNull(complexImage3);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage3);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage1);
      assertEquals(6, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(6, complexImage3.Y());
      assertEquals(0, complexImage3.X());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = null;
      try {
        complexImage1 = new ComplexImage((-1080), (-1080));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.add(3, 3, (float) 3, (float) 3, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(17, 17);
      assertNotNull(complexImage0);
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage1.Y());
      assertEquals(17, complexImage1.X());
      
      complexImage1.multiply(complexImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage1.Y());
      assertEquals(17, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage2.Y());
      assertEquals(17, complexImage2.X());
      
      complexImage2.add(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage1.Y());
      assertEquals(17, complexImage1.X());
      assertEquals(17, complexImage2.Y());
      assertEquals(17, complexImage2.X());
      
      ComplexImage complexImage3 = new ComplexImage(complexImage0);
      assertNotNull(complexImage3);
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage3.X());
      assertEquals(17, complexImage3.Y());
      
      int int0 = complexImage3.Y();
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertEquals(17, int0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage3.X());
      assertEquals(17, complexImage3.Y());
      
      complexImage2.divide(complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage1, complexImage3);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage3);
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage1.Y());
      assertEquals(17, complexImage1.X());
      assertEquals(17, complexImage2.Y());
      assertEquals(17, complexImage2.X());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(1, 1);
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      RealGrayImage realGrayImage0 = complexImage1.real();
      assertNotNull(realGrayImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.subtract(complexImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(complexImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      
      complexImage0.setImag(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      
      RealGrayImage realGrayImage1 = complexImage0.imag();
      assertNotNull(realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      
      // Undeclared exception!
      try { 
        complexImage0.setImag(1071, 1071, (float) 1071, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      rOI0.setROI((-2319), 961, (-3074), 73);
      assertEquals(889, rOI0.Y());
      assertEquals(73, rOI0.uy());
      assertEquals((-2319), rOI0.lx());
      assertEquals(961, rOI0.ly());
      assertEquals(756, rOI0.X());
      assertEquals((-3074), rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(756, int0);
      assertEquals(889, rOI0.Y());
      assertEquals(73, rOI0.uy());
      assertEquals((-2319), rOI0.lx());
      assertEquals(961, rOI0.ly());
      assertEquals(756, rOI0.X());
      assertEquals((-3074), rOI0.ux());
      
      int int1 = rOI0.Y();
      assertFalse(int1 == int0);
      assertEquals(889, int1);
      assertEquals(889, rOI0.Y());
      assertEquals(73, rOI0.uy());
      assertEquals((-2319), rOI0.lx());
      assertEquals(961, rOI0.ly());
      assertEquals(756, rOI0.X());
      assertEquals((-3074), rOI0.ux());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(889, int2);
      assertEquals(889, rOI0.Y());
      assertEquals(73, rOI0.uy());
      assertEquals((-2319), rOI0.lx());
      assertEquals(961, rOI0.ly());
      assertEquals(756, rOI0.X());
      assertEquals((-3074), rOI0.ux());
      
      int int3 = rOI0.Y();
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(889, int3);
      assertEquals(889, rOI0.Y());
      assertEquals(73, rOI0.uy());
      assertEquals((-2319), rOI0.lx());
      assertEquals(961, rOI0.ly());
      assertEquals(756, rOI0.X());
      assertEquals((-3074), rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1122, 1122);
      assertNotNull(complexImage0);
      assertEquals(1122, complexImage0.Y());
      assertEquals(1122, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.getMagnitudeImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      complexImage1.multiply(complexImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      ROI rOI1 = new ROI(1, 1, 2990, 33);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(2990, rOI1.X());
      assertEquals(1, rOI1.uy());
      assertEquals(2990, rOI1.lx());
      assertEquals(33, rOI1.Y());
      assertEquals(33, rOI1.ly());
      assertEquals(1, rOI1.ux());
      
      int int0 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, int0);
      assertNotSame(rOI1, rOI0);
      assertEquals(2990, rOI1.X());
      assertEquals(1, rOI1.uy());
      assertEquals(2990, rOI1.lx());
      assertEquals(33, rOI1.Y());
      assertEquals(33, rOI1.ly());
      assertEquals(1, rOI1.ux());
      
      int int1 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertNotSame(rOI1, rOI0);
      assertEquals(2990, rOI1.X());
      assertEquals(1, rOI1.uy());
      assertEquals(2990, rOI1.lx());
      assertEquals(33, rOI1.Y());
      assertEquals(33, rOI1.ly());
      assertEquals(1, rOI1.ux());
      
      int int2 = rOI0.ly();
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      ROI rOI2 = new ROI();
      assertNotNull(rOI2);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      
      int int3 = rOI2.X();
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(1, int3);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      
      int int4 = rOI2.Y();
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertEquals(1, int4);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int4));
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int2));
      assertEquals(1, (int)integer0);
      
      complexImage0.divide(complexImage1, rOI2, rOI2);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      
      complexImage0.subtract(complexImage1, rOI2, rOI0);
      assertFalse(rOI0.equals((Object)rOI2));
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(rOI0, rOI2);
      assertNotSame(rOI0, rOI1);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      
      ComplexImage complexImage2 = complexImage1.subtract((float) 1, (float) 1);
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      
      Complex complex1 = complexImage1.min(rOI2);
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertNotSame(complex1, complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(9223372036854775807L, complex1.longValue());
      assertEquals(0.7853981633974483, complex1.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.real(), 0.01);
      assertEquals((short) (-1), complex1.shortValue());
      assertEquals(Integer.MAX_VALUE, complex1.intValue());
      assertEquals(Float.POSITIVE_INFINITY, complex1.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex1.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.magnitude(), 0.01);
      assertEquals((byte) (-1), complex1.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex1.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.doubleValue(), 0.01);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ROI rOI0 = new ROI((-344), (-344), (-344), (-344));
      assertNotNull(rOI0);
      assertEquals((-344), rOI0.lx());
      assertEquals((-344), rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals((-344), rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals((-344), rOI0.ux());
      
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(0.0F, (-149.21F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -344
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.diff((ComplexImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 1;
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      complexImage1.multiply(complexImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      // Undeclared exception!
      complexImage1.addbuffer(1697, 1697, (float) 1, 0.0F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(17, 17);
      assertNotNull(complexImage0);
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(1, int3);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.divide((-814), 17, (float) 17, 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(17, 17);
      assertNotNull(complexImage0);
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, 0, 3, 1262.7139F, (float) 3);
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage2.X());
      assertEquals(17, complexImage2.Y());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(2966, 1);
      assertNotNull(complexImage0);
      assertEquals(2966, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply((-3870.045F), 1.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      
      Complex complex1 = new Complex(complex0);
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0L, complex1.longValue());
      
      double double0 = complex1.magnitude();
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0L, complex1.longValue());
      
      // Undeclared exception!
      try { 
        complexImage0.clear(complex1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      RealGrayImage realGrayImage0 = complexImage1.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      RealGrayImage realGrayImage1 = new RealGrayImage(0, 0, floatArray0);
      assertNotNull(realGrayImage1);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      
      RealGrayImage realGrayImage2 = realGrayImage0.diff(realGrayImage1);
      assertNotNull(realGrayImage2);
      assertEquals(3, floatArray0.length);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(complexImage1, complexImage0);
      assertSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage2, realGrayImage0);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0, realGrayImage2.X());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      
      RealGrayImage realGrayImage3 = realGrayImage0.diff(realGrayImage1);
      assertNotNull(realGrayImage3);
      assertEquals(3, floatArray0.length);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(complexImage1, complexImage0);
      assertSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage0, realGrayImage3);
      assertSame(realGrayImage3, realGrayImage2);
      assertSame(realGrayImage3, realGrayImage0);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage3.X());
      assertEquals(0, realGrayImage3.Y());
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      
      complexImage0.imag = realGrayImage3;
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage3.X());
      assertEquals(0, realGrayImage3.Y());
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, complexImage0.imag.Y());
      assertEquals(0.0F, complexImage0.imag.absSum(), 0.01F);
      assertEquals(0, complexImage0.imag.X());
      assertEquals((-32768.0F), complexImage0.imag.max(), 0.01F);
      assertEquals(0.0F, complexImage0.imag.addSum(), 0.01F);
      assertEquals(0.0, complexImage0.imag.sqrSum(), 0.01);
      assertEquals(32767.0F, complexImage0.imag.min(), 0.01F);
      
      ImageProducer imageProducer0 = realGrayImage3.getJavaImage();
      assertNotNull(imageProducer0);
      assertEquals(3, floatArray0.length);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(complexImage1, complexImage0);
      assertSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage0, realGrayImage3);
      assertSame(realGrayImage3, realGrayImage2);
      assertSame(realGrayImage3, realGrayImage0);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage3.X());
      assertEquals(0, realGrayImage3.Y());
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      
      float float0 = (-1734.828F);
      // Undeclared exception!
      try { 
        complexImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 22);
      assertNotNull(complexImage0);
      assertEquals(22, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.add((float) 22, (float) 0);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(22, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(22, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      RealGrayImage realGrayImage0 = complexImage0.imaginary();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertEquals(22, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(22, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3463, 20);
      assertNotNull(complexImage0);
      assertEquals(20, complexImage0.Y());
      assertEquals(3463, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.getReal(3463, 3463, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = 1071;
      // Undeclared exception!
      try { 
        complexImage0.get(1071, 1071);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      
      ComplexImage complexImage2 = new ComplexImage(0, 1);
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertEquals(0, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      
      ComplexImage complexImage3 = complexImage2.multiply((float) 1, (float) 0);
      assertNotNull(complexImage3);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage3);
      assertSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertEquals(0, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      
      RealGrayImage realGrayImage0 = complexImage2.phaseImage();
      assertNotNull(realGrayImage0);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage3);
      assertEquals(0, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      ROI rOI0 = new ROI((-287), (-287), (-287), 2722);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(3010, rOI0.Y());
      assertEquals((-287), rOI0.uy());
      assertEquals((-287), rOI0.ux());
      assertEquals((-287), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      
      int int0 = rOI0.ux();
      assertEquals((-287), int0);
      assertEquals(1, rOI0.X());
      assertEquals(3010, rOI0.Y());
      assertEquals((-287), rOI0.uy());
      assertEquals((-287), rOI0.ux());
      assertEquals((-287), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      
      int int1 = rOI0.lx();
      assertTrue(int1 == int0);
      assertEquals((-287), int1);
      assertEquals(1, rOI0.X());
      assertEquals(3010, rOI0.Y());
      assertEquals((-287), rOI0.uy());
      assertEquals((-287), rOI0.ux());
      assertEquals((-287), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      
      int int2 = rOI0.uy();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-287), int2);
      assertEquals(1, rOI0.X());
      assertEquals(3010, rOI0.Y());
      assertEquals((-287), rOI0.uy());
      assertEquals((-287), rOI0.ux());
      assertEquals((-287), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals((-287), int3);
      assertEquals(1, rOI0.X());
      assertEquals(3010, rOI0.Y());
      assertEquals((-287), rOI0.uy());
      assertEquals((-287), rOI0.ux());
      assertEquals((-287), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      
      int int4 = new Integer((-287));
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertEquals((-287), int4);
      
      // Undeclared exception!
      try { 
        complexImage3.divide(1814, 255, (-1.0F), (float) 1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 255
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int1 = (-1926);
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ComplexImage complexImage2 = complexImage1.copy();
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      
      // Undeclared exception!
      try { 
        complexImage1.setReal((-1926), 1, (float) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      complexImage0.subtract(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = 31;
      // Undeclared exception!
      try { 
        complexImage0.getImaginary(31, (-2420));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.add((float) 13, (float) 13);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      complexImage0.multiply(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(2966, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(2966, complexImage0.X());
      
      ROI rOI0 = new ROI((-321), (-321), (-321), 2722);
      assertNotNull(rOI0);
      assertEquals((-321), rOI0.ux());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.uy());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      
      int int0 = rOI0.ux();
      assertEquals((-321), int0);
      assertEquals((-321), rOI0.ux());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.uy());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      
      int int1 = rOI0.lx();
      assertTrue(int1 == int0);
      assertEquals((-321), int1);
      assertEquals((-321), rOI0.ux());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.uy());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      
      int int2 = rOI0.uy();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-321), int2);
      assertEquals((-321), rOI0.ux());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.uy());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals((-321), int3);
      assertEquals((-321), rOI0.ux());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.uy());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      
      int int4 = rOI0.ly();
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertEquals(2722, int4);
      assertEquals((-321), rOI0.ux());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.uy());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -321
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ComplexImage complexImage1 = new ComplexImage(1, 1);
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(1, int3);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ComplexImage complexImage2 = complexImage1.addbuffer(1, 15, (-16777216), 255, (float) 15, 0.0F);
      assertNotNull(complexImage2);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(15, complexImage2.Y());
      assertEquals(1, complexImage2.X());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      complexImage0.setImag((RealGrayImage) null);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      complexImage1.real = null;
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(1, int3);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.getReal((-2524), 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      
      double double0 = complex0.real();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      
      // Undeclared exception!
      try { 
        complexImage0.set(0, 0, complex0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      
      // Undeclared exception!
      try { 
        complexImage0.max((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 22);
      assertNotNull(complexImage0);
      assertEquals(22, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(22, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(22, complexImage1.Y());
      
      complexImage0.add(complexImage0);
      assertSame(complexImage0, complexImage1);
      assertEquals(22, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Integer integer0 = new Integer(22);
      assertNotNull(integer0);
      assertEquals(22, (int)integer0);
      
      ComplexImage complexImage2 = complexImage0.add((float) 0, 0.0F);
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertEquals(22, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(22, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      ComplexImage complexImage3 = complexImage2.divide((float) 0, (float) 0);
      assertNotNull(complexImage3);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage3);
      assertSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage2);
      assertEquals(22, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(22, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage3.X());
      assertEquals(22, complexImage3.Y());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage1 = complexImage0.imaginary();
      assertNull(realGrayImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.add((-802.6822F), (-802.6822F));
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      // Undeclared exception!
      try { 
        complexImage1.multiply((-1125), 13, 0.0F, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI(132, 16, 10, 2722);
      assertNotNull(rOI0);
      assertEquals(10, rOI0.ux());
      assertEquals(132, rOI0.lx());
      assertEquals(123, rOI0.X());
      assertEquals(16, rOI0.uy());
      assertEquals(2722, rOI0.ly());
      assertEquals(2707, rOI0.Y());
      
      ROI rOI1 = new ROI((-321), (-321), (-321), 2722);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.X());
      assertEquals((-321), rOI1.lx());
      assertEquals(2722, rOI1.ly());
      assertEquals((-321), rOI1.uy());
      assertEquals(3044, rOI1.Y());
      assertEquals((-321), rOI1.ux());
      
      int int0 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals((-321), int0);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals((-321), rOI1.lx());
      assertEquals(2722, rOI1.ly());
      assertEquals((-321), rOI1.uy());
      assertEquals(3044, rOI1.Y());
      assertEquals((-321), rOI1.ux());
      
      int int1 = rOI1.lx();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int1 == int0);
      assertEquals((-321), int1);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals((-321), rOI1.lx());
      assertEquals(2722, rOI1.ly());
      assertEquals((-321), rOI1.uy());
      assertEquals(3044, rOI1.Y());
      assertEquals((-321), rOI1.ux());
      
      int int2 = rOI1.uy();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-321), int2);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals((-321), rOI1.lx());
      assertEquals(2722, rOI1.ly());
      assertEquals((-321), rOI1.uy());
      assertEquals(3044, rOI1.Y());
      assertEquals((-321), rOI1.ux());
      
      int int3 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals((-321), int3);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals((-321), rOI1.lx());
      assertEquals(2722, rOI1.ly());
      assertEquals((-321), rOI1.uy());
      assertEquals(3044, rOI1.Y());
      assertEquals((-321), rOI1.ux());
      
      int int4 = rOI1.ly();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals(2722, int4);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals((-321), rOI1.lx());
      assertEquals(2722, rOI1.ly());
      assertEquals((-321), rOI1.uy());
      assertEquals(3044, rOI1.Y());
      assertEquals((-321), rOI1.ux());
      
      int int5 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int5 == int4);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertEquals((-321), int5);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals((-321), rOI1.lx());
      assertEquals(2722, rOI1.ly());
      assertEquals((-321), rOI1.uy());
      assertEquals(3044, rOI1.Y());
      assertEquals((-321), rOI1.ux());
      
      int int6 = rOI0.lx();
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int6 == int5);
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertEquals(132, int6);
      assertNotSame(rOI0, rOI1);
      assertEquals(10, rOI0.ux());
      assertEquals(132, rOI0.lx());
      assertEquals(123, rOI0.X());
      assertEquals(16, rOI0.uy());
      assertEquals(2722, rOI0.ly());
      assertEquals(2707, rOI0.Y());
      
      int int7 = rOI1.uy();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int7 == int2);
      assertFalse(int7 == int6);
      assertFalse(int7 == int4);
      assertTrue(int7 == int3);
      assertTrue(int7 == int5);
      assertTrue(int7 == int0);
      assertTrue(int7 == int1);
      assertEquals((-321), int7);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals((-321), rOI1.lx());
      assertEquals(2722, rOI1.ly());
      assertEquals((-321), rOI1.uy());
      assertEquals(3044, rOI1.Y());
      assertEquals((-321), rOI1.ux());
      
      int int8 = rOI0.ux();
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int8 == int3);
      assertFalse(int8 == int5);
      assertFalse(int8 == int7);
      assertFalse(int8 == int0);
      assertFalse(int8 == int4);
      assertFalse(int8 == int2);
      assertFalse(int8 == int1);
      assertFalse(int8 == int6);
      assertEquals(10, int8);
      assertNotSame(rOI0, rOI1);
      assertEquals(10, rOI0.ux());
      assertEquals(132, rOI0.lx());
      assertEquals(123, rOI0.X());
      assertEquals(16, rOI0.uy());
      assertEquals(2722, rOI0.ly());
      assertEquals(2707, rOI0.Y());
      
      int int9 = rOI1.ly();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int9 == int6);
      assertFalse(int9 == int1);
      assertFalse(int9 == int0);
      assertFalse(int9 == int7);
      assertFalse(int9 == int8);
      assertTrue(int9 == int4);
      assertFalse(int9 == int2);
      assertFalse(int9 == int5);
      assertFalse(int9 == int3);
      assertEquals(2722, int9);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals((-321), rOI1.lx());
      assertEquals(2722, rOI1.ly());
      assertEquals((-321), rOI1.uy());
      assertEquals(3044, rOI1.Y());
      assertEquals((-321), rOI1.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract((float) 3, 1.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(17, 17);
      assertNotNull(complexImage0);
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage1.X());
      assertEquals(17, complexImage1.Y());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      
      ComplexImage complexImage2 = complexImage0.subtract((float) 17, (-420.231F));
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage2.Y());
      assertEquals(17, complexImage2.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(1, int3);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage1.getReal(17, 17, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(1, int3);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      
      Complex complex0 = complexImage1.min(rOI0);
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ROI rOI0 = new ROI((-344), (-344), (-344), (-344));
      assertNotNull(rOI0);
      assertEquals((-344), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-344), rOI0.ly());
      assertEquals((-344), rOI0.lx());
      assertEquals((-344), rOI0.uy());
      
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      float float0 = 0.0F;
      float float1 = (-149.21F);
      // Undeclared exception!
      try { 
        complexImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -344
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(17, 17);
      assertNotNull(complexImage0);
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage1.X());
      assertEquals(17, complexImage1.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      Complex complex0 = complexImage1.max(rOI0);
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage1.X());
      assertEquals(17, complexImage1.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      
      ComplexImage complexImage2 = complexImage1.copy(rOI0);
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage1.X());
      assertEquals(17, complexImage1.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage2.Y());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 8);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(8, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(8, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(8, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(8, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      
      ComplexImage complexImage2 = complexImage0.multiply((float) 1, 768.24713F);
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(8, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(8, complexImage2.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertEquals(8, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      complexImage2.multiply(complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(8, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(8, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage2.X());
      assertEquals(8, complexImage2.Y());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      complexImage0.subtract(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      // Undeclared exception!
      try { 
        complexImage1.divide(1201, 1201, (float) 1201, (float) 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1201
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      String string0 = complexImage0.toString(rOI0);
      assertNotNull(string0);
      assertEquals("1:1\n0.0 \n1:1\n0.0 \n", string0);
      assertSame(complexImage0, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(1, int3);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      RealGrayImage realGrayImage0 = complexImage1.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      
      int int4 = rOI0.ly();
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals(0, int4);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int5 = rOI0.uy();
      assertTrue(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertEquals(0, int5);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int5));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int4));
      assertTrue(integer0.equals((Object)int3));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int2));
      assertEquals(1, (int)integer0);
      
      Complex complex1 = complexImage1.min();
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complex1, complex0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      
      ComplexImage complexImage2 = complexImage0.multiply((-1048.072F), 445.4666F, rOI0);
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.getReal((-1898), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 14;
      ComplexImage complexImage0 = new ComplexImage(14, 14);
      assertNotNull(complexImage0);
      assertEquals(14, complexImage0.X());
      assertEquals(14, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(14, complexImage0.X());
      assertEquals(14, complexImage0.Y());
      assertEquals(14, complexImage1.X());
      assertEquals(14, complexImage1.Y());
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertEquals(14, complexImage0.X());
      assertEquals(14, complexImage0.Y());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      
      // Undeclared exception!
      try { 
        complexImage1.setReal(14, 14, (float) 14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      RealGrayImage realGrayImage0 = complexImage1.real();
      assertNull(realGrayImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      complexImage1.subtract(complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      RealGrayImage realGrayImage1 = complexImage1.real();
      assertNull(realGrayImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      // Undeclared exception!
      try { 
        complexImage0.divide(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      complexImage1.multiply(complexImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      ROI rOI1 = new ROI(1, 1, 2990, 33);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(33, rOI1.ly());
      assertEquals(2990, rOI1.X());
      assertEquals(33, rOI1.Y());
      assertEquals(1, rOI1.ux());
      assertEquals(2990, rOI1.lx());
      assertEquals(1, rOI1.uy());
      
      int int0 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, int0);
      assertNotSame(rOI1, rOI0);
      assertEquals(33, rOI1.ly());
      assertEquals(2990, rOI1.X());
      assertEquals(33, rOI1.Y());
      assertEquals(1, rOI1.ux());
      assertEquals(2990, rOI1.lx());
      assertEquals(1, rOI1.uy());
      
      int int1 = rOI1.lx();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int1 == int0);
      assertEquals(2990, int1);
      assertNotSame(rOI1, rOI0);
      assertEquals(33, rOI1.ly());
      assertEquals(2990, rOI1.X());
      assertEquals(33, rOI1.Y());
      assertEquals(1, rOI1.ux());
      assertEquals(2990, rOI1.lx());
      assertEquals(1, rOI1.uy());
      
      int int2 = rOI0.uy();
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int3 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      assertNotSame(rOI1, rOI0);
      assertEquals(33, rOI1.ly());
      assertEquals(2990, rOI1.X());
      assertEquals(33, rOI1.Y());
      assertEquals(1, rOI1.ux());
      assertEquals(2990, rOI1.lx());
      assertEquals(1, rOI1.uy());
      
      int int4 = rOI0.ly();
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int4 == int3);
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertEquals(0, int4);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      ROI rOI2 = new ROI();
      assertNotNull(rOI2);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      
      int int5 = rOI2.X();
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(int5 == int4);
      assertTrue(int5 == int0);
      assertFalse(int5 == int2);
      assertTrue(int5 == int3);
      assertFalse(int5 == int1);
      assertEquals(1, int5);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      
      int int6 = rOI2.Y();
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(int6 == int1);
      assertTrue(int6 == int5);
      assertTrue(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertTrue(int6 == int3);
      assertEquals(1, int6);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      
      int int7 = rOI2.Y();
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertTrue(int7 == int0);
      assertFalse(int7 == int2);
      assertFalse(int7 == int4);
      assertTrue(int7 == int5);
      assertTrue(int7 == int6);
      assertTrue(int7 == int3);
      assertFalse(int7 == int1);
      assertEquals(1, int7);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      
      int int8 = rOI2.Y();
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertTrue(int8 == int3);
      assertFalse(int8 == int2);
      assertFalse(int8 == int1);
      assertTrue(int8 == int5);
      assertTrue(int8 == int7);
      assertTrue(int8 == int6);
      assertFalse(int8 == int4);
      assertTrue(int8 == int0);
      assertEquals(1, int8);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      
      complexImage0.divide(complexImage1, rOI2, rOI2);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      
      complexImage0.subtract(complexImage1, rOI2, rOI0);
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(rOI0.equals((Object)rOI2));
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(rOI0, rOI1);
      assertNotSame(rOI0, rOI2);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      
      ComplexImage complexImage2 = complexImage1.subtract((float) 2722, (float) 1);
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      Complex complex0 = complexImage0.min(rOI2);
      assertNotNull(complex0);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      
      Complex complex1 = complexImage0.min(rOI0);
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(rOI0.equals((Object)rOI2));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complex1, complex0);
      assertNotSame(rOI0, rOI1);
      assertNotSame(rOI0, rOI2);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(0.7853981633974483, complex1.arg(), 0.01);
      assertEquals(9223372036854775807L, complex1.longValue());
      assertEquals((short) (-1), complex1.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, complex1.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.magnitude(), 0.01);
      assertEquals((byte) (-1), complex1.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex1.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.doubleValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex1.intValue());
      assertEquals(Double.POSITIVE_INFINITY, complex1.real(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex1.floatValue(), 0.01F);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      complexImage1.multiply(complexImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      Complex complex0 = complexImage1.max(rOI0);
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      
      Integer integer0 = new Integer((-344));
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertEquals((-344), (int)integer0);
      
      ComplexImage complexImage2 = complexImage0.subtract((float) 1, (float) (-344));
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      ImageProducer imageProducer0 = complexImage2.getJavaImage();
      assertNotNull(imageProducer0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      Complex complex1 = complexImage2.min(rOI0);
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertNotSame(complex1, complex0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(344L, complex1.longValue());
      assertEquals(344.0014534853014, complex1.magnitude(), 0.01);
      assertEquals(344.0014534853014, complex1.doubleValue(), 0.01);
      assertEquals((short)344, complex1.shortValue());
      assertEquals(344.00146F, complex1.floatValue(), 0.01F);
      assertEquals(344.0, complex1.imaginary(), 0.01);
      assertEquals(344.0, complex1.imag(), 0.01);
      assertEquals(344, complex1.intValue());
      assertEquals((-1.0), complex1.real(), 0.01);
      assertEquals((byte)88, complex1.byteValue());
      assertEquals(1.573703295350642, complex1.arg(), 0.01);
      
      Complex complex2 = complexImage2.min(rOI0);
      assertNotNull(complex2);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(344.00146F, complex2.floatValue(), 0.01F);
      assertEquals(1.573703295350642, complex2.arg(), 0.01);
      assertEquals(344L, complex2.longValue());
      assertEquals((short)344, complex2.shortValue());
      assertEquals((-1.0), complex2.real(), 0.01);
      assertEquals(344.0, complex2.imag(), 0.01);
      assertEquals((byte)88, complex2.byteValue());
      assertEquals(344.0014534853014, complex2.magnitude(), 0.01);
      assertEquals(344.0014534853014, complex2.doubleValue(), 0.01);
      assertEquals(344, complex2.intValue());
      assertEquals(344.0, complex2.imaginary(), 0.01);
      
      // Undeclared exception!
      try { 
        complexImage1.set(4060, 10, complex1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      float float0 = (-1734.828F);
      // Undeclared exception!
      try { 
        complexImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.setImag(1, 1, (-1542.028F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertEquals(1, (int)integer0);
      
      int int2 = rOI0.uy();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      
      rOI0.setROI((-425), 0, (int) integer0, 1277);
      assertFalse(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertEquals(427, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(1278, rOI0.Y());
      assertEquals((-425), rOI0.ux());
      assertEquals(1277, rOI0.ly());
      assertEquals(1, rOI0.lx());
      
      int int3 = rOI0.ux();
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals((-425), int3);
      assertEquals(427, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(1278, rOI0.Y());
      assertEquals((-425), rOI0.ux());
      assertEquals(1277, rOI0.ly());
      assertEquals(1, rOI0.lx());
      
      ComplexImage complexImage1 = complexImage0.subtract((float) 1, (float) 0);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      Integer integer1 = new Integer(1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int2));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int3));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(1, (int)integer1);
      
      Complex complex0 = complexImage1.min();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      
      // Undeclared exception!
      try { 
        complexImage1.add(complexImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 23);
      assertNotNull(complexImage0);
      assertEquals(23, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.multiply((float) 23, (float) 0);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(23, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(23, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertEquals(23, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(23, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(1, int3);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.getImag(23, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 23
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(1, int3);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int4 = rOI0.ly();
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertEquals(0, int4);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int5 = rOI0.uy();
      assertFalse(int5 == int3);
      assertTrue(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertEquals(0, int5);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int3));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int4));
      assertFalse(integer0.equals((Object)int5));
      assertTrue(integer0.equals((Object)int2));
      assertEquals(1, (int)integer0);
      
      ComplexImage complexImage2 = complexImage0.subtract((-1795.9F), (float) 1);
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      Complex complex1 = complexImage1.min(rOI0);
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complex1, complex0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1795.900331310176, complex1.magnitude(), 0.01);
      assertEquals(1795.900331310176, complex1.doubleValue(), 0.01);
      assertEquals((-5.568238114899201E-4), complex1.arg(), 0.01);
      assertEquals((-1.0), complex1.imaginary(), 0.01);
      assertEquals((-1.0), complex1.imag(), 0.01);
      assertEquals(1795.9000244140625, complex1.real(), 0.01);
      assertEquals(1795.9004F, complex1.floatValue(), 0.01F);
      assertEquals(1795, complex1.intValue());
      assertEquals((short)1795, complex1.shortValue());
      assertEquals(1795L, complex1.longValue());
      assertEquals((byte)3, complex1.byteValue());
      
      rOI0.setROI((-344), 1, 0, 4384);
      assertEquals(1, rOI0.uy());
      assertEquals(4384, rOI0.Y());
      assertEquals((-344), rOI0.ux());
      assertEquals(4384, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(345, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage1.add(3, 1, (float) 1, 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.magnitudeImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage1.setImag(1, 1, (float) 1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.subtract((float) 1094, (float) 1094);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(1, int3);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage1.add(1, 1, (float) 1, (float) 1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(1, int3);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(17, 17);
      assertNotNull(complexImage0);
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage1.X());
      assertEquals(17, complexImage1.Y());
      
      complexImage0.add(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage1.X());
      assertEquals(17, complexImage1.Y());
      
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage2.X());
      assertEquals(17, complexImage2.Y());
      
      ROI rOI0 = new ROI((-321), (-321), (-321), 2722);
      assertNotNull(rOI0);
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.ux();
      assertEquals((-321), int0);
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.lx();
      assertTrue(int1 == int0);
      assertEquals((-321), int1);
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      
      int int2 = rOI0.uy();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-321), int2);
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals((-321), int3);
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      
      int int4 = rOI0.ly();
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertEquals(2722, int4);
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage1.getImaginary(0, 14, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -307
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = (-321);
      ROI rOI0 = new ROI((-321), (-321), (-321), 2722);
      assertNotNull(rOI0);
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      
      int int1 = rOI0.ux();
      assertTrue(int1 == int0);
      assertEquals((-321), int1);
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      
      int int2 = rOI0.lx();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-321), int2);
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      
      int int3 = rOI0.uy();
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals((-321), int3);
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertEquals((-321), int4);
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      
      int int5 = rOI0.ly();
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertEquals(2722, int5);
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.add((ComplexImage) null, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(2, 2);
      assertNotNull(complexImage0);
      assertEquals(2, complexImage0.X());
      assertEquals(2, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.getImaginary(1935, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      
      // Undeclared exception!
      try { 
        complexImage0.set(16, 0, 0.0F, (float) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 0;
      int int1 = 22;
      ComplexImage complexImage0 = new ComplexImage(0, 22);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(22, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer((-1546), 0, (-1546), 0, (float) 22, (float) 22);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.divide((float) 26, (float) 26);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      int int0 = (-321);
      ROI rOI0 = new ROI((-321), (-321), (-321), 2722);
      assertNotNull(rOI0);
      assertEquals((-321), rOI0.lx());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.ux();
      assertTrue(int1 == int0);
      assertEquals((-321), int1);
      assertEquals((-321), rOI0.lx());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int2 = rOI0.lx();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-321), int2);
      assertEquals((-321), rOI0.lx());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int3 = rOI0.uy();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals((-321), int3);
      assertEquals((-321), rOI0.lx());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertEquals((-321), int4);
      assertEquals((-321), rOI0.lx());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int5 = rOI0.ly();
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertEquals(2722, int5);
      assertEquals((-321), rOI0.lx());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.add(3192.0F, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI((-321), (-321), (-321), 2722);
      assertNotNull(rOI0);
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.lx());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.ux();
      assertEquals((-321), int0);
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.lx());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.lx();
      assertTrue(int1 == int0);
      assertEquals((-321), int1);
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.lx());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int2 = rOI0.uy();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-321), int2);
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.lx());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals((-321), int3);
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.lx());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int4 = rOI0.ly();
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertEquals(2722, int4);
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.lx());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.set(3, 3, (float) 3, (float) 3, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      ComplexImage complexImage2 = complexImage1.addbuffer(0, 1686, (-1129), 18, 0.0F, 32767.0F);
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1686, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      complexImage1.subtract(complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      RealGrayImage realGrayImage0 = complexImage1.real();
      assertNull(realGrayImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      rOI0.setROI(1, 1, 1, (-3741));
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals((-3741), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(3743, rOI0.Y());
      assertEquals(1, rOI0.ux());
      
      RealGrayImage realGrayImage1 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      
      complexImage1.subtract(complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      RealGrayImage realGrayImage2 = complexImage0.real();
      assertNull(realGrayImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage1.divide(complexImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      complexImage1.multiply(complexImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      String string0 = complexImage1.toString(rOI0);
      assertNotNull(string0);
      assertEquals("1:1\n0.0 \n1:1\n0.0 \n", string0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      
      // Undeclared exception!
      try { 
        complexImage0.setImag(1107, 1107, (-285.71143F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      complexImage1.multiply(complexImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      ROI rOI1 = new ROI(1, 1, 2990, 33);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.uy());
      assertEquals(2990, rOI1.X());
      assertEquals(1, rOI1.ux());
      assertEquals(33, rOI1.Y());
      assertEquals(2990, rOI1.lx());
      assertEquals(33, rOI1.ly());
      
      int int0 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, int0);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.uy());
      assertEquals(2990, rOI1.X());
      assertEquals(1, rOI1.ux());
      assertEquals(33, rOI1.Y());
      assertEquals(2990, rOI1.lx());
      assertEquals(33, rOI1.ly());
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, (int)integer0);
      
      int int1 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.uy());
      assertEquals(2990, rOI1.X());
      assertEquals(1, rOI1.ux());
      assertEquals(33, rOI1.Y());
      assertEquals(2990, rOI1.lx());
      assertEquals(33, rOI1.ly());
      
      int int2 = rOI0.ly();
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      ROI rOI2 = new ROI();
      assertNotNull(rOI2);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      
      int int3 = rOI2.X();
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(1, int3);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      
      int int4 = rOI2.Y();
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      assertEquals(1, int4);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      
      Integer integer1 = new Integer(1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int4));
      assertTrue(integer1.equals((Object)int3));
      assertTrue(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int2));
      assertEquals(1, (int)integer1);
      
      int int5 = rOI2.Y();
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      assertEquals(1, int5);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      
      complexImage0.divide(complexImage1, rOI2, rOI2);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      
      ComplexImage complexImage2 = complexImage1.add(1744.2F, 1744.2F);
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      
      ComplexImage complexImage3 = complexImage1.divide(1744.2F, (float) 0);
      assertNotNull(complexImage3);
      assertSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage2);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 22);
      assertNotNull(complexImage0);
      assertEquals(22, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      complexImage0.add(complexImage0);
      assertEquals(22, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI((-321), (-321), (-321), 2722);
      assertNotNull(rOI0);
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.ux();
      assertEquals((-321), int0);
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.lx();
      assertTrue(int1 == int0);
      assertEquals((-321), int1);
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      
      int int2 = rOI0.uy();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-321), int2);
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals((-321), int3);
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      
      int int4 = rOI0.ly();
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertEquals(2722, int4);
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.getImag(0, (-1), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -322
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(1.0F, (float) 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      RealGrayImage realGrayImage0 = complexImage1.real();
      assertNull(realGrayImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      complexImage1.subtract(complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      RealGrayImage realGrayImage1 = complexImage0.real();
      assertNull(realGrayImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.divide(complexImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(31, 24, 24, 31, 0.0F, (float) 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = complexImage0.Y();
      assertEquals(0, int0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(23, 23);
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(23, complexImage1.X());
      assertEquals(23, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.multiply((float) 23, (float) 23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      complexImage1.multiply(complexImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      ROI rOI1 = new ROI(1, 1, 2990, 33);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(33, rOI1.ly());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(2990, rOI1.X());
      assertEquals(33, rOI1.Y());
      assertEquals(2990, rOI1.lx());
      
      int int0 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, int0);
      assertNotSame(rOI1, rOI0);
      assertEquals(33, rOI1.ly());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(2990, rOI1.X());
      assertEquals(33, rOI1.Y());
      assertEquals(2990, rOI1.lx());
      
      int int1 = rOI1.lx();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int1 == int0);
      assertEquals(2990, int1);
      assertNotSame(rOI1, rOI0);
      assertEquals(33, rOI1.ly());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(2990, rOI1.X());
      assertEquals(33, rOI1.Y());
      assertEquals(2990, rOI1.lx());
      
      int int2 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      assertNotSame(rOI1, rOI0);
      assertEquals(33, rOI1.ly());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(2990, rOI1.X());
      assertEquals(33, rOI1.Y());
      assertEquals(2990, rOI1.lx());
      
      int int3 = rOI0.ly();
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      ROI rOI2 = new ROI();
      assertNotNull(rOI2);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      
      int int4 = rOI2.X();
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertTrue(int4 == int0);
      assertFalse(int4 == int3);
      assertTrue(int4 == int2);
      assertFalse(int4 == int1);
      assertEquals(1, int4);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      
      complexImage1.setReal(0, 0, (float) 1, rOI0);
      assertFalse(rOI0.equals((Object)rOI2));
      assertFalse(rOI0.equals((Object)rOI1));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(rOI0, rOI2);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      String string0 = complexImage1.toString(rOI0);
      assertNotNull(string0);
      assertFalse(rOI0.equals((Object)rOI2));
      assertFalse(rOI0.equals((Object)rOI1));
      assertEquals("1:1\n1.0 \n1:1\n0.0 \n", string0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(rOI0, rOI2);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      Complex complex0 = complexImage1.min();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals((short)1, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(1.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)1, complex0.byteValue());
      assertEquals(1, complex0.intValue());
      assertEquals(1.0, complex0.magnitude(), 0.01);
      assertEquals(1.0, complex0.doubleValue(), 0.01);
      assertEquals(1L, complex0.longValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      
      Complex complex1 = new Complex(complex0);
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      
      double double0 = complex1.magnitude();
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      
      // Undeclared exception!
      try { 
        complexImage0.set(1081, 1081, complex1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(14, 14);
      assertNotNull(complexImage0);
      assertEquals(14, complexImage0.Y());
      assertEquals(14, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(14, complexImage0.Y());
      assertEquals(14, complexImage0.X());
      assertEquals(14, complexImage1.X());
      assertEquals(14, complexImage1.Y());
      
      int int0 = (-321);
      ROI rOI0 = new ROI((-321), (-321), (-321), 2722);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.ux());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.uy());
      
      int int1 = rOI0.ux();
      assertTrue(int1 == int0);
      assertEquals((-321), int1);
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.ux());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.uy());
      
      int int2 = rOI0.lx();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-321), int2);
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.ux());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.uy());
      
      int int3 = rOI0.uy();
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals((-321), int3);
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.ux());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.uy());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertEquals((-321), int4);
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.ux());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.uy());
      
      int int5 = rOI0.ly();
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertEquals(2722, int5);
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.ux());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.uy());
      
      int int6 = rOI0.ux();
      assertTrue(int6 == int0);
      assertTrue(int6 == int3);
      assertTrue(int6 == int1);
      assertTrue(int6 == int4);
      assertTrue(int6 == int2);
      assertFalse(int6 == int5);
      assertEquals((-321), int6);
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.ux());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.uy());
      
      int int7 = rOI0.ly();
      assertFalse(int7 == int4);
      assertFalse(int7 == int6);
      assertFalse(int7 == int0);
      assertTrue(int7 == int5);
      assertFalse(int7 == int2);
      assertFalse(int7 == int1);
      assertFalse(int7 == int3);
      assertEquals(2722, int7);
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.ux());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.uy());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      int int8 = rOI0.X();
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int8 == int3);
      assertFalse(int8 == int4);
      assertFalse(int8 == int6);
      assertFalse(int8 == int5);
      assertFalse(int8 == int2);
      assertFalse(int8 == int7);
      assertFalse(int8 == int1);
      assertFalse(int8 == int0);
      assertEquals(1, int8);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.ux());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.uy());
      
      int int9 = new Integer((-321));
      assertFalse(int9 == int7);
      assertTrue(int9 == int0);
      assertTrue(int9 == int1);
      assertTrue(int9 == int3);
      assertTrue(int9 == int6);
      assertFalse(int9 == int8);
      assertTrue(int9 == int4);
      assertFalse(int9 == int5);
      assertTrue(int9 == int2);
      assertEquals((-321), int9);
      
      int int10 = rOI0.Y();
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int10 == int8);
      assertFalse(int10 == int2);
      assertFalse(int10 == int0);
      assertFalse(int10 == int9);
      assertFalse(int10 == int1);
      assertFalse(int10 == int7);
      assertFalse(int10 == int4);
      assertFalse(int10 == int6);
      assertFalse(int10 == int3);
      assertFalse(int10 == int5);
      assertEquals(3044, int10);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.ux());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.uy());
      
      int int11 = rOI0.Y();
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int11 == int6);
      assertFalse(int11 == int9);
      assertFalse(int11 == int2);
      assertFalse(int11 == int5);
      assertFalse(int11 == int8);
      assertFalse(int11 == int0);
      assertTrue(int11 == int10);
      assertFalse(int11 == int4);
      assertFalse(int11 == int3);
      assertFalse(int11 == int7);
      assertFalse(int11 == int1);
      assertEquals(3044, int11);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.ux());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.uy());
      
      complexImage0.divide(complexImage1, rOI1, rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(rOI1, rOI0);
      assertEquals(14, complexImage0.Y());
      assertEquals(14, complexImage0.X());
      assertEquals(14, complexImage1.X());
      assertEquals(14, complexImage1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      // Undeclared exception!
      try { 
        complexImage1.subtract(complexImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      
      ComplexImage complexImage2 = new ComplexImage(0, 1);
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertEquals(1, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      ComplexImage complexImage3 = complexImage2.multiply((float) 1, (float) 0);
      assertNotNull(complexImage3);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertEquals(1, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      
      RealGrayImage realGrayImage0 = complexImage2.phaseImage();
      assertNotNull(realGrayImage0);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage3);
      assertEquals(1, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      
      complexImage0.multiply(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage3);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(0, complexImage2.X());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(18, 0, 0.0F, (float) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      complexImage0.setImag(0, 0, 1335.2F);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      
      // Undeclared exception!
      try { 
        complexImage0.getImag(1, 8, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      complexImage1.multiply(complexImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      Complex complex0 = complexImage1.max(rOI0);
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(1, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      
      complexImage1.subtract(complexImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      int int3 = complexImage1.Y();
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(1, int3);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      RealGrayImage realGrayImage1 = complexImage0.imag();
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertSame(complexImage0, complexImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(1, realGrayImage1.Y());
      assertEquals(1, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      
      ComplexImage complexImage2 = complexImage0.copy();
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      
      int int4 = rOI1.X();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertEquals(1, int4);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      
      int int5 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertEquals(1, int5);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      
      int int6 = rOI1.Y();
      assertTrue(int6 == int3);
      assertTrue(int6 == int2);
      assertTrue(int6 == int1);
      assertTrue(int6 == int5);
      assertTrue(int6 == int4);
      assertTrue(int6 == int0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      
      int int7 = rOI1.Y();
      assertTrue(int7 == int3);
      assertTrue(int7 == int6);
      assertTrue(int7 == int1);
      assertTrue(int7 == int0);
      assertTrue(int7 == int4);
      assertTrue(int7 == int5);
      assertTrue(int7 == int2);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, int7);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      
      complexImage0.divide(complexImage2, rOI1, rOI1);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(rOI1.equals((Object)rOI0));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 22);
      assertNotNull(complexImage0);
      assertEquals(22, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.add((float) 22, (float) 0);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(22, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(22, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      RealGrayImage realGrayImage0 = complexImage1.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(22, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(22, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(22, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      
      Complex complex1 = new Complex(complex0);
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      
      Complex complex2 = Complex.add(complex1, complex1);
      assertNotNull(complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      
      double double0 = complex2.real();
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      
      double double1 = complex0.magnitude();
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      
      ComplexImage complexImage2 = complexImage1.clear(complex2);
      assertNotNull(complexImage2);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(22, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(22, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0, complexImage2.X());
      assertEquals(22, complexImage2.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(0, 0, 0.0F, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI(2722, 2722, 39, (-1));
      assertNotNull(rOI0);
      assertEquals((-1), rOI0.uy());
      assertEquals(2684, rOI0.X());
      assertEquals(39, rOI0.ux());
      assertEquals(2722, rOI0.lx());
      assertEquals(2724, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      
      int int0 = rOI0.ux();
      assertEquals(39, int0);
      assertEquals((-1), rOI0.uy());
      assertEquals(2684, rOI0.X());
      assertEquals(39, rOI0.ux());
      assertEquals(2722, rOI0.lx());
      assertEquals(2724, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      
      int int1 = rOI0.lx();
      assertFalse(int1 == int0);
      assertEquals(2722, int1);
      assertEquals((-1), rOI0.uy());
      assertEquals(2684, rOI0.X());
      assertEquals(39, rOI0.ux());
      assertEquals(2722, rOI0.lx());
      assertEquals(2724, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      
      int int2 = rOI0.uy();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      assertEquals((-1), rOI0.uy());
      assertEquals(2684, rOI0.X());
      assertEquals(39, rOI0.ux());
      assertEquals(2722, rOI0.lx());
      assertEquals(2724, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      
      int int3 = rOI0.ux();
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(39, int3);
      assertEquals((-1), rOI0.uy());
      assertEquals(2684, rOI0.X());
      assertEquals(39, rOI0.ux());
      assertEquals(2722, rOI0.lx());
      assertEquals(2724, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      
      int int4 = rOI0.ly();
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertEquals(2722, int4);
      assertEquals((-1), rOI0.uy());
      assertEquals(2684, rOI0.X());
      assertEquals(39, rOI0.ux());
      assertEquals(2722, rOI0.lx());
      assertEquals(2724, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.add((float) 2722, (float) (-893), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(1, int3);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      ComplexImage complexImage1 = new ComplexImage(1, 1);
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      
      int int4 = rOI0.uy();
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertEquals(0, int4);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      rOI1.setROI(17, 1, 1, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals(17, rOI1.X());
      assertEquals(2, rOI1.Y());
      assertEquals(1, rOI1.ly());
      assertEquals(17, rOI1.lx());
      assertEquals(1, rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      int int5 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertEquals(1, int5);
      assertNotSame(rOI1, rOI0);
      assertEquals(17, rOI1.X());
      assertEquals(2, rOI1.Y());
      assertEquals(1, rOI1.ly());
      assertEquals(17, rOI1.lx());
      assertEquals(1, rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      int int6 = rOI1.ly();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int5);
      assertFalse(int6 == int4);
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      assertTrue(int6 == int2);
      assertTrue(int6 == int0);
      assertEquals(1, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(17, rOI1.X());
      assertEquals(2, rOI1.Y());
      assertEquals(1, rOI1.ly());
      assertEquals(17, rOI1.lx());
      assertEquals(1, rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      int int7 = (-2322);
      // Undeclared exception!
      try { 
        complexImage1.add(complexImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, (int)integer0);
      
      rOI0.setROI(1, (-2468), 17, 1);
      assertEquals(17, rOI0.X());
      assertEquals(1, rOI0.ux());
      assertEquals(2470, rOI0.Y());
      assertEquals((-2468), rOI0.uy());
      assertEquals(1, rOI0.ly());
      assertEquals(17, rOI0.lx());
      
      Integer integer1 = new Integer(17);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(17, (int)integer1);
      
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(2592, 2592);
      assertNotNull(complexImage0);
      assertEquals(2592, complexImage0.X());
      assertEquals(2592, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(2592, 2592, (float) 2592, (float) 2592);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2592
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = 0;
      ComplexImage complexImage1 = complexImage0.divide((float) 0, (float) 0);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      // Undeclared exception!
      try { 
        complexImage0.copy((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 2722;
      ROI rOI0 = new ROI((-344), (-344), (-344), 2722);
      assertNotNull(rOI0);
      assertEquals(2722, rOI0.ly());
      assertEquals((-344), rOI0.lx());
      assertEquals(3067, rOI0.Y());
      assertEquals((-344), rOI0.ux());
      assertEquals((-344), rOI0.uy());
      assertEquals(1, rOI0.X());
      
      Integer integer0 = new Integer(2722);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(2722, (int)integer0);
      
      int int1 = rOI0.uy();
      assertFalse(int1 == int0);
      assertEquals((-344), int1);
      assertEquals(2722, rOI0.ly());
      assertEquals((-344), rOI0.lx());
      assertEquals(3067, rOI0.Y());
      assertEquals((-344), rOI0.ux());
      assertEquals((-344), rOI0.uy());
      assertEquals(1, rOI0.X());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-344), int2);
      assertEquals(2722, rOI0.ly());
      assertEquals((-344), rOI0.lx());
      assertEquals(3067, rOI0.Y());
      assertEquals((-344), rOI0.ux());
      assertEquals((-344), rOI0.uy());
      assertEquals(1, rOI0.X());
      
      Integer integer1 = new Integer((-344));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int2));
      assertEquals((-344), (int)integer1);
      
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int3 = 0;
      // Undeclared exception!
      try { 
        complexImage0.multiply((-2063), 0, (float) 2722, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.addbuffer(2, 2966, 2966, 2, 393.0F, 4841.6F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 6);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(6, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.multiply((float) 6, (float) 0);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(6, complexImage0.Y());
      assertEquals(6, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(6, complexImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(6, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      Integer integer0 = new Integer(908);
      assertNotNull(integer0);
      assertEquals(908, (int)integer0);
      
      ROI rOI0 = new ROI((-321), (-321), (-321), 2722);
      assertNotNull(rOI0);
      assertEquals((-321), rOI0.lx());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.ly());
      
      int int0 = rOI0.ux();
      assertEquals((-321), int0);
      assertEquals((-321), rOI0.lx());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.ly());
      
      int int1 = rOI0.lx();
      assertTrue(int1 == int0);
      assertEquals((-321), int1);
      assertEquals((-321), rOI0.lx());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.ly());
      
      int int2 = rOI0.uy();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-321), int2);
      assertEquals((-321), rOI0.lx());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.ly());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals((-321), int3);
      assertEquals((-321), rOI0.lx());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.ly());
      
      int int4 = rOI0.ly();
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertEquals(2722, int4);
      assertEquals((-321), rOI0.lx());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.ly());
      
      int int5 = rOI0.uy();
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertFalse(int5 == int4);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertEquals((-321), int5);
      assertEquals((-321), rOI0.lx());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.ly());
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int3));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int5));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int4));
      assertEquals(0, (int)integer1);
      
      ComplexImage complexImage2 = complexImage1.subtract(0.0F, (-374.81F));
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(6, complexImage0.Y());
      assertEquals(6, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(6, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      // Undeclared exception!
      try { 
        complexImage1.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      ImageProducer imageProducer0 = complexImage1.getJavaImage();
      assertNotNull(imageProducer0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      Complex complex0 = complexImage1.min(rOI0);
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      
      complexImage0.divide(complexImage1, rOI0, rOI0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage1 = complexImage0.real();
      assertNull(realGrayImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      rOI0.setROI(1, (-469), (-469), 22);
      assertEquals(492, rOI0.Y());
      assertEquals(22, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals((-469), rOI0.ux());
      assertEquals((-469), rOI0.uy());
      assertEquals(471, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.divide((ComplexImage) null, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      
      ComplexImage complexImage2 = new ComplexImage(0, 1);
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertEquals(1, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      ComplexImage complexImage3 = complexImage2.multiply((float) 1, (float) 0);
      assertNotNull(complexImage3);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertEquals(1, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      RealGrayImage realGrayImage0 = complexImage1.real();
      assertNotNull(realGrayImage0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage3);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      RealGrayImage realGrayImage1 = complexImage3.imag();
      assertNotNull(realGrayImage1);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(1, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(1, int3);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int4 = rOI0.ly();
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertEquals(0, int4);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int5 = rOI0.uy();
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertTrue(int5 == int4);
      assertEquals(0, int5);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int4));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int5));
      assertTrue(integer0.equals((Object)int2));
      assertEquals(1, (int)integer0);
      
      ComplexImage complexImage2 = complexImage0.subtract((-1795.9F), (float) 1);
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      Complex complex1 = complexImage2.max();
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertNotSame(complex1, complex0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals((short)1795, complex1.shortValue());
      assertEquals(1795.9000244140625, complex1.real(), 0.01);
      assertEquals(1795, complex1.intValue());
      assertEquals(1795L, complex1.longValue());
      assertEquals((byte)3, complex1.byteValue());
      assertEquals(1795.900331310176, complex1.doubleValue(), 0.01);
      assertEquals((-1.0), complex1.imaginary(), 0.01);
      assertEquals((-1.0), complex1.imag(), 0.01);
      assertEquals(1795.9004F, complex1.floatValue(), 0.01F);
      assertEquals(1795.900331310176, complex1.magnitude(), 0.01);
      assertEquals((-5.568238114899201E-4), complex1.arg(), 0.01);
      
      Complex complex2 = complexImage1.min(rOI0);
      assertNotNull(complex2);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals((-1.0), complex2.imag(), 0.01);
      assertEquals((-1.0), complex2.imaginary(), 0.01);
      assertEquals((byte)3, complex2.byteValue());
      assertEquals(1795, complex2.intValue());
      assertEquals(1795L, complex2.longValue());
      assertEquals(1795.9000244140625, complex2.real(), 0.01);
      assertEquals(1795.9004F, complex2.floatValue(), 0.01F);
      assertEquals(1795.900331310176, complex2.doubleValue(), 0.01);
      assertEquals((short)1795, complex2.shortValue());
      assertEquals(1795.900331310176, complex2.magnitude(), 0.01);
      assertEquals((-5.568238114899201E-4), complex2.arg(), 0.01);
      
      Complex complex3 = complexImage1.min(rOI0);
      assertNotNull(complex3);
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals((short)1795, complex3.shortValue());
      assertEquals((-1.0), complex3.imag(), 0.01);
      assertEquals(1795, complex3.intValue());
      assertEquals(1795.9004F, complex3.floatValue(), 0.01F);
      assertEquals(1795.9000244140625, complex3.real(), 0.01);
      assertEquals(1795.900331310176, complex3.magnitude(), 0.01);
      assertEquals(1795.900331310176, complex3.doubleValue(), 0.01);
      assertEquals((-5.568238114899201E-4), complex3.arg(), 0.01);
      assertEquals((-1.0), complex3.imaginary(), 0.01);
      assertEquals((byte)3, complex3.byteValue());
      assertEquals(1795L, complex3.longValue());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = 1137;
      int int1 = (-2482);
      float float0 = 255.0F;
      int int2 = (-321);
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      rOI0.setROI((-161), 2321, 2722, 1137);
      assertEquals(2722, rOI0.lx());
      assertEquals(2321, rOI0.ly());
      assertEquals(2884, rOI0.X());
      assertEquals((-161), rOI0.ux());
      assertEquals(1137, rOI0.uy());
      assertEquals(1185, rOI0.Y());
      
      int int3 = rOI0.X();
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(2884, int3);
      assertEquals(2722, rOI0.lx());
      assertEquals(2321, rOI0.ly());
      assertEquals(2884, rOI0.X());
      assertEquals((-161), rOI0.ux());
      assertEquals(1137, rOI0.uy());
      assertEquals(1185, rOI0.Y());
      
      int int4 = rOI0.Y();
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertEquals(1185, int4);
      assertEquals(2722, rOI0.lx());
      assertEquals(2321, rOI0.ly());
      assertEquals(2884, rOI0.X());
      assertEquals((-161), rOI0.ux());
      assertEquals(1137, rOI0.uy());
      assertEquals(1185, rOI0.Y());
      
      int int5 = rOI0.Y();
      assertTrue(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertEquals(1185, int5);
      assertEquals(2722, rOI0.lx());
      assertEquals(2321, rOI0.ly());
      assertEquals(2884, rOI0.X());
      assertEquals((-161), rOI0.ux());
      assertEquals(1137, rOI0.uy());
      assertEquals(1185, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.getImaginary(22, 1137, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      
      ComplexImage complexImage2 = new ComplexImage(0, 1);
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertEquals(0, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      
      ComplexImage complexImage3 = complexImage2.multiply((float) 1, (float) 0);
      assertNotNull(complexImage3);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertEquals(0, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(0, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1400.0F;
      floatArray0[3] = (-1607.767F);
      floatArray0[5] = (-914.304F);
      ComplexImage complexImage4 = complexImage1.multiply(1400.0F, 0.0F);
      assertNotNull(complexImage4);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage4);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage4);
      assertNotSame(complexImage4, complexImage3);
      assertSame(complexImage4, complexImage1);
      assertSame(complexImage4, complexImage0);
      assertNotSame(complexImage4, complexImage2);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage4.Y());
      assertEquals(0, complexImage4.X());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage4);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      // Undeclared exception!
      try { 
        complexImage2.getReal(8, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      complexImage0.subtract(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(1.0F, (float) 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract((ComplexImage) null, (ROI) null, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      RealGrayImage realGrayImage1 = complexImage1.phaseImage();
      assertNotNull(realGrayImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(1, int3);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage1.add(complexImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 8);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(8, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(8, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(8, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(8, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      
      ComplexImage complexImage2 = complexImage0.multiply((float) 1, 768.24713F);
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertEquals(8, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(8, complexImage2.Y());
      
      ComplexImage complexImage3 = new ComplexImage();
      assertNotNull(complexImage3);
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertEquals(0, complexImage3.X());
      assertEquals(0, complexImage3.Y());
      
      RealGrayImage realGrayImage0 = complexImage3.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertEquals(0, complexImage3.X());
      assertEquals(0, complexImage3.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      RealGrayImage realGrayImage1 = new RealGrayImage(0, 0, floatArray0);
      assertNotNull(realGrayImage1);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      
      RealGrayImage realGrayImage2 = realGrayImage0.diff(realGrayImage1);
      assertNotNull(realGrayImage2);
      assertEquals(3, floatArray0.length);
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage2, realGrayImage0);
      assertEquals(0, complexImage3.X());
      assertEquals(0, complexImage3.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      
      RealGrayImage realGrayImage3 = realGrayImage0.diff(realGrayImage1);
      assertNotNull(realGrayImage3);
      assertEquals(3, floatArray0.length);
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertSame(realGrayImage0, realGrayImage3);
      assertSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage3, realGrayImage0);
      assertSame(realGrayImage3, realGrayImage2);
      assertEquals(0, complexImage3.X());
      assertEquals(0, complexImage3.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0, realGrayImage3.X());
      
      complexImage2.setImaginary(realGrayImage3);
      assertEquals(3, floatArray0.length);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage3);
      assertSame(complexImage2, complexImage1);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertSame(realGrayImage0, realGrayImage3);
      assertSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage3, realGrayImage0);
      assertSame(realGrayImage3, realGrayImage2);
      assertEquals(8, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(8, complexImage2.Y());
      assertEquals(0, complexImage3.X());
      assertEquals(0, complexImage3.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0, realGrayImage3.X());
      
      // Undeclared exception!
      try { 
        complexImage1.multiply(complexImage0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(12, 12);
      assertNotNull(complexImage0);
      assertEquals(12, complexImage0.X());
      assertEquals(12, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.add((float) 12, (float) 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(944, 944);
      assertNotNull(complexImage0);
      assertEquals(944, complexImage0.Y());
      assertEquals(944, complexImage0.X());
      
      // Undeclared exception!
      complexImage0.clear();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      complexImage0.add(complexImage0);
      assertSame(complexImage0, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 2461;
      int int1 = 2;
      ComplexImage complexImage0 = new ComplexImage(2461, 2);
      assertNotNull(complexImage0);
      assertEquals(2, complexImage0.Y());
      assertEquals(2461, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      RealGrayImage realGrayImage0 = complexImage1.real();
      assertNull(realGrayImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      complexImage0.setImaginary((RealGrayImage) null);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertEquals(2, complexImage0.Y());
      assertEquals(2461, complexImage0.X());
      
      int int2 = (-321);
      int int3 = 2722;
      ROI rOI0 = new ROI((-321), (-321), (-321), 2722);
      assertNotNull(rOI0);
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      
      int int4 = rOI0.ux();
      assertFalse(int4 == int3);
      assertTrue(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals((-321), int4);
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      
      int int5 = rOI0.lx();
      assertFalse(int5 == int0);
      assertTrue(int5 == int4);
      assertFalse(int5 == int3);
      assertTrue(int5 == int2);
      assertFalse(int5 == int1);
      assertEquals((-321), int5);
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      
      int int6 = rOI0.uy();
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertTrue(int6 == int5);
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertFalse(int6 == int1);
      assertEquals((-321), int6);
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      
      int int7 = rOI0.ux();
      assertFalse(int7 == int1);
      assertFalse(int7 == int3);
      assertTrue(int7 == int4);
      assertTrue(int7 == int2);
      assertTrue(int7 == int6);
      assertFalse(int7 == int0);
      assertTrue(int7 == int5);
      assertEquals((-321), int7);
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      
      int int8 = rOI0.ly();
      assertFalse(int8 == int2);
      assertFalse(int8 == int1);
      assertFalse(int8 == int0);
      assertFalse(int8 == int5);
      assertFalse(int8 == int6);
      assertFalse(int8 == int7);
      assertTrue(int8 == int3);
      assertFalse(int8 == int4);
      assertEquals(2722, int8);
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.get(2461, 2461);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2461
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      int int3 = rOI0.uy();
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int4 = rOI0.ux();
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      assertEquals(0, int4);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int5 = rOI0.ly();
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertTrue(int5 == int3);
      assertFalse(int5 == int0);
      assertTrue(int5 == int4);
      assertEquals(0, int5);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.set(1, 1, (float) (-2322), (float) 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-30000), (int)integer0);
      
      float float0 = 1112.0F;
      // Undeclared exception!
      try { 
        complexImage0.add(1112.0F, 1112.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 6);
      assertNotNull(complexImage0);
      assertEquals(6, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.multiply((float) 6, (float) 0);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(6, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(6, complexImage1.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertEquals(6, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(6, realGrayImage0.Y());
      
      int int0 = 2722;
      String string0 = complexImage1.toString();
      assertNotNull(string0);
      assertEquals("0:6\n0:6\n", string0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(6, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(6, complexImage1.Y());
      
      ROI rOI0 = new ROI(0, 0, 0, 2722);
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(2722, rOI0.ly());
      assertEquals(2723, rOI0.Y());
      
      int int1 = rOI0.ux();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(2722, rOI0.ly());
      assertEquals(2723, rOI0.Y());
      
      int int2 = rOI0.lx();
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(2722, rOI0.ly());
      assertEquals(2723, rOI0.Y());
      
      int int3 = rOI0.uy();
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(2722, rOI0.ly());
      assertEquals(2723, rOI0.Y());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals(0, int4);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(2722, rOI0.ly());
      assertEquals(2723, rOI0.Y());
      
      ComplexImage complexImage2 = complexImage1.clear();
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertEquals(6, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(6, complexImage1.Y());
      assertEquals(6, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      int int5 = rOI0.ly();
      assertFalse(int5 == int3);
      assertTrue(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertEquals(2722, int5);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(2722, rOI0.ly());
      assertEquals(2723, rOI0.Y());
      
      complexImage0.subtract(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertEquals(6, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(6, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.setReal((-183), 34, (-281.821F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      
      String string0 = complexImage0.toString();
      assertNotNull(string0);
      assertEquals("1:1\n0.0 \n1:1\n0.0 \n", string0);
      assertSame(complexImage0, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int2));
      assertEquals(1, (int)integer0);
      
      ComplexImage complexImage2 = complexImage0.subtract((float) 1, (float) 1);
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      Complex complex1 = complexImage1.min(rOI0);
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complex1, complex0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1.4142135623730951, complex1.magnitude(), 0.01);
      assertEquals(1.4142135623730951, complex1.doubleValue(), 0.01);
      assertEquals((-1.0), complex1.imaginary(), 0.01);
      assertEquals(1, complex1.intValue());
      assertEquals((-1.0), complex1.real(), 0.01);
      assertEquals((-1.0), complex1.imag(), 0.01);
      assertEquals((-2.356194490192345), complex1.arg(), 0.01);
      assertEquals(1L, complex1.longValue());
      assertEquals((short)1, complex1.shortValue());
      assertEquals((byte)1, complex1.byteValue());
      assertEquals(1.4142135F, complex1.floatValue(), 0.01F);
      
      RealGrayImage realGrayImage0 = complexImage2.imag();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals((-1.0F), realGrayImage0.addSum(), 0.01F);
      assertEquals(1.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(1.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1, realGrayImage0.Y());
      assertEquals(1, realGrayImage0.X());
      assertEquals((-1.0F), realGrayImage0.min(), 0.01F);
      assertEquals((-1.0F), realGrayImage0.max(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.imag();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      float[][] floatArray0 = new float[2][9];
      float[] floatArray1 = new float[6];
      int int0 = complexImage0.Y();
      assertEquals(0, int0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      float float0 = 1.0F;
      floatArray1[0] = 1.0F;
      floatArray1[1] = 0.0F;
      float float1 = 1400.0F;
      floatArray1[2] = 1400.0F;
      float float2 = (-1607.767F);
      // Undeclared exception!
      try { 
        complexImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 1;
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      complexImage1.multiply(complexImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage0.diff(complexImage1);
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      ROI rOI1 = new ROI(1, 1, 2990, 33);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(2990, rOI1.X());
      assertEquals(33, rOI1.ly());
      assertEquals(2990, rOI1.lx());
      assertEquals(33, rOI1.Y());
      
      int int1 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(2990, rOI1.X());
      assertEquals(33, rOI1.ly());
      assertEquals(2990, rOI1.lx());
      assertEquals(33, rOI1.Y());
      
      int int2 = rOI1.lx();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2990, int2);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(2990, rOI1.X());
      assertEquals(33, rOI1.ly());
      assertEquals(2990, rOI1.lx());
      assertEquals(33, rOI1.Y());
      
      int int3 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(1, int3);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(2990, rOI1.X());
      assertEquals(33, rOI1.ly());
      assertEquals(2990, rOI1.lx());
      assertEquals(33, rOI1.Y());
      
      int int4 = rOI0.ly();
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertEquals(0, int4);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      
      ROI rOI2 = new ROI();
      assertNotNull(rOI2);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ux());
      
      int int5 = rOI2.X();
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertEquals(1, int5);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ux());
      
      int int6 = rOI2.Y();
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertTrue(int6 == int1);
      assertFalse(int6 == int2);
      assertTrue(int6 == int0);
      assertTrue(int6 == int3);
      assertTrue(int6 == int5);
      assertFalse(int6 == int4);
      assertEquals(1, int6);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ux());
      
      int int7 = rOI2.Y();
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(int7 == int4);
      assertFalse(int7 == int2);
      assertTrue(int7 == int5);
      assertTrue(int7 == int1);
      assertTrue(int7 == int6);
      assertTrue(int7 == int3);
      assertTrue(int7 == int0);
      assertEquals(1, int7);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ux());
      
      int int8 = rOI2.Y();
      assertTrue(int8 == int7);
      assertTrue(int8 == int0);
      assertTrue(int8 == int3);
      assertFalse(int8 == int2);
      assertTrue(int8 == int1);
      assertFalse(int8 == int4);
      assertTrue(int8 == int6);
      assertTrue(int8 == int5);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertEquals(1, int8);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ux());
      
      rOI0.setROI(2990, (-701), 1, 0);
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(rOI0.equals((Object)rOI2));
      assertNotSame(rOI0, rOI1);
      assertNotSame(rOI0, rOI2);
      assertEquals(702, rOI0.Y());
      assertEquals((-701), rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(2990, rOI0.lx());
      assertEquals(1, rOI0.ux());
      assertEquals(2990, rOI0.X());
      
      complexImage0.divide(complexImage1, rOI2, rOI2);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(complexImage1, rOI2, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -701
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      
      // Undeclared exception!
      try { 
        complexImage0.setImag(1107, 1107, (-285.71143F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = 26;
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      
      int int1 = (-1044);
      int int2 = 5621;
      // Undeclared exception!
      try { 
        complexImage0.add((-1044), 5621, (-1.0F), (float) (-1044));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      float float0 = 2821.0F;
      float float1 = 1.0F;
      ComplexImage complexImage1 = complexImage0.multiply(2821.0F, 1.0F);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.diff(complexImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 6;
      ComplexImage complexImage0 = new ComplexImage(0, 6);
      assertNotNull(complexImage0);
      assertEquals(6, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.multiply((float) 6, (float) 0);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(6, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(6, complexImage1.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertEquals(6, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(6, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      ROI rOI0 = new ROI(0, 0, 0, 2722);
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(2723, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(2722, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.ux();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.lx());
      assertEquals(2723, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(2722, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      // Undeclared exception!
      try { 
        complexImage1.add(20.18F, (float) 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary((-2482), (-2482), (float) (-2482));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(7, 7);
      assertNotNull(complexImage0);
      assertEquals(7, complexImage0.X());
      assertEquals(7, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(7, complexImage0.X());
      assertEquals(7, complexImage0.Y());
      assertEquals(7, complexImage1.X());
      assertEquals(7, complexImage1.Y());
      
      complexImage1.multiply(complexImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(7, complexImage0.X());
      assertEquals(7, complexImage0.Y());
      assertEquals(7, complexImage1.X());
      assertEquals(7, complexImage1.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertEquals(7, complexImage0.X());
      assertEquals(7, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(7, realGrayImage0.Y());
      assertEquals(7, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      Complex complex0 = complexImage1.max(rOI0);
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(7, complexImage0.X());
      assertEquals(7, complexImage0.Y());
      assertEquals(7, complexImage1.X());
      assertEquals(7, complexImage1.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      
      RealGrayImage realGrayImage1 = complexImage0.real();
      assertNotNull(realGrayImage1);
      assertSame(complexImage0, complexImage1);
      assertEquals(7, complexImage0.X());
      assertEquals(7, complexImage0.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(7, realGrayImage1.X());
      assertEquals(7, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      
      complexImage1.subtract(complexImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(7, complexImage0.X());
      assertEquals(7, complexImage0.Y());
      assertEquals(7, complexImage1.X());
      assertEquals(7, complexImage1.Y());
      
      int int2 = complexImage1.Y();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(7, int2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(7, complexImage0.X());
      assertEquals(7, complexImage0.Y());
      assertEquals(7, complexImage1.X());
      assertEquals(7, complexImage1.Y());
      
      RealGrayImage realGrayImage2 = complexImage1.getMagnitudeImage();
      assertNotNull(realGrayImage2);
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertEquals(7, complexImage0.X());
      assertEquals(7, complexImage0.Y());
      assertEquals(7, complexImage1.X());
      assertEquals(7, complexImage1.Y());
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(7, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(7, realGrayImage2.X());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      
      RealGrayImage realGrayImage3 = complexImage0.imag();
      assertNotNull(realGrayImage3);
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertSame(complexImage0, complexImage1);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertEquals(7, complexImage0.X());
      assertEquals(7, complexImage0.Y());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(7, realGrayImage3.X());
      assertEquals(7, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      
      ComplexImage complexImage2 = complexImage0.copy();
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(7, complexImage0.X());
      assertEquals(7, complexImage0.Y());
      assertEquals(7, complexImage2.Y());
      assertEquals(7, complexImage2.X());
      
      int int3 = rOI0.X();
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(1, int3);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage1.set(1, (-1351), complex0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1351
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 22);
      assertNotNull(complexImage0);
      assertEquals(22, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      complexImage0.add(complexImage0);
      assertEquals(22, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ImageProducer imageProducer0 = complexImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertEquals(22, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI((-321), (-321), (-321), 2722);
      assertNotNull(rOI0);
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      
      int int0 = rOI0.ux();
      assertEquals((-321), int0);
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      
      int int1 = rOI0.lx();
      assertTrue(int1 == int0);
      assertEquals((-321), int1);
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      
      int int2 = rOI0.uy();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-321), int2);
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals((-321), int3);
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      
      int int4 = rOI0.ly();
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertEquals(2722, int4);
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(1883.0F, 32767.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -321
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI((-161), 1, (-1266), (-1266));
      assertNotNull(rOI0);
      assertEquals((-1266), rOI0.uy());
      assertEquals(1106, rOI0.X());
      assertEquals((-161), rOI0.lx());
      assertEquals(1268, rOI0.Y());
      assertEquals(1, rOI0.ly());
      assertEquals((-1266), rOI0.ux());
      
      int int0 = rOI0.ux();
      assertEquals((-1266), int0);
      assertEquals((-1266), rOI0.uy());
      assertEquals(1106, rOI0.X());
      assertEquals((-161), rOI0.lx());
      assertEquals(1268, rOI0.Y());
      assertEquals(1, rOI0.ly());
      assertEquals((-1266), rOI0.ux());
      
      rOI0.setROI(1, (-1266), 1, (-161));
      assertEquals((-1266), rOI0.uy());
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(1106, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertEquals((-161), rOI0.ly());
      
      int int1 = rOI0.lx();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals((-1266), rOI0.uy());
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(1106, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertEquals((-161), rOI0.ly());
      
      rOI0.setROI((-1170), (-1348), (-161), 1845);
      assertEquals(1845, rOI0.ly());
      assertEquals(1010, rOI0.X());
      assertEquals((-161), rOI0.lx());
      assertEquals((-1170), rOI0.ux());
      assertEquals(3194, rOI0.Y());
      assertEquals((-1348), rOI0.uy());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      
      int int2 = rOI1.X();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      
      int int3 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(1, int3);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      
      int int4 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals(1, int4);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      
      int int5 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int5 == int0);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertEquals(1, int5);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      
      rOI1.setROI((-1170), (-1), 1602, (-2751));
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals(2751, rOI1.Y());
      assertEquals((-2751), rOI1.uy());
      assertEquals(1602, rOI1.lx());
      assertEquals(2773, rOI1.X());
      assertEquals((-1170), rOI1.ux());
      assertEquals((-1), rOI1.ly());
      
      int int6 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int6 == int1);
      assertFalse(int6 == int3);
      assertFalse(int6 == int4);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int5);
      assertEquals(2751, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(2751, rOI1.Y());
      assertEquals((-2751), rOI1.uy());
      assertEquals(1602, rOI1.lx());
      assertEquals(2773, rOI1.X());
      assertEquals((-1170), rOI1.ux());
      assertEquals((-1), rOI1.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.divide(5420.0F, (float) (-1266), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 22);
      assertNotNull(complexImage0);
      assertEquals(22, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      complexImage0.divide(complexImage0);
      assertEquals(22, complexImage0.Y());
      assertEquals(0, complexImage0.X());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-30000), (int)integer0);
      
      ComplexImage complexImage2 = complexImage0.add((-32768.0F), 3002.0F, rOI0);
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.subtract((-344), (-1161), (-32768.0F), (-32768.0F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1161
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      
      // Undeclared exception!
      try { 
        complexImage0.getImaginary(16, 847, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(7, 7);
      assertNotNull(complexImage0);
      assertEquals(7, complexImage0.Y());
      assertEquals(7, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(7, complexImage0.Y());
      assertEquals(7, complexImage0.X());
      assertEquals(7, complexImage1.X());
      assertEquals(7, complexImage1.Y());
      
      complexImage1.multiply(complexImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(7, complexImage0.Y());
      assertEquals(7, complexImage0.X());
      assertEquals(7, complexImage1.X());
      assertEquals(7, complexImage1.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      
      String string0 = complexImage1.toString();
      assertNotNull(string0);
      assertEquals("7:7\n0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n7:7\n0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n", string0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(7, complexImage0.Y());
      assertEquals(7, complexImage0.X());
      assertEquals(7, complexImage1.X());
      assertEquals(7, complexImage1.Y());
      
      Complex complex0 = complexImage0.max(rOI0);
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertEquals(7, complexImage0.Y());
      assertEquals(7, complexImage0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      
      RealGrayImage realGrayImage0 = complexImage1.real();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(7, complexImage0.Y());
      assertEquals(7, complexImage0.X());
      assertEquals(7, complexImage1.X());
      assertEquals(7, complexImage1.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(7, realGrayImage0.Y());
      assertEquals(7, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      
      RealGrayImage realGrayImage1 = complexImage1.imag();
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(7, complexImage0.Y());
      assertEquals(7, complexImage0.X());
      assertEquals(7, complexImage1.X());
      assertEquals(7, complexImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(7, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(7, realGrayImage1.X());
      
      complexImage1.set(1, 1, (float) 7, (float) 7);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(7, complexImage0.Y());
      assertEquals(7, complexImage0.X());
      assertEquals(7, complexImage1.X());
      assertEquals(7, complexImage1.Y());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage1 = complexImage0.real();
      assertNull(realGrayImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.divide((ComplexImage) null, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      complexImage1.multiply(complexImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ROI rOI1 = new ROI(1, 1, 2990, 33);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(33, rOI1.ly());
      assertEquals(33, rOI1.Y());
      assertEquals(2990, rOI1.lx());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(2990, rOI1.X());
      
      int int0 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, int0);
      assertNotSame(rOI1, rOI0);
      assertEquals(33, rOI1.ly());
      assertEquals(33, rOI1.Y());
      assertEquals(2990, rOI1.lx());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(2990, rOI1.X());
      
      int int1 = rOI1.lx();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int1 == int0);
      assertEquals(2990, int1);
      assertNotSame(rOI1, rOI0);
      assertEquals(33, rOI1.ly());
      assertEquals(33, rOI1.Y());
      assertEquals(2990, rOI1.lx());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(2990, rOI1.X());
      
      int int2 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      assertNotSame(rOI1, rOI0);
      assertEquals(33, rOI1.ly());
      assertEquals(33, rOI1.Y());
      assertEquals(2990, rOI1.lx());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(2990, rOI1.X());
      
      int int3 = rOI0.ly();
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(0, int3);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage1.setReal(4, 33, (float) 0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.multiply((float) 0, (float) 0);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(663, 663);
      assertNotNull(complexImage0);
      assertEquals(663, complexImage0.Y());
      assertEquals(663, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(663, 1, (float) 663);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.set(1, 1, complex0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(1, 2, (-1.0F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.setImag(843, 843, (float) 843, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 22);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(22, complexImage0.Y());
      
      complexImage0.add(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(22, complexImage0.Y());
      
      ImageProducer imageProducer0 = complexImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertEquals(0, complexImage0.X());
      assertEquals(22, complexImage0.Y());
      
      ImageProducer imageProducer1 = complexImage0.getJavaImage();
      assertNotNull(imageProducer1);
      assertFalse(imageProducer1.equals((Object)imageProducer0));
      assertNotSame(imageProducer1, imageProducer0);
      assertEquals(0, complexImage0.X());
      assertEquals(22, complexImage0.Y());
      
      ROI rOI0 = new ROI((-321), (-321), (-321), 2722);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.uy());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      
      int int0 = rOI0.ux();
      assertEquals((-321), int0);
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.uy());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      
      int int1 = rOI0.lx();
      assertTrue(int1 == int0);
      assertEquals((-321), int1);
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.uy());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      
      int int2 = rOI0.uy();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-321), int2);
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.uy());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals((-321), int3);
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.uy());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      
      int int4 = rOI0.ly();
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals(2722, int4);
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.uy());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(1883.0F, 32767.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -321
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer((-2482), (-2482), (float) (-2482), (float) (-2482));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(1, int3);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int4 = rOI0.ly();
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertEquals(0, int4);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int5 = rOI0.Y();
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertFalse(int5 == int4);
      assertEquals(1, int5);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int6 = rOI0.Y();
      assertTrue(int6 == int5);
      assertTrue(int6 == int0);
      assertFalse(int6 == int4);
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      assertTrue(int6 == int2);
      assertEquals(1, int6);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      complexImage0.multiply(complexImage1, rOI0, rOI0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      RealGrayImage realGrayImage0 = complexImage1.imag();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(1, int3);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage1.add(complexImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3059, 3059);
      assertNotNull(complexImage0);
      assertEquals(3059, complexImage0.X());
      assertEquals(3059, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(3059, 3059);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = 14;
      ComplexImage complexImage0 = new ComplexImage(14, 14);
      assertNotNull(complexImage0);
      assertEquals(14, complexImage0.Y());
      assertEquals(14, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(14, complexImage0.Y());
      assertEquals(14, complexImage0.X());
      assertEquals(14, complexImage1.Y());
      assertEquals(14, complexImage1.X());
      
      ComplexImage complexImage2 = new ComplexImage();
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      
      RealGrayImage realGrayImage0 = complexImage2.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      RealGrayImage realGrayImage1 = new RealGrayImage(0, 0, floatArray0);
      assertNotNull(realGrayImage1);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.Y());
      
      RealGrayImage realGrayImage2 = realGrayImage0.diff(realGrayImage1);
      assertNotNull(realGrayImage2);
      assertEquals(3, floatArray0.length);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage2, realGrayImage0);
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.Y());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      
      RealGrayImage realGrayImage3 = realGrayImage0.diff(realGrayImage1);
      assertNotNull(realGrayImage3);
      assertEquals(3, floatArray0.length);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertSame(realGrayImage0, realGrayImage3);
      assertSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage3, realGrayImage2);
      assertSame(realGrayImage3, realGrayImage0);
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.Y());
      
      complexImage1.setReal(realGrayImage3);
      assertEquals(3, floatArray0.length);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertSame(realGrayImage0, realGrayImage3);
      assertSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage3, realGrayImage2);
      assertSame(realGrayImage3, realGrayImage0);
      assertEquals(14, complexImage0.Y());
      assertEquals(14, complexImage0.X());
      assertEquals(14, complexImage1.Y());
      assertEquals(14, complexImage1.X());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.min();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(12, 12);
      assertNotNull(complexImage0);
      assertEquals(12, complexImage0.Y());
      assertEquals(12, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(complexImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.divide((float) 26, (float) 26);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ROI rOI0 = new ROI((-321), (-321), (-321), 2722);
      assertNotNull(rOI0);
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      
      int int0 = rOI0.ux();
      assertEquals((-321), int0);
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      
      int int1 = rOI0.lx();
      assertTrue(int1 == int0);
      assertEquals((-321), int1);
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      
      int int2 = rOI0.uy();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-321), int2);
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals((-321), int3);
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      
      int int4 = rOI0.ly();
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertEquals(2722, int4);
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.divide(26, 294, (float) 294, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = 1;
      ComplexImage complexImage0 = new ComplexImage(1, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.setReal(0, 1, (float) 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1434, 407);
      assertNotNull(complexImage0);
      assertEquals(407, complexImage0.Y());
      assertEquals(1434, complexImage0.X());
      
      int int0 = 255;
      complexImage0.setReal(407, 255, 756.1779F);
      assertEquals(407, complexImage0.Y());
      assertEquals(1434, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.X();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      rOI0.setROI(1434, 1434, 1, 1434);
      assertEquals(1, rOI0.ux());
      assertEquals(1434, rOI0.X());
      assertEquals(1434, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1434, rOI0.ly());
      assertEquals(1434, rOI0.lx());
      
      int int2 = rOI0.Y();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      assertEquals(1, rOI0.ux());
      assertEquals(1434, rOI0.X());
      assertEquals(1434, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1434, rOI0.ly());
      assertEquals(1434, rOI0.lx());
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(1, int3);
      assertEquals(1, rOI0.ux());
      assertEquals(1434, rOI0.X());
      assertEquals(1434, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1434, rOI0.ly());
      assertEquals(1434, rOI0.lx());
      
      int int4 = rOI0.Y();
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertEquals(1, int4);
      assertEquals(1, rOI0.ux());
      assertEquals(1434, rOI0.X());
      assertEquals(1434, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1434, rOI0.ly());
      assertEquals(1434, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1434
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      complexImage0.add(complexImage0);
      assertSame(complexImage0, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      
      ComplexImage complexImage3 = complexImage2.divide((float) 1, (float) 1);
      assertNotNull(complexImage3);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      
      RealGrayImage realGrayImage0 = complexImage3.imaginary();
      assertNotNull(realGrayImage0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1, realGrayImage0.X());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI((-321), (-321), (-321), 2722);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.uy());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.ux());
      
      int int0 = rOI0.ux();
      assertEquals((-321), int0);
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.uy());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.ux());
      
      int int1 = rOI0.lx();
      assertTrue(int1 == int0);
      assertEquals((-321), int1);
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.uy());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.ux());
      
      int int2 = rOI0.uy();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-321), int2);
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.uy());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.ux());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals((-321), int3);
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.uy());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.ux());
      
      int int4 = rOI0.ly();
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertEquals(2722, int4);
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.uy());
      assertEquals(3044, rOI0.Y());
      assertEquals((-321), rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(140, 0, 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(14, 14);
      assertNotNull(complexImage0);
      assertEquals(14, complexImage0.Y());
      assertEquals(14, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(14, complexImage0.Y());
      assertEquals(14, complexImage0.X());
      assertEquals(14, complexImage1.Y());
      assertEquals(14, complexImage1.X());
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertEquals(14, complexImage0.Y());
      assertEquals(14, complexImage0.X());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      
      ComplexImage complexImage2 = complexImage1.copy();
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(14, complexImage0.Y());
      assertEquals(14, complexImage0.X());
      assertEquals(14, complexImage1.Y());
      assertEquals(14, complexImage1.X());
      assertEquals(14, complexImage2.X());
      assertEquals(14, complexImage2.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      ROI rOI1 = new ROI((-321), (-321), (-321), 2722);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.X());
      assertEquals((-321), rOI1.lx());
      assertEquals(3044, rOI1.Y());
      assertEquals(2722, rOI1.ly());
      assertEquals((-321), rOI1.ux());
      assertEquals((-321), rOI1.uy());
      
      int int3 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-321), int3);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals((-321), rOI1.lx());
      assertEquals(3044, rOI1.Y());
      assertEquals(2722, rOI1.ly());
      assertEquals((-321), rOI1.ux());
      assertEquals((-321), rOI1.uy());
      
      int int4 = rOI1.lx();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertEquals((-321), int4);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals((-321), rOI1.lx());
      assertEquals(3044, rOI1.Y());
      assertEquals(2722, rOI1.ly());
      assertEquals((-321), rOI1.ux());
      assertEquals((-321), rOI1.uy());
      
      int int5 = rOI1.uy();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int5 == int1);
      assertTrue(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertTrue(int5 == int3);
      assertEquals((-321), int5);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals((-321), rOI1.lx());
      assertEquals(3044, rOI1.Y());
      assertEquals(2722, rOI1.ly());
      assertEquals((-321), rOI1.ux());
      assertEquals((-321), rOI1.uy());
      
      int int6 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int6 == int1);
      assertTrue(int6 == int5);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertTrue(int6 == int3);
      assertTrue(int6 == int4);
      assertEquals((-321), int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals((-321), rOI1.lx());
      assertEquals(3044, rOI1.Y());
      assertEquals(2722, rOI1.ly());
      assertEquals((-321), rOI1.ux());
      assertEquals((-321), rOI1.uy());
      
      int int7 = rOI1.ly();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int7 == int2);
      assertFalse(int7 == int0);
      assertFalse(int7 == int5);
      assertFalse(int7 == int3);
      assertFalse(int7 == int4);
      assertFalse(int7 == int6);
      assertFalse(int7 == int1);
      assertEquals(2722, int7);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals((-321), rOI1.lx());
      assertEquals(3044, rOI1.Y());
      assertEquals(2722, rOI1.ly());
      assertEquals((-321), rOI1.ux());
      assertEquals((-321), rOI1.uy());
      
      // Undeclared exception!
      try { 
        complexImage2.divide(complexImage1, rOI0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -321
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage1 = complexImage0.real();
      assertNull(realGrayImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.subtract((-1192.38F), (-1192.38F));
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      rOI0.setROI(187, 187, 4183, 187);
      assertEquals(187, rOI0.uy());
      assertEquals(3997, rOI0.X());
      assertEquals(187, rOI0.ly());
      assertEquals(4183, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(187, rOI0.ux());
      
      rOI0.setROI(19, 187, 19, 19);
      assertEquals(19, rOI0.lx());
      assertEquals(169, rOI0.Y());
      assertEquals(19, rOI0.ux());
      assertEquals(19, rOI0.uy());
      assertEquals(187, rOI0.ly());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.divide((ComplexImage) null, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.setReal(1, 1, (float) 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      
      ComplexImage complexImage2 = complexImage0.multiply((float) 1, 768.24713F);
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      Complex complex1 = complexImage2.min();
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complex1, complex0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((byte)0, complex1.byteValue());
      
      RealGrayImage realGrayImage0 = complexImage2.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1, realGrayImage0.Y());
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      // Undeclared exception!
      try { 
        complexImage1.subtract(1904, 377, 0.0F, (float) 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 377
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int int0 = 2130;
      ComplexImage complexImage0 = new ComplexImage(2130, 2130);
      assertNotNull(complexImage0);
      assertEquals(2130, complexImage0.Y());
      assertEquals(2130, complexImage0.X());
      
      complexImage0.setImaginary((RealGrayImage) null);
      assertEquals(2130, complexImage0.Y());
      assertEquals(2130, complexImage0.X());
      
      ComplexImage complexImage1 = null;
      // Undeclared exception!
      complexImage0.copy();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = 13;
      ComplexImage complexImage0 = new ComplexImage(13, 13);
      assertNotNull(complexImage0);
      assertEquals(13, complexImage0.X());
      assertEquals(13, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.phaseImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      rOI0.setROI(3223, 3223, 2722, 2722);
      assertEquals(502, rOI0.Y());
      assertEquals(502, rOI0.X());
      assertEquals(2722, rOI0.ux());
      assertEquals(2722, rOI0.uy());
      assertEquals(3223, rOI0.lx());
      assertEquals(3223, rOI0.ly());
      
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(17, 17);
      assertNotNull(complexImage0);
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage1.X());
      assertEquals(17, complexImage1.Y());
      
      complexImage1.multiply(complexImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage1.X());
      assertEquals(17, complexImage1.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      
      Complex complex0 = complexImage1.max(rOI0);
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage1.X());
      assertEquals(17, complexImage1.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(17, realGrayImage0.X());
      assertEquals(17, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      
      RealGrayImage realGrayImage1 = complexImage1.imag();
      assertNotNull(realGrayImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage1.X());
      assertEquals(17, complexImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(17, realGrayImage1.Y());
      assertEquals(17, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(1, (-2704), (-811.5596F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      ComplexImage complexImage1 = new ComplexImage(1, 1);
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage1.addbuffer(1, 19, 0.0F, (-2116.27F));
      assertNotNull(complexImage2);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(19, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      RealGrayImage realGrayImage0 = complexImage1.real();
      assertNotNull(realGrayImage0);
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(546, (-204), 2602.7F, (-1.0F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(17, 17);
      assertNotNull(complexImage0);
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage1.X());
      assertEquals(17, complexImage1.Y());
      
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage2.Y());
      assertEquals(17, complexImage2.X());
      
      ROI rOI0 = new ROI((-321), (-321), (-321), 2722);
      assertNotNull(rOI0);
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      
      int int0 = rOI0.ux();
      assertEquals((-321), int0);
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      
      int int1 = rOI0.lx();
      assertTrue(int1 == int0);
      assertEquals((-321), int1);
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      
      int int2 = rOI0.uy();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-321), int2);
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals((-321), int3);
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      
      int int4 = rOI0.ly();
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertEquals(2722, int4);
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage2.subtract(complexImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      String string0 = complexImage0.toString();
      assertNotNull(string0);
      assertEquals("1:1\n0.0 \n1:1\n0.0 \n", string0);
      assertSame(complexImage0, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      int int3 = rOI0.uy();
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      ComplexImage complexImage2 = complexImage0.subtract((float) 1, (float) 1);
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      Complex complex1 = complexImage1.min(rOI0);
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complex1, complex0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1L, complex1.longValue());
      assertEquals((-1.0), complex1.real(), 0.01);
      assertEquals(1.4142135F, complex1.floatValue(), 0.01F);
      assertEquals((byte)1, complex1.byteValue());
      assertEquals((-1.0), complex1.imaginary(), 0.01);
      assertEquals(1.4142135623730951, complex1.magnitude(), 0.01);
      assertEquals(1.4142135623730951, complex1.doubleValue(), 0.01);
      assertEquals(1, complex1.intValue());
      assertEquals((-1.0), complex1.imag(), 0.01);
      assertEquals((short)1, complex1.shortValue());
      assertEquals((-2.356194490192345), complex1.arg(), 0.01);
      
      ComplexImage complexImage3 = complexImage2.divide((float) 1, (float) 1, rOI0);
      assertNotNull(complexImage3);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage3);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage3.X());
      assertEquals(1, complexImage3.Y());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage1.clear();
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      
      complexImage0.add(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      ComplexImage complexImage3 = new ComplexImage(complexImage1);
      assertNotNull(complexImage3);
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage3.Y());
      assertEquals(1, complexImage3.X());
      
      ComplexImage complexImage4 = complexImage2.divide((-237.829F), (float) 1);
      assertNotNull(complexImage4);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage4);
      assertNotSame(complexImage1, complexImage3);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage4);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage3);
      assertSame(complexImage2, complexImage4);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage4, complexImage0);
      assertSame(complexImage4, complexImage1);
      assertNotSame(complexImage4, complexImage3);
      assertSame(complexImage4, complexImage2);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage4.Y());
      assertEquals(1, complexImage4.X());
      
      ROI rOI0 = new ROI((-321), (-321), (-321), 2722);
      assertNotNull(rOI0);
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      
      int int0 = rOI0.ux();
      assertEquals((-321), int0);
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      
      int int1 = rOI0.lx();
      assertTrue(int1 == int0);
      assertEquals((-321), int1);
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      
      int int2 = rOI0.uy();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-321), int2);
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals((-321), int3);
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      
      int int4 = rOI0.ly();
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertEquals(2722, int4);
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.getReal((-16777216), (-951), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1272
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 22);
      assertNotNull(complexImage0);
      assertEquals(22, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.add((float) 22, (float) 0);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(22, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(22, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      // Undeclared exception!
      try { 
        complexImage0.set(22, 0, 0.0F, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      complexImage0.subtract(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      // Undeclared exception!
      try { 
        complexImage1.getImag(660, 24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 22);
      assertNotNull(complexImage0);
      assertEquals(22, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Integer integer0 = new Integer(22);
      assertNotNull(integer0);
      assertEquals(22, (int)integer0);
      
      ComplexImage complexImage1 = complexImage0.add((float) 0, 0.0F);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(22, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(22, complexImage1.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      Integer integer1 = new Integer(1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertEquals(1, (int)integer1);
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage1.add(complexImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = (-1926);
      int int1 = 1;
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      
      ComplexImage complexImage2 = null;
      try {
        complexImage2 = new ComplexImage((-1926), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.add((float) (-1052), (float) (-1052));
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      complexImage0.add(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      
      // Undeclared exception!
      try { 
        complexImage0.get((-3124), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.divide((-814), (-814), (float) (-814), (float) (-814), (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      rOI0.setROI(1, 1, 1, 1);
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      
      RealGrayImage realGrayImage1 = complexImage1.real();
      assertNull(realGrayImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      complexImage1.subtract(complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      RealGrayImage realGrayImage2 = complexImage1.real();
      assertNull(realGrayImage2);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      // Undeclared exception!
      try { 
        complexImage1.divide(complexImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 22);
      assertNotNull(complexImage0);
      assertEquals(22, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.divide((float) 22, (float) 22);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(22, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(22, complexImage1.Y());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      
      ComplexImage complexImage2 = new ComplexImage(0, 1);
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertEquals(0, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      
      ComplexImage complexImage3 = complexImage2.multiply((float) 1, (float) 0);
      assertNotNull(complexImage3);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage1);
      assertEquals(0, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      
      float[][] floatArray0 = new float[2][9];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 1.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 1400.0F;
      floatArray1[3] = (-1607.767F);
      floatArray1[5] = (-914.304F);
      floatArray0[0] = floatArray1;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(1, int3);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int4 = rOI0.Y();
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertEquals(1, int4);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int5 = rOI0.Y();
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertEquals(1, int5);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage3.set(0, 1, 3184.2334F, (float) 1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 22);
      assertNotNull(complexImage0);
      assertEquals(22, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.add((float) 22, (float) 0);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(22, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(22, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertEquals(22, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(22, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(1, int3);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.setImag(22, 0, (float) 22, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      
      ComplexImage complexImage2 = new ComplexImage(0, 1);
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertEquals(0, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      
      ComplexImage complexImage3 = complexImage2.multiply((float) 1, (float) 0);
      assertNotNull(complexImage3);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertEquals(0, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      
      RealGrayImage realGrayImage0 = complexImage2.phaseImage();
      assertNotNull(realGrayImage0);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage3);
      assertEquals(0, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      complexImage0.subtract(complexImage3);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage3.Y());
      assertEquals(0, complexImage3.X());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      
      Complex complex1 = new Complex(complex0);
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      
      Complex complex2 = Complex.add(complex1, complex1);
      assertNotNull(complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      
      double double0 = complex2.real();
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      
      double double1 = complex0.magnitude();
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(1, int3);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage1.set((-2637), (-2637), complex2, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(2966, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(2966, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.imag();
      assertNotNull(realGrayImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(2966, complexImage0.X());
      assertEquals(2966, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(1, int3);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.setImag(1, 2966, 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.getReal(1, 470);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.divide((float) 1, (float) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      RealGrayImage realGrayImage0 = complexImage1.real();
      assertNull(realGrayImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.divide(complexImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(1, 1);
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      // Undeclared exception!
      try { 
        complexImage1.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0L, complex0.longValue());
      
      Complex complex1 = complex0.add((-815.6));
      assertNotNull(complex1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals((short)815, complex0.shortValue());
      assertEquals(815L, complex0.longValue());
      assertEquals(3.141592653589793, complex0.arg(), 0.01);
      assertEquals((byte)47, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(815.6F, complex0.floatValue(), 0.01F);
      assertEquals(815, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((-815.5999755859375), complex0.real(), 0.01);
      assertEquals(815.599970880333, complex0.magnitude(), 0.01);
      assertEquals(815.599970880333, complex0.doubleValue(), 0.01);
      assertEquals(815, complex1.intValue());
      assertEquals((byte)47, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((-815.5999755859375), complex1.real(), 0.01);
      assertEquals(815.599970880333, complex1.magnitude(), 0.01);
      assertEquals(815.599970880333, complex1.doubleValue(), 0.01);
      assertEquals((short)815, complex1.shortValue());
      assertEquals(3.141592653589793, complex1.arg(), 0.01);
      assertEquals(815L, complex1.longValue());
      assertEquals(815.6F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imag(), 0.01);
      
      Complex complex2 = new Complex(0.0, 0.0);
      assertNotNull(complex2);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0L, complex2.longValue());
      
      Complex complex3 = complex0.div(complex2);
      assertNotNull(complex3);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complex0, complex2);
      assertSame(complex0, complex1);
      assertSame(complex0, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertSame(complex3, complex1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals((short)0, complex0.shortValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(Float.NaN, complex0.floatValue(), 0.01F);
      assertEquals(Double.NaN, complex0.magnitude(), 0.01);
      assertEquals(Double.NaN, complex0.imaginary(), 0.01);
      assertEquals(Double.NaN, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(Double.NaN, complex0.imag(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0L, complex2.longValue());
      assertEquals((byte)0, complex3.byteValue());
      assertEquals(Double.NaN, complex3.real(), 0.01);
      assertEquals((short)0, complex3.shortValue());
      assertEquals(Double.NaN, complex3.magnitude(), 0.01);
      assertEquals(Double.NaN, complex3.doubleValue(), 0.01);
      assertEquals(Double.NaN, complex3.imaginary(), 0.01);
      assertEquals(Double.NaN, complex3.imag(), 0.01);
      assertEquals(0L, complex3.longValue());
      assertEquals(Float.NaN, complex3.floatValue(), 0.01F);
      assertEquals(Double.NaN, complex3.arg(), 0.01);
      assertEquals(0, complex3.intValue());
      
      ComplexImage complexImage2 = complexImage0.diff(complexImage1);
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      ComplexImage complexImage3 = complexImage0.multiply((float) 1, 768.24713F);
      assertNotNull(complexImage3);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage3.Y());
      assertEquals(1, complexImage3.X());
      
      // Undeclared exception!
      try { 
        complexImage1.set(1, 1, complex0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(17, 17);
      assertNotNull(complexImage0);
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage1.Y());
      assertEquals(17, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage1.subtract(255.0F, (float) 17);
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage1.Y());
      assertEquals(17, complexImage1.X());
      assertEquals(17, complexImage2.X());
      assertEquals(17, complexImage2.Y());
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
      assertEquals(255, complex0.intValue());
      assertEquals((short)255, complex0.shortValue());
      assertEquals((-3.0750244898139694), complex0.arg(), 0.01);
      assertEquals((-17.0), complex0.imag(), 0.01);
      assertEquals((-17.0), complex0.imaginary(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(255.56603843233944, complex0.magnitude(), 0.01);
      assertEquals((-255.0), complex0.real(), 0.01);
      assertEquals(255.56604F, complex0.floatValue(), 0.01F);
      assertEquals(255.56603843233944, complex0.doubleValue(), 0.01);
      assertEquals(255L, complex0.longValue());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply((float) 1, 1.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(17, 17);
      assertNotNull(complexImage0);
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.copy();
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage1.X());
      assertEquals(17, complexImage1.Y());
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage2.Y());
      assertEquals(17, complexImage2.X());
      
      complexImage2.multiply(complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage2.Y());
      assertEquals(17, complexImage2.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      Complex complex0 = complexImage2.max(rOI0);
      assertNotNull(complex0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage2.Y());
      assertEquals(17, complexImage2.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0L, complex0.longValue());
      
      RealGrayImage realGrayImage0 = complexImage2.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage2.Y());
      assertEquals(17, complexImage2.X());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(17, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(17, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      RealGrayImage realGrayImage1 = complexImage2.imag();
      assertNotNull(realGrayImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage2.Y());
      assertEquals(17, complexImage2.X());
      assertEquals(17, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(17, realGrayImage1.Y());
      
      ComplexImage complexImage3 = complexImage2.divide((float) 17, (float) 17, rOI0);
      assertNotNull(complexImage3);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage3);
      assertSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage2.Y());
      assertEquals(17, complexImage2.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(17, complexImage3.Y());
      assertEquals(17, complexImage3.X());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      complexImage1.multiply(complexImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      ROI rOI1 = new ROI(1, 1, 2990, 33);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(2990, rOI1.X());
      assertEquals(1, rOI1.uy());
      assertEquals(2990, rOI1.lx());
      assertEquals(33, rOI1.Y());
      assertEquals(33, rOI1.ly());
      assertEquals(1, rOI1.ux());
      
      int int0 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, int0);
      assertNotSame(rOI1, rOI0);
      assertEquals(2990, rOI1.X());
      assertEquals(1, rOI1.uy());
      assertEquals(2990, rOI1.lx());
      assertEquals(33, rOI1.Y());
      assertEquals(33, rOI1.ly());
      assertEquals(1, rOI1.ux());
      
      int int1 = rOI1.lx();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int1 == int0);
      assertEquals(2990, int1);
      assertNotSame(rOI1, rOI0);
      assertEquals(2990, rOI1.X());
      assertEquals(1, rOI1.uy());
      assertEquals(2990, rOI1.lx());
      assertEquals(33, rOI1.Y());
      assertEquals(33, rOI1.ly());
      assertEquals(1, rOI1.ux());
      
      int int2 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      assertNotSame(rOI1, rOI0);
      assertEquals(2990, rOI1.X());
      assertEquals(1, rOI1.uy());
      assertEquals(2990, rOI1.lx());
      assertEquals(33, rOI1.Y());
      assertEquals(33, rOI1.ly());
      assertEquals(1, rOI1.ux());
      
      int int3 = rOI0.ly();
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      ROI rOI2 = new ROI();
      assertNotNull(rOI2);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      
      int int4 = rOI2.X();
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertTrue(int4 == int0);
      assertFalse(int4 == int3);
      assertTrue(int4 == int2);
      assertFalse(int4 == int1);
      assertEquals(1, int4);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      
      int int5 = rOI2.Y();
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(int5 == int1);
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertFalse(int5 == int3);
      assertEquals(1, int5);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      
      int int6 = rOI2.Y();
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(int6 == int1);
      assertTrue(int6 == int5);
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertTrue(int6 == int0);
      assertFalse(int6 == int3);
      assertEquals(1, int6);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      
      int int7 = rOI2.Y();
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertTrue(int7 == int0);
      assertFalse(int7 == int3);
      assertTrue(int7 == int2);
      assertTrue(int7 == int4);
      assertFalse(int7 == int1);
      assertTrue(int7 == int6);
      assertTrue(int7 == int5);
      assertEquals(1, int7);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      
      complexImage0.divide(complexImage1, rOI2, rOI2);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      
      complexImage0.subtract(complexImage1, rOI2, rOI0);
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(rOI0.equals((Object)rOI2));
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(rOI0, rOI1);
      assertNotSame(rOI0, rOI2);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      
      ComplexImage complexImage2 = complexImage1.subtract((float) 2722, (float) 1);
      assertNotNull(complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(17, 17);
      assertNotNull(complexImage0);
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage1.X());
      assertEquals(17, complexImage1.Y());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      
      ComplexImage complexImage2 = complexImage1.addbuffer(17, 17, (float) 17, (float) 17);
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage1.X());
      assertEquals(17, complexImage1.Y());
      assertEquals(17, complexImage2.X());
      assertEquals(17, complexImage2.Y());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      
      ComplexImage complexImage2 = new ComplexImage(0, 1);
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertEquals(1, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      ComplexImage complexImage3 = complexImage2.multiply((float) 1, (float) 0);
      assertNotNull(complexImage3);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage2);
      assertEquals(1, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage3.divide(0.0F, (float) 1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      ROI rOI0 = new ROI((-321), (-321), (-321), 2722);
      assertNotNull(rOI0);
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      
      int int0 = rOI0.ux();
      assertEquals((-321), int0);
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      
      int int1 = rOI0.lx();
      assertTrue(int1 == int0);
      assertEquals((-321), int1);
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      
      int int2 = rOI0.uy();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-321), int2);
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals((-321), int3);
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      
      int int4 = rOI0.ly();
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals(2722, int4);
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      
      int int5 = rOI0.ly();
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertTrue(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertEquals(2722, int5);
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      
      int int6 = rOI1.X();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int2);
      assertFalse(int6 == int0);
      assertFalse(int6 == int4);
      assertFalse(int6 == int1);
      assertEquals(1, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      
      int int7 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int7 == int2);
      assertFalse(int7 == int0);
      assertFalse(int7 == int4);
      assertTrue(int7 == int6);
      assertFalse(int7 == int1);
      assertFalse(int7 == int5);
      assertFalse(int7 == int3);
      assertEquals(1, int7);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      
      int int8 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int8 == int6);
      assertFalse(int8 == int3);
      assertFalse(int8 == int0);
      assertTrue(int8 == int7);
      assertFalse(int8 == int4);
      assertFalse(int8 == int5);
      assertFalse(int8 == int1);
      assertFalse(int8 == int2);
      assertEquals(1, int8);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      
      int int9 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int9 == int5);
      assertFalse(int9 == int1);
      assertFalse(int9 == int4);
      assertTrue(int9 == int7);
      assertFalse(int9 == int0);
      assertTrue(int9 == int6);
      assertFalse(int9 == int3);
      assertFalse(int9 == int2);
      assertTrue(int9 == int8);
      assertEquals(1, int9);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      
      ComplexImage complexImage2 = complexImage1.subtract(0.0F, (float) (-321), rOI1);
      assertNotNull(complexImage2);
      assertFalse(rOI1.equals((Object)rOI0));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(rOI1, rOI0);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.multiply((-321), (-1199), 1257.3672F, 1.0F, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1199
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(17, 17);
      assertNotNull(complexImage0);
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.addbuffer(3, 3, 17, (-1807), (float) 3, (-236.80078F));
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
      assertEquals(3, complexImage1.Y());
      assertEquals(3, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage2.Y());
      assertEquals(17, complexImage2.X());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      
      Complex complex1 = complexImage0.max();
      assertNotNull(complex1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complex1, complex0);
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      
      int int0 = complexImage0.X();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertEquals(17, int0);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage0.X());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(14, 14);
      assertNotNull(complexImage0);
      assertEquals(14, complexImage0.X());
      assertEquals(14, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(14, complexImage0.X());
      assertEquals(14, complexImage0.Y());
      assertEquals(14, complexImage1.X());
      assertEquals(14, complexImage1.Y());
      
      ComplexImage complexImage2 = complexImage1.copy();
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(14, complexImage0.X());
      assertEquals(14, complexImage0.Y());
      assertEquals(14, complexImage1.X());
      assertEquals(14, complexImage1.Y());
      assertEquals(14, complexImage2.X());
      assertEquals(14, complexImage2.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.ux();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int2 = rOI0.lx();
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int3 = rOI0.uy();
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      rOI0.setROI(0, 1, 3172, 3172);
      assertEquals(1, rOI0.uy());
      assertEquals(3173, rOI0.X());
      assertEquals(3172, rOI0.Y());
      assertEquals(3172, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(3172, rOI0.ly());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      assertEquals(0, int4);
      assertEquals(1, rOI0.uy());
      assertEquals(3173, rOI0.X());
      assertEquals(3172, rOI0.Y());
      assertEquals(3172, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(3172, rOI0.ly());
      
      int int5 = rOI0.ly();
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertEquals(3172, int5);
      assertEquals(1, rOI0.uy());
      assertEquals(3173, rOI0.X());
      assertEquals(3172, rOI0.Y());
      assertEquals(3172, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(3172, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage2.divide(complexImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(1, int3);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ComplexImage complexImage1 = new ComplexImage(1, 1);
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      
      rOI1.setROI((-1), 0, 1, (-1));
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals((-1), rOI1.ux());
      assertEquals((-1), rOI1.uy());
      assertEquals(1, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(3, rOI1.X());
      assertEquals(2, rOI1.Y());
      
      int int4 = rOI1.X();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertEquals(3, int4);
      assertNotSame(rOI1, rOI0);
      assertEquals((-1), rOI1.ux());
      assertEquals((-1), rOI1.uy());
      assertEquals(1, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(3, rOI1.X());
      assertEquals(2, rOI1.Y());
      
      rOI1.setROI(16, (-1218), (-1), 1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.ly());
      assertEquals((-1), rOI1.ux());
      assertEquals((-1218), rOI1.uy());
      assertEquals(16, rOI1.lx());
      assertEquals(1220, rOI1.Y());
      assertEquals(18, rOI1.X());
      
      int int5 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertEquals(1220, int5);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.ly());
      assertEquals((-1), rOI1.ux());
      assertEquals((-1218), rOI1.uy());
      assertEquals(16, rOI1.lx());
      assertEquals(1220, rOI1.Y());
      assertEquals(18, rOI1.X());
      
      // Undeclared exception!
      try { 
        complexImage1.divide((-2376.1475F), 1.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(14, 14);
      assertNotNull(complexImage0);
      assertEquals(14, complexImage0.Y());
      assertEquals(14, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(14, complexImage0.Y());
      assertEquals(14, complexImage0.X());
      assertEquals(14, complexImage1.Y());
      assertEquals(14, complexImage1.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      ROI rOI1 = new ROI(1, 1, 1, 2722);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(2722, rOI1.Y());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(2722, rOI1.ly());
      
      int int3 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(1, int3);
      assertNotSame(rOI1, rOI0);
      assertEquals(2722, rOI1.Y());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(2722, rOI1.ly());
      
      int int4 = rOI1.lx();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertEquals(1, int4);
      assertNotSame(rOI1, rOI0);
      assertEquals(2722, rOI1.Y());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(2722, rOI1.ly());
      
      int int5 = rOI1.uy();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertTrue(int5 == int1);
      assertEquals(1, int5);
      assertNotSame(rOI1, rOI0);
      assertEquals(2722, rOI1.Y());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(2722, rOI1.ly());
      
      int int6 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertTrue(int6 == int5);
      assertTrue(int6 == int1);
      assertTrue(int6 == int0);
      assertTrue(int6 == int3);
      assertEquals(1, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(2722, rOI1.Y());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(2722, rOI1.ly());
      
      int int7 = rOI1.ly();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int7 == int3);
      assertFalse(int7 == int6);
      assertFalse(int7 == int2);
      assertFalse(int7 == int0);
      assertFalse(int7 == int4);
      assertFalse(int7 == int5);
      assertFalse(int7 == int1);
      assertEquals(2722, int7);
      assertNotSame(rOI1, rOI0);
      assertEquals(2722, rOI1.Y());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(2722, rOI1.ly());
      
      // Undeclared exception!
      try { 
        complexImage1.multiply(complexImage0, rOI1, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(1, 1, (float) 1, (float) 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 6);
      assertNotNull(complexImage0);
      assertEquals(6, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.multiply((float) 6, (float) 0);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(6, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(6, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertEquals(6, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(6, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      
      ROI rOI0 = new ROI(0, 0, 0, 2722);
      assertNotNull(rOI0);
      assertEquals(2723, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(2722, rOI0.ly());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(2723, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(2722, rOI0.ly());
      
      ComplexImage complexImage2 = complexImage1.addbuffer(6, 0, (-1.0F), (float) 0);
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(6, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(6, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(6, complexImage2.X());
      
      complexImage2.multiply(complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(6, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(6, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(6, complexImage2.X());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(14, 14);
      assertNotNull(complexImage0);
      assertEquals(14, complexImage0.Y());
      assertEquals(14, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(14, complexImage0.Y());
      assertEquals(14, complexImage0.X());
      assertEquals(14, complexImage1.X());
      assertEquals(14, complexImage1.Y());
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertEquals(14, complexImage0.Y());
      assertEquals(14, complexImage0.X());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage1.set((-2432), 14, complex0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      ComplexImage complexImage0 = new ComplexImage(1, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      int int2 = 1074;
      // Undeclared exception!
      try { 
        complexImage0.get(0, 1074);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1074
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(17, 17);
      assertNotNull(complexImage0);
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage1.X());
      assertEquals(17, complexImage1.Y());
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage2.Y());
      assertEquals(17, complexImage2.X());
      
      complexImage2.add(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage1.X());
      assertEquals(17, complexImage1.Y());
      assertEquals(17, complexImage2.Y());
      assertEquals(17, complexImage2.X());
      
      ComplexImage complexImage3 = new ComplexImage(complexImage0);
      assertNotNull(complexImage3);
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage3.X());
      assertEquals(17, complexImage3.Y());
      
      int int0 = complexImage3.Y();
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertEquals(17, int0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage3.X());
      assertEquals(17, complexImage3.Y());
      
      complexImage2.divide(complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage3);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage3);
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage1.X());
      assertEquals(17, complexImage1.Y());
      assertEquals(17, complexImage2.Y());
      assertEquals(17, complexImage2.X());
      
      // Undeclared exception!
      try { 
        complexImage1.add((-16777216), 7, (float) 7, (float) (-16777216));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(37, 37, (-2005.8F), (-2005.8F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      int int0 = 16;
      ComplexImage complexImage0 = new ComplexImage(16, 22);
      assertNotNull(complexImage0);
      assertEquals(22, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.add((float) 22, (float) 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(17, 17);
      assertNotNull(complexImage0);
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage1.X());
      assertEquals(17, complexImage1.Y());
      
      ComplexImage complexImage2 = complexImage1.multiply((float) 17, (float) 17);
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertEquals(17, complexImage0.X());
      assertEquals(17, complexImage0.Y());
      assertEquals(17, complexImage1.X());
      assertEquals(17, complexImage1.Y());
      assertEquals(17, complexImage2.X());
      assertEquals(17, complexImage2.Y());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      complexImage1.subtract(complexImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      
      ComplexImage complexImage2 = new ComplexImage(0, 1);
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertEquals(1, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      ComplexImage complexImage3 = complexImage2.multiply((float) 1, (float) 0);
      assertNotNull(complexImage3);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertEquals(1, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(1, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      RealGrayImage realGrayImage0 = complexImage1.real();
      assertNotNull(realGrayImage0);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage3);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      // Undeclared exception!
      try { 
        complexImage1.divide(complexImage3, (ROI) null, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 1);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(1, int3);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      ComplexImage complexImage1 = complexImage0.copy(rOI0);
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      // Undeclared exception!
      try { 
        complexImage0.divide(1, (-1180), 0.0F, 2.5227F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1180
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(13, 13);
      assertNotNull(complexImage0);
      assertEquals(13, complexImage0.Y());
      assertEquals(13, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.setReal(13, 13, (float) 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      ROI rOI0 = new ROI((-321), (-321), (-321), 2722);
      assertNotNull(rOI0);
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      
      int int0 = rOI0.ux();
      assertEquals((-321), int0);
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      
      int int1 = rOI0.lx();
      assertTrue(int1 == int0);
      assertEquals((-321), int1);
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      
      int int2 = rOI0.uy();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-321), int2);
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals((-321), int3);
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      
      int int4 = rOI0.ly();
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertEquals(2722, int4);
      assertEquals((-321), rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.ly());
      assertEquals(3044, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage1.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -321
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.copy();
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Integer integer0 = new Integer(8);
      assertNotNull(integer0);
      assertEquals(8, (int)integer0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(1, int3);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(1, int3);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.setImag(1692, 1692, 2105.82F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      int int3 = rOI1.X();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(1, int3);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      int int4 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertEquals(1, int4);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      int int5 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      assertEquals(1, int5);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      rOI1.setROI((-1), 1, (-1235), (-1235));
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals(1235, rOI1.X());
      assertEquals((-1), rOI1.lx());
      assertEquals(1237, rOI1.Y());
      assertEquals(1, rOI1.ly());
      assertEquals((-1235), rOI1.ux());
      assertEquals((-1235), rOI1.uy());
      
      int int6 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int6 == int3);
      assertFalse(int6 == int2);
      assertFalse(int6 == int5);
      assertFalse(int6 == int4);
      assertFalse(int6 == int1);
      assertFalse(int6 == int0);
      assertEquals(1237, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(1235, rOI1.X());
      assertEquals((-1), rOI1.lx());
      assertEquals(1237, rOI1.Y());
      assertEquals(1, rOI1.ly());
      assertEquals((-1235), rOI1.ux());
      assertEquals((-1235), rOI1.uy());
      
      int int7 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int7 == int3);
      assertFalse(int7 == int1);
      assertFalse(int7 == int2);
      assertTrue(int7 == int6);
      assertFalse(int7 == int5);
      assertFalse(int7 == int4);
      assertFalse(int7 == int0);
      assertEquals(1237, int7);
      assertNotSame(rOI1, rOI0);
      assertEquals(1235, rOI1.X());
      assertEquals((-1), rOI1.lx());
      assertEquals(1237, rOI1.Y());
      assertEquals(1, rOI1.ly());
      assertEquals((-1235), rOI1.ux());
      assertEquals((-1235), rOI1.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage1, rOI0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.set(16, 16, (Complex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      // Undeclared exception!
      complexImage1.addbuffer(1724, 1724, 1, 1724, (float) 1, (float) 1);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      Complex complex0 = complexImage1.min();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      rOI0.setROI(1, 1, 1, 1);
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ux());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ux());
      
      RealGrayImage realGrayImage1 = complexImage1.real();
      assertNull(realGrayImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.setImag(1, 1, 2601.9F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.divide(9, 9, (-2284.1604F), 1.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      complexImage1.multiply(complexImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      ROI rOI1 = new ROI(1, 1, 2990, 2990);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.uy());
      assertEquals(2990, rOI1.Y());
      assertEquals(1, rOI1.ux());
      assertEquals(2990, rOI1.X());
      assertEquals(2990, rOI1.ly());
      assertEquals(2990, rOI1.lx());
      
      int int0 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, int0);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.uy());
      assertEquals(2990, rOI1.Y());
      assertEquals(1, rOI1.ux());
      assertEquals(2990, rOI1.X());
      assertEquals(2990, rOI1.ly());
      assertEquals(2990, rOI1.lx());
      
      int int1 = rOI0.ly();
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      ROI rOI2 = new ROI();
      assertNotNull(rOI2);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      
      int int2 = rOI2.X();
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      
      int int3 = rOI2.Y();
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int1));
      assertEquals(1, (int)integer0);
      
      complexImage0.divide(complexImage1, rOI2, rOI2);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      
      complexImage0.subtract(complexImage1, rOI2, rOI0);
      assertFalse(rOI0.equals((Object)rOI2));
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(rOI0, rOI2);
      assertNotSame(rOI0, rOI1);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      
      ComplexImage complexImage2 = complexImage1.subtract((float) 1, (float) 1);
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = 1071;
      // Undeclared exception!
      try { 
        complexImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ComplexImage complexImage1 = complexImage0.multiply(871.7934F, 871.7934F);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ComplexImage complexImage2 = new ComplexImage();
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      
      RealGrayImage realGrayImage0 = complexImage2.real();
      assertNull(realGrayImage0);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      
      // Undeclared exception!
      try { 
        complexImage2.multiply(1, 1, (float) 1, 871.7934F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.add(892.0F, 0.0F);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(0, 0, 0.0F, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      
      ComplexImage complexImage2 = complexImage0.multiply((float) 1, 768.24713F);
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      
      complexImage1.multiply(complexImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      int int0 = complexImage1.Y();
      assertEquals(1, int0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(2460, 1, (-3028.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(1, int3);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      
      ComplexImage complexImage2 = new ComplexImage(0, 1);
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertEquals(0, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      
      ComplexImage complexImage3 = complexImage2.multiply((float) 1, (float) 0);
      assertNotNull(complexImage3);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage2);
      assertEquals(0, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      RealGrayImage realGrayImage0 = complexImage1.real();
      assertNotNull(realGrayImage0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      // Undeclared exception!
      try { 
        complexImage2.getImaginary(2141, 19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      int int0 = (-344);
      ROI rOI0 = new ROI((-344), (-344), (-344), 2722);
      assertNotNull(rOI0);
      assertEquals(3067, rOI0.Y());
      assertEquals((-344), rOI0.lx());
      assertEquals((-344), rOI0.uy());
      assertEquals(2722, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals((-344), rOI0.ux());
      
      Integer integer0 = new Integer(2722);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(2722, (int)integer0);
      
      int int1 = rOI0.ux();
      assertTrue(int1 == int0);
      assertEquals((-344), int1);
      assertEquals(3067, rOI0.Y());
      assertEquals((-344), rOI0.lx());
      assertEquals((-344), rOI0.uy());
      assertEquals(2722, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals((-344), rOI0.ux());
      
      Integer integer1 = new Integer((-344));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-344), (int)integer1);
      
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int2 = 3651;
      // Undeclared exception!
      try { 
        complexImage0.getImag(0, 467, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(1, int3);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(1, 1);
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      
      rOI1.setROI((-1), 0, 1, (-1));
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals((-1), rOI1.uy());
      assertEquals((-1), rOI1.ux());
      assertEquals(1, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(3, rOI1.X());
      assertEquals(2, rOI1.Y());
      
      int int4 = rOI1.X();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertEquals(3, int4);
      assertNotSame(rOI1, rOI0);
      assertEquals((-1), rOI1.uy());
      assertEquals((-1), rOI1.ux());
      assertEquals(1, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(3, rOI1.X());
      assertEquals(2, rOI1.Y());
      
      rOI1.setROI(16, (-1218), (-1), 1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals(18, rOI1.X());
      assertEquals((-1218), rOI1.uy());
      assertEquals((-1), rOI1.ux());
      assertEquals(1220, rOI1.Y());
      assertEquals(1, rOI1.ly());
      assertEquals(16, rOI1.lx());
      
      int int5 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertEquals(1220, int5);
      assertNotSame(rOI1, rOI0);
      assertEquals(18, rOI1.X());
      assertEquals((-1218), rOI1.uy());
      assertEquals((-1), rOI1.ux());
      assertEquals(1220, rOI1.Y());
      assertEquals(1, rOI1.ly());
      assertEquals(16, rOI1.lx());
      
      int int6 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int1);
      assertFalse(int6 == int4);
      assertEquals(1220, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(18, rOI1.X());
      assertEquals((-1218), rOI1.uy());
      assertEquals((-1), rOI1.ux());
      assertEquals(1220, rOI1.Y());
      assertEquals(1, rOI1.ly());
      assertEquals(16, rOI1.lx());
      
      int int7 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int7 == int0);
      assertFalse(int7 == int4);
      assertFalse(int7 == int3);
      assertTrue(int7 == int5);
      assertTrue(int7 == int6);
      assertFalse(int7 == int1);
      assertFalse(int7 == int2);
      assertEquals(1220, int7);
      assertNotSame(rOI1, rOI0);
      assertEquals(18, rOI1.X());
      assertEquals((-1218), rOI1.uy());
      assertEquals((-1), rOI1.ux());
      assertEquals(1220, rOI1.Y());
      assertEquals(1, rOI1.ly());
      assertEquals(16, rOI1.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.max(rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 23);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(23, complexImage0.Y());
      
      ImageProducer imageProducer0 = complexImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertEquals(0, complexImage0.X());
      assertEquals(23, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.multiply((float) 23, (float) 0);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(23, complexImage0.Y());
      assertEquals(23, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(23, complexImage0.Y());
      assertEquals(23, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      
      ComplexImage complexImage2 = complexImage1.subtract((float) 0, 0.0F);
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(23, complexImage0.Y());
      assertEquals(23, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.X());
      assertEquals(23, complexImage2.Y());
      
      int int0 = complexImage0.X();
      assertEquals(0, int0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertEquals(0, complexImage0.X());
      assertEquals(23, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.getReal((-1534), (-1534));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      String string0 = complexImage0.toString();
      assertNotNull(string0);
      assertEquals("1:1\n0.0 \n1:1\n0.0 \n", string0);
      assertSame(complexImage0, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int2));
      assertEquals(1, (int)integer0);
      
      ComplexImage complexImage2 = complexImage0.subtract((float) 1, (float) 1);
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      
      Complex complex1 = complexImage1.min();
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complex1, complex0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals((-1.0), complex1.imag(), 0.01);
      assertEquals((byte)1, complex1.byteValue());
      assertEquals(1.4142135623730951, complex1.magnitude(), 0.01);
      assertEquals(1.4142135623730951, complex1.doubleValue(), 0.01);
      assertEquals((short)1, complex1.shortValue());
      assertEquals((-1.0), complex1.real(), 0.01);
      assertEquals((-2.356194490192345), complex1.arg(), 0.01);
      assertEquals(1.4142135F, complex1.floatValue(), 0.01F);
      assertEquals(1L, complex1.longValue());
      assertEquals((-1.0), complex1.imaginary(), 0.01);
      assertEquals(1, complex1.intValue());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      Box box0 = Box.createHorizontalBox();
      assertNotNull(box0);
      assertFalse(box0.isFocusTraversalPolicyProvider());
      assertFalse(box0.isFocusCycleRoot());
      assertTrue(box0.getFocusTraversalKeysEnabled());
      assertFalse(box0.getIgnoreRepaint());
      assertFalse(box0.isFocusTraversalPolicySet());
      
      TransferHandler transferHandler0 = box0.getTransferHandler();
      assertNull(transferHandler0);
      assertFalse(box0.isFocusTraversalPolicyProvider());
      assertFalse(box0.isFocusCycleRoot());
      assertTrue(box0.getFocusTraversalKeysEnabled());
      assertFalse(box0.getIgnoreRepaint());
      assertFalse(box0.isFocusTraversalPolicySet());
      
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      assertNotNull(bufferedImage0);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      
      int int1 = bufferedImage0.getWidth(box0);
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertFalse(box0.isFocusTraversalPolicyProvider());
      assertFalse(box0.isFocusCycleRoot());
      assertTrue(box0.getFocusTraversalKeysEnabled());
      assertFalse(box0.getIgnoreRepaint());
      assertFalse(box0.isFocusTraversalPolicySet());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      
      int int2 = bufferedImage0.getHeight(box0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      assertFalse(box0.isFocusTraversalPolicyProvider());
      assertFalse(box0.isFocusCycleRoot());
      assertTrue(box0.getFocusTraversalKeysEnabled());
      assertFalse(box0.getIgnoreRepaint());
      assertFalse(box0.isFocusTraversalPolicySet());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      
      ComplexImage complexImage1 = null;
      try {
        complexImage1 = new ComplexImage(bufferedImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      RealGrayImage realGrayImage0 = complexImage1.real();
      assertNull(realGrayImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      complexImage0.subtract(complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      int int0 = 16;
      // Undeclared exception!
      try { 
        complexImage1.addbuffer(16, 73, (float) 73, (-1918.1F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1089, 1089);
      assertNotNull(complexImage0);
      assertEquals(1089, complexImage0.X());
      assertEquals(1089, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.copy();
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(1089, complexImage0.X());
      assertEquals(1089, complexImage0.Y());
      assertEquals(1089, complexImage1.Y());
      assertEquals(1089, complexImage1.X());
      
      // Undeclared exception!
      try { 
        complexImage1.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = (-321);
      // Undeclared exception!
      try { 
        complexImage0.addbuffer((-321), (-321), (float) (-321), 505.22F);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      int int0 = 1;
      ComplexImage complexImage0 = new ComplexImage(1, 8);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(8, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(8, complexImage1.Y());
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(8, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(8, complexImage1.Y());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      
      ComplexImage complexImage2 = null;
      try {
        complexImage2 = new ComplexImage((-286), 8);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      
      ComplexImage complexImage2 = new ComplexImage(0, 1);
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertEquals(1, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      ComplexImage complexImage3 = complexImage2.multiply((float) 1, (float) 0);
      assertNotNull(complexImage3);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage2);
      assertEquals(1, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      
      float[][] floatArray0 = new float[2][9];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 1.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 1400.0F;
      floatArray1[3] = (-1607.767F);
      floatArray1[4] = 745.02F;
      floatArray1[5] = (-914.304F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 1.0F;
      floatArray2[1] = 245.0F;
      floatArray2[2] = 1400.0F;
      floatArray2[3] = (-1607.767F);
      floatArray2[4] = (-914.304F);
      floatArray2[5] = 1400.0F;
      floatArray2[6] = 1400.0F;
      floatArray0[1] = floatArray2;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.setImag(1107, 1107, (float) 1107);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(4039, 4039, (float) 4039, 255.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1089, 1089);
      assertNotNull(complexImage0);
      assertEquals(1089, complexImage0.X());
      assertEquals(1089, complexImage0.Y());
      
      ROI rOI0 = new ROI((-321), (-321), (-321), 2722);
      assertNotNull(rOI0);
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      
      int int0 = rOI0.ux();
      assertEquals((-321), int0);
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      
      int int1 = rOI0.lx();
      assertTrue(int1 == int0);
      assertEquals((-321), int1);
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      
      int int2 = rOI0.uy();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-321), int2);
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals((-321), int3);
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      
      int int4 = rOI0.ly();
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertEquals(2722, int4);
      assertEquals(3044, rOI0.Y());
      assertEquals(2722, rOI0.ly());
      assertEquals((-321), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-321), rOI0.uy());
      assertEquals((-321), rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(0.0F, 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -321
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      complexImage0.divide(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      
      Integer integer0 = new Integer(2174);
      assertNotNull(integer0);
      assertEquals(2174, (int)integer0);
      
      ROI rOI0 = new ROI(2722, (-321), 16, (-321));
      assertNotNull(rOI0);
      assertEquals(16, rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals((-321), rOI0.ly());
      assertEquals(2707, rOI0.X());
      
      int int0 = rOI0.ux();
      assertEquals(16, int0);
      assertEquals(16, rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals((-321), rOI0.ly());
      assertEquals(2707, rOI0.X());
      
      int int1 = rOI0.lx();
      assertFalse(int1 == int0);
      assertEquals(2722, int1);
      assertEquals(16, rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals((-321), rOI0.ly());
      assertEquals(2707, rOI0.X());
      
      int int2 = rOI0.uy();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-321), int2);
      assertEquals(16, rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals((-321), rOI0.ly());
      assertEquals(2707, rOI0.X());
      
      ROI rOI1 = new ROI((-321), (-321), (-321), 2722);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.X());
      assertEquals((-321), rOI1.lx());
      assertEquals(2722, rOI1.ly());
      assertEquals(3044, rOI1.Y());
      assertEquals((-321), rOI1.uy());
      assertEquals((-321), rOI1.ux());
      
      int int3 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals((-321), int3);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals((-321), rOI1.lx());
      assertEquals(2722, rOI1.ly());
      assertEquals(3044, rOI1.Y());
      assertEquals((-321), rOI1.uy());
      assertEquals((-321), rOI1.ux());
      
      int int4 = rOI1.lx();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertEquals((-321), int4);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals((-321), rOI1.lx());
      assertEquals(2722, rOI1.ly());
      assertEquals(3044, rOI1.Y());
      assertEquals((-321), rOI1.uy());
      assertEquals((-321), rOI1.ux());
      
      int int5 = rOI1.uy();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertEquals((-321), int5);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals((-321), rOI1.lx());
      assertEquals(2722, rOI1.ly());
      assertEquals(3044, rOI1.Y());
      assertEquals((-321), rOI1.uy());
      assertEquals((-321), rOI1.ux());
      
      int int6 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int5);
      assertFalse(int6 == int0);
      assertTrue(int6 == int2);
      assertTrue(int6 == int3);
      assertFalse(int6 == int1);
      assertTrue(int6 == int4);
      assertEquals((-321), int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals((-321), rOI1.lx());
      assertEquals(2722, rOI1.ly());
      assertEquals(3044, rOI1.Y());
      assertEquals((-321), rOI1.uy());
      assertEquals((-321), rOI1.ux());
      
      int int7 = rOI1.ly();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int7 == int0);
      assertFalse(int7 == int2);
      assertFalse(int7 == int6);
      assertFalse(int7 == int3);
      assertFalse(int7 == int5);
      assertTrue(int7 == int1);
      assertFalse(int7 == int4);
      assertEquals(2722, int7);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals((-321), rOI1.lx());
      assertEquals(2722, rOI1.ly());
      assertEquals(3044, rOI1.Y());
      assertEquals((-321), rOI1.uy());
      assertEquals((-321), rOI1.ux());
      
      int int8 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int8 == int4);
      assertTrue(int8 == int2);
      assertFalse(int8 == int7);
      assertTrue(int8 == int3);
      assertTrue(int8 == int5);
      assertTrue(int8 == int6);
      assertFalse(int8 == int0);
      assertFalse(int8 == int1);
      assertEquals((-321), int8);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals((-321), rOI1.lx());
      assertEquals(2722, rOI1.ly());
      assertEquals(3044, rOI1.Y());
      assertEquals((-321), rOI1.uy());
      assertEquals((-321), rOI1.ux());
      
      int int9 = rOI0.ly();
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int9 == int4);
      assertFalse(int9 == int0);
      assertFalse(int9 == int7);
      assertFalse(int9 == int1);
      assertTrue(int9 == int5);
      assertTrue(int9 == int2);
      assertTrue(int9 == int3);
      assertTrue(int9 == int6);
      assertTrue(int9 == int8);
      assertEquals((-321), int9);
      assertNotSame(rOI0, rOI1);
      assertEquals(16, rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals((-321), rOI0.ly());
      assertEquals(2707, rOI0.X());
      
      int int10 = rOI0.uy();
      assertTrue(int10 == int9);
      assertFalse(int10 == int0);
      assertTrue(int10 == int5);
      assertTrue(int10 == int2);
      assertFalse(int10 == int1);
      assertFalse(int10 == int7);
      assertTrue(int10 == int8);
      assertTrue(int10 == int3);
      assertTrue(int10 == int6);
      assertTrue(int10 == int4);
      assertFalse(rOI0.equals((Object)rOI1));
      assertEquals((-321), int10);
      assertNotSame(rOI0, rOI1);
      assertEquals(16, rOI0.ux());
      assertEquals((-321), rOI0.uy());
      assertEquals(2722, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals((-321), rOI0.ly());
      assertEquals(2707, rOI0.X());
      
      Integer integer1 = new Integer((-321));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int4));
      assertTrue(integer1.equals((Object)int3));
      assertTrue(integer1.equals((Object)int2));
      assertTrue(integer1.equals((Object)int9));
      assertTrue(integer1.equals((Object)int10));
      assertTrue(integer1.equals((Object)int5));
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)int8));
      assertFalse(integer1.equals((Object)int7));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int6));
      assertFalse(integer1.equals((Object)int0));
      assertEquals((-321), (int)integer1);
      
      ComplexImage complexImage2 = complexImage1.subtract((float) (-321), (float) (-321));
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      // Undeclared exception!
      try { 
        complexImage2.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(17, 17);
      ComplexImage complexImage1 = complexImage0.clear();
      Complex complex0 = complexImage1.min();
      assertEquals(0, complex0.intValue());
      
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      assertEquals(17, complexImage2.Y());
      assertEquals(17, complexImage2.X());
      assertEquals(17, complexImage0.X());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = complexImage0.divide((float) 0, (float) 0);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      ComplexImage complexImage1 = complexImage0.clear();
      complexImage1.multiply(complexImage0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.Y();
      complexImage0.getMagnitudeImage();
      complexImage1.max(rOI0);
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      complexImage1.subtract(complexImage0);
      complexImage1.Y();
      RealGrayImage realGrayImage1 = complexImage0.imag();
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(1, realGrayImage1.Y());
      
      ComplexImage complexImage2 = complexImage0.copy();
      ROI rOI1 = new ROI();
      rOI1.X();
      rOI1.Y();
      rOI1.Y();
      rOI1.Y();
      complexImage0.divide(complexImage2, rOI1, rOI1);
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage0.X());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.max();
      complexImage0.imag();
      complexImage0.setReal((RealGrayImage) null);
      complexImage0.setImag((RealGrayImage) null);
      complexImage0.real();
      complexImage0.phaseImage();
      complexImage0.subtract(complexImage0);
      int int0 = 8;
      int int1 = 1308;
      // Undeclared exception!
      try { 
        complexImage0.getImag(8, 1308);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      ComplexImage complexImage1 = complexImage0.clear();
      complexImage1.max();
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.Y();
      rOI0.Y();
      rOI0.ly();
      rOI0.uy();
      Integer integer0 = new Integer(1);
      complexImage0.subtract((-1795.9F), (float) 1);
      Complex complex0 = complexImage1.min();
      assertEquals((-5.568238114899201E-4), complex0.arg(), 0.01);
      assertEquals(1, complexImage1.X());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      int int0 = 0;
      int int1 = 22;
      ComplexImage complexImage0 = new ComplexImage(0, 22);
      complexImage0.add(892.0F, 0.0F);
      // Undeclared exception!
      try { 
        complexImage0.multiply(0, 0, 0.0F, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = null;
      try {
        complexImage1 = new ComplexImage((ComplexImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      ROI rOI0 = new ROI((-344), (-344), (-344), (-344));
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      int int0 = (-1926);
      int int1 = 1;
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((-1926), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      int int0 = 1137;
      int int1 = (-2482);
      float float0 = 255.0F;
      int int2 = (-321);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.Y();
      rOI0.Y();
      // Undeclared exception!
      try { 
        complexImage0.getImaginary(22, 1137, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      rOI0.Y();
      Integer integer0 = new Integer(1);
      rOI0.uy();
      complexImage0.setImaginary((RealGrayImage) null);
      Integer integer1 = new Integer((int) integer0);
      // Undeclared exception!
      try { 
        complexImage0.add(1112.0F, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      ComplexImage complexImage1 = complexImage0.clear();
      complexImage1.multiply(complexImage0);
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI(1, 1, 2990, 33);
      rOI1.ux();
      rOI1.lx();
      rOI0.uy();
      rOI1.ux();
      rOI0.ly();
      ROI rOI2 = new ROI();
      rOI2.X();
      rOI2.Y();
      rOI2.Y();
      rOI2.Y();
      complexImage0.divide(complexImage1, rOI2, rOI2);
      complexImage0.subtract(complexImage1, rOI2, rOI0);
      ROI rOI3 = new ROI((-321), (-321), (-321), 2722);
      rOI3.ux();
      rOI3.lx();
      rOI3.uy();
      rOI3.ux();
      rOI3.ly();
      // Undeclared exception!
      try { 
        complexImage1.toString(rOI3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -321
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.subtract(0.0F, (-1780.236F), (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      ComplexImage complexImage1 = complexImage0.clear();
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      ROI rOI0 = new ROI();
      rOI0.Y();
      rOI0.Y();
      rOI0.Y();
      Complex complex0 = complexImage1.min(rOI0);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      rOI0.Y();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      ComplexImage complexImage2 = new ComplexImage(1, 1);
      complexImage2.real();
      // Undeclared exception!
      try { 
        complexImage2.multiply(1, 1, (float) 1, 871.7934F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      complexImage0.setReal(realGrayImage0);
      rOI0.Y();
      // Undeclared exception!
      try { 
        complexImage0.subtract(1, 1, (float) 1, (float) 1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      rOI0.Y();
      rOI0.Y();
      // Undeclared exception!
      try { 
        complexImage0.divide((float) 1, (float) 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      ComplexImage complexImage1 = complexImage0.clear();
      complexImage1.multiply(complexImage0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.Y();
      rOI0.Y();
      ComplexImage complexImage2 = complexImage0.divide(291.24908F, (-1.0F), rOI0);
      assertSame(complexImage2, complexImage0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(886, 886);
      ROI rOI0 = new ROI((-321), (-321), (-321), 2722);
      rOI0.ux();
      rOI0.setROI((-321), 1845, 2303, 1602);
      rOI0.lx();
      rOI0.uy();
      int int0 = 646;
      rOI0.setROI((-321), 646, 3941, 2303);
      rOI0.ux();
      rOI0.ly();
      // Undeclared exception!
      try { 
        complexImage0.subtract(2303, 2303, (-32768.0F), (float) 886, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2949
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.setReal((-1), (-1), (float) (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      ComplexImage complexImage1 = complexImage0.clear();
      complexImage1.max();
      ROI rOI0 = new ROI(1, 1, 1, 1);
      rOI0.X();
      rOI0.Y();
      rOI0.Y();
      complexImage1.toString();
      // Undeclared exception!
      try { 
        complexImage1.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 22);
      // Undeclared exception!
      try { 
        complexImage0.multiply(0, 0, 0.0F, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      ComplexImage complexImage1 = complexImage0.clear();
      ComplexImage complexImage2 = new ComplexImage();
      RealGrayImage realGrayImage0 = complexImage2.getMagnitudeImage();
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      RealGrayImage realGrayImage1 = new RealGrayImage(0, 0, floatArray0);
      realGrayImage0.diff(realGrayImage1);
      RealGrayImage realGrayImage2 = realGrayImage0.diff(realGrayImage1);
      complexImage1.setImaginary(realGrayImage2);
      // Undeclared exception!
      try { 
        complexImage1.max();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.min((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      int int0 = 1;
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      ComplexImage complexImage1 = new ComplexImage(1, 1);
      // Undeclared exception!
      try { 
        complexImage1.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.real();
      complexImage0.magnitudeImage();
      Complex complex0 = new Complex();
      complex0.real();
      // Undeclared exception!
      try { 
        complexImage0.clear(complex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.Y();
      // Undeclared exception!
      try { 
        complexImage1.multiply(complexImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      int int0 = new Integer(1);
      rOI0.Y();
      // Undeclared exception!
      try { 
        complexImage1.add(complexImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      rOI0.setROI(95, 2776, 16, 16);
      rOI0.setROI((-1), 0, 1, (-1));
      rOI0.X();
      rOI0.Y();
      rOI0.Y();
      rOI0.Y();
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      int int0 = 16;
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      int int1 = (-321);
      // Undeclared exception!
      try { 
        complexImage0.subtract(0.0F, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      ComplexImage complexImage1 = complexImage0.clear();
      complexImage1.max();
      ComplexImage complexImage2 = new ComplexImage(2722, 2722);
      complexImage2.setReal((RealGrayImage) null);
      complexImage0.add(0.0F, (-529.302F));
      // Undeclared exception!
      try { 
        complexImage0.multiply(0, 0, 1980.9F, (-282.0F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }
}

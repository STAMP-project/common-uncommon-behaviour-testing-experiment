/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 07 12:27:17 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jigl.image.ColorModel;
import jigl.image.ROI;
import jigl.image.types.RealColorImage;
import jigl.image.types.RealGrayImage;
import jigl.internal.DummyObserver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RealColorImage_ESTest extends RealColorImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(4, 4);
      assertEquals(4, realColorImage0.X());
      assertEquals(4, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      int int0 = (-1);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1236;
      RealColorImage realColorImage1 = realColorImage0.addbuffer(1, 1236, floatArray0);
      assertEquals(4, realColorImage0.X());
      assertEquals(4, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1236, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, realColorImage1.X());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertArrayEquals(new float[] {(-1.0F), 1.0F, 1236.0F}, floatArray0, 0.01F);
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotNull(realColorImage1);
      assertEquals(3, floatArray0.length);
      
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 4;
      floatArray1[1] = 0.0F;
      // Undeclared exception!
      try { 
        realColorImage0.addbuffer(1236, (-1), (-2220), 1099, floatArray1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(4, 4);
      assertEquals(4, realColorImage0.X());
      assertEquals(4, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      String string0 = realColorImage0.toString(rOI0);
      assertEquals(4, realColorImage0.X());
      assertEquals(4, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(string0);
      assertEquals("4:4\nnull \n4:4\nnull \n4:4\nnull \n", string0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2;
      // Undeclared exception!
      try { 
        realColorImage0.addbuffer(16, 128, 2, 4, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      int int0 = realColorImage0.Y();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 538.0F;
      floatArray0[2] = (float) 125;
      // Undeclared exception!
      try { 
        realColorImage0.divide(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-4169);
      floatArray0[1] = (float) (-848);
      floatArray0[2] = (float) (-4169);
      floatArray0[3] = 0.0F;
      RealGrayImage[] realGrayImageArray0 = new RealGrayImage[0];
      realColorImage0.planes = realGrayImageArray0;
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 1;
      // Undeclared exception!
      try { 
        realColorImage0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.minComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.multiply(1677, 1677, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 5;
      RealColorImage realColorImage0 = new RealColorImage(0, 5);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(5, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      int int1 = (-1);
      int int2 = 0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2211;
      floatArray0[1] = (float) (-1);
      float float0 = 2277.6357F;
      floatArray0[2] = 2277.6357F;
      floatArray0[3] = (float) 16;
      floatArray0[4] = (float) 5;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      float float1 = 0.0F;
      floatArray0[7] = 0.0F;
      // Undeclared exception!
      try { 
        realColorImage0.addbuffer(2211, (-1), 16, 0, floatArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((-1006.99979451));
      assertNotNull(float0);
      assertEquals((-1006.9998F), (float)float0, 0.01F);
      
      float[] floatArray1 = new float[8];
      floatArray1[0] = (-659.03F);
      floatArray1[1] = (-430.8F);
      floatArray1[2] = 0.0F;
      floatArray1[3] = 3379.3848F;
      floatArray1[4] = (-922.7F);
      floatArray1[5] = 233.0F;
      floatArray1[6] = (-353.2662F);
      floatArray1[7] = (-1560.95F);
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      ROI rOI1 = new ROI((-4169), (-1279), 1, 0);
      assertEquals((-4169), rOI1.ux());
      assertEquals((-1279), rOI1.uy());
      assertEquals(1280, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.lx());
      assertEquals(4171, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int2 = rOI1.Y();
      assertEquals((-4169), rOI1.ux());
      assertEquals((-1279), rOI1.uy());
      assertEquals(1280, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.lx());
      assertEquals(4171, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(rOI1, rOI0);
      assertEquals(1280, int2);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(floatArray1, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(90, 90, (float) (-1688), (float) 90, (float) 90, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(3, 1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.Y());
      assertEquals(3, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      ColorModel colorModel0 = realColorImage0.getColorModel();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.Y());
      assertEquals(3, realColorImage0.X());
      assertEquals(ColorModel.RGB, colorModel0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract((-2304), (-2304), (float) (-2304), (float) (-2304), (float) (-2304));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add((RealColorImage) null, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      int int0 = 45;
      ColorModel colorModel0 = ColorModel.RGB;
      realColorImage0.colorModel = colorModel0;
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      int int1 = (-744);
      rOI0.setROI(2990, 2990, 2990, (-744));
      assertEquals(3735, rOI0.Y());
      assertEquals(2990, rOI0.ux());
      assertEquals(2990, rOI0.ly());
      assertEquals((-744), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(2990, rOI0.lx());
      
      // Undeclared exception!
      try { 
        realColorImage0.clip(45, 2990, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 0;
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      Float float0 = realColorImage0.maxComponent();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(float0);
      assertEquals((-32768.0F), (float)float0, 0.01F);
      
      Float float1 = realColorImage0.maxComponent();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-32768.0F), (float)float1, 0.01F);
      
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = 2776.552F;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      RealColorImage realColorImage1 = realColorImage0.multiply(floatArray0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2776.552F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertNotNull(realColorImage1);
      assertEquals(8, floatArray0.length);
      
      realColorImage1.byteSize();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2776.552F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(8, floatArray0.length);
      
      int int1 = realColorImage1.X();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2776.552F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(0, int1);
      assertEquals(8, floatArray0.length);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int2 = 2826;
      rOI0.setROI(2826, 0, 0, 0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(2826, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(2827, rOI0.X());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        realColorImage0.add(0, 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 4;
      RealColorImage realColorImage0 = new RealColorImage(4, 4);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(4, realColorImage0.X());
      assertEquals(4, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      int int1 = (-1);
      // Undeclared exception!
      try { 
        realColorImage0.add((-1), 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 0;
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      RealColorImage realColorImage0 = new RealColorImage(3, 16);
      assertEquals(3, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(16, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      int int1 = 3182;
      Float[] floatArray0 = new Float[6];
      rOI0.setROI(3182, 3182, 3182, 5);
      assertEquals(3182, rOI0.ly());
      assertEquals(5, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(3182, rOI0.lx());
      assertEquals(3182, rOI0.ux());
      assertEquals(3178, rOI0.Y());
      
      // Undeclared exception!
      realColorImage0.copy(rOI0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      int int0 = (-5116);
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        realColorImage0.subtract((-5116), (-5116), (float[]) null, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.addSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.add((-1), 0, floatArray0, (ROI) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(2, (-2100.45F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealGrayImage[] realGrayImageArray0 = new RealGrayImage[0];
      realColorImage0.planes = realGrayImageArray0;
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      ROI rOI0 = new ROI(632, 632, 632, 632);
      assertEquals(632, rOI0.ly());
      assertEquals(632, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(632, rOI0.uy());
      assertEquals(632, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract((float) 632, (float) 632, (float) 632, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(3.4028235E38F, 3.4028235E38F, 259.76483F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertNotNull(realColorImage1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add(realColorImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.min((-3121));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3121
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = Float.valueOf((-32768.0F));
      assertNotNull(float0);
      assertEquals((-32768.0F), (float)float0, 0.01F);
      
      DummyObserver dummyObserver0 = new DummyObserver();
      assertNotNull(dummyObserver0);
      
      DummyObserver.dummy = dummyObserver0;
      DummyObserver.dummy = dummyObserver0;
      DummyObserver.dummy = dummyObserver0;
      Float float1 = Float.valueOf((-32768.0F));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-32768.0F), (float)float1, 0.01F);
      
      floatArray0[0] = float1;
      float float2 = Float.min(0.0F, (-32768.0F));
      assertEquals((-32768.0F), float2, 0.01F);
      
      Float float3 = Float.valueOf(255.0F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      assertEquals(255.0F, (float)float3, 0.01F);
      
      // Undeclared exception!
      try { 
        realColorImage0.add(0, 0, (Float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      int int0 = 5887;
      RealColorImage realColorImage1 = new RealColorImage(5887, 5887);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      float[] floatArray0 = new float[5];
      // Undeclared exception!
      try { 
        realColorImage0.add(floatArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      float float0 = 32767.0F;
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, int0);
      
      rOI0.setROI(1, 0, 0, 0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(2, rOI0.X());
      
      int int1 = rOI0.Y();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(2, rOI0.X());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = (-4169);
      int int3 = (-1279);
      int int4 = 0;
      ROI rOI1 = new ROI((-4169), (-1279), 1, 0);
      assertEquals(1280, rOI1.Y());
      assertEquals((-4169), rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.lx());
      assertEquals(4171, rOI1.X());
      assertEquals((-1279), rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int5 = (-874);
      int int6 = (-1);
      rOI0.setROI((-1279), (-2575), (-874), (-1));
      assertEquals(2575, rOI0.Y());
      assertEquals((-874), rOI0.lx());
      assertEquals(406, rOI0.X());
      assertEquals((-1279), rOI0.ux());
      assertEquals((-1), rOI0.ly());
      assertEquals((-2575), rOI0.uy());
      assertFalse(rOI0.equals((Object)rOI1));
      assertNotSame(rOI0, rOI1);
      
      int int7 = rOI1.Y();
      assertEquals(1280, rOI1.Y());
      assertEquals((-4169), rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.lx());
      assertEquals(4171, rOI1.X());
      assertEquals((-1279), rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int7 == int3);
      assertFalse(int7 == int6);
      assertFalse(int7 == int0);
      assertFalse(int7 == int2);
      assertFalse(int7 == int5);
      assertFalse(int7 == int4);
      assertFalse(int7 == int1);
      assertNotSame(rOI1, rOI0);
      assertEquals(1280, int7);
      
      // Undeclared exception!
      try { 
        realColorImage0.add(32767.0F, 0.0F, 0.0F, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RealColorImage realColorImage0 = null;
      try {
        realColorImage0 = new RealColorImage((-474), (-474));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(4, 4);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(4, realColorImage0.Y());
      assertEquals(4, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      Float float0 = Float.valueOf((float) 749);
      assertNotNull(float0);
      assertEquals(749.0F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[8];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[5] = float0;
      floatArray0[6] = float0;
      floatArray0[7] = float0;
      RealColorImage realColorImage1 = realColorImage0.clear(floatArray0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(4, realColorImage0.Y());
      assertEquals(4, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(4, realColorImage1.Y());
      assertEquals(4, realColorImage1.X());
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertNotNull(realColorImage1);
      assertEquals(8, floatArray0.length);
      
      realColorImage1.byteSize();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(4, realColorImage0.Y());
      assertEquals(4, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(4, realColorImage1.Y());
      assertEquals(4, realColorImage1.X());
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(8, floatArray0.length);
      
      int int0 = realColorImage0.X();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(4, realColorImage0.Y());
      assertEquals(4, realColorImage0.X());
      assertSame(realColorImage0, realColorImage1);
      assertEquals(4, int0);
      
      double[] doubleArray0 = realColorImage1.sqrSum();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(4, realColorImage0.Y());
      assertEquals(4, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(4, realColorImage1.Y());
      assertEquals(4, realColorImage1.X());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertNotNull(doubleArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(3, doubleArray0.length);
      
      float float1 = realColorImage0.max(rOI0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(4, realColorImage0.Y());
      assertEquals(4, realColorImage0.X());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertSame(realColorImage0, realColorImage1);
      assertEquals(1.4E-45F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.addbuffer((-889), (-889), (-889), (-889), (float[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      // Undeclared exception!
      try { 
        realColorImage0.add(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(413, 413);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(413, realColorImage0.Y());
      assertEquals(413, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.clip(413, 413);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract((-848), (-848), (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DummyObserver dummyObserver0 = DummyObserver.dummy;
      assertNotNull(dummyObserver0);
      
      ROI rOI0 = new ROI((-16777216), 0, 0, 1);
      assertEquals(16777217, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(2, rOI0.Y());
      assertEquals(1, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals((-16777216), rOI0.ux());
      assertNotNull(rOI0);
      
      RealColorImage realColorImage0 = new RealColorImage(8, 1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.Y());
      assertEquals(8, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide((float) 1, (-711.0981F), 65.737F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16777216
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = Float.valueOf((-32768.0F));
      assertNotNull(float0);
      assertEquals((-32768.0F), (float)float0, 0.01F);
      
      DummyObserver dummyObserver0 = new DummyObserver();
      assertNotNull(dummyObserver0);
      
      DummyObserver.dummy = dummyObserver0;
      DummyObserver.dummy = dummyObserver0;
      DummyObserver.dummy = dummyObserver0;
      Float float1 = Float.valueOf((-32768.0F));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-32768.0F), (float)float1, 0.01F);
      
      floatArray0[0] = float1;
      float float2 = 0.0F;
      float float3 = Float.min(0.0F, (-32768.0F));
      assertNotEquals(float3, float2, 0.01F);
      assertEquals((-32768.0F), float3, 0.01F);
      
      float float4 = 255.0F;
      Float float5 = Float.valueOf(255.0F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotNull(float5);
      assertEquals(255.0F, (float)float5, 0.01F);
      
      Float float6 = Float.valueOf(255.0F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertEquals((float)float6, (float)float5, 0.01F);
      assertEquals((float)float6, (float)float4, 0.01F);
      assertNotNull(float6);
      assertEquals(255.0F, (float)float6, 0.01F);
      
      Float float7 = Float.valueOf(0.0F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotNull(float7);
      assertEquals(0.0F, (float)float7, 0.01F);
      
      floatArray0[1] = float7;
      // Undeclared exception!
      try { 
        realColorImage0.clear(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.byteSize(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(573, 1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.Y());
      assertEquals(573, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI(2, (-717), 1, 1);
      assertEquals(1, rOI0.ly());
      assertEquals(2, rOI0.lx());
      assertEquals(1, rOI0.ux());
      assertEquals(719, rOI0.Y());
      assertEquals((-717), rOI0.uy());
      assertEquals(2, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.max(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -717
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(4, 4);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(4, realColorImage0.Y());
      assertEquals(4, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      int int0 = (-1);
      int int1 = (-1396);
      int int2 = 0;
      ROI rOI0 = new ROI(749, 0, 128, 0);
      assertEquals(1, rOI0.Y());
      assertEquals(749, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(128, rOI0.ux());
      assertEquals(622, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 128
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      RealColorImage realColorImage0 = new RealColorImage(3, 16);
      assertEquals(16, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(3, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      int int0 = 3182;
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((double) 3182);
      assertNotNull(float0);
      assertEquals(3182.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-854.99677F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-854.99677F), (float)float1, 0.01F);
      
      float[] floatArray1 = new float[9];
      boolean boolean0 = Float.isFinite(3);
      assertTrue(boolean0);
      
      floatArray1[0] = (float) floatArray0[0];
      floatArray1[1] = (float) 3182;
      floatArray1[2] = (-854.99677F);
      floatArray1[3] = (-854.99677F);
      floatArray1[4] = (-854.99677F);
      floatArray1[5] = (float) 255;
      floatArray1[6] = (float) floatArray0[0];
      floatArray1[7] = (float) 3;
      floatArray1[8] = (float) 3;
      ColorModel colorModel0 = ColorModel.YIQ;
      realColorImage0.colorModel = colorModel0;
      assertEquals(ColorModel.YIQ, realColorImage0.getColorModel());
      assertEquals(16, realColorImage0.Y());
      assertEquals(3, realColorImage0.X());
      
      String string0 = realColorImage0.toString();
      assertEquals(ColorModel.YIQ, realColorImage0.getColorModel());
      assertEquals(16, realColorImage0.Y());
      assertEquals(3, realColorImage0.X());
      assertNotNull(string0);
      assertEquals("3:16\nnull null null null null null null null null null null null null null null null \nnull null null null null null null null null null null null null null null null \nnull null null null null null null null null null null null null null null null \n3:16\nnull null null null null null null null null null null null null null null null \nnull null null null null null null null null null null null null null null null \nnull null null null null null null null null null null null null null null null \n3:16\nnull null null null null null null null null null null null null null null null \nnull null null null null null null null null null null null null null null null \nnull null null null null null null null null null null null null null null null \n", string0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(0, 255, floatArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 255
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      ROI rOI1 = new ROI(1, 1, (-1942), 2);
      assertEquals(1, rOI1.lx());
      assertEquals((-1942), rOI1.ux());
      assertEquals(2, rOI1.ly());
      assertEquals(1944, rOI1.X());
      assertEquals(1, rOI1.uy());
      assertEquals(2, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      ROI rOI2 = new ROI();
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertEquals(1, rOI2.X());
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertNotNull(rOI2);
      
      int int2 = rOI2.X();
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertEquals(1, rOI2.X());
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertEquals(1, int2);
      
      int int3 = rOI2.Y();
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertEquals(1, rOI2.X());
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertEquals(1, int3);
      
      ROI rOI3 = new ROI((-4169), (-1279), 1, 0);
      assertEquals(0, rOI3.ly());
      assertEquals(1, rOI3.lx());
      assertEquals((-4169), rOI3.ux());
      assertEquals(1280, rOI3.Y());
      assertEquals((-1279), rOI3.uy());
      assertEquals(4171, rOI3.X());
      assertFalse(rOI3.equals((Object)rOI1));
      assertFalse(rOI3.equals((Object)rOI0));
      assertFalse(rOI3.equals((Object)rOI2));
      assertNotNull(rOI3);
      
      int int4 = rOI3.Y();
      assertEquals(0, rOI3.ly());
      assertEquals(1, rOI3.lx());
      assertEquals((-4169), rOI3.ux());
      assertEquals(1280, rOI3.Y());
      assertEquals((-1279), rOI3.uy());
      assertEquals(4171, rOI3.X());
      assertFalse(rOI3.equals((Object)rOI1));
      assertFalse(rOI3.equals((Object)rOI0));
      assertFalse(rOI3.equals((Object)rOI2));
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertNotSame(rOI3, rOI1);
      assertNotSame(rOI3, rOI0);
      assertNotSame(rOI3, rOI2);
      assertEquals(1280, int4);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide((float) 255, 1.4E-45F, 1.4E-45F, rOI3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(128, 0, (float) 128, 255.0F, (-32768.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.get(0, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(8, 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      RealColorImage realColorImage1 = new RealColorImage();
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      // Undeclared exception!
      try { 
        realColorImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(realColorImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(realColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(398, 398);
      assertEquals(398, realColorImage0.Y());
      assertEquals(398, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add(398, 398, (float) 398, (float) 398, (-965.0334F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 398
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      int int0 = 250;
      RealColorImage realColorImage1 = new RealColorImage(3, 250);
      assertEquals(3, realColorImage1.X());
      assertEquals(250, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      // Undeclared exception!
      try { 
        realColorImage1.multiply(0, (float) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 4;
      floatArray0[1] = (-1576.22F);
      floatArray0[2] = (float) (-369);
      floatArray0[3] = (float) 4;
      floatArray0[4] = (float) (-369);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (float) (-369);
      floatArray0[7] = 0.0F;
      floatArray0[8] = (float) (-369);
      ROI rOI0 = new ROI(4, (-369), 2223, 16);
      assertEquals(2220, rOI0.X());
      assertEquals((-369), rOI0.uy());
      assertEquals(4, rOI0.ux());
      assertEquals(16, rOI0.ly());
      assertEquals(386, rOI0.Y());
      assertEquals(2223, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(4, (-369), floatArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add((-668), (float) (-668), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -668
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply((float[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.set(2, 2, (Float[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(2778, 128);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(128, realColorImage0.Y());
      assertEquals(2778, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(2778, (float) 2778, (ROI) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2778
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.min(17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      int int0 = 1;
      float float0 = (-200.0F);
      // Undeclared exception!
      try { 
        realColorImage0.divide(1, (-200.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide((-2325), (float) (-2325), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2325
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(398, 398);
      assertEquals(398, realColorImage0.Y());
      assertEquals(398, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ROI rOI0 = new ROI(2936, 884, 398, 239);
      assertEquals(646, rOI0.Y());
      assertEquals(884, rOI0.ly());
      assertEquals(2936, rOI0.lx());
      assertEquals(398, rOI0.ux());
      assertEquals(2539, rOI0.X());
      assertEquals(239, rOI0.uy());
      assertNotNull(rOI0);
      
      rOI0.setROI(398, 239, 2936, 398);
      assertEquals(398, rOI0.ly());
      assertEquals(2936, rOI0.lx());
      assertEquals(398, rOI0.ux());
      assertEquals(2539, rOI0.X());
      assertEquals(239, rOI0.uy());
      assertEquals(160, rOI0.Y());
      
      int int0 = rOI0.Y();
      assertEquals(398, rOI0.ly());
      assertEquals(2936, rOI0.lx());
      assertEquals(398, rOI0.ux());
      assertEquals(2539, rOI0.X());
      assertEquals(239, rOI0.uy());
      assertEquals(160, rOI0.Y());
      assertEquals(160, int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 884;
      // Undeclared exception!
      try { 
        realColorImage0.multiply(239, 160, floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 399
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      Float float0 = Float.valueOf((-32768.0F));
      assertNotNull(float0);
      assertEquals((-32768.0F), (float)float0, 0.01F);
      
      DummyObserver dummyObserver0 = new DummyObserver();
      assertNotNull(dummyObserver0);
      
      DummyObserver.dummy = dummyObserver0;
      DummyObserver.dummy = dummyObserver0;
      DummyObserver.dummy = dummyObserver0;
      Float float1 = Float.valueOf((-32768.0F));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-32768.0F), (float)float1, 0.01F);
      
      float float2 = 0.0F;
      float float3 = Float.min(0.0F, (-32768.0F));
      assertNotEquals(float3, float2, 0.01F);
      assertEquals((-32768.0F), float3, 0.01F);
      
      float float4 = 255.0F;
      Float float5 = Float.valueOf(255.0F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotNull(float5);
      assertEquals(255.0F, (float)float5, 0.01F);
      
      Float float6 = Float.valueOf(255.0F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertEquals((float)float6, (float)float4, 0.01F);
      assertEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotNull(float6);
      assertEquals(255.0F, (float)float6, 0.01F);
      
      Float float7 = Float.valueOf(0.0F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotNull(float7);
      assertEquals(0.0F, (float)float7, 0.01F);
      
      ROI rOI0 = new ROI(0, 0, 439, (-3492));
      assertEquals(3493, rOI0.Y());
      assertEquals(440, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(439, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals((-3492), rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract((-254.0F), (-254.0F), (-560.5F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      Float float0 = new Float((float) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float float1 = realColorImage0.maxComponent();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-32768.0F), (float)float1, 0.01F);
      
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = 2776.552F;
      floatArray0[6] = (float) 0;
      RealColorImage realColorImage1 = realColorImage0.multiply(floatArray0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2776.552F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertNotNull(realColorImage1);
      assertEquals(8, floatArray0.length);
      
      realColorImage1.byteSize();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2776.552F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(8, floatArray0.length);
      
      int int0 = realColorImage1.X();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2776.552F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(0, int0);
      assertEquals(8, floatArray0.length);
      
      RealColorImage realColorImage2 = realColorImage0.multiply(0, 3241.498F);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage2.X());
      assertEquals(0, realColorImage2.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage0, realColorImage2);
      assertSame(realColorImage2, realColorImage0);
      assertSame(realColorImage2, realColorImage1);
      assertNotNull(realColorImage2);
      
      RealColorImage realColorImage3 = realColorImage1.copy();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      assertEquals(0, realColorImage3.Y());
      assertEquals(0, realColorImage3.X());
      assertFalse(realColorImage3.equals((Object)realColorImage0));
      assertFalse(realColorImage3.equals((Object)realColorImage2));
      assertFalse(realColorImage3.equals((Object)realColorImage1));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2776.552F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage3);
      assertSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage1, realColorImage3);
      assertSame(realColorImage1, realColorImage2);
      assertSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage3, realColorImage0);
      assertNotSame(realColorImage3, realColorImage2);
      assertNotSame(realColorImage3, realColorImage1);
      assertNotNull(realColorImage3);
      assertEquals(8, floatArray0.length);
      
      realColorImage3.byteSize();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      assertEquals(0, realColorImage3.Y());
      assertEquals(0, realColorImage3.X());
      assertFalse(realColorImage0.equals((Object)realColorImage3));
      assertFalse(realColorImage1.equals((Object)realColorImage3));
      assertFalse(realColorImage3.equals((Object)realColorImage0));
      assertFalse(realColorImage3.equals((Object)realColorImage2));
      assertFalse(realColorImage3.equals((Object)realColorImage1));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2776.552F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage3);
      assertSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage1, realColorImage3);
      assertSame(realColorImage1, realColorImage2);
      assertSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage3, realColorImage0);
      assertNotSame(realColorImage3, realColorImage2);
      assertNotSame(realColorImage3, realColorImage1);
      assertEquals(8, floatArray0.length);
      
      float[] floatArray1 = realColorImage0.addSum();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertFalse(realColorImage0.equals((Object)realColorImage3));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage3);
      assertSame(realColorImage0, realColorImage2);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.divide(0, 0, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      ROI rOI1 = new ROI((-4169), (-1279), 1, 0);
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.lx());
      assertEquals(1280, rOI1.Y());
      assertEquals((-4169), rOI1.ux());
      assertEquals((-1279), rOI1.uy());
      assertEquals(4171, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      // Undeclared exception!
      try { 
        realColorImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(2778, 12);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(2778, realColorImage0.X());
      assertEquals(12, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(2778, (float) 2778, (ROI) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2778
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = 16;
      // Undeclared exception!
      try { 
        realColorImage0.multiply((float) 255, (float) 255, (float) 255, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (-50.48426F);
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      rOI0.setROI(0, (-3422), 1, 0);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(3423, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals((-3422), rOI0.uy());
      assertEquals(2, rOI0.X());
      
      ROI rOI1 = new ROI((-4169), (-1279), 1, 0);
      assertEquals(4171, rOI1.X());
      assertEquals(1280, rOI1.Y());
      assertEquals((-1279), rOI1.uy());
      assertEquals((-4169), rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int2 = rOI1.Y();
      assertEquals(4171, rOI1.X());
      assertEquals(1280, rOI1.Y());
      assertEquals((-1279), rOI1.uy());
      assertEquals((-4169), rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(rOI1, rOI0);
      assertEquals(1280, int2);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(floatArray0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1279
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.addbuffer(617, 128, 3013, 0, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = null;
      RealColorImage realColorImage1 = new RealColorImage();
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      // Undeclared exception!
      try { 
        realColorImage1.setPlane(350, (RealGrayImage) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 350
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(1.4E-45F, 1.4E-45F, 1.4E-45F, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[8];
      // Undeclared exception!
      try { 
        realColorImage0.divide(603, 603, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      DummyObserver dummyObserver0 = DummyObserver.dummy;
      assertNotNull(dummyObserver0);
      
      DummyObserver.dummy = dummyObserver0;
      // Undeclared exception!
      try { 
        realColorImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      RealGrayImage[] realGrayImageArray0 = new RealGrayImage[0];
      realColorImage1.planes = realGrayImageArray0;
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      
      ROI rOI0 = new ROI((-1), 1730, 2, (-1));
      assertEquals(4, rOI0.X());
      assertEquals((-1), rOI0.ux());
      assertEquals((-1), rOI0.uy());
      assertEquals(2, rOI0.lx());
      assertEquals(1732, rOI0.Y());
      assertEquals(1730, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage1.set(1730, 1730, (Float[]) null, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(4, 4);
      assertEquals(4, realColorImage0.X());
      assertEquals(4, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      Float float0 = Float.valueOf((float) 749);
      assertNotNull(float0);
      assertEquals(749.0F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[8];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (float) 3;
      floatArray1[1] = (float) 3;
      floatArray1[2] = (float) 749;
      floatArray1[3] = (float) 3;
      RealColorImage realColorImage1 = realColorImage0.addbuffer(749, 3, 749, 749, floatArray1);
      assertEquals(4, realColorImage0.X());
      assertEquals(4, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(3, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(749, realColorImage1.X());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertArrayEquals(new float[] {3.0F, 3.0F, 749.0F, 3.0F}, floatArray1, 0.01F);
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotNull(realColorImage1);
      assertEquals(4, floatArray1.length);
      
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[5] = float0;
      floatArray0[6] = float0;
      floatArray0[7] = float0;
      RealColorImage realColorImage2 = realColorImage0.clear(floatArray0);
      assertEquals(4, realColorImage0.X());
      assertEquals(4, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(4, realColorImage2.Y());
      assertEquals(4, realColorImage2.X());
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage0, realColorImage1);
      assertSame(realColorImage2, realColorImage0);
      assertNotSame(realColorImage2, realColorImage1);
      assertNotNull(realColorImage2);
      assertEquals(8, floatArray0.length);
      
      realColorImage2.byteSize();
      assertEquals(4, realColorImage0.X());
      assertEquals(4, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(4, realColorImage2.Y());
      assertEquals(4, realColorImage2.X());
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage0, realColorImage1);
      assertSame(realColorImage2, realColorImage0);
      assertNotSame(realColorImage2, realColorImage1);
      assertEquals(8, floatArray0.length);
      
      RealColorImage realColorImage3 = realColorImage2.divide((float) 749, 1.4E-45F, (float) floatArray0[5], rOI0);
      assertEquals(4, realColorImage0.X());
      assertEquals(4, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(4, realColorImage2.Y());
      assertEquals(4, realColorImage2.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(4, realColorImage3.X());
      assertEquals(4, realColorImage3.Y());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage3.equals((Object)realColorImage1));
      assertSame(realColorImage0, realColorImage3);
      assertSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage0, realColorImage1);
      assertSame(realColorImage2, realColorImage3);
      assertSame(realColorImage2, realColorImage0);
      assertNotSame(realColorImage2, realColorImage1);
      assertNotSame(realColorImage3, realColorImage1);
      assertSame(realColorImage3, realColorImage0);
      assertSame(realColorImage3, realColorImage2);
      assertNotNull(realColorImage3);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      int int0 = 2194;
      // Undeclared exception!
      try { 
        realColorImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(621.35F, 621.35F, 621.35F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      float float0 = 1.4E-45F;
      float float1 = 0.0F;
      // Undeclared exception!
      try { 
        realColorImage0.divide(1.4E-45F, 0.0F, (-1.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(4, 4);
      assertEquals(4, realColorImage0.X());
      assertEquals(4, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      int int0 = (-20);
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      Float float0 = Float.valueOf((float) 749);
      assertNotNull(float0);
      assertEquals(749.0F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[8];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      floatArray0[5] = float0;
      floatArray0[6] = float0;
      floatArray0[7] = float0;
      RealColorImage realColorImage1 = realColorImage0.clear(floatArray0);
      assertEquals(4, realColorImage0.X());
      assertEquals(4, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(4, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(4, realColorImage1.Y());
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertNotNull(realColorImage1);
      assertEquals(8, floatArray0.length);
      
      DummyObserver dummyObserver0 = DummyObserver.dummy;
      assertNotNull(dummyObserver0);
      
      DummyObserver.dummy = dummyObserver0;
      realColorImage1.byteSize();
      assertEquals(4, realColorImage0.X());
      assertEquals(4, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(4, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(4, realColorImage1.Y());
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(8, floatArray0.length);
      
      RealColorImage realColorImage2 = realColorImage1.add(realColorImage0);
      assertEquals(4, realColorImage0.X());
      assertEquals(4, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(4, realColorImage2.X());
      assertEquals(4, realColorImage2.Y());
      assertEquals(4, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(4, realColorImage1.Y());
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage0, realColorImage2);
      assertSame(realColorImage2, realColorImage0);
      assertSame(realColorImage2, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertSame(realColorImage1, realColorImage2);
      assertNotNull(realColorImage2);
      assertEquals(8, floatArray0.length);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(1, 8, (float) floatArray0[7], (float) 128, (float) floatArray0[3]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)89;
      byteArray0[5] = (byte)89;
      RealColorImage realColorImage0 = new RealColorImage((byte)89, (byte)0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(89, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      int int0 = 41;
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply((int) (byte)89, 41, (float) 41, (float) 41, 1850.8966F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 41
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      RealColorImage realColorImage0 = new RealColorImage(3, 16);
      assertEquals(16, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(3, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((double) 3182);
      assertNotNull(float0);
      assertEquals(3182.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-854.99677F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-854.99677F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      // Undeclared exception!
      try { 
        realColorImage0.set(0, 3182, floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3182
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[2] = (float) 0;
      Float float0 = new Float((float) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float float1 = realColorImage0.maxComponent();
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-32768.0F), (float)float1, 0.01F);
      
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      RealColorImage realColorImage1 = new RealColorImage();
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(2340, 3952.1F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2340
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(9, 16);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(16, realColorImage0.Y());
      assertEquals(9, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      ColorModel colorModel0 = ColorModel.HSV;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      realColorImage0.colorModel = colorModel0;
      assertEquals(16, realColorImage0.Y());
      assertEquals(9, realColorImage0.X());
      assertEquals(ColorModel.HSV, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      ROI rOI1 = new ROI((-4169), (-1279), 1, 0);
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.lx());
      assertEquals((-1279), rOI1.uy());
      assertEquals(4171, rOI1.X());
      assertEquals((-4169), rOI1.ux());
      assertEquals(1280, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int2 = rOI1.Y();
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.lx());
      assertEquals((-1279), rOI1.uy());
      assertEquals(4171, rOI1.X());
      assertEquals((-4169), rOI1.ux());
      assertEquals(1280, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(rOI1, rOI0);
      assertEquals(1280, int2);
      
      // Undeclared exception!
      try { 
        realColorImage0.copy(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1279
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI(632, 632, 632, 632);
      assertEquals(1, rOI0.Y());
      assertEquals(632, rOI0.ly());
      assertEquals(632, rOI0.lx());
      assertEquals(632, rOI0.uy());
      assertEquals(632, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract((float) 632, (float) 632, (float) 632, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      int int0 = 413;
      RealColorImage realColorImage0 = new RealColorImage(413, 413);
      assertEquals(413, realColorImage0.Y());
      assertEquals(413, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.clip(1744, 1744);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      Float[] floatArray0 = new Float[0];
      // Undeclared exception!
      try { 
        realColorImage0.add((-2399), (-2399), floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.diff(realColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply((-5), (-5), (float[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(17, 2);
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(17, realColorImage1.X());
      assertEquals(2, realColorImage1.Y());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      RealColorImage realColorImage2 = new RealColorImage(realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(17, realColorImage1.X());
      assertEquals(2, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(17, realColorImage2.X());
      assertEquals(2, realColorImage2.Y());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertNotNull(realColorImage2);
      
      // Undeclared exception!
      try { 
        realColorImage2.clip(628, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      int int0 = 23;
      // Undeclared exception!
      try { 
        realColorImage0.divide(23, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 23
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 20:18:43 GMT 2019
 */

package de.outstare.fortbattleplayer.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.Sector;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.impl.SimpleArea;
import de.outstare.fortbattleplayer.model.impl.SimpleCombatant;
import de.outstare.fortbattleplayer.model.impl.SimpleSector;
import de.outstare.fortbattleplayer.model.impl.SimpleWeapon;
import de.outstare.fortbattleplayer.statistics.AreaStatistic;
import de.outstare.fortbattleplayer.statistics.BattleStatistics;
import de.outstare.fortbattleplayer.statistics.CriticalHit;
import de.outstare.fortbattleplayer.statistics.LabeledData;
import de.outstare.fortbattleplayer.statistics.PositionSwitch;
import de.outstare.fortbattleplayer.statistics.RoundStatistics;
import de.outstare.fortbattleplayer.statistics.WeaponModCounter;
import java.awt.Point;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;
import javax.swing.JViewport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BattleStatistics_ESTest extends BattleStatistics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1865, 1865);
      battleStatistics0.setRound(2);
      battleStatistics0.setRound(2598);
      Map<CombatantSide, ? extends LabeledData> map0 = battleStatistics0.getNotShootersPerRound();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1063, 1063);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1128, "?)ql.%D0%|]s", 7, 1128);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleSector simpleSector0 = new SimpleSector(7, false, false, 3, 7, false, 1128, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, true);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 3, "XZIA/NQ Jc;:}?\")", characterClass0, simpleWeapon0, "?)ql.%D0%|]s");
      SimpleCombatant simpleCombatant1 = new SimpleCombatant(combatantSide0, combatantState0, 1135, "o4lQJ", characterClass0, simpleWeapon0, " is no longer dead");
      battleStatistics0.criticalShot(simpleCombatant1, simpleCombatant0, (-1815));
      assertEquals(0, simpleCombatant1._getCurrentLP());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1063, 1063);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1128, "?)ql.%D0%|]s", 7, 1128);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleSector simpleSector0 = new SimpleSector(7, false, false, 3, 7, false, 1128, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, true);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 3, "XZIA/NQ Jc;:}?\")", characterClass0, simpleWeapon0, "?)ql.%D0%|]s");
      SimpleCombatant simpleCombatant1 = new SimpleCombatant(combatantSide0, combatantState0, 2, "", characterClass0, simpleWeapon0, "?)ql.%D0%|]s");
      battleStatistics0.hasSwappedPosition(simpleCombatant0, simpleCombatant1);
      assertEquals(CombatantSide.ATTACKER, simpleCombatant0.getSide());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(1118736, true, true, 2, 2, true, 1803, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(2, 1118736, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 1118736, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1118736, "D>< ", 2, 327);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-534), "", characterClass0, simpleWeapon0, "");
      // Undeclared exception!
      try { 
        battleStatistics0.aimsAt(simpleCombatant0, (Combatant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(1118719, false, false, 24, 24, false, 1118719, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(2, 1118719, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1728), simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2, "D>< ", 2, 1118719);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-2496), "D>< ", characterClass0, simpleWeapon0, "A");
      battleStatistics0.isOnline(simpleCombatant0, true);
      battleStatistics0.isOnline(simpleCombatant0, true);
      double double0 = battleStatistics0.averageRoundsOnline(combatantSide0);
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      BattleStatistics battleStatistics0 = new BattleStatistics(1237, 0);
      double double0 = battleStatistics0.numberOfMovesPerPlayer(combatantSide0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(25, 3274);
      HashMap<CombatantSide, AtomicInteger> hashMap0 = new HashMap<CombatantSide, AtomicInteger>();
      HashMap<CombatantSide, RoundStatistics> hashMap1 = new HashMap<CombatantSide, RoundStatistics>();
      battleStatistics0.addAndResetRoundCounter(hashMap0, hashMap1);
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(1118719, false, false, 0, 0, false, 1803, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(50, 1118719, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1728), simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(3, "?)ql.%D0%|]s", 2, 1118719);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-2496), "D>< ", characterClass0, simpleWeapon0, "A");
      battleStatistics0.hasSwappedPosition(simpleCombatant0, simpleCombatant0);
      Set<PositionSwitch> set0 = battleStatistics0.switchedPosList(combatantSide0);
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      int int0 = battleStatistics0.round(0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1271, 1271);
      int int0 = battleStatistics0.round(1271);
      assertEquals(1271, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-18), (-18));
      int int0 = battleStatistics0.round((-18));
      assertEquals((-18), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1063, 1063);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1128, "?)ql.%D0%|]s", 7, 1899);
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleSector simpleSector0 = new SimpleSector(7, false, false, 3, 7, true, 1128, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, true);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 13, "?)ql.%D0%|]s", characterClass0, simpleWeapon0, "?)ql.%D0%|]s");
      battleStatistics0.isOnline(simpleCombatant0, false);
      battleStatistics0.aimsAt(simpleCombatant0, simpleCombatant0);
      int int0 = battleStatistics0.percentAbleToShoot(combatantSide0);
      assertEquals(100, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1063, 1063);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1, "", 1, 1063);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Area area0 = mock(Area.class, new ViolatedAssumptionAnswer());
      doReturn((Combatant) null).when(area0).occupy(any(de.outstare.fortbattleplayer.model.Combatant.class) , any(de.outstare.fortbattleplayer.model.Area.class));
      doReturn((String) null).when(area0).toString();
      CombatantState combatantState0 = new CombatantState(area0, (-2353), area0, true);
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 3, "", characterClass0, simpleWeapon0, "");
      battleStatistics0.criticalShot(simpleCombatant0, simpleCombatant0, (-2353));
      Map<Area, AreaStatistic> map0 = battleStatistics0.getFieldStatistics();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      WeaponModCounter.ShinyOilCounter weaponModCounter_ShinyOilCounter0 = new WeaponModCounter.ShinyOilCounter();
      int int0 = battleStatistics0.countWeaponMods(combatantSide0, weaponModCounter_ShinyOilCounter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-1854), (-1854));
      int int0 = battleStatistics0.combatantLifetime((Combatant) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1063, 1063);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1128, "?)ql.%D0%|]s", 7, 1899);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleSector simpleSector0 = new SimpleSector(7, false, false, 3, 7, true, 1128, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, true);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "XZIA/NQ Jc;:}?\")", characterClass0, simpleWeapon0, "?)ql.%D0%|]s");
      battleStatistics0.isOnline(simpleCombatant0, true);
      int int0 = battleStatistics0.amountOfDefenseBonus(combatantSide0);
      assertEquals(1135, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1063, 1063);
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(3, true, false, 1063, (-3442), true, 1, characterClass0);
      JViewport jViewport0 = new JViewport();
      Point point0 = jViewport0.getViewPosition();
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 1, simpleArea0, true);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-3442), "", 0, 0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1, "XZIA/NQ Jc;:}?\")", characterClass0, simpleWeapon0, "MOVETARGET");
      battleStatistics0.isOnline(simpleCombatant0, false);
      int int0 = battleStatistics0.amountOfDefenseBonus(combatantSide0);
      assertEquals((-3441), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(1118719, false, false, 24, 24, false, 1118719, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(2, 1118719, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1728), simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(3, "?)ql.%D0%|]s", 2, 1118719);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-2496), "D>< ", characterClass0, simpleWeapon0, "A");
      battleStatistics0.isOnline(simpleCombatant0, false);
      int int0 = battleStatistics0.amountOfAttackBonus(combatantSide0);
      assertEquals(1118743, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-25), (-25));
      // Undeclared exception!
      try { 
        battleStatistics0.numberOfMovesPerPlayer((CombatantSide) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(327, 2);
      // Undeclared exception!
      try { 
        battleStatistics0.isOnline((Combatant) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1865, 1865);
      // Undeclared exception!
      try { 
        battleStatistics0.isHit((Combatant) null, 75, 1720);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1271, 1271);
      // Undeclared exception!
      try { 
        battleStatistics0.hasSwappedPosition((Combatant) null, (Combatant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2836, 2836);
      Sector sector0 = mock(Sector.class, new ViolatedAssumptionAnswer());
      SimpleArea simpleArea0 = new SimpleArea(1394, 50, sector0);
      // Undeclared exception!
      try { 
        battleStatistics0.hasMoved((Combatant) null, simpleArea0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1271, 1271);
      // Undeclared exception!
      try { 
        battleStatistics0.criticalShot((Combatant) null, (Combatant) null, 1271);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.CriticalHit", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(1118719, false, false, 24, 24, false, 1118719, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(2, 1118719, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1728), simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2, "(IkY-k{}x6Cu3Ek+L", 2, 1118719);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 24, "(IkY-k{}x6Cu3Ek+L", characterClass0, simpleWeapon0, "A");
      battleStatistics0.isOnline(simpleCombatant0, true);
      // Undeclared exception!
      try { 
        battleStatistics0.countWeaponMods(combatantSide0, (WeaponModCounter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-659), 1073741825);
      Hashtable<CombatantSide, RoundStatistics> hashtable0 = new Hashtable<CombatantSide, RoundStatistics>();
      // Undeclared exception!
      try { 
        battleStatistics0.addAndResetRoundCounter((Map<CombatantSide, AtomicInteger>) null, hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1541, 1541);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      List<CriticalHit> list0 = battleStatistics0.critList(combatantSide0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1059, 1059);
      battleStatistics0.setRound(1059);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1059, "?)ql.%D0%|]s", 1059, 1059);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleSector simpleSector0 = new SimpleSector(1059, false, false, 1059, 1059, false, 1059, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, false);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "XZIA/NQ Jc;:}?\")", characterClass0, simpleWeapon0, "?)ql.%D0%|]s");
      battleStatistics0.isOnline(simpleCombatant0, false);
      CombatantSide combatantSide1 = CombatantSide.ATTACKER;
      List<Combatant> list0 = battleStatistics0.turnOrder(combatantSide1);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1059, 1059);
      battleStatistics0.setRound(1059);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1059, "?)ql.%D0%|]s", 1059, 1059);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleSector simpleSector0 = new SimpleSector(1059, false, false, 1059, 1059, false, 1059, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, false);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "XZIA/NQ Jc;:}?\")", characterClass0, simpleWeapon0, "?)ql.%D0%|]s");
      battleStatistics0.isOnline(simpleCombatant0, false);
      List<Combatant> list0 = battleStatistics0.turnOrder(combatantSide0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      List<CriticalHit> list0 = battleStatistics0.critList((CombatantSide) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      long long0 = battleStatistics0.criticalHitDamage(combatantSide0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1073741824, 1421);
      Set<PositionSwitch> set0 = battleStatistics0.switchedPosList((CombatantSide) null);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(1118719, false, false, 0, 0, false, 1803, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(2, 1118719, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1728), simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(3, "?)ql.%D0%|]s", 2, 1118719);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-2496), "D>< ", characterClass0, simpleWeapon0, "A");
      battleStatistics0.isOnline(simpleCombatant0, false);
      CombatantSide combatantSide1 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.numberOfHipFlasks(combatantSide1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(1118719, false, false, 24, 24, false, 1118719, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(1118719, 24, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 1118719, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2, "(IkY-k{}x6Cu3Ek+L", 2, 1118719);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 24, "(IkY-k{}x6Cu3Ek+L", characterClass0, simpleWeapon0, "A");
      battleStatistics0.isOnline(simpleCombatant0, false);
      int int0 = battleStatistics0.numberOfShinyOil(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(1118733, true, true, 2, 2, true, 1803, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(2, 1118733, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 1118733, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(3, "D>< ", 2, 1118733);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1118733, "D>< ", characterClass0, simpleWeapon0, "D>< ");
      battleStatistics0.aimsAt(simpleCombatant0, simpleCombatant0);
      CombatantSide combatantSide1 = CombatantSide.ATTACKER;
      String string0 = battleStatistics0.targetNoOne(combatantSide1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1063, 1063);
      battleStatistics0.setRound(1063);
      battleStatistics0.setRound(1063);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1, "?)ql.%D0%|]s", 1, 2);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(3761, false, false, 1, 1, false, 5, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 1063, simpleArea0, true);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "?)ql.%D0%|]s", characterClass0, simpleWeapon0, "XZIA/NQ Jc;:}?\")");
      battleStatistics0.isOnline(simpleCombatant0, true);
      assertTrue(simpleCombatant0.isOnline());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(1118719, true, true, 0, 0, true, 1803, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(2, 1118719, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 1118719, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(3, "", 2, 1118719);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-2496), "D>< ", characterClass0, simpleWeapon0, "");
      battleStatistics0.aimsAt(simpleCombatant0, simpleCombatant0);
      battleStatistics0.aimsAt(simpleCombatant0, simpleCombatant0);
      assertTrue(simpleCombatant0.isOnline());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(1118719, false, false, 24, 24, false, 1118719, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(1118719, 24, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 1118719, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2, "(IkY-k{}x6Cu3Ek+L", 2, 1118719);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 24, "(IkY-k{}x6Cu3Ek+L", characterClass0, simpleWeapon0, "A");
      battleStatistics0.isOnline(simpleCombatant0, false);
      double double0 = battleStatistics0.averageRoundsOnline(combatantSide0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(1118719, false, false, 24, 24, false, 1118719, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(2, 1118719, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1728), simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2, "(IkY-k{}x6Cu3Ek+L", 2, 1118719);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 24, "(IkY-k{}x6Cu3Ek+L", characterClass0, simpleWeapon0, "A");
      battleStatistics0.isOnline(simpleCombatant0, true);
      CombatantSide combatantSide1 = CombatantSide.ATTACKER;
      double double0 = battleStatistics0.averageRoundsOnline(combatantSide1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(1118719, false, false, 24, 24, false, 1118719, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(2, 1118719, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1728), simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2, "(IkY-k{}x6Cu3Ek+L", 2, 1118719);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 24, "(IkY-k{}x6Cu3Ek+L", characterClass0, simpleWeapon0, "A");
      battleStatistics0.isOnline(simpleCombatant0, false);
      double double0 = battleStatistics0.roundsTillOnline(combatantSide0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(1118719, false, false, 24, 24, false, 1118719, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(2, 1118719, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1728), simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2, "(IkY-k{}x6Cu3Ek+L", 2, 1118719);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 24, "(IkY-k{}x6Cu3Ek+L", characterClass0, simpleWeapon0, "");
      battleStatistics0.isOnline(simpleCombatant0, true);
      CombatantSide combatantSide1 = CombatantSide.ATTACKER;
      double double0 = battleStatistics0.roundsTillOnline(combatantSide1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(1118719, false, false, 24, 24, false, 1118719, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(2, 1118719, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1728), simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2, "(IkY-k{}x6Cu3Ek+L", 2, 1118719);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 24, "(IkY-k{}x6Cu3Ek+L", characterClass0, simpleWeapon0, "");
      battleStatistics0.isOnline(simpleCombatant0, true);
      double double0 = battleStatistics0.roundsTillOnline(combatantSide0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(1118719, false, false, 24, 24, false, 1118719, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(2, 1118719, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1728), simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2, "(IkY-k{}x6Cu3Ek+L", 2, 1118719);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 24, "(IkY-k{}x6Cu3Ek+L", characterClass0, simpleWeapon0, "A");
      battleStatistics0.isOnline(simpleCombatant0, false);
      int int0 = battleStatistics0.numberOfOffliners(combatantSide0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(1118736, true, true, 2, 2, true, 1803, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(2, 1118736, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 1118736, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2, "D>< ", 2, 1118736);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1118736, (String) null, characterClass0, simpleWeapon0, "D>< ");
      battleStatistics0.isOnline(simpleCombatant0, true);
      CombatantSide combatantSide1 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.numberOfOffliners(combatantSide1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(1118736, true, true, 2, 2, true, 1803, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(2, 1118736, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 1118736, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2, "D>< ", 2, 1118736);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1118736, (String) null, characterClass0, simpleWeapon0, "D>< ");
      battleStatistics0.isOnline(simpleCombatant0, true);
      int int0 = battleStatistics0.numberOfOffliners(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      double double0 = battleStatistics0.numberOfMovesPerPlayer(combatantSide0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-25), (-25));
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      double double0 = battleStatistics0.numberOfMovesPerPlayer(combatantSide0);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(1118736, false, false, 2, 2, false, 1803, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(2, 1118736, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 1118736, simpleArea0, false);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1118736, "D>< ", characterClass0, (Weapon) null, "D>< ");
      battleStatistics0.aimsAt(simpleCombatant0, simpleCombatant0);
      CombatantSide combatantSide1 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.percentAbleToShoot(combatantSide1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(1118736, true, true, 2, 2, true, 2, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(2, 1118736, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 1118736, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2, "D>< ", 2, 1118736);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1118736, (String) null, characterClass0, simpleWeapon0, "D>< ");
      battleStatistics0.isOnline(simpleCombatant0, true);
      int int0 = battleStatistics0.combatantLifetime(simpleCombatant0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1063, 1063);
      battleStatistics0.setRound(1063);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1063, "?)ql.%D0%|]s", 7, 1063);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(7, false, false, 1063, 7, false, 1063, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, false);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1063, "XZIA1Q Jc;:}?)", characterClass0, simpleWeapon0, "?)ql.%D0%|]s");
      battleStatistics0.isOnline(simpleCombatant0, false);
      battleStatistics0.setRound(0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1865, 1865);
      battleStatistics0.setRound(2);
      battleStatistics0.setRound((-533));
      battleStatistics0.setRound(2598);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1726, 1726);
      Map<CombatantSide, ? extends LabeledData> map0 = battleStatistics0.getShotsPerRound();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.amountOfDefenseBonus(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2, "D>< ", 2, 1118736);
      Area area0 = mock(Area.class, new ViolatedAssumptionAnswer());
      doReturn((Combatant) null).when(area0).occupy(any(de.outstare.fortbattleplayer.model.Combatant.class) , any(de.outstare.fortbattleplayer.model.Area.class));
      CombatantState combatantState0 = new CombatantState(area0, (-1910), area0, false);
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "D>< ", characterClass0, simpleWeapon0, "D>< ");
      battleStatistics0.aimsAt(simpleCombatant0, simpleCombatant0);
      int int0 = battleStatistics0.percentAbleToShoot((CombatantSide) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.criticalHits(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      Map<CombatantSide, ? extends LabeledData> map0 = battleStatistics0.getHitsPerRound();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-25), (-25));
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Area area0 = mock(Area.class, new ViolatedAssumptionAnswer());
      doReturn((Combatant) null).when(area0).occupy(any(de.outstare.fortbattleplayer.model.Combatant.class) , any(de.outstare.fortbattleplayer.model.Area.class));
      CombatantState combatantState0 = new CombatantState(area0, (-262), area0, true);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(3, "", 50, 50);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 3, "", characterClass0, simpleWeapon0, "");
      SimpleSector simpleSector0 = new SimpleSector(4743, true, true, (-1440), 4743, true, (-1388), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-1), 3000, simpleSector0);
      battleStatistics0.hasMoved(simpleCombatant0, simpleArea0);
      double double0 = battleStatistics0.numberOfMovesPerPlayer(combatantSide0);
      assertEquals((-0.04), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      battleStatistics0.isAlive((Combatant) null);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.numberOfSchmierOil(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1063, 1063);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.numberOfFettesOil(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      Map<Area, AreaStatistic> map0 = battleStatistics0.getFieldStatistics();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(2, true, true, 2, 2, true, 1803, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(2, 2, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 2, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1803, "D>< ", 2, 2);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 2, "D>< ", characterClass0, simpleWeapon0, "D>< ");
      battleStatistics0.aimsAt(simpleCombatant0, simpleCombatant0);
      String string0 = battleStatistics0.targetNoOne(combatantSide0);
      assertEquals("D>< (1)", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1100, 1100);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.totalSwaps(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-1), (-1));
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.numberOfGraphitLubricants(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1073741824, 1421);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.amountOfAttackBonus(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-190), (-1300));
      battleStatistics0.isDead((Combatant) null);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      BattleStatistics battleStatistics0 = new BattleStatistics(3437, 3437);
      int int0 = battleStatistics0.numberOfLoadingChamerOrEnhancedPatrons(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1063, 1063);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1128, "?)ql.%D0%|]s", 7, 1128);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleSector simpleSector0 = new SimpleSector(7, false, false, 3, 7, false, 1128, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, true);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 3, "XZIA/NQ Jc;:}?\")", characterClass0, simpleWeapon0, "?)ql.%D0%|]s");
      battleStatistics0.isHit(simpleCombatant0, 0, 1231);
      assertEquals("XZIA/NQ Jc;:}?\")", simpleCombatant0.getName());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(1118719, false, false, 0, 0, false, 1803, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(2, 1118719, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1728), simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(3, "?)ql.%D0%|]s", 2, 1118719);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-2496), "D>< ", characterClass0, simpleWeapon0, "A");
      battleStatistics0.newDestination(simpleCombatant0, simpleArea0);
      assertEquals(1118719, simpleArea0.getHeight());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.numberOfBayonets(combatantSide0);
      assertEquals(0, int0);
  }
}

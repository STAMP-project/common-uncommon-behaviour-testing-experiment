/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 13:34:12 GMT 2019
 */

package com.allenstudio.ir.ui.calendar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.allenstudio.ir.ui.calendar.IMonthlyCalendarModel;
import com.allenstudio.ir.ui.calendar.MonthlyCalendar;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.SystemColor;
import java.awt.event.MouseEvent;
import java.util.Calendar;
import java.util.Locale;
import java.util.Stack;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.border.TitledBorder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MonthlyCalendar_ESTest extends MonthlyCalendar_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, (-615), (-615), 27, (-615), 27);
      monthlyCalendar0.setYearMonth((Calendar) mockGregorianCalendar0);
      monthlyCalendar0.getSelectedDate();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.getSelectedDate();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(27, 20, 27, 20, (-216), 1);
      monthlyCalendar0.setYearMonth((Calendar) mockGregorianCalendar0);
      monthlyCalendar0.getSelectedDate();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.setMonth(1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.setMonth(2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.setYear(1970);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      FlowLayout flowLayout0 = new FlowLayout();
      Dimension dimension0 = flowLayout0.preferredLayoutSize(monthlyCalendar0);
      monthlyCalendar0.setCellDimension(dimension0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.setMouseListeningEnabled(false);
      monthlyCalendar0.getMouseListeningEnabled();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.model = null;
      monthlyCalendar0.getModel();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      Color color0 = Color.GREEN;
      monthlyCalendar0.setHighlightForeground(color0);
      monthlyCalendar0.getHighlightForeground();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      // Undeclared exception!
      try { 
        monthlyCalendar0.setYearMonth((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      Locale locale0 = Locale.FRENCH;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      calendar0.set(0, 2123);
      // Undeclared exception!
      try { 
        monthlyCalendar0.setYearMonth(calendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      // Undeclared exception!
      try { 
        monthlyCalendar0.setMarked(2981, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2980
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendarModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      // Undeclared exception!
      try { 
        monthlyCalendar0.setHeaderComponent(monthlyCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // adding container's parent to itself
         //
         verifyException("java.awt.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      // Undeclared exception!
      try { 
        monthlyCalendar0.mouseReleased((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      // Undeclared exception!
      try { 
        monthlyCalendar0.mousePressed((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      // Undeclared exception!
      try { 
        monthlyCalendar0.mouseMoved((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      // Undeclared exception!
      try { 
        monthlyCalendar0.mouseExited((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      // Undeclared exception!
      try { 
        monthlyCalendar0.mouseEntered((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      // Undeclared exception!
      try { 
        monthlyCalendar0.mouseDragged((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      // Undeclared exception!
      try { 
        monthlyCalendar0.mouseClicked((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      // Undeclared exception!
      try { 
        MonthlyCalendar.paintSymbol((Graphics) null, monthlyCalendar0.NORMAL_FONT, monthlyCalendar0.DEFAULT_HEADER_BG, monthlyCalendar0.DEFAULT_HIGHLIGHT_BG, "Sat", 710, 710, 27, 20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.setYearMonth(2014, 31);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.setMouseListeningEnabled(false);
      monthlyCalendar0.setMouseListeningEnabled(true);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.setYear(2456);
      monthlyCalendar0.getSelectedDate();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      Calendar calendar0 = monthlyCalendar0.getSelectedDate();
      monthlyCalendar0.setMonth(12);
      monthlyCalendar0.setYearMonth(calendar0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-413), 20, 4661, 4661, 27, 20);
      monthlyCalendar0.setYearMonth((Calendar) mockGregorianCalendar0);
      monthlyCalendar0.getSelectedDate();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      // Undeclared exception!
      try { 
        MonthlyCalendar.paintSymbol((Graphics) null, monthlyCalendar0.NORMAL_FONT, monthlyCalendar0.DEFAULT_HEADER_BG, monthlyCalendar0.DEFAULT_HIGHLIGHT_BG, (String) null, 27, 20, 20, 20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      // Undeclared exception!
      try { 
        monthlyCalendar0.paintComponent((Graphics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.setHeaderComponent((JComponent) null);
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      JOptionPane jOptionPane0 = new JOptionPane(monthlyCalendar0.DEFAULT_CELL_HEIGHT);
      // Undeclared exception!
      try { 
        monthlyCalendar0.setHeaderComponent(jOptionPane0);
        fail("Expecting exception: IncompatibleClassChangeError");
      
      } catch(IncompatibleClassChangeError e) {
         //
         // Expected static method org.evosuite.runtime.mock.javax.swing.MockJComponent.getPreferredSize()Ljava/awt/Dimension;
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      // Undeclared exception!
      try { 
        monthlyCalendar0.setCellDimension((Dimension) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.setWeekStartOnSunday(false);
      monthlyCalendar0.setYear(2482);
      assertEquals(2482, monthlyCalendar0.getYear());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      Calendar calendar0 = Calendar.getInstance();
      monthlyCalendar0.setYearMonth(calendar0);
      monthlyCalendar0.setYearMonth(calendar0);
      assertEquals(11, monthlyCalendar0.getMonth());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.setYearMonth(3, 3);
      monthlyCalendar0.setYearMonth(3, 3);
      assertEquals(3, monthlyCalendar0.getMonth());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      // Undeclared exception!
      try { 
        monthlyCalendar0.setMonth(20);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid month specified!
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      // Undeclared exception!
      try { 
        monthlyCalendar0.setMonth((-887));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid month specified!
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      // Undeclared exception!
      try { 
        monthlyCalendar0.setYear(20);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year must be later than 1970!
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.setMouseListeningEnabled(true);
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      
      monthlyCalendar0.setMouseListeningEnabled(false);
      monthlyCalendar0.setMouseListeningEnabled(false);
      assertEquals(2, monthlyCalendar0.getMonth());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      Color color0 = monthlyCalendar0.getHeaderBackground();
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(150, color0.getGreen());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.getSelectedDay();
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      Stack<Integer> stack0 = new Stack<Integer>();
      JTable jTable0 = new JTable(stack0, stack0);
      Dimension dimension0 = jTable0.getPreferredScrollableViewportSize();
      monthlyCalendar0.setPreferredSize(dimension0);
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      int int0 = monthlyCalendar0.getMonth();
      assertEquals(2, int0);
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      IMonthlyCalendarModel iMonthlyCalendarModel0 = monthlyCalendar0.getModel();
      monthlyCalendar0.setModel(iMonthlyCalendarModel0);
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.getWeekStartOnSunday();
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      int int0 = monthlyCalendar0.getYear();
      assertEquals(2014, int0);
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.setHighlightBackground(monthlyCalendar0.DEFAULT_HIGHLIGHT_BG);
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.setDateForeground(monthlyCalendar0.DEFAULT_HEADER_FG);
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      monthlyCalendar0.setHeaderForeground(systemColor0);
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      Dimension dimension0 = monthlyCalendar0.getCellDimension();
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(20, dimension0.height);
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(27, dimension0.width);
      assertEquals(2014, monthlyCalendar0.getYear());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.resetHighlight();
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.getDateForeground();
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.setMarked(3, true);
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.setHeaderFont(monthlyCalendar0.MARKED_FONT);
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.dateSelected();
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      Color color0 = monthlyCalendar0.getDateBackground();
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(255, color0.getBlue());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.getHeaderComponent();
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.setHeaderBackground(monthlyCalendar0.DEFAULT_HIGHLIGHT_FG);
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      SystemColor systemColor0 = SystemColor.controlText;
      monthlyCalendar0.setDateBackground(systemColor0);
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      Font font0 = monthlyCalendar0.getHeaderFont();
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals("Dialog", font0.getName());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      Color color0 = monthlyCalendar0.getHeaderForeground();
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(228, color0.getGreen());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      TitledBorder titledBorder0 = new TitledBorder("");
      monthlyCalendar0.setBorder(titledBorder0);
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      boolean boolean0 = monthlyCalendar0.getMouseListeningEnabled();
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(boolean0);
      assertEquals(2, monthlyCalendar0.getMonth());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      Color color0 = monthlyCalendar0.getHighlightBackground();
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals((-16755485), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      Color color0 = monthlyCalendar0.getHighlightForeground();
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(255, color0.getRed());
      assertEquals(2014, monthlyCalendar0.getYear());
  }
}

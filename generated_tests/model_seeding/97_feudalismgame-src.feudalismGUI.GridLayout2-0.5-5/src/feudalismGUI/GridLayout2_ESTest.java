/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 18:55:40 GMT 2019
 */

package src.feudalismGUI;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.util.Vector;
import javax.swing.Action;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JList;
import javax.swing.JMenu;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.JTree;
import javax.swing.TransferHandler;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.TableModel;
import javax.swing.tree.TreeNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import src.feudalismGUI.GridLayout2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GridLayout2_ESTest extends GridLayout2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(0, 160, 146, 2);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable((TableModel) null, defaultTableColumnModel0);
      Dimension dimension0 = gridLayout2_0.minimumLayoutSize(jTable0);
      assertEquals(0, dimension0.height);
      assertEquals(23214, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JScrollPane jScrollPane0 = new JScrollPane();
      GridLayout2 gridLayout2_0 = new GridLayout2(2, 629);
      gridLayout2_0.layoutContainer(jScrollPane0);
      assertEquals(629, gridLayout2_0.getColumns());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      gridLayout2_0.setRows(1607);
      JColorChooser jColorChooser0 = new JColorChooser();
      gridLayout2_0.layoutContainer(jColorChooser0);
      assertFalse(jColorChooser0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JTree jTree0 = new JTree((TreeNode) null);
      GridLayout2 gridLayout2_0 = new GridLayout2(0, 158);
      gridLayout2_0.layoutContainer(jTree0);
      assertFalse(jTree0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JMenu jMenu0 = new JMenu("minimumLayoutSize", true);
      GridLayout2 gridLayout2_0 = new GridLayout2((-1), 2069, (-1), (-1));
      Dimension dimension0 = gridLayout2_0.preferredLayoutSize(jMenu0);
      assertEquals(5, dimension0.height);
      assertEquals((-2064), dimension0.width);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      JTree jTree0 = new JTree((TreeNode) null);
      Dimension dimension0 = gridLayout2_0.preferredLayoutSize(jTree0);
      assertEquals(0, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(1273, 1273, 1273, 2502);
      Action action0 = TransferHandler.getCopyAction();
      JToggleButton jToggleButton0 = new JToggleButton(action0);
      Dimension dimension0 = gridLayout2_0.minimumLayoutSize(jToggleButton0);
      assertEquals((-1239), dimension0.width);
      assertEquals(3182554, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      JTree jTree0 = new JTree((TreeNode) null);
      Dimension dimension0 = gridLayout2_0.minimumLayoutSize(jTree0);
      assertEquals(0, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      // Undeclared exception!
      try { 
        gridLayout2_0.preferredLayoutSize((Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JTree jTree0 = new JTree();
      GridLayout2 gridLayout2_0 = new GridLayout2((-2207), (-2207), 1559, (-1));
      // Undeclared exception!
      try { 
        gridLayout2_0.preferredLayoutSize(jTree0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JTree jTree0 = new JTree();
      GridLayout2 gridLayout2_0 = new GridLayout2((-638), 0);
      // Undeclared exception!
      try { 
        gridLayout2_0.preferredLayoutSize(jTree0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      // Undeclared exception!
      try { 
        gridLayout2_0.minimumLayoutSize((Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JTree jTree0 = new JTree();
      GridLayout2 gridLayout2_0 = new GridLayout2((-3432), (-3432));
      // Undeclared exception!
      try { 
        gridLayout2_0.minimumLayoutSize(jTree0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2((-2329), 0);
      JInternalFrame jInternalFrame0 = new JInternalFrame("r.q8kFX7m-giT3d@9");
      // Undeclared exception!
      try { 
        gridLayout2_0.minimumLayoutSize(jInternalFrame0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      // Undeclared exception!
      try { 
        gridLayout2_0.layoutContainer((Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JTree jTree0 = new JTree();
      GridLayout2 gridLayout2_0 = new GridLayout2((-2207), (-2207), 1559, (-1));
      // Undeclared exception!
      try { 
        gridLayout2_0.layoutContainer(jTree0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GridLayout2 gridLayout2_0 = null;
      try {
        gridLayout2_0 = new GridLayout2(0, 0, (-2329), (-2329));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rows and cols cannot both be zero
         //
         verifyException("java.awt.GridLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GridLayout2 gridLayout2_0 = null;
      try {
        gridLayout2_0 = new GridLayout2(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rows and cols cannot both be zero
         //
         verifyException("java.awt.GridLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      JTree jTree0 = new JTree();
      gridLayout2_0.setRows(1607);
      gridLayout2_0.layoutContainer(jTree0);
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JTree jTree0 = new JTree();
      GridLayout2 gridLayout2_0 = new GridLayout2((-3561), 0);
      // Undeclared exception!
      try { 
        gridLayout2_0.layoutContainer(jTree0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      JTextField jTextField0 = new JTextField((String) null);
      gridLayout2_0.layoutContainer(jTextField0);
      assertFalse(jTextField0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      Vector<String> vector0 = new Vector<String>();
      DefaultComboBoxModel<String> defaultComboBoxModel0 = new DefaultComboBoxModel<String>(vector0);
      JComboBox<String> jComboBox0 = new JComboBox<String>(defaultComboBoxModel0);
      JList<String> jList0 = new JList<String>();
      Component component0 = jList0.add((Component) jComboBox0);
      JOptionPane jOptionPane0 = new JOptionPane();
      JInternalFrame jInternalFrame0 = jOptionPane0.createInternalFrame(component0, "");
      gridLayout2_0.layoutContainer(jInternalFrame0);
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      JSplitPane jSplitPane0 = new JSplitPane();
      Dimension dimension0 = gridLayout2_0.minimumLayoutSize(jSplitPane0);
      assertEquals(242, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(1541, 1541, 1198, 1541);
      JSplitPane jSplitPane0 = new JSplitPane();
      Dimension dimension0 = gridLayout2_0.minimumLayoutSize(jSplitPane0);
      assertEquals(122, dimension0.width);
      assertEquals(2373193, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultTableCellRenderer.UIResource defaultTableCellRenderer_UIResource0 = new DefaultTableCellRenderer.UIResource();
      GridLayout2 gridLayout2_0 = new GridLayout2((-1199), 1, (-3519), 1602);
      Dimension dimension0 = gridLayout2_0.minimumLayoutSize(defaultTableCellRenderer_UIResource0);
      assertEquals(2, dimension0.width);
      assertEquals((-1600), dimension0.height);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JMenu jMenu0 = new JMenu("", false);
      GridLayout2 gridLayout2_0 = new GridLayout2((-1199), 1, (-3519), 1602);
      Dimension dimension0 = gridLayout2_0.preferredLayoutSize(jMenu0);
      assertEquals(4, dimension0.width);
      assertEquals((-1598), dimension0.height);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      Vector<String> vector0 = new Vector<String>();
      DefaultComboBoxModel<String> defaultComboBoxModel0 = new DefaultComboBoxModel<String>(vector0);
      JComboBox<String> jComboBox0 = new JComboBox<String>(defaultComboBoxModel0);
      Dimension dimension0 = gridLayout2_0.preferredLayoutSize(jComboBox0);
      assertEquals(7, dimension0.height);
      assertEquals(10, dimension0.width);
  }
}

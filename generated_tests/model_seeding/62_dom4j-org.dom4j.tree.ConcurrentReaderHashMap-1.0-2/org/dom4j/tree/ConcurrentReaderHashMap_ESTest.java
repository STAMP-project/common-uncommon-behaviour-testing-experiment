/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 05 13:16:10 GMT 2019
 */

package org.dom4j.tree;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Map;
import org.dom4j.tree.ConcurrentReaderHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConcurrentReaderHashMap_ESTest extends ConcurrentReaderHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(1);
      concurrentReaderHashMap0.elements();
      ConcurrentReaderHashMap.DEFAULT_INITIAL_CAPACITY = 8171;
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(8171, 8171);
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap();
      concurrentReaderHashMap1.put(concurrentReaderHashMap2, concurrentReaderHashMap0);
      concurrentReaderHashMap1.recordModification((Object) null);
      concurrentReaderHashMap0.putAll(concurrentReaderHashMap1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(3506);
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(0, 1263.0F);
      concurrentReaderHashMap1.clear();
      concurrentReaderHashMap1.sput(concurrentReaderHashMap0, concurrentReaderHashMap0, 8150);
      int int0 = 1729;
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(1729);
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap2.new ValueIterator();
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator0.lastReturned;
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = null;
      try {
        abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>((Map.Entry<? extends String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap$SimpleImmutableEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      Object object0 = concurrentReaderHashMap0.clone();
      Map.Entry<ConcurrentReaderHashMap, String> map_Entry0 = (Map.Entry<ConcurrentReaderHashMap, String>) mock(Map.Entry.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(map_Entry0).getKey();
      concurrentReaderHashMap0.findAndRemoveEntry(map_Entry0);
      concurrentReaderHashMap0.getTableForReading();
      concurrentReaderHashMap0.entrySet();
      concurrentReaderHashMap0.sremove(object0, 2232);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int int0 = 1;
      ConcurrentReaderHashMap concurrentReaderHashMap0 = null;
      try {
        concurrentReaderHashMap0 = new ConcurrentReaderHashMap(1, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Load factor: 0.0
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(1);
      ConcurrentReaderHashMap.DEFAULT_INITIAL_CAPACITY = 8171;
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(8171, 8171);
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap();
      concurrentReaderHashMap2.recordModification("/1^;[7p@ZFg+x`&");
      concurrentReaderHashMap1.put(concurrentReaderHashMap2, concurrentReaderHashMap0);
      concurrentReaderHashMap1.recordModification((Object) null);
      concurrentReaderHashMap0.putAll(concurrentReaderHashMap1);
      concurrentReaderHashMap1.clear();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(1);
      ConcurrentReaderHashMap.HashIterator concurrentReaderHashMap_HashIterator0 = concurrentReaderHashMap0.new HashIterator();
      concurrentReaderHashMap0.clone();
      concurrentReaderHashMap0.recordModification("%_vy:!`T:,)]p}-f");
      // Undeclared exception!
      try { 
        concurrentReaderHashMap0.putAll((Map) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      Map.Entry<ConcurrentReaderHashMap, String> map_Entry0 = (Map.Entry<ConcurrentReaderHashMap, String>) mock(Map.Entry.class, new ViolatedAssumptionAnswer());
      concurrentReaderHashMap0.isEmpty();
      ConcurrentReaderHashMap.Entry[] concurrentReaderHashMap_EntryArray0 = concurrentReaderHashMap0.table;
      concurrentReaderHashMap0.entrySet();
      concurrentReaderHashMap0.sremove(concurrentReaderHashMap0, 32);
      concurrentReaderHashMap0.get((Object) null);
  }
}

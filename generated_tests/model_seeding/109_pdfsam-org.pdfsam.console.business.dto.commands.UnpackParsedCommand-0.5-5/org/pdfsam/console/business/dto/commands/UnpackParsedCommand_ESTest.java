/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 07 10:00:24 GMT 2019
 */

package org.pdfsam.console.business.dto.commands;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.pdfsam.console.business.dto.PdfFile;
import org.pdfsam.console.business.dto.commands.UnpackParsedCommand;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UnpackParsedCommand_ESTest extends UnpackParsedCommand_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%=}*", "%=}*");
      MockFile mockFile1 = new MockFile(mockFile0, "&");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("%=}*/%=}*/&");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "83|VgV0Lnrw4^BC");
      PdfFile[] pdfFileArray0 = new PdfFile[0];
      UnpackParsedCommand unpackParsedCommand0 = new UnpackParsedCommand(mockFile1, mockFile1, pdfFileArray0);
      File file0 = unpackParsedCommand0.getOutputFile();
      assertTrue(file0.exists());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("f", "f");
      MockFile mockFile1 = new MockFile(mockFile0, ".vw~J=iY2&");
      UnpackParsedCommand unpackParsedCommand0 = new UnpackParsedCommand(mockFile1, mockFile0, (PdfFile[]) null);
      File file0 = unpackParsedCommand0.getOutputFile();
      assertEquals(".vw~J=iY2&", file0.getName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%=}*", "%=}*");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("%=}*/%=}*/&");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "83|VgV0Lnrw4^BC");
      PdfFile[] pdfFileArray0 = new PdfFile[0];
      UnpackParsedCommand unpackParsedCommand0 = new UnpackParsedCommand(mockFile0, mockFile0, pdfFileArray0);
      File file0 = unpackParsedCommand0.getOutputFile();
      assertEquals(0L, file0.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%=}*", "%=}*");
      PdfFile[] pdfFileArray0 = new PdfFile[2];
      UnpackParsedCommand unpackParsedCommand0 = new UnpackParsedCommand(mockFile0, mockFile0, pdfFileArray0);
      PdfFile[] pdfFileArray1 = unpackParsedCommand0.getInputFileList();
      assertSame(pdfFileArray1, pdfFileArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%=}*", "%=}*");
      PdfFile[] pdfFileArray0 = new PdfFile[0];
      UnpackParsedCommand unpackParsedCommand0 = new UnpackParsedCommand(mockFile0, mockFile0, pdfFileArray0);
      PdfFile[] pdfFileArray1 = unpackParsedCommand0.getInputFileList();
      assertSame(pdfFileArray0, pdfFileArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%=}*", "%=}*");
      MockFile mockFile1 = new MockFile(mockFile0, "&");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("%=}*/%=}*/&");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "83|VgV0Lnrw4^BC");
      PdfFile[] pdfFileArray0 = new PdfFile[0];
      UnpackParsedCommand unpackParsedCommand0 = new UnpackParsedCommand(mockFile1, mockFile1, pdfFileArray0);
      File file0 = unpackParsedCommand0.getInputDirectory();
      assertTrue(file0.canExecute());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%=}*", "%=}*");
      File file0 = MockFile.createTempFile("J^\"UW", "J^\"UW", (File) mockFile0);
      PdfFile[] pdfFileArray0 = new PdfFile[4];
      UnpackParsedCommand unpackParsedCommand0 = new UnpackParsedCommand(file0, mockFile0, pdfFileArray0);
      File file1 = unpackParsedCommand0.getInputDirectory();
      assertFalse(file1.isFile());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%=}*", "%=}*");
      PdfFile[] pdfFileArray0 = new PdfFile[0];
      UnpackParsedCommand unpackParsedCommand0 = new UnpackParsedCommand(mockFile0, mockFile0, pdfFileArray0);
      File file0 = unpackParsedCommand0.getInputDirectory();
      assertTrue(file0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnpackParsedCommand unpackParsedCommand0 = new UnpackParsedCommand();
      // Undeclared exception!
      try { 
        unpackParsedCommand0.toString();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang/builder/ToStringBuilder
         //
         verifyException("org.pdfsam.console.business.dto.commands.AbstractParsedCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UnpackParsedCommand unpackParsedCommand0 = new UnpackParsedCommand();
      MockFile mockFile0 = new MockFile("unpack");
      unpackParsedCommand0.setInputDirectory(mockFile0);
      File file0 = unpackParsedCommand0.getInputDirectory();
      assertEquals(0L, file0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UnpackParsedCommand unpackParsedCommand0 = new UnpackParsedCommand();
      MockFile mockFile0 = new MockFile("");
      unpackParsedCommand0.setOutputFile(mockFile0);
      File file0 = unpackParsedCommand0.getOutputFile();
      assertEquals(0L, file0.length());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UnpackParsedCommand unpackParsedCommand0 = new UnpackParsedCommand();
      File file0 = unpackParsedCommand0.getInputDirectory();
      assertNull(file0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UnpackParsedCommand unpackParsedCommand0 = new UnpackParsedCommand();
      PdfFile[] pdfFileArray0 = new PdfFile[1];
      unpackParsedCommand0.setInputFileList(pdfFileArray0);
      assertFalse(unpackParsedCommand0.isCompress());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UnpackParsedCommand unpackParsedCommand0 = new UnpackParsedCommand();
      PdfFile[] pdfFileArray0 = unpackParsedCommand0.getInputFileList();
      assertNull(pdfFileArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%=}*", "%=}*");
      PdfFile[] pdfFileArray0 = new PdfFile[0];
      UnpackParsedCommand unpackParsedCommand0 = new UnpackParsedCommand(mockFile0, mockFile0, pdfFileArray0);
      String string0 = unpackParsedCommand0.getCommand();
      assertEquals("unpack", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      File file0 = MockFile.createTempFile(".]FU7", ".]FU7");
      PdfFile[] pdfFileArray0 = new PdfFile[2];
      UnpackParsedCommand unpackParsedCommand0 = new UnpackParsedCommand(file0, file0, pdfFileArray0);
      File file1 = unpackParsedCommand0.getInputDirectory();
      assertFalse(file1.isDirectory());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UnpackParsedCommand unpackParsedCommand0 = new UnpackParsedCommand();
      File file0 = unpackParsedCommand0.getOutputFile();
      assertNull(file0);
  }
}

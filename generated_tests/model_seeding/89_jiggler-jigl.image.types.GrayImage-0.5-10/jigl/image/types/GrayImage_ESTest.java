/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 22:30:43 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import javax.swing.JLayeredPane;
import jigl.image.Image;
import jigl.image.InterpolationMethod;
import jigl.image.ROI;
import jigl.image.types.ColorImage;
import jigl.image.types.GrayImage;
import jigl.image.types.InterpolatedGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GrayImage_ESTest extends GrayImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(grayImage0);
      assertEquals(4, intArray0.length);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(4, intArray0.length);
      
      GrayImage grayImage1 = grayImage0.divide((Image<Integer>) interpolatedGrayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(4, intArray0.length);
      
      int int0 = 2529;
      int int1 = 128;
      int int2 = (-2665);
      int int3 = (-3554);
      grayImage1.addbuffer(int0, int1, int2, int3, int1);
      ColorImage colorImage0 = null;
      ColorImage colorImage1 = new ColorImage(colorImage0);
      int int4 = 610;
      GrayImage grayImage2 = colorImage1.plane(int4);
      ROI rOI0 = null;
      int int5 = (-1028);
      int int6 = (-746);
      int int7 = 16;
      int int8 = 12;
      ROI rOI1 = new ROI(int5, int6, int7, int8);
      rOI1.ux();
      rOI1.lx();
      rOI1.uy();
      rOI1.ux();
      rOI1.uy();
      rOI1.ly();
      GrayImage grayImage3 = interpolatedGrayImage0.divide((Image<Integer>) grayImage2, rOI0, rOI1);
      ROI rOI2 = new ROI();
      grayImage3.min(rOI2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage1 = grayImage0.addbuffer(2, 0, 0, 0, 2);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(2, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(grayImage1);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(1, intArray0.length);
      
      String string0 = grayImage0.toString();
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(string0);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertNotSame(grayImage0, grayImage1);
      assertEquals("0:0\n", string0);
      assertEquals(1, intArray0.length);
      
      String string1 = grayImage0.toString();
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(string1);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(grayImage0, grayImage1);
      assertEquals("0:0\n", string1);
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage2 = grayImage0.add(0);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(grayImage2);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage2, grayImage1);
      assertSame(grayImage2, grayImage0);
      assertEquals(1, intArray0.length);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        grayImage0.multiply((Image<Integer>) grayImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-3095);
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((-3095), (-3095), intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 0;
      int[] intArray0 = new int[14];
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertNotNull(grayImage0);
      assertEquals(14, intArray0.length);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      rOI0.setROI(0, 0, 32, 4513);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(4513, rOI0.ly());
      assertEquals(4514, rOI0.Y());
      assertEquals(32, rOI0.lx());
      assertEquals(33, rOI0.X());
      
      // Undeclared exception!
      try { 
        grayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 0;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertNotNull(interpolatedGrayImage0);
      
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, image0.X());
      assertEquals(0, image0.Y());
      assertNotNull(image0);
      assertSame(interpolatedGrayImage0, image0);
      
      Image<Integer> image1 = interpolatedGrayImage0.clear();
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, image1.Y());
      assertEquals(0, image1.X());
      assertNotNull(image1);
      assertSame(interpolatedGrayImage0, image0);
      assertSame(interpolatedGrayImage0, image1);
      assertSame(image1, image0);
      
      String string0 = interpolatedGrayImage0.toString();
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertNotNull(string0);
      assertSame(interpolatedGrayImage0, image0);
      assertSame(interpolatedGrayImage0, image1);
      assertEquals("0:0\n", string0);
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedGrayImage0.setInterpolationMethod(interpolationMethod0);
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.CUBIC, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertSame(interpolatedGrayImage0, image0);
      assertSame(interpolatedGrayImage0, image1);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.addbuffer((-16777216), (-16777216), 95);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      int int0 = grayImage0.addSum();
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[][] intArray0 = new int[0][7];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertNotNull(grayImage0);
      assertEquals(0, intArray0.length);
      
      int int0 = (-1811);
      int int1 = (-659);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      int int2 = (-1028);
      int int3 = (-746);
      ROI rOI0 = new ROI((-1028), (-746), 16, 12);
      assertEquals(16, rOI0.lx());
      assertEquals((-746), rOI0.uy());
      assertEquals(1045, rOI0.X());
      assertEquals((-1028), rOI0.ux());
      assertEquals(759, rOI0.Y());
      assertEquals(12, rOI0.ly());
      assertNotNull(rOI0);
      
      int int4 = rOI0.ux();
      assertEquals(16, rOI0.lx());
      assertEquals((-746), rOI0.uy());
      assertEquals(1045, rOI0.X());
      assertEquals((-1028), rOI0.ux());
      assertEquals(759, rOI0.Y());
      assertEquals(12, rOI0.ly());
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals((-1028), int4);
      
      int int5 = rOI0.lx();
      assertEquals(16, rOI0.lx());
      assertEquals((-746), rOI0.uy());
      assertEquals(1045, rOI0.X());
      assertEquals((-1028), rOI0.ux());
      assertEquals(759, rOI0.Y());
      assertEquals(12, rOI0.ly());
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertEquals(16, int5);
      
      int int6 = rOI0.uy();
      assertEquals(16, rOI0.lx());
      assertEquals((-746), rOI0.uy());
      assertEquals(1045, rOI0.X());
      assertEquals((-1028), rOI0.ux());
      assertEquals(759, rOI0.Y());
      assertEquals(12, rOI0.ly());
      assertFalse(int6 == int0);
      assertTrue(int6 == int3);
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int5);
      assertFalse(int6 == int4);
      assertEquals((-746), int6);
      
      int int7 = rOI0.ux();
      assertEquals(16, rOI0.lx());
      assertEquals((-746), rOI0.uy());
      assertEquals(1045, rOI0.X());
      assertEquals((-1028), rOI0.ux());
      assertEquals(759, rOI0.Y());
      assertEquals(12, rOI0.ly());
      assertFalse(int7 == int6);
      assertFalse(int7 == int5);
      assertFalse(int7 == int0);
      assertTrue(int7 == int2);
      assertFalse(int7 == int1);
      assertFalse(int7 == int3);
      assertTrue(int7 == int4);
      assertEquals((-1028), int7);
      
      int int8 = rOI0.uy();
      assertEquals(16, rOI0.lx());
      assertEquals((-746), rOI0.uy());
      assertEquals(1045, rOI0.X());
      assertEquals((-1028), rOI0.ux());
      assertEquals(759, rOI0.Y());
      assertEquals(12, rOI0.ly());
      assertFalse(int8 == int2);
      assertFalse(int8 == int1);
      assertFalse(int8 == int7);
      assertTrue(int8 == int6);
      assertFalse(int8 == int0);
      assertTrue(int8 == int3);
      assertFalse(int8 == int5);
      assertFalse(int8 == int4);
      assertEquals((-746), int8);
      
      int int9 = rOI0.ly();
      assertEquals(16, rOI0.lx());
      assertEquals((-746), rOI0.uy());
      assertEquals(1045, rOI0.X());
      assertEquals((-1028), rOI0.ux());
      assertEquals(759, rOI0.Y());
      assertEquals(12, rOI0.ly());
      assertFalse(int9 == int0);
      assertFalse(int9 == int7);
      assertFalse(int9 == int8);
      assertFalse(int9 == int3);
      assertFalse(int9 == int2);
      assertFalse(int9 == int6);
      assertFalse(int9 == int1);
      assertFalse(int9 == int4);
      assertFalse(int9 == int5);
      assertEquals(12, int9);
      
      // Undeclared exception!
      try { 
        grayImage0.set((-1811), (-659), integer0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1405
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((-919), (-919));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        grayImage0.subtract(0, 2056, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2056
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[][] intArray0 = new int[1][3];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      String string0 = grayImage0.toString();
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertNotNull(string0);
      assertEquals("0:1\n", string0);
      assertEquals(1, intArray0.length);
      
      ROI rOI2 = new ROI((-1410), 3272, 3272, 0);
      assertEquals(3272, rOI2.ly());
      assertEquals(3272, rOI2.lx());
      assertEquals(0, rOI2.uy());
      assertEquals((-1410), rOI2.ux());
      assertEquals(4683, rOI2.X());
      assertEquals(3273, rOI2.Y());
      assertNotNull(rOI2);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      
      rOI0.setROI((-2335), 0, 3272, (-93));
      assertEquals((-93), rOI0.uy());
      assertEquals(94, rOI0.Y());
      assertEquals(3272, rOI0.lx());
      assertEquals(5608, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals((-2335), rOI0.ux());
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(rOI0.equals((Object)rOI2));
      assertNotSame(rOI0, rOI1);
      assertNotSame(rOI0, rOI2);
      
      GrayImage grayImage1 = grayImage0.add(2045);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(1, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(1, intArray0.length);
      
      ROI rOI3 = new ROI();
      assertEquals(0, rOI3.ux());
      assertEquals(0, rOI3.uy());
      assertEquals(1, rOI3.Y());
      assertEquals(1, rOI3.X());
      assertEquals(0, rOI3.lx());
      assertEquals(0, rOI3.ly());
      assertNotNull(rOI3);
      assertFalse(rOI3.equals((Object)rOI2));
      assertFalse(rOI3.equals((Object)rOI1));
      assertFalse(rOI3.equals((Object)rOI0));
      
      ROI rOI4 = new ROI(4, 3431, 2045, (-47));
      assertEquals(2045, rOI4.lx());
      assertEquals(3479, rOI4.Y());
      assertEquals(2042, rOI4.X());
      assertEquals(4, rOI4.ux());
      assertEquals(3431, rOI4.ly());
      assertEquals((-47), rOI4.uy());
      assertNotNull(rOI4);
      assertFalse(rOI4.equals((Object)rOI2));
      assertFalse(rOI4.equals((Object)rOI1));
      assertFalse(rOI4.equals((Object)rOI0));
      assertFalse(rOI4.equals((Object)rOI3));
      
      long long0 = grayImage1.sqrSum();
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(1, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(0L, long0);
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage2 = grayImage0.copy();
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(1, grayImage2.Y());
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.absSum());
      assertNotNull(grayImage2);
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage0, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertEquals(1, intArray0.length);
      
      rOI4.setROI(0, 2045, 1049, (-93));
      assertEquals(2045, rOI4.ly());
      assertEquals(1050, rOI4.X());
      assertEquals(0, rOI4.ux());
      assertEquals((-93), rOI4.uy());
      assertEquals(2139, rOI4.Y());
      assertEquals(1049, rOI4.lx());
      assertFalse(rOI4.equals((Object)rOI2));
      assertFalse(rOI4.equals((Object)rOI1));
      assertFalse(rOI4.equals((Object)rOI0));
      assertFalse(rOI4.equals((Object)rOI3));
      assertNotSame(rOI4, rOI2);
      assertNotSame(rOI4, rOI1);
      assertNotSame(rOI4, rOI0);
      assertNotSame(rOI4, rOI3);
      
      // Undeclared exception!
      try { 
        grayImage1.multiply((Image<Integer>) grayImage0, rOI4, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2335
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertNotNull(grayImage0);
      
      ROI rOI0 = new ROI(0, 0, 0, 2033);
      assertEquals(2033, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(2034, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(2033, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(2034, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int0);
      
      short short0 = (short) (-785);
      GrayImage grayImage1 = null;
      try {
        grayImage1 = new GrayImage(5, 5, (short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[][] intArray0 = new int[0][7];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertNotNull(grayImage0);
      assertEquals(0, intArray0.length);
      
      int int0 = (-659);
      Integer integer0 = new Integer((-1811));
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-1811), (int)integer0);
      
      int int1 = (-746);
      ROI rOI0 = new ROI((-1028), (-746), 16, 12);
      assertEquals(759, rOI0.Y());
      assertEquals((-1028), rOI0.ux());
      assertEquals(12, rOI0.ly());
      assertEquals(1045, rOI0.X());
      assertEquals(16, rOI0.lx());
      assertEquals((-746), rOI0.uy());
      assertNotNull(rOI0);
      
      int int2 = rOI0.ux();
      assertEquals(759, rOI0.Y());
      assertEquals((-1028), rOI0.ux());
      assertEquals(12, rOI0.ly());
      assertEquals(1045, rOI0.X());
      assertEquals(16, rOI0.lx());
      assertEquals((-746), rOI0.uy());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1028), int2);
      
      int int3 = rOI0.lx();
      assertEquals(759, rOI0.Y());
      assertEquals((-1028), rOI0.ux());
      assertEquals(12, rOI0.ly());
      assertEquals(1045, rOI0.X());
      assertEquals(16, rOI0.lx());
      assertEquals((-746), rOI0.uy());
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(16, int3);
      
      int int4 = rOI0.uy();
      assertEquals(759, rOI0.Y());
      assertEquals((-1028), rOI0.ux());
      assertEquals(12, rOI0.ly());
      assertEquals(1045, rOI0.X());
      assertEquals(16, rOI0.lx());
      assertEquals((-746), rOI0.uy());
      assertTrue(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertEquals((-746), int4);
      
      int int5 = rOI0.ux();
      assertEquals(759, rOI0.Y());
      assertEquals((-1028), rOI0.ux());
      assertEquals(12, rOI0.ly());
      assertEquals(1045, rOI0.X());
      assertEquals(16, rOI0.lx());
      assertEquals((-746), rOI0.uy());
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertTrue(int5 == int2);
      assertEquals((-1028), int5);
      
      int int6 = rOI0.uy();
      assertEquals(759, rOI0.Y());
      assertEquals((-1028), rOI0.ux());
      assertEquals(12, rOI0.ly());
      assertEquals(1045, rOI0.X());
      assertEquals(16, rOI0.lx());
      assertEquals((-746), rOI0.uy());
      assertFalse(int6 == int5);
      assertTrue(int6 == int4);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertTrue(int6 == int1);
      assertFalse(int6 == int2);
      assertEquals((-746), int6);
      
      int int7 = rOI0.ly();
      assertEquals(759, rOI0.Y());
      assertEquals((-1028), rOI0.ux());
      assertEquals(12, rOI0.ly());
      assertEquals(1045, rOI0.X());
      assertEquals(16, rOI0.lx());
      assertEquals((-746), rOI0.uy());
      assertFalse(int7 == int0);
      assertFalse(int7 == int5);
      assertFalse(int7 == int3);
      assertFalse(int7 == int1);
      assertFalse(int7 == int2);
      assertFalse(int7 == int6);
      assertFalse(int7 == int4);
      assertEquals(12, int7);
      
      // Undeclared exception!
      try { 
        grayImage0.set((-1811), (-659), integer0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1405
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)577;
      shortArray0[2] = (short)577;
      shortArray0[2] = (short) (-785);
      GrayImage grayImage0 = new GrayImage(1099, 0, shortArray0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1099, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertArrayEquals(new short[] {(short)577, (short)0, (short) (-785)}, shortArray0);
      assertNotNull(grayImage0);
      assertEquals(3, shortArray0.length);
      
      ROI rOI0 = new ROI(1057, 1058, 11, (short)577);
      assertEquals(577, rOI0.uy());
      assertEquals(1057, rOI0.lx());
      assertEquals(11, rOI0.ux());
      assertEquals(1058, rOI0.ly());
      assertEquals(1047, rOI0.X());
      assertEquals(482, rOI0.Y());
      assertNotNull(rOI0);
      
      Integer integer0 = new Integer((short) (-785));
      assertNotNull(integer0);
      assertEquals((-785), (int)integer0);
      
      GrayImage grayImage1 = grayImage0.clear(integer0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1099, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(1099, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertArrayEquals(new short[] {(short)577, (short)0, (short) (-785)}, shortArray0);
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(3, shortArray0.length);
      
      GrayImage grayImage2 = grayImage0.copy();
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1099, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(1099, grayImage2.X());
      assertArrayEquals(new short[] {(short)577, (short)0, (short) (-785)}, shortArray0);
      assertNotNull(grayImage2);
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertEquals(3, shortArray0.length);
      
      GrayImage grayImage3 = grayImage1.subtract(3688);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1099, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(1099, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(1099, grayImage3.X());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0, grayImage3.Y());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(0, grayImage3.absSum());
      assertArrayEquals(new short[] {(short)577, (short)0, (short) (-785)}, shortArray0);
      assertNotNull(grayImage3);
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertSame(grayImage0, grayImage3);
      assertSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertSame(grayImage1, grayImage3);
      assertSame(grayImage3, grayImage1);
      assertNotSame(grayImage3, grayImage2);
      assertSame(grayImage3, grayImage0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      short[][] shortArray0 = new short[0][4];
      GrayImage grayImage0 = new GrayImage(shortArray0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertNotNull(grayImage0);
      assertEquals(0, shortArray0.length);
      
      int int0 = (-364);
      int int1 = (-1385);
      // Undeclared exception!
      try { 
        grayImage0.addbuffer((-364), (-364), (-364));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      short[][] shortArray0 = new short[4][8];
      short[] shortArray1 = new short[3];
      short short0 = (short)5;
      shortArray1[0] = (short)5;
      shortArray1[1] = (short)32767;
      shortArray1[2] = (short)2146;
      shortArray0[0] = shortArray1;
      short[] shortArray2 = new short[7];
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short)2146;
      shortArray2[1] = (short) (-1245);
      shortArray2[2] = (short)32767;
      shortArray2[3] = (short)5;
      shortArray2[4] = (short)5;
      shortArray2[5] = (short)32767;
      shortArray2[6] = (short)32767;
      shortArray0[1] = shortArray2;
      short[] shortArray3 = new short[6];
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      
      shortArray3[0] = (short)5;
      shortArray3[1] = (short)32767;
      shortArray3[2] = (short) (-1245);
      shortArray3[3] = (short)32767;
      shortArray3[4] = (short) (-1245);
      shortArray3[5] = (short) (-1245);
      shortArray0[2] = shortArray3;
      short[] shortArray4 = new short[7];
      assertFalse(shortArray4.equals((Object)shortArray1));
      assertFalse(shortArray4.equals((Object)shortArray2));
      assertFalse(shortArray4.equals((Object)shortArray3));
      
      shortArray4[0] = (short) (-1245);
      shortArray4[1] = (short) (-1245);
      shortArray4[2] = (short)5;
      shortArray4[3] = (short)2146;
      shortArray4[4] = (short)5;
      shortArray4[5] = (short)2146;
      shortArray4[6] = (short) (-81);
      shortArray0[3] = shortArray4;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[1];
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      ROI rOI0 = new ROI(0, (-3158), (-3158), 0);
      assertEquals((-3158), rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(3159, rOI0.Y());
      assertEquals((-3158), rOI0.ux());
      assertEquals(3159, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      GrayImage grayImage1 = grayImage0.divide(0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[][] intArray0 = new int[1][3];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      String string0 = grayImage0.toString();
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertNotNull(string0);
      assertEquals("0:1\n", string0);
      assertEquals(1, intArray0.length);
      
      ROI rOI2 = new ROI((-1410), 3272, 3272, 0);
      assertEquals((-1410), rOI2.ux());
      assertEquals(3273, rOI2.Y());
      assertEquals(4683, rOI2.X());
      assertEquals(3272, rOI2.lx());
      assertEquals(3272, rOI2.ly());
      assertEquals(0, rOI2.uy());
      assertNotNull(rOI2);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      
      rOI0.setROI((-2335), 0, 3272, (-93));
      assertEquals((-2335), rOI0.ux());
      assertEquals(5608, rOI0.X());
      assertEquals((-93), rOI0.uy());
      assertEquals(94, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(3272, rOI0.lx());
      assertFalse(rOI0.equals((Object)rOI2));
      assertFalse(rOI0.equals((Object)rOI1));
      assertNotSame(rOI0, rOI2);
      assertNotSame(rOI0, rOI1);
      
      GrayImage grayImage1 = grayImage0.add(2045);
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(1, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(1, intArray0.length);
      
      ROI rOI3 = new ROI();
      assertEquals(0, rOI3.ux());
      assertEquals(0, rOI3.uy());
      assertEquals(1, rOI3.X());
      assertEquals(1, rOI3.Y());
      assertEquals(0, rOI3.lx());
      assertEquals(0, rOI3.ly());
      assertNotNull(rOI3);
      assertFalse(rOI3.equals((Object)rOI1));
      assertFalse(rOI3.equals((Object)rOI0));
      assertFalse(rOI3.equals((Object)rOI2));
      
      ROI rOI4 = new ROI(3, 3272, 2406, 0);
      assertEquals(3, rOI4.ux());
      assertEquals(0, rOI4.uy());
      assertEquals(2406, rOI4.lx());
      assertEquals(3273, rOI4.Y());
      assertEquals(3272, rOI4.ly());
      assertEquals(2404, rOI4.X());
      assertNotNull(rOI4);
      assertFalse(rOI4.equals((Object)rOI0));
      assertFalse(rOI4.equals((Object)rOI3));
      assertFalse(rOI4.equals((Object)rOI1));
      assertFalse(rOI4.equals((Object)rOI2));
      
      GrayImage grayImage2 = grayImage0.divide(0);
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(1, grayImage2.Y());
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.addSum());
      assertNotNull(grayImage2);
      assertSame(grayImage0, grayImage2);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage2, grayImage1);
      assertSame(grayImage2, grayImage0);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        grayImage0.multiply(128, 446, (-1410));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 446
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[2] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(grayImage0);
      assertEquals(4, intArray0.length);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(4, intArray0.length);
      
      GrayImage grayImage1 = new GrayImage(interpolatedGrayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(grayImage1);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertEquals(4, intArray0.length);
      
      int int0 = 2529;
      // Undeclared exception!
      try { 
        grayImage1.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.Y();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, int0);
      
      ROI rOI1 = new ROI(0, 1, 11, (-1125));
      assertEquals((-1125), rOI1.uy());
      assertEquals(1, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(1127, rOI1.Y());
      assertEquals(11, rOI1.lx());
      assertEquals(12, rOI1.X());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      Integer integer0 = new Integer(36);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(36, (int)integer0);
      
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(200, (int)integer1);
      
      GrayImage grayImage1 = grayImage0.clear(integer1);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(grayImage1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage2 = grayImage1.copy();
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(grayImage2);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage3 = grayImage2.subtract(6);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage3.absSum());
      assertEquals(0, grayImage3.Y());
      assertEquals(0, grayImage3.X());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0L, grayImage3.sqrSum());
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(grayImage3);
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage3);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertSame(grayImage2, grayImage3);
      assertNotSame(grayImage3, grayImage1);
      assertSame(grayImage3, grayImage2);
      assertNotSame(grayImage3, grayImage0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 0;
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertNotNull(grayImage0);
      
      int int1 = 2147483634;
      GrayImage grayImage1 = grayImage0.copy();
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertNotNull(grayImage1);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      
      int int2 = 115;
      int int3 = 115;
      int int4 = (-1);
      int int5 = (-2665);
      grayImage0.addbuffer(int2, int3, int1, int4, int5);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)577;
      shortArray0[1] = (short)637;
      shortArray0[2] = (short) (-785);
      GrayImage grayImage0 = new GrayImage(1094, 0, shortArray0);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1094, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertArrayEquals(new short[] {(short)577, (short)637, (short) (-785)}, shortArray0);
      assertNotNull(grayImage0);
      assertEquals(3, shortArray0.length);
      
      GrayImage grayImage1 = grayImage0.addbuffer(2071, 0, 0, (-2863), 2033);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1094, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(2071, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.Y());
      assertArrayEquals(new short[] {(short)577, (short)637, (short) (-785)}, shortArray0);
      assertNotNull(grayImage1);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(3, shortArray0.length);
      
      String string0 = grayImage0.toString();
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1094, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertArrayEquals(new short[] {(short)577, (short)637, (short) (-785)}, shortArray0);
      assertNotNull(string0);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertNotSame(grayImage0, grayImage1);
      assertEquals(3, shortArray0.length);
      
      String string1 = grayImage1.toString();
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1094, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(2071, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.Y());
      assertArrayEquals(new short[] {(short)577, (short)637, (short) (-785)}, shortArray0);
      assertNotNull(string1);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(3, shortArray0.length);
      
      ROI rOI0 = new ROI((-1028), (-746), 16, 12);
      assertEquals((-1028), rOI0.ux());
      assertEquals(12, rOI0.ly());
      assertEquals(759, rOI0.Y());
      assertEquals((-746), rOI0.uy());
      assertEquals(16, rOI0.lx());
      assertEquals(1045, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals((-1028), rOI0.ux());
      assertEquals(12, rOI0.ly());
      assertEquals(759, rOI0.Y());
      assertEquals((-746), rOI0.uy());
      assertEquals(16, rOI0.lx());
      assertEquals(1045, rOI0.X());
      assertEquals((-1028), int0);
      
      int int1 = rOI0.lx();
      assertEquals((-1028), rOI0.ux());
      assertEquals(12, rOI0.ly());
      assertEquals(759, rOI0.Y());
      assertEquals((-746), rOI0.uy());
      assertEquals(16, rOI0.lx());
      assertEquals(1045, rOI0.X());
      assertFalse(int1 == int0);
      assertEquals(16, int1);
      
      int int2 = rOI0.uy();
      assertEquals((-1028), rOI0.ux());
      assertEquals(12, rOI0.ly());
      assertEquals(759, rOI0.Y());
      assertEquals((-746), rOI0.uy());
      assertEquals(16, rOI0.lx());
      assertEquals(1045, rOI0.X());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-746), int2);
      
      int int3 = rOI0.ux();
      assertEquals((-1028), rOI0.ux());
      assertEquals(12, rOI0.ly());
      assertEquals(759, rOI0.Y());
      assertEquals((-746), rOI0.uy());
      assertEquals(16, rOI0.lx());
      assertEquals(1045, rOI0.X());
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals((-1028), int3);
      
      int int4 = rOI0.uy();
      assertEquals((-1028), rOI0.ux());
      assertEquals(12, rOI0.ly());
      assertEquals(759, rOI0.Y());
      assertEquals((-746), rOI0.uy());
      assertEquals(16, rOI0.lx());
      assertEquals(1045, rOI0.X());
      assertTrue(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals((-746), int4);
      
      int int5 = rOI0.ly();
      assertEquals((-1028), rOI0.ux());
      assertEquals(12, rOI0.ly());
      assertEquals(759, rOI0.Y());
      assertEquals((-746), rOI0.uy());
      assertEquals(16, rOI0.lx());
      assertEquals(1045, rOI0.X());
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertEquals(12, int5);
      
      int int6 = rOI0.ux();
      assertEquals((-1028), rOI0.ux());
      assertEquals(12, rOI0.ly());
      assertEquals(759, rOI0.Y());
      assertEquals((-746), rOI0.uy());
      assertEquals(16, rOI0.lx());
      assertEquals(1045, rOI0.X());
      assertTrue(int6 == int0);
      assertFalse(int6 == int5);
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertTrue(int6 == int3);
      assertEquals((-1028), int6);
      
      int int7 = rOI0.uy();
      assertEquals((-1028), rOI0.ux());
      assertEquals(12, rOI0.ly());
      assertEquals(759, rOI0.Y());
      assertEquals((-746), rOI0.uy());
      assertEquals(16, rOI0.lx());
      assertEquals(1045, rOI0.X());
      assertFalse(int7 == int3);
      assertFalse(int7 == int5);
      assertTrue(int7 == int2);
      assertTrue(int7 == int4);
      assertFalse(int7 == int1);
      assertFalse(int7 == int6);
      assertFalse(int7 == int0);
      assertEquals((-746), int7);
      
      int int8 = rOI0.ly();
      assertEquals((-1028), rOI0.ux());
      assertEquals(12, rOI0.ly());
      assertEquals(759, rOI0.Y());
      assertEquals((-746), rOI0.uy());
      assertEquals(16, rOI0.lx());
      assertEquals(1045, rOI0.X());
      assertFalse(int8 == int3);
      assertFalse(int8 == int0);
      assertTrue(int8 == int5);
      assertFalse(int8 == int1);
      assertFalse(int8 == int6);
      assertFalse(int8 == int2);
      assertFalse(int8 == int4);
      assertFalse(int8 == int7);
      assertEquals(12, int8);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(1094, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1094, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertArrayEquals(new short[] {(short)577, (short)637, (short) (-785)}, shortArray0);
      assertNotNull(interpolatedGrayImage0);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertEquals(3, shortArray0.length);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide((Image<Integer>) grayImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1028
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(grayImage0);
      assertEquals(4, intArray0.length);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(4, intArray0.length);
      
      GrayImage grayImage1 = grayImage0.divide((Image<Integer>) interpolatedGrayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(4, intArray0.length);
      
      ColorImage colorImage0 = null;
      try {
        colorImage0 = new ColorImage((ColorImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      short[] shortArray0 = new short[13];
      shortArray0[0] = (short)577;
      shortArray0[1] = (short)647;
      shortArray0[2] = (short) (-785);
      GrayImage grayImage0 = new GrayImage(1094, 0, shortArray0);
      assertEquals(1094, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertNotNull(grayImage0);
      assertEquals(13, shortArray0.length);
      
      GrayImage grayImage1 = grayImage0.addbuffer(2071, 0, 0, (-2863), 2033);
      assertEquals(1094, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(2071, grayImage1.X());
      assertNotNull(grayImage1);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(13, shortArray0.length);
      
      String string0 = grayImage1.toString();
      assertEquals(1094, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(2071, grayImage1.X());
      assertNotNull(string0);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(13, shortArray0.length);
      
      ROI rOI0 = new ROI((-1028), (-746), 16, 12);
      assertEquals(16, rOI0.lx());
      assertEquals(1045, rOI0.X());
      assertEquals((-746), rOI0.uy());
      assertEquals(759, rOI0.Y());
      assertEquals((-1028), rOI0.ux());
      assertEquals(12, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(16, rOI0.lx());
      assertEquals(1045, rOI0.X());
      assertEquals((-746), rOI0.uy());
      assertEquals(759, rOI0.Y());
      assertEquals((-1028), rOI0.ux());
      assertEquals(12, rOI0.ly());
      assertEquals((-1028), int0);
      
      int int1 = rOI0.lx();
      assertEquals(16, rOI0.lx());
      assertEquals(1045, rOI0.X());
      assertEquals((-746), rOI0.uy());
      assertEquals(759, rOI0.Y());
      assertEquals((-1028), rOI0.ux());
      assertEquals(12, rOI0.ly());
      assertFalse(int1 == int0);
      assertEquals(16, int1);
      
      int int2 = rOI0.uy();
      assertEquals(16, rOI0.lx());
      assertEquals(1045, rOI0.X());
      assertEquals((-746), rOI0.uy());
      assertEquals(759, rOI0.Y());
      assertEquals((-1028), rOI0.ux());
      assertEquals(12, rOI0.ly());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-746), int2);
      
      int int3 = rOI0.ux();
      assertEquals(16, rOI0.lx());
      assertEquals(1045, rOI0.X());
      assertEquals((-746), rOI0.uy());
      assertEquals(759, rOI0.Y());
      assertEquals((-1028), rOI0.ux());
      assertEquals(12, rOI0.ly());
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals((-1028), int3);
      
      int int4 = rOI0.uy();
      assertEquals(16, rOI0.lx());
      assertEquals(1045, rOI0.X());
      assertEquals((-746), rOI0.uy());
      assertEquals(759, rOI0.Y());
      assertEquals((-1028), rOI0.ux());
      assertEquals(12, rOI0.ly());
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      assertEquals((-746), int4);
      
      int int5 = rOI0.ly();
      assertEquals(16, rOI0.lx());
      assertEquals(1045, rOI0.X());
      assertEquals((-746), rOI0.uy());
      assertEquals(759, rOI0.Y());
      assertEquals((-1028), rOI0.ux());
      assertEquals(12, rOI0.ly());
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertEquals(12, int5);
      
      int int6 = rOI0.ux();
      assertEquals(16, rOI0.lx());
      assertEquals(1045, rOI0.X());
      assertEquals((-746), rOI0.uy());
      assertEquals(759, rOI0.Y());
      assertEquals((-1028), rOI0.ux());
      assertEquals(12, rOI0.ly());
      assertFalse(int6 == int4);
      assertTrue(int6 == int3);
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int5);
      assertTrue(int6 == int0);
      assertEquals((-1028), int6);
      
      int int7 = rOI0.uy();
      assertEquals(16, rOI0.lx());
      assertEquals(1045, rOI0.X());
      assertEquals((-746), rOI0.uy());
      assertEquals(759, rOI0.Y());
      assertEquals((-1028), rOI0.ux());
      assertEquals(12, rOI0.ly());
      assertFalse(int7 == int0);
      assertFalse(int7 == int1);
      assertFalse(int7 == int3);
      assertTrue(int7 == int2);
      assertFalse(int7 == int5);
      assertTrue(int7 == int4);
      assertFalse(int7 == int6);
      assertEquals((-746), int7);
      
      int int8 = rOI0.ly();
      assertEquals(16, rOI0.lx());
      assertEquals(1045, rOI0.X());
      assertEquals((-746), rOI0.uy());
      assertEquals(759, rOI0.Y());
      assertEquals((-1028), rOI0.ux());
      assertEquals(12, rOI0.ly());
      assertFalse(int8 == int1);
      assertTrue(int8 == int5);
      assertFalse(int8 == int3);
      assertFalse(int8 == int7);
      assertFalse(int8 == int6);
      assertFalse(int8 == int0);
      assertFalse(int8 == int4);
      assertFalse(int8 == int2);
      assertEquals(12, int8);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(1094, interpolatedGrayImage0.X());
      assertEquals(1094, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertNotNull(interpolatedGrayImage0);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertEquals(13, shortArray0.length);
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(grayImage0);
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(1094, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(1094, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertNotNull(interpolatedGrayImage1);
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertEquals(13, shortArray0.length);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        grayImage0.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -746
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      short[][] shortArray0 = new short[0][4];
      GrayImage grayImage0 = new GrayImage(shortArray0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertNotNull(grayImage0);
      assertEquals(0, shortArray0.length);
      
      int int0 = (-364);
      int int1 = (-349);
      int int2 = (-1385);
      // Undeclared exception!
      try { 
        grayImage0.addbuffer((-349), (-1385), (-1385));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      Integer integer0 = grayImage0.min();
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertArrayEquals(new int[] {0}, intArray0);
      assertNull(integer0);
      assertEquals(1, intArray0.length);
      
      Integer integer1 = grayImage0.max();
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertArrayEquals(new int[] {0}, intArray0);
      assertNull(integer1);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        grayImage0.subtract(0, 2056, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2056
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 1094;
      int int1 = 0;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)577;
      short short0 = (short)637;
      shortArray0[1] = (short)637;
      shortArray0[2] = (short) (-785);
      GrayImage grayImage0 = new GrayImage(1094, 0, shortArray0);
      assertEquals(1094, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertArrayEquals(new short[] {(short)577, (short)637, (short) (-785)}, shortArray0);
      assertNotNull(grayImage0);
      assertEquals(3, shortArray0.length);
      
      int int2 = (-73);
      int int3 = 0;
      int int4 = 0;
      ROI rOI0 = new ROI(1094, 0, 0, 0);
      assertEquals(1095, rOI0.X());
      assertEquals(1094, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      rOI0.setROI(1094, 1531, 1094, 2033);
      assertEquals(1531, rOI0.uy());
      assertEquals(1094, rOI0.lx());
      assertEquals(503, rOI0.Y());
      assertEquals(2033, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1094, rOI0.ux());
      
      // Undeclared exception!
      try { 
        grayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1531
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertNotNull(grayImage0);
      
      GrayImage grayImage1 = grayImage0.copy();
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertNotNull(grayImage1);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      
      int int0 = grayImage0.addSum();
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertNotSame(grayImage0, grayImage1);
      assertEquals(0, int0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int1 = rOI0.X();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = rOI0.Y();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      // Undeclared exception!
      try { 
        grayImage0.divide(109, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      rOI0.setROI(1702, 2, 2, 2);
      assertEquals(1702, rOI0.lx());
      assertEquals(2, rOI0.ux());
      assertEquals(2, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1701, rOI0.X());
      assertEquals(2, rOI0.ly());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.subtract(1702, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 0;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int1 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = rOI0.Y();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      // Undeclared exception!
      try { 
        grayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertNotNull(grayImage0);
      
      GrayImage grayImage1 = grayImage0.copy();
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertNotNull(grayImage1);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      
      GrayImage grayImage2 = grayImage0.addbuffer(0, 0, 2147483634, 0, 0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertNotNull(grayImage2);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage2);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertNotNull(interpolatedGrayImage0);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      
      // Undeclared exception!
      try { 
        grayImage2.add((-1719), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 0;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int1 = rOI0.X();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = rOI0.Y();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      // Undeclared exception!
      try { 
        grayImage0.divide(1763, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      int int0 = 2;
      GrayImage grayImage1 = grayImage0.addbuffer(2, 0, 0, 0, 2);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(2, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(grayImage1);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(1, intArray0.length);
      
      String string0 = grayImage0.toString();
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(string0);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertNotSame(grayImage0, grayImage1);
      assertEquals("0:0\n", string0);
      assertEquals(1, intArray0.length);
      
      String string1 = grayImage0.toString();
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(string1);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(grayImage0, grayImage1);
      assertEquals("0:0\n", string1);
      assertEquals(1, intArray0.length);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        grayImage1.clip(0, 354, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 0;
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertNotNull(grayImage0);
      
      GrayImage grayImage1 = grayImage0.copy();
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertNotNull(grayImage1);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      
      GrayImage grayImage2 = grayImage0.addbuffer(0, 0, 2147483634, 0, 0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.X());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.addSum());
      assertNotNull(grayImage2);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      
      ROI rOI0 = new ROI(2147483634, (-280), (-1491), (-280));
      assertEquals((-2147482170), rOI0.X());
      assertEquals(2147483634, rOI0.lx());
      assertEquals((-280), rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals((-1491), rOI0.ux());
      assertEquals((-280), rOI0.ly());
      assertNotNull(rOI0);
      
      Integer integer0 = new Integer(3384);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(3384, (int)integer0);
      
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(200, (int)integer1);
      
      GrayImage grayImage3 = grayImage0.clear(integer1);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0, grayImage3.X());
      assertEquals(0, grayImage3.Y());
      assertEquals(0, grayImage3.absSum());
      assertNotNull(grayImage3);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertSame(grayImage0, grayImage3);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage3, grayImage0);
      assertNotSame(grayImage3, grayImage2);
      assertNotSame(grayImage3, grayImage1);
      
      GrayImage grayImage4 = grayImage2.copy();
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.X());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage4.absSum());
      assertEquals(0L, grayImage4.sqrSum());
      assertEquals(0, grayImage4.addSum());
      assertEquals(0, grayImage4.X());
      assertEquals(0, grayImage4.Y());
      assertNotNull(grayImage4);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage2.equals((Object)grayImage3));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage4.equals((Object)grayImage1));
      assertFalse(grayImage4.equals((Object)grayImage0));
      assertFalse(grayImage4.equals((Object)grayImage2));
      assertFalse(grayImage4.equals((Object)grayImage3));
      assertSame(grayImage0, grayImage3);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage4);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage2, grayImage3);
      assertNotSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage4);
      assertNotSame(grayImage4, grayImage1);
      assertNotSame(grayImage4, grayImage0);
      assertNotSame(grayImage4, grayImage2);
      assertNotSame(grayImage4, grayImage3);
      
      GrayImage grayImage5 = grayImage2.subtract(1);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.X());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage5.addSum());
      assertEquals(0, grayImage5.Y());
      assertEquals(0, grayImage5.X());
      assertEquals(0, grayImage5.absSum());
      assertEquals(0L, grayImage5.sqrSum());
      assertNotNull(grayImage5);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage4));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage2.equals((Object)grayImage3));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage4));
      assertFalse(grayImage5.equals((Object)grayImage1));
      assertFalse(grayImage5.equals((Object)grayImage4));
      assertFalse(grayImage5.equals((Object)grayImage3));
      assertFalse(grayImage5.equals((Object)grayImage0));
      assertSame(grayImage0, grayImage3);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage4);
      assertNotSame(grayImage0, grayImage5);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage2, grayImage3);
      assertSame(grayImage2, grayImage5);
      assertNotSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage4);
      assertNotSame(grayImage5, grayImage1);
      assertNotSame(grayImage5, grayImage4);
      assertNotSame(grayImage5, grayImage3);
      assertSame(grayImage5, grayImage2);
      assertNotSame(grayImage5, grayImage0);
      
      // Undeclared exception!
      try { 
        grayImage0.subtract((Image<Integer>) grayImage3, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1491
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertNotNull(grayImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = rOI0.lx();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(0, int3);
      
      int int4 = rOI0.uy();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertEquals(0, int4);
      
      int int5 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertFalse(int5 == int1);
      assertTrue(int5 == int2);
      assertTrue(int5 == int4);
      assertFalse(int5 == int0);
      assertTrue(int5 == int3);
      assertEquals(0, int5);
      
      int int6 = rOI0.uy();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertTrue(int6 == int3);
      assertTrue(int6 == int4);
      assertTrue(int6 == int5);
      assertFalse(int6 == int1);
      assertTrue(int6 == int2);
      assertFalse(int6 == int0);
      assertEquals(0, int6);
      
      int int7 = rOI0.ly();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertTrue(int7 == int3);
      assertTrue(int7 == int4);
      assertTrue(int7 == int5);
      assertFalse(int7 == int0);
      assertTrue(int7 == int2);
      assertFalse(int7 == int1);
      assertTrue(int7 == int6);
      assertEquals(0, int7);
      
      int int8 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertTrue(int8 == int4);
      assertFalse(int8 == int0);
      assertTrue(int8 == int6);
      assertTrue(int8 == int3);
      assertTrue(int8 == int5);
      assertTrue(int8 == int7);
      assertFalse(int8 == int1);
      assertTrue(int8 == int2);
      assertEquals(0, int8);
      
      int int9 = rOI0.uy();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertTrue(int9 == int3);
      assertTrue(int9 == int4);
      assertTrue(int9 == int5);
      assertFalse(int9 == int1);
      assertTrue(int9 == int6);
      assertTrue(int9 == int2);
      assertTrue(int9 == int7);
      assertTrue(int9 == int8);
      assertFalse(int9 == int0);
      assertEquals(0, int9);
      
      int int10 = rOI0.ly();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertFalse(int10 == int0);
      assertTrue(int10 == int8);
      assertTrue(int10 == int6);
      assertTrue(int10 == int3);
      assertTrue(int10 == int2);
      assertFalse(int10 == int1);
      assertTrue(int10 == int4);
      assertTrue(int10 == int5);
      assertTrue(int10 == int7);
      assertTrue(int10 == int9);
      assertEquals(0, int10);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertNotNull(interpolatedGrayImage0);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide((Image<Integer>) grayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)577;
      shortArray0[2] = (short)577;
      shortArray0[2] = (short) (-785);
      GrayImage grayImage0 = new GrayImage(1099, 0, shortArray0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(1099, grayImage0.X());
      assertArrayEquals(new short[] {(short)577, (short)0, (short) (-785)}, shortArray0);
      assertNotNull(grayImage0);
      assertEquals(3, shortArray0.length);
      
      ROI rOI0 = new ROI(1057, 1058, 11, (short)577);
      assertEquals(1057, rOI0.lx());
      assertEquals(11, rOI0.ux());
      assertEquals(1058, rOI0.ly());
      assertEquals(1047, rOI0.X());
      assertEquals(482, rOI0.Y());
      assertEquals(577, rOI0.uy());
      assertNotNull(rOI0);
      
      GrayImage grayImage1 = grayImage0.divide(1076);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(1099, grayImage0.X());
      assertEquals(1099, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertArrayEquals(new short[] {(short)577, (short)0, (short) (-785)}, shortArray0);
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(3, shortArray0.length);
      
      // Undeclared exception!
      try { 
        grayImage0.multiply(1437, 1099, 1085);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1099
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertNotNull(grayImage0);
      
      ROI rOI0 = new ROI(0, 0, 0, 2033);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(2034, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(2033, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(2034, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(2033, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int0);
      
      ROI rOI1 = new ROI((-1028), (-746), 16, 12);
      assertEquals(759, rOI1.Y());
      assertEquals(1045, rOI1.X());
      assertEquals(16, rOI1.lx());
      assertEquals(12, rOI1.ly());
      assertEquals((-746), rOI1.uy());
      assertEquals((-1028), rOI1.ux());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int1 = rOI1.ux();
      assertEquals(759, rOI1.Y());
      assertEquals(1045, rOI1.X());
      assertEquals(16, rOI1.lx());
      assertEquals(12, rOI1.ly());
      assertEquals((-746), rOI1.uy());
      assertEquals((-1028), rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int1 == int0);
      assertNotSame(rOI1, rOI0);
      assertEquals((-1028), int1);
      
      int int2 = rOI1.lx();
      assertEquals(759, rOI1.Y());
      assertEquals(1045, rOI1.X());
      assertEquals(16, rOI1.lx());
      assertEquals(12, rOI1.ly());
      assertEquals((-746), rOI1.uy());
      assertEquals((-1028), rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(rOI1, rOI0);
      assertEquals(16, int2);
      
      int int3 = rOI1.uy();
      assertEquals(759, rOI1.Y());
      assertEquals(1045, rOI1.X());
      assertEquals(16, rOI1.lx());
      assertEquals(12, rOI1.ly());
      assertEquals((-746), rOI1.uy());
      assertEquals((-1028), rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertNotSame(rOI1, rOI0);
      assertEquals((-746), int3);
      
      int int4 = rOI1.ux();
      assertEquals(759, rOI1.Y());
      assertEquals(1045, rOI1.X());
      assertEquals(16, rOI1.lx());
      assertEquals(12, rOI1.ly());
      assertEquals((-746), rOI1.uy());
      assertEquals((-1028), rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      assertNotSame(rOI1, rOI0);
      assertEquals((-1028), int4);
      
      int int5 = rOI1.uy();
      assertEquals(759, rOI1.Y());
      assertEquals(1045, rOI1.X());
      assertEquals(16, rOI1.lx());
      assertEquals(12, rOI1.ly());
      assertEquals((-746), rOI1.uy());
      assertEquals((-1028), rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertTrue(int5 == int3);
      assertFalse(int5 == int2);
      assertNotSame(rOI1, rOI0);
      assertEquals((-746), int5);
      
      int int6 = rOI1.ly();
      assertEquals(759, rOI1.Y());
      assertEquals(1045, rOI1.X());
      assertEquals(16, rOI1.lx());
      assertEquals(12, rOI1.ly());
      assertEquals((-746), rOI1.uy());
      assertEquals((-1028), rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int6 == int5);
      assertFalse(int6 == int2);
      assertFalse(int6 == int1);
      assertFalse(int6 == int4);
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      assertNotSame(rOI1, rOI0);
      assertEquals(12, int6);
      
      int int7 = rOI1.ux();
      assertEquals(759, rOI1.Y());
      assertEquals(1045, rOI1.X());
      assertEquals(16, rOI1.lx());
      assertEquals(12, rOI1.ly());
      assertEquals((-746), rOI1.uy());
      assertEquals((-1028), rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int7 == int0);
      assertFalse(int7 == int6);
      assertFalse(int7 == int2);
      assertTrue(int7 == int1);
      assertFalse(int7 == int3);
      assertTrue(int7 == int4);
      assertFalse(int7 == int5);
      assertNotSame(rOI1, rOI0);
      assertEquals((-1028), int7);
      
      int int8 = rOI1.uy();
      assertEquals(759, rOI1.Y());
      assertEquals(1045, rOI1.X());
      assertEquals(16, rOI1.lx());
      assertEquals(12, rOI1.ly());
      assertEquals((-746), rOI1.uy());
      assertEquals((-1028), rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int8 == int7);
      assertFalse(int8 == int4);
      assertTrue(int8 == int3);
      assertFalse(int8 == int2);
      assertFalse(int8 == int0);
      assertTrue(int8 == int5);
      assertFalse(int8 == int6);
      assertFalse(int8 == int1);
      assertNotSame(rOI1, rOI0);
      assertEquals((-746), int8);
      
      int int9 = rOI0.ly();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(2034, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(2033, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int9 == int3);
      assertFalse(int9 == int7);
      assertFalse(int9 == int4);
      assertFalse(int9 == int2);
      assertFalse(int9 == int8);
      assertFalse(int9 == int0);
      assertFalse(int9 == int6);
      assertFalse(int9 == int1);
      assertFalse(int9 == int5);
      assertNotSame(rOI0, rOI1);
      assertEquals(2033, int9);
      
      int int10 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(2034, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(2033, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int10 == int1);
      assertFalse(int10 == int2);
      assertFalse(int10 == int9);
      assertFalse(int10 == int5);
      assertFalse(int10 == int4);
      assertTrue(int10 == int0);
      assertFalse(int10 == int3);
      assertFalse(int10 == int6);
      assertFalse(int10 == int7);
      assertFalse(int10 == int8);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, int10);
      
      int int11 = rOI0.uy();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(2034, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(2033, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertFalse(int11 == int3);
      assertFalse(int11 == int7);
      assertFalse(int11 == int5);
      assertFalse(int11 == int4);
      assertFalse(int11 == int2);
      assertTrue(int11 == int0);
      assertFalse(int11 == int8);
      assertTrue(int11 == int10);
      assertFalse(int11 == int9);
      assertFalse(int11 == int6);
      assertFalse(int11 == int1);
      assertFalse(rOI0.equals((Object)rOI1));
      assertNotSame(rOI0, rOI1);
      assertEquals(0, int11);
      
      int int12 = rOI1.ly();
      assertEquals(759, rOI1.Y());
      assertEquals(1045, rOI1.X());
      assertEquals(16, rOI1.lx());
      assertEquals(12, rOI1.ly());
      assertEquals((-746), rOI1.uy());
      assertEquals((-1028), rOI1.ux());
      assertTrue(int12 == int6);
      assertFalse(int12 == int11);
      assertFalse(int12 == int7);
      assertFalse(int12 == int3);
      assertFalse(int12 == int9);
      assertFalse(int12 == int5);
      assertFalse(int12 == int8);
      assertFalse(int12 == int0);
      assertFalse(int12 == int1);
      assertFalse(int12 == int10);
      assertFalse(int12 == int2);
      assertFalse(int12 == int4);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals(12, int12);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertNotNull(interpolatedGrayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(grayImage0);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertNotNull(interpolatedGrayImage1);
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      ROI rOI2 = new ROI();
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertNotNull(rOI2);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.min(rOI2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 1127;
      int[] intArray0 = new int[0];
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(1127, 804, intArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      short[][] shortArray0 = new short[0][4];
      GrayImage grayImage0 = new GrayImage(shortArray0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertNotNull(grayImage0);
      assertEquals(0, shortArray0.length);
      
      ROI rOI0 = new ROI(5379, 1057, 1823, 654);
      assertEquals(5379, rOI0.lx());
      assertEquals(1057, rOI0.ly());
      assertEquals(3557, rOI0.X());
      assertEquals(404, rOI0.Y());
      assertEquals(654, rOI0.uy());
      assertEquals(1823, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        grayImage0.multiply(4513, 1834, 1057);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1834
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertNotNull(grayImage0);
      
      int int0 = 2147483634;
      GrayImage grayImage1 = grayImage0.copy();
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertNotNull(grayImage1);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      
      GrayImage grayImage2 = grayImage0.addbuffer(0, 0, 2147483634, 0, 0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.X());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage2.addSum());
      assertNotNull(grayImage2);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      
      ROI rOI0 = new ROI(2147483634, (-280), (-1491), (-280));
      assertEquals((-2147482170), rOI0.X());
      assertEquals((-1491), rOI0.ux());
      assertEquals(2147483634, rOI0.lx());
      assertEquals((-280), rOI0.ly());
      assertEquals((-280), rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int1 = 3384;
      Integer integer0 = new Integer(3384);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(3384, (int)integer0);
      
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(200, (int)integer1);
      
      GrayImage grayImage3 = grayImage0.clear(integer1);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage3.absSum());
      assertEquals(0, grayImage3.Y());
      assertEquals(0, grayImage3.X());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(0, grayImage3.addSum());
      assertNotNull(grayImage3);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage3);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage3, grayImage1);
      assertSame(grayImage3, grayImage0);
      assertNotSame(grayImage3, grayImage2);
      
      GrayImage grayImage4 = grayImage2.copy();
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.X());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage4.addSum());
      assertEquals(0L, grayImage4.sqrSum());
      assertEquals(0, grayImage4.absSum());
      assertEquals(0, grayImage4.X());
      assertEquals(0, grayImage4.Y());
      assertNotNull(grayImage4);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage2.equals((Object)grayImage3));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage4.equals((Object)grayImage3));
      assertFalse(grayImage4.equals((Object)grayImage2));
      assertFalse(grayImage4.equals((Object)grayImage0));
      assertFalse(grayImage4.equals((Object)grayImage1));
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage3);
      assertNotSame(grayImage0, grayImage4);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage2, grayImage4);
      assertNotSame(grayImage2, grayImage3);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertNotSame(grayImage4, grayImage3);
      assertNotSame(grayImage4, grayImage2);
      assertNotSame(grayImage4, grayImage0);
      assertNotSame(grayImage4, grayImage1);
      
      GrayImage grayImage5 = grayImage2.subtract(1);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.X());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage5.addSum());
      assertEquals(0, grayImage5.Y());
      assertEquals(0L, grayImage5.sqrSum());
      assertEquals(0, grayImage5.X());
      assertEquals(0, grayImage5.absSum());
      assertNotNull(grayImage5);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage4));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage2.equals((Object)grayImage4));
      assertFalse(grayImage2.equals((Object)grayImage3));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage5.equals((Object)grayImage4));
      assertFalse(grayImage5.equals((Object)grayImage0));
      assertFalse(grayImage5.equals((Object)grayImage1));
      assertFalse(grayImage5.equals((Object)grayImage3));
      assertNotSame(grayImage0, grayImage5);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage3);
      assertNotSame(grayImage0, grayImage4);
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage2, grayImage5);
      assertNotSame(grayImage2, grayImage4);
      assertNotSame(grayImage2, grayImage3);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertNotSame(grayImage5, grayImage4);
      assertNotSame(grayImage5, grayImage0);
      assertNotSame(grayImage5, grayImage1);
      assertSame(grayImage5, grayImage2);
      assertNotSame(grayImage5, grayImage3);
      
      // Undeclared exception!
      try { 
        grayImage0.subtract((Image<Integer>) grayImage3, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1491
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertNotNull(grayImage0);
      
      GrayImage grayImage1 = grayImage0.addbuffer(0, 0, Integer.MAX_VALUE, 0, 0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertNotNull(grayImage1);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      
      int int0 = new Integer(0);
      assertEquals(0, int0);
      
      GrayImage grayImage2 = grayImage1.clear((Integer) 0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.X());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.absSum());
      assertNotNull(grayImage2);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      short[][] shortArray0 = new short[5][3];
      short[] shortArray1 = new short[6];
      shortArray1[0] = (short)0;
      shortArray1[1] = (short)5;
      shortArray1[2] = (short)1796;
      shortArray1[3] = (short)16;
      shortArray1[4] = (short)381;
      shortArray1[5] = (short) (-681);
      shortArray0[0] = shortArray1;
      short[] shortArray2 = new short[8];
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short)1796;
      shortArray2[1] = (short)1796;
      shortArray2[2] = (short)381;
      shortArray2[3] = (short)5;
      shortArray2[4] = (short)5;
      shortArray2[5] = (short)5;
      shortArray2[6] = (short)381;
      shortArray2[7] = (short) (-681);
      shortArray0[1] = shortArray2;
      short[] shortArray3 = new short[0];
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      
      shortArray0[2] = shortArray3;
      short[] shortArray4 = new short[4];
      assertFalse(shortArray4.equals((Object)shortArray1));
      assertFalse(shortArray4.equals((Object)shortArray3));
      assertFalse(shortArray4.equals((Object)shortArray2));
      
      shortArray4[0] = (short)16;
      shortArray4[1] = (short) (-681);
      shortArray4[2] = (short)0;
      shortArray4[3] = (short)16;
      shortArray0[3] = shortArray4;
      short[] shortArray5 = new short[7];
      assertFalse(shortArray5.equals((Object)shortArray4));
      assertFalse(shortArray5.equals((Object)shortArray2));
      assertFalse(shortArray5.equals((Object)shortArray1));
      assertFalse(shortArray5.equals((Object)shortArray3));
      
      shortArray5[0] = (short) (-681);
      shortArray5[1] = (short)381;
      shortArray5[2] = (short)381;
      shortArray5[3] = (short)0;
      shortArray5[4] = (short)0;
      shortArray5[5] = (short) (-681);
      shortArray5[6] = (short)0;
      shortArray0[4] = shortArray5;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 3152;
      GrayImage grayImage0 = new GrayImage(3152, 3152);
      assertEquals(3152, grayImage0.Y());
      assertEquals(3152, grayImage0.X());
      assertNotNull(grayImage0);
      
      // Undeclared exception!
      try { 
        grayImage0.diff((Image<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int[][] intArray0 = new int[6][6];
      int[] intArray1 = new int[4];
      intArray1[0] = (-11);
      intArray1[1] = 509;
      intArray1[2] = 2138;
      intArray1[3] = 1136;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 509;
      intArray2[1] = 509;
      intArray2[2] = 509;
      intArray2[3] = 2138;
      intArray2[4] = 1084;
      intArray2[5] = 2138;
      intArray2[6] = 2138;
      intArray2[7] = (-11);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[0];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray0[2] = intArray3;
      int[] intArray4 = new int[5];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = (-371);
      intArray4[1] = (-11);
      intArray4[2] = 1057;
      intArray4[3] = (-654);
      intArray4[4] = 2138;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[5];
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray1));
      
      intArray5[0] = 2138;
      intArray5[1] = 1057;
      intArray5[2] = 1057;
      intArray5[3] = (-371);
      intArray5[4] = 1084;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[2];
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray4));
      
      intArray6[0] = 509;
      intArray6[1] = 1084;
      intArray0[5] = intArray6;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.util.ArrayUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      short[][] shortArray0 = new short[0][4];
      GrayImage grayImage0 = new GrayImage(shortArray0);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertNotNull(grayImage0);
      assertEquals(0, shortArray0.length);
      
      int int0 = (-364);
      ROI rOI0 = new ROI(5379, (-364), (-364), 654);
      assertEquals((-364), rOI0.uy());
      assertEquals((-364), rOI0.ux());
      assertEquals(1019, rOI0.Y());
      assertEquals(5744, rOI0.X());
      assertEquals(654, rOI0.ly());
      assertEquals(5379, rOI0.lx());
      assertNotNull(rOI0);
      
      GrayImage grayImage1 = grayImage0.divide((-364));
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(0, shortArray0.length);
      
      GrayImage grayImage2 = grayImage1.copy();
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage2.addSum());
      assertNotNull(grayImage2);
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertEquals(0, shortArray0.length);
      
      // Undeclared exception!
      try { 
        grayImage1.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = (short) (-32768);
      shortArray0[0] = (short) (-32768);
      shortArray0[1] = (short)2901;
      shortArray0[2] = (short) (-1054);
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((-2979), (-364), shortArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = (-720);
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((-720), (-720));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int[][] intArray0 = new int[1][3];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      String string0 = grayImage0.toString();
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertNotNull(string0);
      assertEquals("0:1\n", string0);
      assertEquals(1, intArray0.length);
      
      ROI rOI2 = new ROI((-1410), 3272, 3272, 0);
      assertEquals(3273, rOI2.Y());
      assertEquals(3272, rOI2.lx());
      assertEquals(0, rOI2.uy());
      assertEquals(3272, rOI2.ly());
      assertEquals((-1410), rOI2.ux());
      assertEquals(4683, rOI2.X());
      assertNotNull(rOI2);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      
      rOI0.setROI((-2335), 0, 3272, (-2335));
      assertEquals(2336, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(5608, rOI0.X());
      assertEquals((-2335), rOI0.uy());
      assertEquals(3272, rOI0.lx());
      assertEquals((-2335), rOI0.ux());
      assertFalse(rOI0.equals((Object)rOI2));
      assertFalse(rOI0.equals((Object)rOI1));
      assertNotSame(rOI0, rOI2);
      assertNotSame(rOI0, rOI1);
      
      Integer integer0 = new Integer((-2335));
      assertNotNull(integer0);
      assertEquals((-2335), (int)integer0);
      
      GrayImage grayImage1 = grayImage0.clear(integer0);
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage2 = grayImage1.copy();
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(1, grayImage2.Y());
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertNotNull(grayImage2);
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertNotNull(grayImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = new Integer(0);
      assertEquals(0, int0);
      
      int int1 = rOI0.Y();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = rOI0.lx();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      
      int int4 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int4 == int2);
      assertFalse(int4 == int1);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertEquals(0, int4);
      
      int int5 = rOI0.uy();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertFalse(int5 == int1);
      assertEquals(0, int5);
      
      int int6 = rOI0.ly();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertFalse(int6 == int1);
      assertTrue(int6 == int0);
      assertTrue(int6 == int5);
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertTrue(int6 == int3);
      assertEquals(0, int6);
      
      int int7 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int7 == int4);
      assertTrue(int7 == int3);
      assertTrue(int7 == int0);
      assertTrue(int7 == int2);
      assertFalse(int7 == int1);
      assertTrue(int7 == int5);
      assertTrue(int7 == int6);
      assertEquals(0, int7);
      
      int int8 = rOI0.uy();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int8 == int6);
      assertTrue(int8 == int7);
      assertTrue(int8 == int0);
      assertTrue(int8 == int3);
      assertFalse(int8 == int1);
      assertTrue(int8 == int5);
      assertTrue(int8 == int2);
      assertTrue(int8 == int4);
      assertEquals(0, int8);
      
      int int9 = rOI0.ly();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int9 == int3);
      assertTrue(int9 == int4);
      assertTrue(int9 == int0);
      assertTrue(int9 == int7);
      assertTrue(int9 == int6);
      assertFalse(int9 == int1);
      assertTrue(int9 == int2);
      assertTrue(int9 == int5);
      assertTrue(int9 == int8);
      assertEquals(0, int9);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertNotNull(interpolatedGrayImage0);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide((Image<Integer>) grayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        grayImage0.addbuffer(0, (-1179), (-574), 452, 4727);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[2] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(grayImage0);
      assertEquals(4, intArray0.length);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(4, intArray0.length);
      
      GrayImage grayImage1 = grayImage0.divide((Image<Integer>) interpolatedGrayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(4, intArray0.length);
      
      int int0 = 2529;
      int int1 = 128;
      int int2 = (-2665);
      int int3 = (-3554);
      GrayImage grayImage2 = grayImage1.addbuffer(int0, int1, int2, int3, int1);
      grayImage2.max();
      ColorImage colorImage0 = null;
      ColorImage colorImage1 = new ColorImage(colorImage0);
      int int4 = 610;
      GrayImage grayImage3 = colorImage1.plane(int4);
      ROI rOI0 = null;
      int int5 = (-1028);
      int int6 = (-746);
      int int7 = 16;
      int int8 = 12;
      ROI rOI1 = new ROI(int5, int6, int7, int8);
      rOI1.ux();
      rOI1.lx();
      rOI1.uy();
      rOI1.ux();
      rOI1.uy();
      rOI1.ly();
      GrayImage grayImage4 = interpolatedGrayImage0.divide((Image<Integer>) grayImage3, rOI0, rOI1);
      ROI rOI2 = new ROI();
      grayImage4.min(rOI2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int[][] intArray0 = new int[1][3];
      int[] intArray1 = new int[1];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.X());
      assertEquals(1, grayImage0.Y());
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.X());
      assertEquals(1, grayImage0.Y());
      assertEquals(1, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(1, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertNotNull(interpolatedGrayImage0);
      assertEquals(1, intArray0.length);
      
      Integer integer0 = grayImage0.min();
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.X());
      assertEquals(1, grayImage0.Y());
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide(255, 255, 106);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 255
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ROI rOI0 = new ROI((-364), (-364), (-364), (-364));
      assertEquals((-364), rOI0.lx());
      assertEquals((-364), rOI0.ly());
      assertEquals((-364), rOI0.ux());
      assertEquals((-364), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        GrayImage.main((String[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int[][] intArray0 = new int[1][3];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(1, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertNotNull(interpolatedGrayImage0);
      assertEquals(1, intArray0.length);
      
      Integer integer0 = grayImage0.min();
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertNull(integer0);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide(255, 255, 81);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 255
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertNotNull(grayImage0);
      
      GrayImage grayImage1 = grayImage0.addbuffer(0, 0, Integer.MAX_VALUE, 0, 0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertNotNull(grayImage1);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      
      int int0 = grayImage1.addSum();
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 1531;
      int[] intArray0 = new int[5];
      intArray0[0] = 1531;
      intArray0[1] = 1531;
      intArray0[2] = 1935;
      intArray0[3] = 1531;
      intArray0[4] = 1531;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(1531, 1531, intArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)11;
      shortArray0[2] = (short) (-2783);
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(1, 71, shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertNotNull(grayImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = rOI0.Y();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int0);
      
      int int1 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.lx();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      
      int int4 = rOI0.uy();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals(0, int4);
      
      int int5 = rOI0.ly();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertFalse(int5 == int0);
      assertEquals(0, int5);
      
      int int6 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertTrue(int6 == int5);
      assertTrue(int6 == int2);
      assertFalse(int6 == int0);
      assertTrue(int6 == int3);
      assertTrue(int6 == int4);
      assertTrue(int6 == int1);
      assertEquals(0, int6);
      
      int int7 = rOI0.uy();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertTrue(int7 == int3);
      assertTrue(int7 == int4);
      assertTrue(int7 == int6);
      assertTrue(int7 == int2);
      assertFalse(int7 == int0);
      assertTrue(int7 == int5);
      assertTrue(int7 == int1);
      assertEquals(0, int7);
      
      int int8 = rOI0.ly();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertTrue(int8 == int1);
      assertTrue(int8 == int3);
      assertTrue(int8 == int4);
      assertTrue(int8 == int7);
      assertTrue(int8 == int2);
      assertTrue(int8 == int6);
      assertFalse(int8 == int0);
      assertTrue(int8 == int5);
      assertEquals(0, int8);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertNotNull(interpolatedGrayImage0);
      
      // Undeclared exception!
      try { 
        grayImage0.add((-3861), (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int[][] intArray0 = new int[1][3];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(1, interpolatedGrayImage0.Y());
      assertNotNull(interpolatedGrayImage0);
      assertEquals(1, intArray0.length);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.multiply((Image<Integer>) grayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int[][] intArray0 = new int[1][3];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(1, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertNotNull(interpolatedGrayImage0);
      assertEquals(1, intArray0.length);
      
      int int0 = 255;
      int int1 = 106;
      Integer integer0 = grayImage0.min();
      assertEquals(0, grayImage0.absSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertNull(integer0);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide(255, 255, 106);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 255
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int[][] intArray0 = new int[1][3];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      String string0 = grayImage0.toString();
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertNotNull(string0);
      assertEquals("0:1\n", string0);
      assertEquals(1, intArray0.length);
      
      ROI rOI2 = new ROI((-1410), 3272, 3272, 0);
      assertEquals((-1410), rOI2.ux());
      assertEquals(3273, rOI2.Y());
      assertEquals(0, rOI2.uy());
      assertEquals(3272, rOI2.lx());
      assertEquals(3272, rOI2.ly());
      assertEquals(4683, rOI2.X());
      assertNotNull(rOI2);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      
      rOI0.setROI((-2335), 0, 3272, (-93));
      assertEquals(3272, rOI0.lx());
      assertEquals((-93), rOI0.uy());
      assertEquals(94, rOI0.Y());
      assertEquals((-2335), rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(5608, rOI0.X());
      assertFalse(rOI0.equals((Object)rOI2));
      assertFalse(rOI0.equals((Object)rOI1));
      assertNotSame(rOI0, rOI2);
      assertNotSame(rOI0, rOI1);
      
      GrayImage grayImage1 = grayImage0.add(2045);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(1, intArray0.length);
      
      ROI rOI3 = new ROI();
      assertEquals(1, rOI3.X());
      assertEquals(1, rOI3.Y());
      assertEquals(0, rOI3.lx());
      assertEquals(0, rOI3.ly());
      assertEquals(0, rOI3.ux());
      assertEquals(0, rOI3.uy());
      assertNotNull(rOI3);
      assertFalse(rOI3.equals((Object)rOI2));
      assertFalse(rOI3.equals((Object)rOI1));
      assertFalse(rOI3.equals((Object)rOI0));
      
      ROI rOI4 = new ROI(4, (-93), 2045, (-47));
      assertEquals(2042, rOI4.X());
      assertEquals((-47), rOI4.ly());
      assertEquals(4, rOI4.ux());
      assertEquals((-93), rOI4.uy());
      assertEquals(2045, rOI4.lx());
      assertEquals(47, rOI4.Y());
      assertNotNull(rOI4);
      assertFalse(rOI4.equals((Object)rOI3));
      assertFalse(rOI4.equals((Object)rOI0));
      assertFalse(rOI4.equals((Object)rOI1));
      assertFalse(rOI4.equals((Object)rOI2));
      
      long long0 = grayImage1.sqrSum();
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(0L, long0);
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage2 = grayImage0.copy();
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage2.Y());
      assertEquals(0, grayImage2.X());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.absSum());
      assertNotNull(grayImage2);
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertEquals(1, intArray0.length);
      
      rOI4.setROI(0, 2045, 1049, (-93));
      assertEquals(0, rOI4.ux());
      assertEquals(1050, rOI4.X());
      assertEquals(2139, rOI4.Y());
      assertEquals(1049, rOI4.lx());
      assertEquals(2045, rOI4.ly());
      assertEquals((-93), rOI4.uy());
      assertFalse(rOI4.equals((Object)rOI3));
      assertFalse(rOI4.equals((Object)rOI0));
      assertFalse(rOI4.equals((Object)rOI1));
      assertFalse(rOI4.equals((Object)rOI2));
      assertNotSame(rOI4, rOI3);
      assertNotSame(rOI4, rOI0);
      assertNotSame(rOI4, rOI1);
      assertNotSame(rOI4, rOI2);
      
      // Undeclared exception!
      try { 
        grayImage1.multiply((Image<Integer>) grayImage0, rOI4, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2335
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int[][] intArray0 = new int[1][3];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      String string0 = grayImage0.toString();
      assertEquals(0, grayImage0.absSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertNotNull(string0);
      assertEquals("0:1\n", string0);
      assertEquals(1, intArray0.length);
      
      ROI rOI2 = new ROI((-1410), 0, 0, 0);
      assertEquals(1, rOI2.Y());
      assertEquals(1411, rOI2.X());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertEquals((-1410), rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertNotNull(rOI2);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      
      rOI0.setROI((-2335), 0, (-1410), 0);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals((-1410), rOI0.lx());
      assertEquals(926, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals((-2335), rOI0.ux());
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(rOI0.equals((Object)rOI2));
      assertNotSame(rOI0, rOI1);
      assertNotSame(rOI0, rOI2);
      
      ROI rOI3 = new ROI((-757), 0, 3, 837);
      assertEquals(3, rOI3.lx());
      assertEquals((-757), rOI3.ux());
      assertEquals(838, rOI3.Y());
      assertEquals(761, rOI3.X());
      assertEquals(837, rOI3.ly());
      assertEquals(0, rOI3.uy());
      assertNotNull(rOI3);
      assertFalse(rOI3.equals((Object)rOI1));
      assertFalse(rOI3.equals((Object)rOI0));
      assertFalse(rOI3.equals((Object)rOI2));
      
      rOI1.setROI((-2335), 0, 845, 2045);
      assertEquals(2046, rOI1.Y());
      assertEquals(3181, rOI1.X());
      assertEquals(845, rOI1.lx());
      assertEquals(2045, rOI1.ly());
      assertEquals((-2335), rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI2));
      assertFalse(rOI1.equals((Object)rOI3));
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI2);
      assertNotSame(rOI1, rOI3);
      assertNotSame(rOI1, rOI0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      GrayImage grayImage1 = null;
      try {
        grayImage1 = new GrayImage((short[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int[] intArray0 = new int[1];
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertNotNull(grayImage0);
      
      ROI rOI0 = new ROI(0, (-3158), (-3158), 0);
      assertEquals(3159, rOI0.X());
      assertEquals(3159, rOI0.Y());
      assertEquals((-3158), rOI0.uy());
      assertEquals((-3158), rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        grayImage0.add((-574), (-3158), (-574), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -6316
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }
}

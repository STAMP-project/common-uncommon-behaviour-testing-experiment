/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 19:15:47 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import java.awt.image.ImageProducer;
import jigl.image.ColorModel;
import jigl.image.ROI;
import jigl.image.types.RealColorImage;
import jigl.image.types.RealGrayImage;
import jigl.internal.DummyObserver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RealColorImage_ESTest extends RealColorImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(3198, 1757);
      assertNotNull(realColorImage0);
      assertEquals(1757, realColorImage0.Y());
      assertEquals(3198, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI((-2), (-3256), (-2), (-3256));
      assertNotNull(rOI0);
      assertEquals((-2), rOI0.ux());
      assertEquals((-3256), rOI0.uy());
      assertEquals((-2), rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-3256), rOI0.ly());
      
      int int0 = rOI0.ux();
      assertEquals((-2), int0);
      assertEquals((-2), rOI0.ux());
      assertEquals((-3256), rOI0.uy());
      assertEquals((-2), rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-3256), rOI0.ly());
      
      int int1 = rOI0.ly();
      assertEquals((-3256), int1);
      assertFalse(int1 == int0);
      assertEquals((-2), rOI0.ux());
      assertEquals((-3256), rOI0.uy());
      assertEquals((-2), rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-3256), rOI0.ly());
      
      int int2 = rOI0.ux();
      assertEquals((-2), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-2), rOI0.ux());
      assertEquals((-3256), rOI0.uy());
      assertEquals((-2), rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-3256), rOI0.ly());
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(3030, 3030, (float) 3030, 0.0F, 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -226
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RealColorImage realColorImage0 = null;
      try {
        realColorImage0 = new RealColorImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      int int0 = (-3256);
      float[] floatArray0 = new float[6];
      floatArray0[1] = (float) (-3256);
      floatArray0[2] = (float) 5;
      float float0 = (-1634.0F);
      floatArray0[3] = (-1634.0F);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(0, 5, floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      
      rOI0.setROI((-2340), 1705, 0, 0);
      assertEquals(0, rOI0.lx());
      assertEquals(1705, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(1706, rOI0.Y());
      assertEquals(2341, rOI0.X());
      assertEquals((-2340), rOI0.ux());
      
      int int0 = (-16777216);
      rOI0.setROI(278, 255, (-16777216), 278);
      assertEquals(278, rOI0.ly());
      assertEquals(255, rOI0.uy());
      assertEquals((-16777216), rOI0.ux());
      assertEquals(24, rOI0.Y());
      assertEquals(278, rOI0.lx());
      assertEquals(16777495, rOI0.X());
      
      // Undeclared exception!
      try { 
        realColorImage0.add(654.91F, (float) (-2147418620), 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      ROI rOI0 = new ROI((-231), (-231), (-207), (-231));
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals((-231), rOI0.ly());
      assertEquals(25, rOI0.X());
      assertEquals((-207), rOI0.lx());
      assertEquals((-231), rOI0.uy());
      assertEquals((-231), rOI0.ux());
      
      int int0 = rOI0.uy();
      assertEquals((-231), int0);
      assertEquals(1, rOI0.Y());
      assertEquals((-231), rOI0.ly());
      assertEquals(25, rOI0.X());
      assertEquals((-207), rOI0.lx());
      assertEquals((-231), rOI0.uy());
      assertEquals((-231), rOI0.ux());
      
      Integer integer0 = new Integer((-231));
      assertNotNull(integer0);
      assertEquals((-231), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      int int1 = 0;
      rOI0.setROI((-207), (-207), 0, 0);
      assertEquals(208, rOI0.Y());
      assertEquals(208, rOI0.X());
      assertEquals((-207), rOI0.uy());
      assertEquals((-207), rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int2 = rOI0.ux();
      assertEquals((-207), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(208, rOI0.Y());
      assertEquals(208, rOI0.X());
      assertEquals((-207), rOI0.uy());
      assertEquals((-207), rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int3 = (-1859);
      ROI rOI1 = new ROI((-3095), (-3095), (-173), (-1859));
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1237, rOI1.Y());
      assertEquals((-173), rOI1.lx());
      assertEquals((-1859), rOI1.ly());
      assertEquals((-3095), rOI1.ux());
      assertEquals((-3095), rOI1.uy());
      assertEquals(2923, rOI1.X());
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply((-207), (-1), (float[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      
      RealColorImage realColorImage1 = new RealColorImage(786, 0);
      assertNotNull(realColorImage1);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(786, realColorImage1.X());
      
      RealColorImage realColorImage2 = realColorImage1.divide(0.0F, (float) 128, (-2445.1199F));
      assertNotNull(realColorImage2);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage1, realColorImage0);
      assertSame(realColorImage2, realColorImage1);
      assertNotSame(realColorImage2, realColorImage0);
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(786, realColorImage1.X());
      assertEquals(786, realColorImage2.X());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(0, realColorImage2.Y());
      
      ColorModel colorModel0 = ColorModel.RGB;
      realColorImage2.setColorModel(colorModel0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage1, realColorImage0);
      assertSame(realColorImage2, realColorImage1);
      assertNotSame(realColorImage2, realColorImage0);
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(786, realColorImage1.X());
      assertEquals(786, realColorImage2.X());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(0, realColorImage2.Y());
      
      // Undeclared exception!
      try { 
        realColorImage2.multiply(960, 736, (float) 736, 0.0F, 2146.4F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 736
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      
      RealColorImage realColorImage1 = null;
      try {
        realColorImage1 = new RealColorImage(realColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 3;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 3;
      floatArray0[3] = (float) 3;
      floatArray0[4] = (float) 3;
      floatArray0[5] = (-32768.0F);
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 3;
      // Undeclared exception!
      try { 
        realColorImage0.multiply(floatArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      float[] floatArray0 = null;
      // Undeclared exception!
      try { 
        realColorImage0.addbuffer(3, 3, 3, 3, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(3198, 1757);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(3198, realColorImage0.X());
      assertEquals(1757, realColorImage0.Y());
      
      ROI rOI0 = new ROI(0, 0, 3, (-913));
      assertNotNull(rOI0);
      assertEquals((-913), rOI0.uy());
      assertEquals(3, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(4, rOI0.X());
      assertEquals(914, rOI0.Y());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals((-913), rOI0.uy());
      assertEquals(3, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(4, rOI0.X());
      assertEquals(914, rOI0.Y());
      
      int int1 = rOI0.lx();
      assertEquals(3, int1);
      assertFalse(int1 == int0);
      assertEquals((-913), rOI0.uy());
      assertEquals(3, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(4, rOI0.X());
      assertEquals(914, rOI0.Y());
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-913), rOI0.uy());
      assertEquals(3, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(4, rOI0.X());
      assertEquals(914, rOI0.Y());
      
      int int3 = rOI0.lx();
      assertEquals(3, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals((-913), rOI0.uy());
      assertEquals(3, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(4, rOI0.X());
      assertEquals(914, rOI0.Y());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      
      int int4 = rOI1.uy();
      assertEquals(0, int4);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int4 == int0);
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      assertFalse(int4 == int3);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      
      int int5 = rOI1.ly();
      assertEquals(0, int5);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertTrue(int5 == int2);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      
      int int6 = rOI0.ux();
      assertEquals(0, int6);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int6 == int5);
      assertTrue(int6 == int0);
      assertFalse(int6 == int1);
      assertTrue(int6 == int4);
      assertFalse(int6 == int3);
      assertTrue(int6 == int2);
      assertNotSame(rOI0, rOI1);
      assertEquals((-913), rOI0.uy());
      assertEquals(3, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(4, rOI0.X());
      assertEquals(914, rOI0.Y());
      
      RealColorImage realColorImage1 = new RealColorImage(0, 3);
      assertNotNull(realColorImage1);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(3, realColorImage1.Y());
      
      // Undeclared exception!
      realColorImage0.add(realColorImage1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      
      ROI rOI0 = new ROI((-876), (-876), 16, (-876));
      assertNotNull(rOI0);
      assertEquals((-876), rOI0.uy());
      assertEquals(893, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(16, rOI0.lx());
      assertEquals((-876), rOI0.ly());
      assertEquals((-876), rOI0.ux());
      
      int int0 = rOI0.ux();
      assertEquals((-876), int0);
      assertEquals((-876), rOI0.uy());
      assertEquals(893, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(16, rOI0.lx());
      assertEquals((-876), rOI0.ly());
      assertEquals((-876), rOI0.ux());
      
      int int1 = rOI0.lx();
      assertEquals(16, int1);
      assertFalse(int1 == int0);
      assertEquals((-876), rOI0.uy());
      assertEquals(893, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(16, rOI0.lx());
      assertEquals((-876), rOI0.ly());
      assertEquals((-876), rOI0.ux());
      
      int int2 = rOI0.ux();
      assertEquals((-876), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-876), rOI0.uy());
      assertEquals(893, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(16, rOI0.lx());
      assertEquals((-876), rOI0.ly());
      assertEquals((-876), rOI0.ux());
      
      int int3 = rOI0.lx();
      assertEquals(16, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals((-876), rOI0.uy());
      assertEquals(893, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(16, rOI0.lx());
      assertEquals((-876), rOI0.ly());
      assertEquals((-876), rOI0.ux());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      
      int int4 = rOI1.uy();
      assertEquals(0, int4);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      
      int int5 = rOI1.ly();
      assertEquals(0, int5);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertTrue(int5 == int4);
      assertFalse(int5 == int0);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      
      int int6 = rOI1.ux();
      assertEquals(0, int6);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int3);
      assertTrue(int6 == int5);
      assertTrue(int6 == int4);
      assertFalse(int6 == int0);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      
      int int7 = rOI1.ly();
      assertEquals(0, int7);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int7 == int1);
      assertFalse(int7 == int2);
      assertTrue(int7 == int4);
      assertTrue(int7 == int6);
      assertFalse(int7 == int3);
      assertTrue(int7 == int5);
      assertFalse(int7 == int0);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      
      int int8 = rOI1.ux();
      assertEquals(0, int8);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int8 == int7);
      assertFalse(int8 == int1);
      assertFalse(int8 == int0);
      assertTrue(int8 == int6);
      assertTrue(int8 == int4);
      assertFalse(int8 == int3);
      assertTrue(int8 == int5);
      assertFalse(int8 == int2);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      
      // Undeclared exception!
      try { 
        realColorImage0.copy(rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.8984048F;
      floatArray0[1] = 1.8984048F;
      floatArray0[2] = 1.8984048F;
      RealGrayImage[] realGrayImageArray0 = new RealGrayImage[0];
      realColorImage0.planes = realGrayImageArray0;
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      rOI0.setROI(0, 0, 5, 5);
      assertEquals(0, rOI0.uy());
      assertEquals(6, rOI0.X());
      assertEquals(6, rOI0.Y());
      assertEquals(5, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(5, rOI0.lx());
      
      rOI0.setROI((-2644), 358, 0, 1767);
      assertEquals(1767, rOI0.ly());
      assertEquals(1410, rOI0.Y());
      assertEquals(358, rOI0.uy());
      assertEquals((-2644), rOI0.ux());
      assertEquals(2645, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(113.09418F, 1984.5F, (float) 5, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(143, 143);
      assertNotNull(realColorImage0);
      assertEquals(143, realColorImage0.X());
      assertEquals(143, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        realColorImage0.get(143, (-2147418620));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147418620
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(3198, 1757);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(3198, realColorImage0.X());
      assertEquals(1757, realColorImage0.Y());
      
      ROI rOI0 = new ROI(0, (-3256), 0, (-3256));
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals((-3256), rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals((-3256), rOI0.ly());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals((-3256), rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals((-3256), rOI0.ly());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      
      // Undeclared exception!
      try { 
        realColorImage0.clip(195, 1757, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(4, 0);
      assertNotNull(realColorImage0);
      assertEquals(4, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ColorModel colorModel0 = ColorModel.RGB;
      realColorImage0.colorModel = colorModel0;
      assertEquals(4, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      int int0 = realColorImage0.X();
      assertEquals(4, int0);
      assertEquals(4, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      RealColorImage realColorImage1 = new RealColorImage();
      assertNotNull(realColorImage1);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      
      RealColorImage realColorImage2 = realColorImage0.add(realColorImage1);
      assertNotNull(realColorImage2);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertNotSame(realColorImage0, realColorImage1);
      assertSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage2);
      assertSame(realColorImage2, realColorImage0);
      assertNotSame(realColorImage2, realColorImage1);
      assertEquals(4, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(4, realColorImage2.X());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(0, realColorImage2.Y());
      
      RealColorImage realColorImage3 = realColorImage2.clear();
      assertNotNull(realColorImage3);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage3.equals((Object)realColorImage1));
      assertSame(realColorImage0, realColorImage3);
      assertNotSame(realColorImage0, realColorImage1);
      assertSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage3);
      assertNotSame(realColorImage1, realColorImage2);
      assertSame(realColorImage2, realColorImage0);
      assertNotSame(realColorImage2, realColorImage1);
      assertSame(realColorImage2, realColorImage3);
      assertNotSame(realColorImage3, realColorImage1);
      assertSame(realColorImage3, realColorImage2);
      assertSame(realColorImage3, realColorImage0);
      assertEquals(4, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(4, realColorImage2.X());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(0, realColorImage2.Y());
      assertEquals(0, realColorImage3.Y());
      assertEquals(4, realColorImage3.X());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((float) 4);
      assertNotNull(float0);
      assertEquals(4.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      // Undeclared exception!
      try { 
        realColorImage2.add(4, 4, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      int int0 = 3;
      ROI rOI0 = new ROI(3, (-3345), 3, 3);
      assertNotNull(rOI0);
      assertEquals(3, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(3349, rOI0.Y());
      assertEquals(3, rOI0.lx());
      assertEquals(3, rOI0.ly());
      assertEquals((-3345), rOI0.uy());
      
      // Undeclared exception!
      try { 
        realColorImage0.add(3, (float) 3, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      int int0 = (-1);
      ROI rOI0 = new ROI((-3256), (-3256), (-3256), (-1));
      assertNotNull(rOI0);
      assertEquals((-1), rOI0.ly());
      assertEquals((-3256), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-3256), rOI0.ux());
      assertEquals(3256, rOI0.Y());
      assertEquals((-3256), rOI0.uy());
      
      // Undeclared exception!
      try { 
        realColorImage0.divide((-3256), (-29), (float) (-29), (-1772.0623F), (float) (-1), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      ROI rOI0 = new ROI((-231), (-231), (-207), (-231));
      assertNotNull(rOI0);
      assertEquals((-231), rOI0.ly());
      assertEquals((-231), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals((-207), rOI0.lx());
      assertEquals((-231), rOI0.uy());
      assertEquals(25, rOI0.X());
      
      int int0 = rOI0.uy();
      assertEquals((-231), int0);
      assertEquals((-231), rOI0.ly());
      assertEquals((-231), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals((-207), rOI0.lx());
      assertEquals((-231), rOI0.uy());
      assertEquals(25, rOI0.X());
      
      Integer integer0 = new Integer((-231));
      assertNotNull(integer0);
      assertEquals((-231), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      rOI0.setROI((-207), (-207), 0, 0);
      assertEquals(208, rOI0.X());
      assertEquals((-207), rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(208, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals((-207), rOI0.ux());
      
      ColorModel colorModel0 = ColorModel.HLS;
      realColorImage0.setColorModel(colorModel0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.HLS, realColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply((-231), 1649, 3979.2988F, 1899.29F, (-82.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      RealColorImage realColorImage1 = new RealColorImage();
      assertNotNull(realColorImage1);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      
      // Undeclared exception!
      try { 
        realColorImage1.add(realColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = (-1);
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      
      float[][] floatArray0 = new float[0][9];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      assertNotNull(realGrayImage0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, floatArray0.length);
      
      // Undeclared exception!
      try { 
        realColorImage0.setPlane((-2351), realGrayImage0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2351
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      int int0 = 0;
      ROI rOI0 = new ROI(0, 0, 3062, 0);
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(3062, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(3063, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      rOI0.setROI(0, 0, 3062, 0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(3062, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(3063, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-833);
      floatArray0[2] = (float) (-833);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) (-833);
      // Undeclared exception!
      try { 
        realColorImage0.addbuffer((-833), (-833), floatArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      ColorModel colorModel0 = realColorImage0.getColorModel();
      assertEquals(ColorModel.RGB, colorModel0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      RealColorImage realColorImage1 = new RealColorImage();
      assertNotNull(realColorImage1);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      
      int int0 = 0;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(3198, 1757);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(3198, realColorImage0.X());
      assertEquals(1757, realColorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.lx();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int3 = rOI0.lx();
      assertEquals(0, int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      
      int int4 = rOI1.uy();
      assertEquals(0, int4);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      
      int int5 = new Integer(0);
      assertEquals(0, int5);
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      
      int int6 = rOI0.ux();
      assertEquals(0, int6);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int6 == int5);
      assertTrue(int6 == int1);
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertTrue(int6 == int0);
      assertTrue(int6 == int3);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int7 = rOI1.ly();
      assertEquals(0, int7);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int7 == int5);
      assertTrue(int7 == int1);
      assertTrue(int7 == int3);
      assertTrue(int7 == int2);
      assertTrue(int7 == int4);
      assertTrue(int7 == int6);
      assertTrue(int7 == int0);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      
      int int8 = rOI1.ux();
      assertEquals(0, int8);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int8 == int2);
      assertTrue(int8 == int4);
      assertTrue(int8 == int7);
      assertTrue(int8 == int6);
      assertTrue(int8 == int3);
      assertTrue(int8 == int1);
      assertTrue(int8 == int5);
      assertTrue(int8 == int0);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      // Undeclared exception!
      try { 
        realColorImage0.add(0, 0, floatArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      
      ROI rOI0 = new ROI((-876), (-876), 16, (-876));
      assertNotNull(rOI0);
      assertEquals((-876), rOI0.ly());
      assertEquals(16, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals((-876), rOI0.uy());
      assertEquals((-876), rOI0.ux());
      assertEquals(893, rOI0.X());
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(16, (-876), (float) 16, (float) 16, 32767.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      int int0 = (-1);
      // Undeclared exception!
      try { 
        realColorImage0.add((-1), (float) (-207));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(1757, 3198);
      assertNotNull(realColorImage0);
      assertEquals(1757, realColorImage0.X());
      assertEquals(3198, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI((-2), (-3256), (-2), (-3256));
      assertNotNull(rOI0);
      assertEquals((-3256), rOI0.uy());
      assertEquals((-2), rOI0.ux());
      assertEquals((-3256), rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals((-2), rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1757;
      floatArray0[1] = (float) 3198;
      floatArray0[2] = (float) 3198;
      floatArray0[3] = (float) (-2);
      floatArray0[4] = (float) 3198;
      floatArray0[5] = (float) 1757;
      // Undeclared exception!
      try { 
        realColorImage0.subtract(floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3256
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      int int0 = (-16777216);
      int int1 = (-1233);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1233);
      floatArray0[2] = (float) (-1233);
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        realColorImage0.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      
      // Undeclared exception!
      try { 
        realColorImage0.maxComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        realColorImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      
      realColorImage0.byteSize();
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      
      RealColorImage realColorImage1 = realColorImage0.multiply(0, 2724.82F);
      assertNotNull(realColorImage1);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      
      Float float0 = realColorImage1.minComponent();
      assertNotNull(float0);
      assertEquals(32767.0F, (float)float0, 0.01F);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      
      Float[] floatArray0 = new Float[1];
      Float float1 = new Float((double) 160);
      assertNotNull(float1);
      assertEquals(160.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = Float.max((-16777216), 0);
      assertEquals(0.0F, float2, 0.01F);
      
      floatArray0[0] = float1;
      // Undeclared exception!
      try { 
        realColorImage0.add(160, (-16777216), floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16777216
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(4, 0);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(4, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ColorModel colorModel0 = ColorModel.RGB;
      realColorImage0.colorModel = colorModel0;
      assertEquals(0, realColorImage0.Y());
      assertEquals(4, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      int int0 = realColorImage0.X();
      assertEquals(4, int0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(4, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      RealColorImage realColorImage1 = new RealColorImage();
      assertNotNull(realColorImage1);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      
      RealColorImage realColorImage2 = realColorImage0.add(realColorImage1);
      assertNotNull(realColorImage2);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertNotSame(realColorImage0, realColorImage1);
      assertSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage2, realColorImage1);
      assertSame(realColorImage2, realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(4, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage2.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(4, realColorImage2.X());
      
      RealColorImage realColorImage3 = realColorImage2.clear();
      assertNotNull(realColorImage3);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage3.equals((Object)realColorImage1));
      assertNotSame(realColorImage0, realColorImage1);
      assertSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage3);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage3);
      assertNotSame(realColorImage2, realColorImage1);
      assertSame(realColorImage2, realColorImage3);
      assertSame(realColorImage2, realColorImage0);
      assertSame(realColorImage3, realColorImage2);
      assertSame(realColorImage3, realColorImage0);
      assertNotSame(realColorImage3, realColorImage1);
      assertEquals(0, realColorImage0.Y());
      assertEquals(4, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage2.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(4, realColorImage2.X());
      assertEquals(0, realColorImage3.Y());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      assertEquals(4, realColorImage3.X());
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((float) 4);
      assertNotNull(float0);
      assertEquals(4.0F, (float)float0, 0.01F);
      
      double[] doubleArray0 = realColorImage3.sqrSum();
      assertNotNull(doubleArray0);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage1.equals((Object)realColorImage3));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage3.equals((Object)realColorImage1));
      assertNotSame(realColorImage0, realColorImage1);
      assertSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage3);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage3);
      assertNotSame(realColorImage2, realColorImage1);
      assertSame(realColorImage2, realColorImage3);
      assertSame(realColorImage2, realColorImage0);
      assertSame(realColorImage3, realColorImage2);
      assertSame(realColorImage3, realColorImage0);
      assertNotSame(realColorImage3, realColorImage1);
      assertEquals(0, realColorImage0.Y());
      assertEquals(4, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage2.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(4, realColorImage2.X());
      assertEquals(0, realColorImage3.Y());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      assertEquals(4, realColorImage3.X());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      RealColorImage realColorImage4 = realColorImage2.add(realColorImage0);
      assertNotNull(realColorImage4);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage1.equals((Object)realColorImage3));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage4.equals((Object)realColorImage1));
      assertNotSame(realColorImage0, realColorImage1);
      assertSame(realColorImage0, realColorImage4);
      assertSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage3);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage3);
      assertNotSame(realColorImage1, realColorImage4);
      assertNotSame(realColorImage2, realColorImage1);
      assertSame(realColorImage2, realColorImage3);
      assertSame(realColorImage2, realColorImage0);
      assertSame(realColorImage2, realColorImage4);
      assertSame(realColorImage4, realColorImage2);
      assertSame(realColorImage4, realColorImage0);
      assertNotSame(realColorImage4, realColorImage1);
      assertSame(realColorImage4, realColorImage3);
      assertEquals(0, realColorImage0.Y());
      assertEquals(4, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage2.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(4, realColorImage2.X());
      assertEquals(ColorModel.RGB, realColorImage4.getColorModel());
      assertEquals(0, realColorImage4.Y());
      assertEquals(4, realColorImage4.X());
      
      float float1 = Float.sum(1.0F, (-156.01721F));
      assertEquals((-155.01721F), float1, 0.01F);
      
      floatArray0[0] = float0;
      // Undeclared exception!
      try { 
        realColorImage2.add(4, 4, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      // Undeclared exception!
      try { 
        realColorImage0.diff((RealColorImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      float[] floatArray0 = new float[1];
      DummyObserver.dummy = null;
      floatArray0[0] = (float) 4395;
      // Undeclared exception!
      realColorImage0.addbuffer(4395, 107, 657, 1919, floatArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      rOI0.setROI(1908, (-1833), 2458, (-2340));
      assertEquals(551, rOI0.X());
      assertEquals((-2340), rOI0.uy());
      assertEquals(2458, rOI0.lx());
      assertEquals(1908, rOI0.ux());
      assertEquals((-1833), rOI0.ly());
      assertEquals(508, rOI0.Y());
      
      rOI0.setROI(3743, (-1787), 128, 20);
      assertEquals(20, rOI0.ly());
      assertEquals(3743, rOI0.lx());
      assertEquals(1808, rOI0.Y());
      assertEquals((-1787), rOI0.uy());
      assertEquals(128, rOI0.ux());
      assertEquals(3616, rOI0.X());
      
      rOI0.setROI(3743, 0, 0, 402);
      assertEquals(402, rOI0.ly());
      assertEquals(3743, rOI0.lx());
      assertEquals(403, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(3744, rOI0.X());
      
      rOI0.setROI(0, 146, 1908, (-1325));
      assertEquals(146, rOI0.ly());
      assertEquals(1908, rOI0.lx());
      assertEquals(1909, rOI0.X());
      assertEquals((-1325), rOI0.uy());
      assertEquals(1472, rOI0.Y());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply((float) 0, (float) 0, (float) 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1325
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        realColorImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(1183, 1183);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1183, realColorImage0.X());
      assertEquals(1183, realColorImage0.Y());
      
      int int0 = realColorImage0.X();
      assertEquals(1183, int0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1183, realColorImage0.X());
      assertEquals(1183, realColorImage0.Y());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      
      // Undeclared exception!
      try { 
        realColorImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      RealGrayImage realGrayImage0 = realColorImage0.plane(0);
      assertNull(realGrayImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      realColorImage0.setPlane(0, (RealGrayImage) null);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      // Undeclared exception!
      try { 
        realColorImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(2041, 0);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(2041, realColorImage0.X());
      
      RealColorImage realColorImage1 = realColorImage0.multiply((float) 2041, (float) 2041, (-71.0F));
      assertNotNull(realColorImage1);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(2041, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(2041, realColorImage1.X());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      rOI0.setROI(2458, 2458, (-2340), (-1858));
      assertEquals((-1858), rOI0.uy());
      assertEquals((-2340), rOI0.ux());
      assertEquals(2458, rOI0.lx());
      assertEquals(4317, rOI0.Y());
      assertEquals(4799, rOI0.X());
      assertEquals(2458, rOI0.ly());
      
      rOI0.setROI(3743, (-1787), 1908, 20);
      assertEquals(20, rOI0.ly());
      assertEquals(1836, rOI0.X());
      assertEquals((-1787), rOI0.uy());
      assertEquals(1908, rOI0.ux());
      assertEquals(1808, rOI0.Y());
      assertEquals(3743, rOI0.lx());
      
      RealColorImage realColorImage1 = new RealColorImage();
      assertNotNull(realColorImage1);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(realColorImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1908
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      // Undeclared exception!
      try { 
        realColorImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      
      Float float0 = realColorImage0.minComponent();
      assertNotNull(float0);
      assertEquals(32767.0F, (float)float0, 0.01F);
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      
      float[] floatArray0 = realColorImage0.absSum();
      assertNotNull(floatArray0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      rOI0.setROI(0, 0, 0, (-16777216));
      assertEquals(1, rOI0.X());
      assertEquals(16777217, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals((-16777216), rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        realColorImage0.add(floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16777216
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(3198, 1757);
      assertNotNull(realColorImage0);
      assertEquals(1757, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(3198, realColorImage0.X());
      
      ROI rOI0 = new ROI(0, (-3256), 0, (-3256));
      assertNotNull(rOI0);
      assertEquals((-3256), rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-3256), rOI0.uy());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals((-3256), rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-3256), rOI0.uy());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(2449, (-3256), (float) 0, (float) (-3256), 1.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3256
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      
      int int0 = 3;
      ROI rOI0 = new ROI(3, 3, 3, 3);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(3, rOI0.ly());
      assertEquals(3, rOI0.lx());
      assertEquals(3, rOI0.ux());
      assertEquals(3, rOI0.uy());
      
      // Undeclared exception!
      try { 
        realColorImage0.add(3, (float) 3, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 32767.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1993.07F;
      floatArray0[3] = (-2261.2483F);
      ROI rOI0 = new ROI((-876), (-876), 16, (-876));
      assertNotNull(rOI0);
      assertEquals(893, rOI0.X());
      assertEquals((-876), rOI0.uy());
      assertEquals((-876), rOI0.ux());
      assertEquals(16, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals((-876), rOI0.ly());
      
      int int0 = rOI0.ux();
      assertEquals((-876), int0);
      assertEquals(893, rOI0.X());
      assertEquals((-876), rOI0.uy());
      assertEquals((-876), rOI0.ux());
      assertEquals(16, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals((-876), rOI0.ly());
      
      int int1 = rOI0.lx();
      assertEquals(16, int1);
      assertFalse(int1 == int0);
      assertEquals(893, rOI0.X());
      assertEquals((-876), rOI0.uy());
      assertEquals((-876), rOI0.ux());
      assertEquals(16, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals((-876), rOI0.ly());
      
      int int2 = rOI0.ux();
      assertEquals((-876), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(893, rOI0.X());
      assertEquals((-876), rOI0.uy());
      assertEquals((-876), rOI0.ux());
      assertEquals(16, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals((-876), rOI0.ly());
      
      int int3 = rOI0.lx();
      assertEquals(16, int3);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(893, rOI0.X());
      assertEquals((-876), rOI0.uy());
      assertEquals((-876), rOI0.ux());
      assertEquals(16, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals((-876), rOI0.ly());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      int int4 = rOI1.uy();
      assertEquals(0, int4);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      int int5 = rOI1.ly();
      assertEquals(0, int5);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertTrue(int5 == int4);
      assertFalse(int5 == int1);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      int int6 = rOI1.ux();
      assertEquals(0, int6);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int6 == int1);
      assertTrue(int6 == int4);
      assertTrue(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int2);
      assertFalse(int6 == int0);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      int int7 = rOI1.ly();
      assertEquals(0, int7);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int7 == int5);
      assertFalse(int7 == int1);
      assertFalse(int7 == int3);
      assertTrue(int7 == int6);
      assertFalse(int7 == int0);
      assertTrue(int7 == int4);
      assertFalse(int7 == int2);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      int int8 = rOI1.ux();
      assertEquals(0, int8);
      assertFalse(int8 == int3);
      assertTrue(int8 == int4);
      assertFalse(int8 == int2);
      assertFalse(int8 == int0);
      assertTrue(int8 == int7);
      assertFalse(int8 == int1);
      assertTrue(int8 == int5);
      assertTrue(int8 == int6);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(floatArray0, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      
      Float float0 = realColorImage0.minComponent();
      assertNotNull(float0);
      assertEquals(32767.0F, (float)float0, 0.01F);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      
      float[] floatArray0 = realColorImage0.absSum();
      assertNotNull(floatArray0);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      String string0 = realColorImage0.toString();
      assertNotNull(string0);
      assertEquals("0:0\n0:0\n0:0\n", string0);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      rOI0.setROI(0, 0, 0, (-16777216));
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(16777217, rOI0.Y());
      assertEquals((-16777216), rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        realColorImage0.add(floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16777216
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1233);
      floatArray0[1] = (float) (-16777216);
      floatArray0[2] = (float) (-1233);
      floatArray0[3] = (float) (-1233);
      ColorModel colorModel0 = ColorModel.HLS;
      realColorImage0.setColorModel(colorModel0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.HLS, realColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        realColorImage0.addbuffer((-16777216), (-16777216), (-1233), (-16777216), floatArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      
      rOI0.setROI(1908, (-1833), 2458, (-2340));
      assertEquals((-2340), rOI0.uy());
      assertEquals(1908, rOI0.ux());
      assertEquals(2458, rOI0.lx());
      assertEquals((-1833), rOI0.ly());
      assertEquals(508, rOI0.Y());
      assertEquals(551, rOI0.X());
      
      int int0 = rOI0.ly();
      assertEquals((-1833), int0);
      assertEquals((-2340), rOI0.uy());
      assertEquals(1908, rOI0.ux());
      assertEquals(2458, rOI0.lx());
      assertEquals((-1833), rOI0.ly());
      assertEquals(508, rOI0.Y());
      assertEquals(551, rOI0.X());
      
      int int1 = rOI0.ux();
      assertEquals(1908, int1);
      assertFalse(int1 == int0);
      assertEquals((-2340), rOI0.uy());
      assertEquals(1908, rOI0.ux());
      assertEquals(2458, rOI0.lx());
      assertEquals((-1833), rOI0.ly());
      assertEquals(508, rOI0.Y());
      assertEquals(551, rOI0.X());
      
      int int2 = rOI0.ly();
      assertEquals((-1833), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-2340), rOI0.uy());
      assertEquals(1908, rOI0.ux());
      assertEquals(2458, rOI0.lx());
      assertEquals((-1833), rOI0.ly());
      assertEquals(508, rOI0.Y());
      assertEquals(551, rOI0.X());
      
      int int3 = rOI0.ux();
      assertEquals(1908, int3);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-2340), rOI0.uy());
      assertEquals(1908, rOI0.ux());
      assertEquals(2458, rOI0.lx());
      assertEquals((-1833), rOI0.ly());
      assertEquals(508, rOI0.Y());
      assertEquals(551, rOI0.X());
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-2340);
      floatArray0[1] = (float) 1908;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 3743;
      floatArray0[4] = (float) 1908;
      floatArray0[5] = (float) 1908;
      floatArray0[6] = (float) (-1833);
      floatArray0[7] = (float) (-1833);
      floatArray0[8] = (float) (-1325);
      // Undeclared exception!
      try { 
        realColorImage0.divide(floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2340
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      int int0 = (-876);
      ROI rOI0 = new ROI((-876), (-876), 16, (-876));
      assertNotNull(rOI0);
      assertEquals(893, rOI0.X());
      assertEquals((-876), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(16, rOI0.lx());
      assertEquals((-876), rOI0.ux());
      assertEquals((-876), rOI0.uy());
      
      int int1 = rOI0.ux();
      assertEquals((-876), int1);
      assertTrue(int1 == int0);
      assertEquals(893, rOI0.X());
      assertEquals((-876), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(16, rOI0.lx());
      assertEquals((-876), rOI0.ux());
      assertEquals((-876), rOI0.uy());
      
      int int2 = rOI0.lx();
      assertEquals(16, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(893, rOI0.X());
      assertEquals((-876), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(16, rOI0.lx());
      assertEquals((-876), rOI0.ux());
      assertEquals((-876), rOI0.uy());
      
      int int3 = rOI0.ux();
      assertEquals((-876), int3);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(893, rOI0.X());
      assertEquals((-876), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(16, rOI0.lx());
      assertEquals((-876), rOI0.ux());
      assertEquals((-876), rOI0.uy());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      
      int int4 = rOI1.uy();
      assertEquals(0, int4);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      
      rOI1.setROI((-876), 0, (-876), (-876));
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals((-876), rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(877, rOI1.Y());
      assertEquals((-876), rOI1.ux());
      assertEquals((-876), rOI1.uy());
      
      int int5 = rOI1.ly();
      assertEquals(0, int5);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int5 == int0);
      assertTrue(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertNotSame(rOI1, rOI0);
      assertEquals((-876), rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(877, rOI1.Y());
      assertEquals((-876), rOI1.ux());
      assertEquals((-876), rOI1.uy());
      
      int int6 = rOI1.ux();
      assertEquals((-876), int6);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertFalse(int6 == int5);
      assertTrue(int6 == int3);
      assertTrue(int6 == int1);
      assertNotSame(rOI1, rOI0);
      assertEquals((-876), rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(877, rOI1.Y());
      assertEquals((-876), rOI1.ux());
      assertEquals((-876), rOI1.uy());
      
      int int7 = rOI1.ly();
      assertEquals(0, int7);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int7 == int4);
      assertFalse(int7 == int0);
      assertFalse(int7 == int6);
      assertFalse(int7 == int3);
      assertTrue(int7 == int5);
      assertFalse(int7 == int1);
      assertFalse(int7 == int2);
      assertNotSame(rOI1, rOI0);
      assertEquals((-876), rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(877, rOI1.Y());
      assertEquals((-876), rOI1.ux());
      assertEquals((-876), rOI1.uy());
      
      // Undeclared exception!
      try { 
        realColorImage0.add(4, (-876), (-204.2F), (float) 0, (float) 0, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(2, 128);
      assertNotNull(realColorImage0);
      assertEquals(128, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(2, realColorImage0.X());
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(0.0F, (float) 128, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      
      ROI rOI0 = new ROI((-876), (-876), 16, (-876));
      assertNotNull(rOI0);
      assertEquals((-876), rOI0.uy());
      assertEquals((-876), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(893, rOI0.X());
      assertEquals((-876), rOI0.ly());
      assertEquals(16, rOI0.lx());
      
      int int0 = rOI0.ux();
      assertEquals((-876), int0);
      assertEquals((-876), rOI0.uy());
      assertEquals((-876), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(893, rOI0.X());
      assertEquals((-876), rOI0.ly());
      assertEquals(16, rOI0.lx());
      
      int int1 = rOI0.lx();
      assertEquals(16, int1);
      assertFalse(int1 == int0);
      assertEquals((-876), rOI0.uy());
      assertEquals((-876), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(893, rOI0.X());
      assertEquals((-876), rOI0.ly());
      assertEquals(16, rOI0.lx());
      
      int int2 = rOI0.ux();
      assertEquals((-876), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-876), rOI0.uy());
      assertEquals((-876), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(893, rOI0.X());
      assertEquals((-876), rOI0.ly());
      assertEquals(16, rOI0.lx());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      int int3 = rOI1.uy();
      assertEquals(0, int3);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      int int4 = rOI1.ly();
      assertEquals(0, int4);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      int int5 = rOI1.ux();
      assertEquals(0, int5);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      int int6 = rOI1.ly();
      assertEquals(0, int6);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int6 == int2);
      assertFalse(int6 == int1);
      assertFalse(int6 == int0);
      assertTrue(int6 == int5);
      assertTrue(int6 == int4);
      assertTrue(int6 == int3);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      int int7 = rOI1.ux();
      assertEquals(0, int7);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int7 == int6);
      assertTrue(int7 == int3);
      assertTrue(int7 == int4);
      assertFalse(int7 == int2);
      assertTrue(int7 == int5);
      assertFalse(int7 == int0);
      assertFalse(int7 == int1);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(2147418112, 3654.93F, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147418112
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      rOI0.setROI(1908, (-1833), 2458, (-2340));
      assertEquals((-2340), rOI0.uy());
      assertEquals(551, rOI0.X());
      assertEquals((-1833), rOI0.ly());
      assertEquals(508, rOI0.Y());
      assertEquals(1908, rOI0.ux());
      assertEquals(2458, rOI0.lx());
      
      int int0 = 3743;
      rOI0.setROI(3743, 1, (-2147418620), (-16777216));
      assertEquals(3743, rOI0.lx());
      assertEquals(16777218, rOI0.Y());
      assertEquals(2147422364, rOI0.X());
      assertEquals(1, rOI0.ly());
      assertEquals((-16777216), rOI0.uy());
      assertEquals((-2147418620), rOI0.ux());
      
      int int1 = (-1787);
      int int2 = 128;
      int int3 = 20;
      // Undeclared exception!
      try { 
        realColorImage0.add((-4258.4F), 1.0F, (float) 1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16777216
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 3198;
      int int1 = 1757;
      RealColorImage realColorImage0 = new RealColorImage(3198, 1757);
      assertNotNull(realColorImage0);
      assertEquals(1757, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(3198, realColorImage0.X());
      
      ROI rOI0 = new ROI(0, (-3256), 0, (-3256));
      assertNotNull(rOI0);
      assertEquals((-3256), rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals((-3256), rOI0.ly());
      
      rOI0.setROI(5, 0, 1829, 1493);
      assertEquals(1825, rOI0.X());
      assertEquals(5, rOI0.ux());
      assertEquals(1493, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(1494, rOI0.Y());
      assertEquals(1829, rOI0.lx());
      
      int int2 = rOI0.ux();
      assertEquals(5, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1825, rOI0.X());
      assertEquals(5, rOI0.ux());
      assertEquals(1493, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(1494, rOI0.Y());
      assertEquals(1829, rOI0.lx());
      
      // Undeclared exception!
      try { 
        realColorImage0.absSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1233);
      floatArray0[2] = (float) (-1233);
      floatArray0[4] = (float) (-16777216);
      ROI rOI0 = new ROI((-16777216), (-16777216), (-1233), 16);
      assertNotNull(rOI0);
      assertEquals((-16777216), rOI0.uy());
      assertEquals((-16777216), rOI0.ux());
      assertEquals(16, rOI0.ly());
      assertEquals(16777233, rOI0.Y());
      assertEquals((-1233), rOI0.lx());
      assertEquals(16775984, rOI0.X());
      
      rOI0.setROI(0, 0, 8, (-1233));
      assertEquals(8, rOI0.lx());
      assertEquals((-1233), rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(9, rOI0.X());
      assertEquals(1234, rOI0.Y());
      assertEquals(0, rOI0.ly());
      
      rOI0.setROI((-16777216), 0, 8, (-1233));
      assertEquals(8, rOI0.lx());
      assertEquals((-1233), rOI0.uy());
      assertEquals((-16777216), rOI0.ux());
      assertEquals(16777225, rOI0.X());
      assertEquals(1234, rOI0.Y());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply((float) 16, (float) 8, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        realColorImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      int int0 = 3;
      ROI rOI0 = new ROI(3, (-3345), 3, 3);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(3, rOI0.ux());
      assertEquals((-3345), rOI0.uy());
      assertEquals(3, rOI0.ly());
      assertEquals(3, rOI0.lx());
      assertEquals(3349, rOI0.Y());
      
      // Undeclared exception!
      realColorImage0.copy(rOI0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      ColorModel colorModel0 = ColorModel.RGB;
      realColorImage0.colorModel = colorModel0;
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      // Undeclared exception!
      try { 
        realColorImage0.add((-1), (float) (-207));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 0;
      RealColorImage realColorImage0 = new RealColorImage(16, 0);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(16, realColorImage0.X());
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 16;
      floatArray0[1] = (float) 16;
      floatArray0[2] = (float) 16;
      RealColorImage realColorImage1 = realColorImage0.addbuffer(16, 0, floatArray0);
      assertNotNull(realColorImage1);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(16, realColorImage0.X());
      assertEquals(16, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertArrayEquals(new float[] {16.0F, 16.0F, 16.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Float float0 = realColorImage1.minComponent();
      assertNotNull(float0);
      assertEquals(32767.0F, (float)float0, 0.01F);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(16, realColorImage0.X());
      assertEquals(16, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertArrayEquals(new float[] {16.0F, 16.0F, 16.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      ColorModel colorModel0 = ColorModel.YIQ;
      realColorImage0.setColorModel(colorModel0);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertNotSame(realColorImage0, realColorImage1);
      assertEquals(0, realColorImage0.Y());
      assertEquals(16, realColorImage0.X());
      assertEquals(ColorModel.YIQ, realColorImage0.getColorModel());
      
      RealColorImage realColorImage2 = new RealColorImage(realColorImage0);
      assertNotNull(realColorImage2);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertEquals(0, realColorImage0.Y());
      assertEquals(16, realColorImage0.X());
      assertEquals(ColorModel.YIQ, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(0, realColorImage2.Y());
      assertEquals(16, realColorImage2.X());
      
      ColorModel colorModel1 = ColorModel.RGB;
      realColorImage2.setColorModel(colorModel1);
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertFalse(colorModel1.equals((Object)colorModel0));
      assertNotSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage2, realColorImage1);
      assertNotSame(realColorImage2, realColorImage0);
      assertNotSame(colorModel1, colorModel0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(16, realColorImage0.X());
      assertEquals(ColorModel.YIQ, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(0, realColorImage2.Y());
      assertEquals(16, realColorImage2.X());
      
      // Undeclared exception!
      try { 
        realColorImage1.min((-2296));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2296
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 0;
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      RealColorImage realColorImage1 = realColorImage0.copy();
      assertNotNull(realColorImage1);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      
      float[] floatArray0 = realColorImage0.absSum();
      assertNotNull(floatArray0);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertNotSame(realColorImage0, realColorImage1);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int int1 = 0;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int2 = 1226;
      // Undeclared exception!
      try { 
        realColorImage0.multiply(1226, (-535.76F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1226
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-253.82231F);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 1908;
      floatArray0[3] = (float) (-1833);
      floatArray0[4] = (float) 0;
      floatArray0[5] = 1.0F;
      floatArray0[6] = (float) 2458;
      // Undeclared exception!
      try { 
        realColorImage0.multiply(floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      rOI0.setROI(1908, (-1833), 2458, (-2340));
      assertEquals(551, rOI0.X());
      assertEquals((-1833), rOI0.ly());
      assertEquals((-2340), rOI0.uy());
      assertEquals(1908, rOI0.ux());
      assertEquals(2458, rOI0.lx());
      assertEquals(508, rOI0.Y());
      
      rOI0.setROI(3743, (-1787), 128, 20);
      assertEquals(128, rOI0.ux());
      assertEquals(20, rOI0.ly());
      assertEquals((-1787), rOI0.uy());
      assertEquals(3616, rOI0.X());
      assertEquals(1808, rOI0.Y());
      assertEquals(3743, rOI0.lx());
      
      ImageProducer imageProducer0 = realColorImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      RealColorImage realColorImage1 = new RealColorImage();
      assertNotNull(realColorImage1);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(realColorImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 128
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      
      ROI rOI0 = new ROI((-876), (-876), 16, (-876));
      assertNotNull(rOI0);
      assertEquals(893, rOI0.X());
      assertEquals((-876), rOI0.ly());
      assertEquals(16, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals((-876), rOI0.uy());
      assertEquals((-876), rOI0.ux());
      
      int int0 = rOI0.ux();
      assertEquals((-876), int0);
      assertEquals(893, rOI0.X());
      assertEquals((-876), rOI0.ly());
      assertEquals(16, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals((-876), rOI0.uy());
      assertEquals((-876), rOI0.ux());
      
      int int1 = rOI0.lx();
      assertEquals(16, int1);
      assertFalse(int1 == int0);
      assertEquals(893, rOI0.X());
      assertEquals((-876), rOI0.ly());
      assertEquals(16, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals((-876), rOI0.uy());
      assertEquals((-876), rOI0.ux());
      
      int int2 = rOI0.ux();
      assertEquals((-876), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(893, rOI0.X());
      assertEquals((-876), rOI0.ly());
      assertEquals(16, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals((-876), rOI0.uy());
      assertEquals((-876), rOI0.ux());
      
      int int3 = rOI0.lx();
      assertEquals(16, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(893, rOI0.X());
      assertEquals((-876), rOI0.ly());
      assertEquals(16, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals((-876), rOI0.uy());
      assertEquals((-876), rOI0.ux());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      
      int int4 = rOI1.uy();
      assertEquals(0, int4);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      
      int int5 = rOI1.ly();
      assertEquals(0, int5);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertTrue(int5 == int4);
      assertFalse(int5 == int1);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      
      int int6 = rOI1.ux();
      assertEquals(0, int6);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int6 == int1);
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      assertTrue(int6 == int4);
      assertTrue(int6 == int5);
      assertFalse(int6 == int2);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      
      int int7 = rOI1.ly();
      assertEquals(0, int7);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int7 == int4);
      assertFalse(int7 == int0);
      assertFalse(int7 == int3);
      assertFalse(int7 == int1);
      assertFalse(int7 == int2);
      assertTrue(int7 == int6);
      assertTrue(int7 == int5);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      
      int int8 = rOI1.ux();
      assertEquals(0, int8);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int8 == int2);
      assertFalse(int8 == int3);
      assertTrue(int8 == int7);
      assertTrue(int8 == int4);
      assertFalse(int8 == int1);
      assertTrue(int8 == int5);
      assertTrue(int8 == int6);
      assertFalse(int8 == int0);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(2147418112, 3654.93F, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147418112
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(4, 0);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(4, realColorImage0.X());
      
      ColorModel colorModel0 = ColorModel.RGB;
      realColorImage0.colorModel = colorModel0;
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(4, realColorImage0.X());
      
      int int0 = realColorImage0.X();
      assertEquals(4, int0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(4, realColorImage0.X());
      
      RealColorImage realColorImage1 = new RealColorImage();
      assertNotNull(realColorImage1);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      
      RealColorImage realColorImage2 = realColorImage0.add(realColorImage1);
      assertNotNull(realColorImage2);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertNotSame(realColorImage0, realColorImage1);
      assertSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage2, realColorImage1);
      assertSame(realColorImage2, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(4, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage2.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(4, realColorImage2.X());
      
      ROI rOI0 = new ROI((-876), (-876), 16, (-876));
      assertNotNull(rOI0);
      assertEquals((-876), rOI0.ux());
      assertEquals((-876), rOI0.uy());
      assertEquals((-876), rOI0.ly());
      assertEquals(893, rOI0.X());
      assertEquals(16, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.ux();
      assertEquals((-876), int1);
      assertFalse(int1 == int0);
      assertEquals((-876), rOI0.ux());
      assertEquals((-876), rOI0.uy());
      assertEquals((-876), rOI0.ly());
      assertEquals(893, rOI0.X());
      assertEquals(16, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int2 = rOI0.lx();
      assertEquals(16, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-876), rOI0.ux());
      assertEquals((-876), rOI0.uy());
      assertEquals((-876), rOI0.ly());
      assertEquals(893, rOI0.X());
      assertEquals(16, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int3 = rOI0.ux();
      assertEquals((-876), int3);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-876), rOI0.ux());
      assertEquals((-876), rOI0.uy());
      assertEquals((-876), rOI0.ly());
      assertEquals(893, rOI0.X());
      assertEquals(16, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int4 = rOI0.lx();
      assertEquals(16, int4);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      assertEquals((-876), rOI0.ux());
      assertEquals((-876), rOI0.uy());
      assertEquals((-876), rOI0.ly());
      assertEquals(893, rOI0.X());
      assertEquals(16, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      
      int int5 = rOI1.uy();
      assertEquals(0, int5);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      
      int int6 = rOI1.ly();
      assertEquals(0, int6);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int6 == int4);
      assertFalse(int6 == int0);
      assertTrue(int6 == int5);
      assertFalse(int6 == int2);
      assertFalse(int6 == int1);
      assertFalse(int6 == int3);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      
      int int7 = rOI1.ux();
      assertEquals(0, int7);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int7 == int5);
      assertFalse(int7 == int1);
      assertTrue(int7 == int6);
      assertFalse(int7 == int0);
      assertFalse(int7 == int2);
      assertFalse(int7 == int3);
      assertFalse(int7 == int4);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      
      int int8 = rOI1.ly();
      assertEquals(0, int8);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int8 == int3);
      assertTrue(int8 == int6);
      assertFalse(int8 == int0);
      assertTrue(int8 == int7);
      assertFalse(int8 == int2);
      assertTrue(int8 == int5);
      assertFalse(int8 == int1);
      assertFalse(int8 == int4);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      
      int int9 = rOI1.ux();
      assertEquals(0, int9);
      assertFalse(int9 == int1);
      assertTrue(int9 == int5);
      assertFalse(int9 == int2);
      assertTrue(int9 == int8);
      assertTrue(int9 == int7);
      assertTrue(int9 == int6);
      assertFalse(int9 == int0);
      assertFalse(int9 == int3);
      assertFalse(int9 == int4);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      
      // Undeclared exception!
      try { 
        realColorImage0.clip(4, 0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      ColorModel colorModel0 = ColorModel.HLS;
      realColorImage0.setColorModel(colorModel0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.HLS, realColorImage0.getColorModel());
      
      RealGrayImage[] realGrayImageArray0 = new RealGrayImage[0];
      realColorImage0.planes = realGrayImageArray0;
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.HLS, realColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        realColorImage0.clear();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(3198, 1757);
      assertNotNull(realColorImage0);
      assertEquals(1757, realColorImage0.Y());
      assertEquals(3198, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      int int0 = (-2);
      ROI rOI0 = new ROI((-2), (-3256), (-2), (-3256));
      assertNotNull(rOI0);
      assertEquals((-3256), rOI0.uy());
      assertEquals((-2), rOI0.ux());
      assertEquals((-2), rOI0.lx());
      assertEquals((-3256), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int1 = 5;
      int int2 = 1829;
      int int3 = 1507;
      // Undeclared exception!
      try { 
        realColorImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3256
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply((-502), 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -502
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      Float float0 = realColorImage0.minComponent();
      assertNotNull(float0);
      assertEquals(32767.0F, (float)float0, 0.01F);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      float[] floatArray0 = realColorImage0.absSum();
      assertNotNull(floatArray0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      String string0 = realColorImage0.toString();
      assertNotNull(string0);
      assertEquals("0:0\n0:0\n0:0\n", string0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      rOI0.setROI(0, 0, 0, (-16777216));
      assertEquals((-16777216), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(16777217, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        realColorImage0.get(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(3198, 1757);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1757, realColorImage0.Y());
      assertEquals(3198, realColorImage0.X());
      
      ROI rOI0 = new ROI(0, (-3256), 0, (-3256));
      assertNotNull(rOI0);
      assertEquals((-3256), rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals((-3256), rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        realColorImage0.max(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3256
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(16, 0);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(16, realColorImage0.X());
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.4E-45F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 3;
      floatArray0[3] = (float) (-2147418620);
      floatArray0[4] = (float) 3;
      RealColorImage realColorImage1 = realColorImage0.addbuffer(1100, 3, (-2147418620), 16, floatArray0);
      assertNotNull(realColorImage1);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(16, realColorImage0.X());
      assertEquals(3, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1100, realColorImage1.X());
      assertArrayEquals(new float[] {1.4E-45F, 0.0F, 3.0F, (-2.14741862E9F), 3.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        realColorImage1.divide(0, 1100, 0.0F, (float) 16, (-329.0374F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1100
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 17:26:05 GMT 2019
 */

package org.databene.jdbacl.sql.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.antlr.runtime.BaseRecognizer;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.DFA;
import org.antlr.runtime.IntStream;
import org.antlr.runtime.RecognizerSharedState;
import org.databene.jdbacl.sql.parser.SQLLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLLexer_ESTest extends SQLLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(charStream0).LA(anyInt());
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(60, SQLLexer.WS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertNotNull(sQLLexer0);
      
      recognizerSharedState0.backtracking = 7;
      sQLLexer0.mT__99();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(7, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(7, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals(99, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(60, SQLLexer.WS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).LA(anyInt());
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, (RecognizerSharedState) null);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(43, SQLLexer.IN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(4, SQLLexer.INT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(40, SQLLexer.LE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(37, SQLLexer.GT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(38, SQLLexer.GE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.setBacktrackingLevel(2179);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(2179, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(43, SQLLexer.IN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(4, SQLLexer.INT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(40, SQLLexer.LE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(37, SQLLexer.GT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(38, SQLLexer.GE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      
      sQLLexer0.mT__98();
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(2179, sQLLexer0.getBacktrackingLevel());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(43, SQLLexer.IN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(4, SQLLexer.INT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(40, SQLLexer.LE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(37, SQLLexer.GT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(38, SQLLexer.GE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).LA(anyInt());
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, (RecognizerSharedState) null);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(39, SQLLexer.LT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(31, SQLLexer.OR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(57, SQLLexer.DATE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(60, SQLLexer.WS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.setBacktrackingLevel(2179);
      assertEquals(2179, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(39, SQLLexer.LT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(31, SQLLexer.OR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(57, SQLLexer.DATE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(60, SQLLexer.WS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      
      sQLLexer0.mLTGT();
      assertEquals(2179, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(39, SQLLexer.LT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(31, SQLLexer.OR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(57, SQLLexer.DATE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(60, SQLLexer.WS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(39, SQLLexer.LT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(60, SQLLexer.WS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, (RecognizerSharedState) null);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(4, SQLLexer.INT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(38, SQLLexer.GE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(37, SQLLexer.GT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mXOR();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(39, SQLLexer.LT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(32, SQLLexer.AND);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mWS();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(37, SQLLexer.GT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(39, SQLLexer.LT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mVARCHAR2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(37, SQLLexer.GT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(43, SQLLexer.IN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mTokens();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.DFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(39, SQLLexer.LT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(67, SQLLexer.T__67);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__99();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(39, SQLLexer.LT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(67, SQLLexer.T__67);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__97();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(44, SQLLexer.BETWEEN);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__96();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(63, SQLLexer.T__63);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(38, SQLLexer.GE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(37, SQLLexer.GT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(60, SQLLexer.WS);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__95();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(39, SQLLexer.LT);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__94();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-642)).when(charStream0).getCharPositionInLine();
      doReturn((-642)).when(charStream0).getLine();
      doReturn((-642), (-642)).when(charStream0).LA(anyInt());
      doReturn((-642)).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals((-642), sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals((-642), sQLLexer0.getLine());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(39, SQLLexer.LT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(57, SQLLexer.DATE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(4, SQLLexer.INT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__93();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(39, SQLLexer.LT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(38, SQLLexer.GE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(41, SQLLexer.IS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__92();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-3494)).when(charStream0).getCharPositionInLine();
      doReturn((-3494)).when(charStream0).getLine();
      doReturn((-3494), 358).when(charStream0).LA(anyInt());
      doReturn(358).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals((-3494), sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals((-3494), sQLLexer0.getLine());
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(60, SQLLexer.WS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(39, SQLLexer.LT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__91();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(39, SQLLexer.LT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(37, SQLLexer.GT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(40, SQLLexer.LE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__88();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(39, SQLLexer.LT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__87();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__86();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(6).when(charStream0).getCharPositionInLine();
      doReturn(6).when(charStream0).getLine();
      doReturn((-697), (-697)).when(charStream0).LA(anyInt());
      doReturn((-4252)).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(6, sQLLexer0.getCharPositionInLine());
      assertEquals(6, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(37, SQLLexer.GT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__85();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, (RecognizerSharedState) null);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(39, SQLLexer.LT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(40, SQLLexer.LE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__84();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(43, SQLLexer.IN);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(31, SQLLexer.OR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(39, SQLLexer.LT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__83();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(40, SQLLexer.LE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(39, SQLLexer.LT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(44, SQLLexer.BETWEEN);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__82();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__81();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__80();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(10).when(charStream0).getCharPositionInLine();
      doReturn(10).when(charStream0).getLine();
      doReturn(123, 123).when(charStream0).LA(anyInt());
      doReturn(123).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(10, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(10, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(40, SQLLexer.LE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__79();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(116, SQLLexer.T__116);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__78();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, (RecognizerSharedState) null);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(41, SQLLexer.IS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(89, SQLLexer.T__89);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(37, SQLLexer.GT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__77();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(4, SQLLexer.INT);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(32, SQLLexer.AND);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__76();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(410).when(charStream0).getCharPositionInLine();
      doReturn(410).when(charStream0).getLine();
      doReturn(410, 3377).when(charStream0).LA(anyInt());
      doReturn(410).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(410, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(410, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(39, SQLLexer.LT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(43, SQLLexer.IN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__75();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(292).when(charStream0).getCharPositionInLine();
      doReturn((-2600)).when(charStream0).getLine();
      doReturn(292, (-2600)).when(charStream0).LA(anyInt());
      doReturn(1675).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(292, sQLLexer0.getCharPositionInLine());
      assertEquals((-2600), sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(40, SQLLexer.LE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(106, SQLLexer.T__106);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__74();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(43, SQLLexer.IN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(38, SQLLexer.GE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(133, SQLLexer.T__133);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__73();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(37, SQLLexer.GT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(41, SQLLexer.IS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__72();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__70();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-642)).when(charStream0).getCharPositionInLine();
      doReturn((-1430)).when(charStream0).getLine();
      doReturn((-642), 421).when(charStream0).LA(anyInt());
      doReturn((-642)).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-642), sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1430), sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(60, SQLLexer.WS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__69();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(32, SQLLexer.AND);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(43, SQLLexer.IN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLLexer.IS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(39, SQLLexer.LT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(37, SQLLexer.GT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__68();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(1483).when(charStream0).getCharPositionInLine();
      doReturn((-3890)).when(charStream0).getLine();
      doReturn((-3890), 1).when(charStream0).LA(anyInt());
      doReturn((-3890)).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(1483, sQLLexer0.getCharPositionInLine());
      assertEquals((-3890), sQLLexer0.getLine());
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(32, SQLLexer.AND);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__67();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(37, SQLLexer.GT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(4, SQLLexer.INT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(60, SQLLexer.WS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__66();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(429).when(charStream0).getCharPositionInLine();
      doReturn(2798).when(charStream0).getLine();
      doReturn(2798, 2798).when(charStream0).LA(anyInt());
      doReturn(429).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(429, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(2798, sQLLexer0.getLine());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__65();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(37, SQLLexer.GT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__63();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(106, SQLLexer.T__106);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__62();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(94, SQLLexer.T__94);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(38, SQLLexer.GE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(37, SQLLexer.GT);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__61();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(823).when(charStream0).getCharPositionInLine();
      doReturn(823).when(charStream0).getLine();
      doReturn(962, (-1)).when(charStream0).LA(anyInt());
      doReturn(1068).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(823, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(823, sQLLexer0.getLine());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(39, SQLLexer.LT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(4, SQLLexer.INT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(60, SQLLexer.WS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__137();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__136();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(39, SQLLexer.LT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__135();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-2)).when(charStream0).getCharPositionInLine();
      doReturn((-2)).when(charStream0).getLine();
      doReturn((-2), 105).when(charStream0).LA(anyInt());
      doReturn(96).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-2), sQLLexer0.getLine());
      assertEquals((-2), sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(37, SQLLexer.GT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__134();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(1974).when(charStream0).getCharPositionInLine();
      doReturn((-1016)).when(charStream0).getLine();
      doReturn((-1016), 1974).when(charStream0).LA(anyInt());
      doReturn((-1016)).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(1974, sQLLexer0.getCharPositionInLine());
      assertEquals((-1016), sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(60, SQLLexer.WS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__133();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(39, SQLLexer.LT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(4, SQLLexer.INT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__132();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(38, SQLLexer.GE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(7, SQLLexer.STRING);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(43, SQLLexer.IN);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(32, SQLLexer.AND);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(60, SQLLexer.WS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__131();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__129();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(4, SQLLexer.INT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__127();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(38, SQLLexer.GE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(32, SQLLexer.AND);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__126();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(60, SQLLexer.WS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__125();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(39, SQLLexer.LT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(43, SQLLexer.IN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__124();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(37, SQLLexer.GT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(60, SQLLexer.WS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__123();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(40, SQLLexer.LE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__122();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(37, SQLLexer.GT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(4, SQLLexer.INT);
      assertEquals(11, SQLLexer.COMMENT);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__121();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(39, SQLLexer.LT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(31, SQLLexer.OR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(37, SQLLexer.GT);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__120();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__119();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(31, SQLLexer.OR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(32, SQLLexer.AND);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(4, SQLLexer.INT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__118();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(32, SQLLexer.AND);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(43, SQLLexer.IN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(40, SQLLexer.LE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__117();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(4, SQLLexer.INT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(32, SQLLexer.AND);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__116();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(92, SQLLexer.T__92);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(38, SQLLexer.GE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(37, SQLLexer.GT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(43, SQLLexer.IN);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__115();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(37, SQLLexer.GT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(43, SQLLexer.IN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(60, SQLLexer.WS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__114();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(4, SQLLexer.INT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__113();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(10).when(charStream0).getCharPositionInLine();
      doReturn(10).when(charStream0).getLine();
      doReturn(123, 123).when(charStream0).LA(anyInt());
      doReturn(123).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(10, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(10, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(37, SQLLexer.GT);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(39, SQLLexer.LT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(113, SQLLexer.T__113);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__112();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-637)).when(charStream0).getCharPositionInLine();
      doReturn((-637)).when(charStream0).getLine();
      doReturn((-637), (-637)).when(charStream0).LA(anyInt());
      doReturn((-2332)).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals((-637), sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals((-637), sQLLexer0.getLine());
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(41, SQLLexer.IS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__111();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__110();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(39, SQLLexer.LT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(64, SQLLexer.T__64);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__109();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(86).when(charStream0).getCharPositionInLine();
      doReturn(86).when(charStream0).getLine();
      doReturn(163, 163).when(charStream0).LA(anyInt());
      doReturn(163).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(86, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(86, sQLLexer0.getLine());
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(4, SQLLexer.INT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(40, SQLLexer.LE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(60, SQLLexer.WS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__108();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(32, SQLLexer.AND);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__107();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(60, SQLLexer.WS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(4, SQLLexer.INT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__106();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(39, SQLLexer.LT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__105();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(60, SQLLexer.WS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(40, SQLLexer.LE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__104();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(885).when(charStream0).getCharPositionInLine();
      doReturn(3).when(charStream0).getLine();
      doReturn(340, 885).when(charStream0).LA(anyInt());
      doReturn(340).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(3, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(885, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(4, SQLLexer.INT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(38, SQLLexer.GE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__103();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__102();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(38, SQLLexer.GE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(39, SQLLexer.LT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(60, SQLLexer.WS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__101();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(31, SQLLexer.OR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(39, SQLLexer.LT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__100();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mTIMESTAMP();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(43, SQLLexer.IN);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(60, SQLLexer.WS);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(32, SQLLexer.AND);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mSUB();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(42, SQLLexer.NULL);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(4, SQLLexer.INT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mSTRING();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(32, SQLLexer.AND);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mSTRING();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(39, SQLLexer.LT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mSLASH();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(charStream0).getCharPositionInLine();
      doReturn((-1)).when(charStream0).getLine();
      doReturn((-1), (-1)).when(charStream0).LA(anyInt());
      doReturn((-581)).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals((-1), sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals((-1), sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(4, SQLLexer.INT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(40, SQLLexer.LE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(37, SQLLexer.GT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(57, SQLLexer.DATE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(60, SQLLexer.WS);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(39, SQLLexer.LT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(31, SQLLexer.OR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(41, SQLLexer.IS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(48, SQLLexer.SLASH);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mROWID();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(10).when(charStream0).getCharPositionInLine();
      doReturn(10).when(charStream0).getLine();
      doReturn(10, 10).when(charStream0).LA(anyInt());
      doReturn(10).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(10, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(10, sQLLexer0.getLine());
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mQUOTED_NAME();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(40, SQLLexer.LE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(4, SQLLexer.INT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(32, SQLLexer.AND);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(136, SQLLexer.T__136);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mQUOTED_NAME();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mPRIMARY();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mPLUS();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(39, SQLLexer.LT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mPERCENT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(60, SQLLexer.WS);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(43, SQLLexer.IN);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mNVARCHAR2();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mNUMBER();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(40, SQLLexer.LE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mNULL();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(39, SQLLexer.LT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(43, SQLLexer.IN);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(37, SQLLexer.GT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mNOT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mLTGT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(292).when(charStream0).getCharPositionInLine();
      doReturn((-2600)).when(charStream0).getLine();
      doReturn(292, (-2600)).when(charStream0).LA(anyInt());
      doReturn(1675).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(292, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals((-2600), sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(39, SQLLexer.LT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(43, SQLLexer.IN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(41, SQLLexer.IS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(31, SQLLexer.OR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(130, SQLLexer.T__130);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mLT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(33, SQLLexer.XOR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(37, SQLLexer.GT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mLE();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(39, SQLLexer.LT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mIS();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(41, SQLLexer.IS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mINT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(4, SQLLexer.INT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(60, SQLLexer.WS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mIN();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(67, SQLLexer.T__67);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mIDENTIFIER();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(60, SQLLexer.WS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(43, SQLLexer.IN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mGT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(37, SQLLexer.GT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(32, SQLLexer.AND);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mGE();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(37, SQLLexer.GT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mEQ();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(62, SQLLexer.T__62);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(38, SQLLexer.GE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(39, SQLLexer.LT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(40, SQLLexer.LE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(11, SQLLexer.COMMENT);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mDATE();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(39, SQLLexer.LT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(4, SQLLexer.INT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mCOMMENT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(32, SQLLexer.AND);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(43, SQLLexer.IN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mCHAR();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(40, SQLLexer.LE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(41, SQLLexer.IS);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(94, SQLLexer.T__94);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mBYTE();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(4, SQLLexer.INT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mBETWEEN();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(39, SQLLexer.LT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(60, SQLLexer.WS);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(37, SQLLexer.GT);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mBEFORE();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, (RecognizerSharedState) null);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mBARBAR();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(37, SQLLexer.GT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(85, SQLLexer.T__85);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mBANGEQ();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(99).when(charStream0).getCharPositionInLine();
      doReturn(709).when(charStream0).getLine();
      doReturn(0, 709).when(charStream0).LA(anyInt());
      doReturn(31).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(709, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(99, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(87, SQLLexer.T__87);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(38, SQLLexer.GE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(132, SQLLexer.T__132);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(41, SQLLexer.IS);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(43, SQLLexer.IN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(60, SQLLexer.WS);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mAND();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(100).when(charStream0).getCharPositionInLine();
      doReturn(3583).when(charStream0).getLine();
      doReturn(68, (-813), (-1498), 0, 0).when(charStream0).LA(anyInt());
      doReturn(135).when(charStream0).index();
      doReturn(1647).when(charStream0).mark();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(100, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(3583, sQLLexer0.getLine());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mTokens();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(10).when(charStream0).getCharPositionInLine();
      doReturn(10).when(charStream0).getLine();
      doReturn(10, 10, 10, 10).when(charStream0).LA(anyInt());
      doReturn(10).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(10, sQLLexer0.getLine());
      assertEquals(10, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(37, SQLLexer.GT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mIDENTIFIER();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(109, SQLLexer.T__109);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(4, SQLLexer.INT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__97();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mBYTE();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(40, SQLLexer.LE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(100, SQLLexer.T__100);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__124();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(48, (-1566)).when(charStream0).getCharPositionInLine();
      doReturn(899, 899).when(charStream0).getLine();
      doReturn(899, 48, (-1566), 0).when(charStream0).LA(anyInt());
      doReturn("NCHAR2", (String) null).when(charStream0).getSourceName();
      doReturn(48, 48).when(charStream0).index();
      doReturn(899).when(charStream0).mark();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(899, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(48, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(60, SQLLexer.WS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(41, SQLLexer.IS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SQLLexer error
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(10).when(charStream0).getCharPositionInLine();
      doReturn(10).when(charStream0).getLine();
      doReturn(123, 123, 123, 79, (-3887)).when(charStream0).LA(anyInt());
      doReturn(123).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(10, sQLLexer0.getCharPositionInLine());
      assertEquals(10, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mWS();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0, 0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, (RecognizerSharedState) null);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(31, SQLLexer.OR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(43, SQLLexer.IN);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mWS();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(32, SQLLexer.AND);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(40, SQLLexer.LE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(38, SQLLexer.GE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(41, SQLLexer.IS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(33, SQLLexer.XOR);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mCOMMENT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(878).when(charStream0).getCharPositionInLine();
      doReturn(3).when(charStream0).getLine();
      doReturn(340, 878).when(charStream0).LA(anyInt());
      doReturn(340).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(878, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(3, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(32, SQLLexer.AND);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(31, SQLLexer.OR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(41, SQLLexer.IS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mINT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(60, SQLLexer.WS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mINT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(10).when(charStream0).getCharPositionInLine();
      doReturn(10).when(charStream0).getLine();
      doReturn(123, 123, 0, 0, 0).when(charStream0).LA(anyInt());
      doReturn(123).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(10, sQLLexer0.getCharPositionInLine());
      assertEquals(10, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(60, SQLLexer.WS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(32, SQLLexer.AND);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(43, SQLLexer.IN);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mIDENTIFIER();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLLexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.backtracking = 94;
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(173).when(charStream0).getLine();
      doReturn(1316, 388).when(charStream0).LA(anyInt());
      doReturn(72, 4).when(charStream0).index();
      doReturn(114).when(charStream0).mark();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(94, sQLLexer0.getBacktrackingLevel());
      assertEquals(173, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(94, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertNotNull(sQLLexer0);
      
      CommonToken commonToken0 = (CommonToken)sQLLexer0.nextToken();
      assertEquals(94, sQLLexer0.getBacktrackingLevel());
      assertEquals(173, sQLLexer0.getLine());
      assertTrue(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-1), commonToken0.getTokenIndex());
      assertEquals(72, commonToken0.getStartIndex());
      assertEquals(3, commonToken0.getStopIndex());
      assertEquals(173, commonToken0.getLine());
      assertEquals(0, commonToken0.getChannel());
      assertEquals(0, commonToken0.getType());
      assertEquals(0, commonToken0.getCharPositionInLine());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertTrue(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(94, recognizerSharedState0.backtracking);
      assertEquals(173, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(72, recognizerSharedState0.tokenStartCharIndex);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertNotNull(commonToken0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(43, SQLLexer.IN);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(60, SQLLexer.WS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertNotNull(sQLLexer0);
      
      SQLLexer.DFA9 sQLLexer_DFA9_0 = sQLLexer0.new DFA9(sQLLexer0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("1:1: Tokens : ( T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | T__101 | T__102 | T__103 | T__104 | T__105 | T__106 | T__107 | T__108 | T__109 | T__110 | T__111 | T__112 | T__113 | T__114 | T__115 | T__116 | T__117 | T__118 | T__119 | T__120 | T__121 | T__122 | T__123 | T__124 | T__125 | T__126 | T__127 | T__128 | T__129 | T__130 | T__131 | T__132 | T__133 | T__134 | T__135 | T__136 | T__137 | OR | AND | XOR | EQ | BANGEQ | LTGT | GT | GE | LT | LE | IS | NOT | NULL | IN | BETWEEN | PLUS | SUB | STAR | SLASH | PERCENT | BARBAR | ROWID | NUMBER | VARCHAR2 | NVARCHAR2 | BYTE | CHAR | DATE | TIMESTAMP | BEFORE | PRIMARY | DEFAULT | IDENTIFIER | INT | COMMENT | WS | STRING | QUOTED_NAME );", sQLLexer_DFA9_0.getDescription());
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(43, SQLLexer.IN);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(60, SQLLexer.WS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertFalse(DFA.debug);
      assertNotNull(sQLLexer_DFA9_0);
      
      IntStream intStream0 = mock(IntStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(intStream0).LA(anyInt());
      doReturn(0).when(intStream0).index();
      doReturn(0).when(intStream0).mark();
      try { 
        sQLLexer_DFA9_0.predict(intStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.DFA", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__79();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(39, SQLLexer.LT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mBETWEEN();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-40)).when(charStream0).getCharPositionInLine();
      doReturn((-40)).when(charStream0).getLine();
      doReturn((-40), 2015).when(charStream0).LA(anyInt());
      doReturn(65535).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals((-40), sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-40), sQLLexer0.getLine());
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(39, SQLLexer.LT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(41, SQLLexer.IS);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(37, SQLLexer.GT);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__96();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(39, SQLLexer.LT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__71();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(43, SQLLexer.IN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(4, SQLLexer.INT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mCOMMENT_TABLE();
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(43, SQLLexer.IN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(4, SQLLexer.INT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(7, SQLLexer.STRING);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1579)).when(charStream0).getCharPositionInLine();
      doReturn(83).when(charStream0).getLine();
      doReturn((-1579), (-1579)).when(charStream0).LA(anyInt());
      doReturn((-1579)).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(83, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals((-1579), sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(39, SQLLexer.LT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(41, SQLLexer.IS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(38, SQLLexer.GE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(4, SQLLexer.INT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__113();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(32, SQLLexer.AND);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(37, SQLLexer.GT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__65();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mDATE();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(37, SQLLexer.GT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mCOMMENT_COLUMN();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(37, SQLLexer.GT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(10).when(charStream0).getCharPositionInLine();
      doReturn(10).when(charStream0).getLine();
      doReturn(10, 10).when(charStream0).LA(anyInt());
      doReturn(10).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(10, sQLLexer0.getLine());
      assertEquals(10, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(72, SQLLexer.T__72);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__68();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(60, SQLLexer.WS);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__82();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(94, SQLLexer.T__94);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(4, SQLLexer.INT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(42, SQLLexer.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__133();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(41, SQLLexer.IS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__102();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(4, SQLLexer.INT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(32, SQLLexer.AND);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__76();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null, recognizerSharedState0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(37, SQLLexer.GT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(38, SQLLexer.GE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(43, SQLLexer.IN);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__127();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(37, SQLLexer.GT);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(38, SQLLexer.GE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(31, SQLLexer.OR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(41, SQLLexer.IS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__99();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(362).when(charStream0).getCharPositionInLine();
      doReturn(362).when(charStream0).getLine();
      doReturn(362, 362).when(charStream0).LA(anyInt());
      doReturn(4330).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertFalse(sQLLexer0.failed());
      assertEquals(362, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(362, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(4, SQLLexer.INT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__62();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mXOR();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(60, SQLLexer.WS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(37, SQLLexer.GT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__91();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(39, SQLLexer.LT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__118();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(31, SQLLexer.OR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(39, SQLLexer.LT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mALTER_TABLE();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(31, SQLLexer.OR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(39, SQLLexer.LT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(37, SQLLexer.GT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(41, SQLLexer.IS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(39, SQLLexer.LT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(43, SQLLexer.IN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(60, SQLLexer.WS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(4, SQLLexer.INT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__85();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(40, SQLLexer.LE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(38, SQLLexer.GE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(60, SQLLexer.WS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mINVOCATION();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(40, SQLLexer.LE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(38, SQLLexer.GE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(60, SQLLexer.WS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(38, SQLLexer.GE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(31, SQLLexer.OR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(41, SQLLexer.IS);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mLE();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(39, SQLLexer.LT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(32, SQLLexer.AND);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__130();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-2385)).when(charStream0).getCharPositionInLine();
      doReturn((-473)).when(charStream0).getLine();
      doReturn((-473), (-473)).when(charStream0).LA(anyInt());
      doReturn((-1)).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals((-2385), sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-473), sQLLexer0.getLine());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(31, SQLLexer.OR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__105();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__94();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__111();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(37, SQLLexer.GT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mBEFORE();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(4, SQLLexer.INT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mSIZE();
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(4, SQLLexer.INT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(2625).when(charStream0).getCharPositionInLine();
      doReturn(551).when(charStream0).getLine();
      doReturn(13, 551).when(charStream0).LA(anyInt());
      doReturn(1464).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(2625, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(551, sQLLexer0.getLine());
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(60, SQLLexer.WS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__63();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(74, SQLLexer.T__74);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(37, SQLLexer.GT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(60, SQLLexer.WS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mTABLE_NAME();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(74, SQLLexer.T__74);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(37, SQLLexer.GT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(60, SQLLexer.WS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(97, SQLLexer.T__97);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(60, SQLLexer.WS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__119();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(43, SQLLexer.IN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__88();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(37, SQLLexer.GT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mCHAR();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(38, SQLLexer.GE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(40, SQLLexer.LE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(41, SQLLexer.IS);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(43, SQLLexer.IN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mCREATE_INDEX();
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(38, SQLLexer.GE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(40, SQLLexer.LE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(41, SQLLexer.IS);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(43, SQLLexer.IN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(64, SQLLexer.T__64);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(32, SQLLexer.AND);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(38, SQLLexer.GE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(37, SQLLexer.GT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mVARCHAR2();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(76, SQLLexer.T__76);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(43, SQLLexer.IN);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(37, SQLLexer.GT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__104();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(43, SQLLexer.IN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(32, SQLLexer.AND);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mTIMESTAMP();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(charStream0).getCharPositionInLine();
      doReturn((-1)).when(charStream0).getLine();
      doReturn((-1), (-1)).when(charStream0).LA(anyInt());
      doReturn((-581)).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1), sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals((-1), sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(4, SQLLexer.INT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(39, SQLLexer.LT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__131();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(65535).when(charStream0).getCharPositionInLine();
      doReturn(65535).when(charStream0).getLine();
      doReturn(4331, 0).when(charStream0).LA(anyInt());
      doReturn(123).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(65535, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(65535, sQLLexer0.getCharPositionInLine());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(37, SQLLexer.GT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__110();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(31, SQLLexer.OR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(100, SQLLexer.T__100);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__125();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(4, SQLLexer.INT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(60, SQLLexer.WS);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__80();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(32, SQLLexer.AND);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mVALUE_LIST();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(32, SQLLexer.AND);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(41, SQLLexer.IS);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(40, SQLLexer.LE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__74();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(32, SQLLexer.AND);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(60, SQLLexer.WS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(39, SQLLexer.LT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(31, SQLLexer.OR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(4, SQLLexer.INT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(17, SQLLexer.SIZE);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mNVARCHAR2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(39, SQLLexer.LT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(31, SQLLexer.OR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(38, SQLLexer.GE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mCOLUMN_NAME();
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(39, SQLLexer.LT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(31, SQLLexer.OR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(38, SQLLexer.GE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(62, SQLLexer.T__62);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(60, SQLLexer.WS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mNOT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(40, SQLLexer.LE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(43, SQLLexer.IN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(38, SQLLexer.GE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mROWID();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(40, SQLLexer.LE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(32, SQLLexer.AND);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(43, SQLLexer.IN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(41, SQLLexer.IS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(114, SQLLexer.T__114);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__122();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(39, SQLLexer.LT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mCOLUMN_SPEC();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(39, SQLLexer.LT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__116();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertNotNull(sQLLexer0);
      
      String string0 = sQLLexer0.getGrammarFileName();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", string0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(43, SQLLexer.IN);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__136();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(1892).when(charStream0).getCharPositionInLine();
      doReturn(80).when(charStream0).getLine();
      doReturn(80, 44).when(charStream0).LA(anyInt());
      doReturn(1892).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(80, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(1892, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(38, SQLLexer.GE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(39, SQLLexer.LT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__83();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(40, SQLLexer.LE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(37, SQLLexer.GT);
      assertEquals(89, SQLLexer.T__89);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(39, SQLLexer.LT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(95, SQLLexer.T__95);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mGE();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(1353).when(charStream0).getCharPositionInLine();
      doReturn((-904)).when(charStream0).getLine();
      doReturn(413, 3700).when(charStream0).LA(anyInt());
      doReturn(413).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-904), sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(1353, sQLLexer0.getCharPositionInLine());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(38, SQLLexer.GE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__107();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(32, SQLLexer.AND);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(40, SQLLexer.LE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(4, SQLLexer.INT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mDROP_SEQUENCE();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(32, SQLLexer.AND);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(40, SQLLexer.LE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(4, SQLLexer.INT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(37, SQLLexer.GT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__77();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(32, SQLLexer.AND);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(39, SQLLexer.LT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mIS();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(43, SQLLexer.IN);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(60, SQLLexer.WS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(4, SQLLexer.INT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mPRIMARY();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(40, SQLLexer.LE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(37, SQLLexer.GT);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(43, SQLLexer.IN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(39, SQLLexer.LT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mOR();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(57).when(charStream0).getCharPositionInLine();
      doReturn((-59)).when(charStream0).getLine();
      doReturn(57, 1556).when(charStream0).LA(anyInt());
      doReturn(95).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals((-59), sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(57, sQLLexer0.getCharPositionInLine());
      assertEquals(84, SQLLexer.T__84);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(40, SQLLexer.LE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(37, SQLLexer.GT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(38, SQLLexer.GE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__123();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mTABLE_DETAILS();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(96, SQLLexer.T__96);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__61();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(60, SQLLexer.WS);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(43, SQLLexer.IN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__92();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer((CharStream) null, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(37, SQLLexer.GT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(4, SQLLexer.INT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mLT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(40, SQLLexer.LE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mEQ();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(32, SQLLexer.AND);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(38, SQLLexer.GE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(63, SQLLexer.T__63);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mINDEX_NAME();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(32, SQLLexer.AND);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(38, SQLLexer.GE);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(63, SQLLexer.T__63);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(38, SQLLexer.GE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__117();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(4, SQLLexer.INT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__86();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(7, SQLLexer.STRING);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(43, SQLLexer.IN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mAND();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(60, SQLLexer.WS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__137();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(37, SQLLexer.GT);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mBANGEQ();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(39, SQLLexer.LT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(60, SQLLexer.WS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__106();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(37, SQLLexer.GT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(4, SQLLexer.INT);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(7, SQLLexer.STRING);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mCREATE_TABLE();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(37, SQLLexer.GT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(4, SQLLexer.INT);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(7, SQLLexer.STRING);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(878).when(charStream0).getCharPositionInLine();
      doReturn((-1)).when(charStream0).getLine();
      doReturn((-1), (-1)).when(charStream0).LA(anyInt());
      doReturn((-1)).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals((-1), sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(878, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__109();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(32, SQLLexer.AND);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(41, SQLLexer.IS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(37, SQLLexer.GT);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(38, SQLLexer.GE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__95();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(292).when(charStream0).getCharPositionInLine();
      doReturn((-2600)).when(charStream0).getLine();
      doReturn(292, (-2600)).when(charStream0).LA(anyInt());
      doReturn(1675).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals((-2600), sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(292, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(37, SQLLexer.GT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(39, SQLLexer.LT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__72();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(57).when(charStream0).getCharPositionInLine();
      doReturn(57).when(charStream0).getLine();
      doReturn(57, 57).when(charStream0).LA(anyInt());
      doReturn(90).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(57, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(57, sQLLexer0.getCharPositionInLine());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(32, SQLLexer.AND);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(38, SQLLexer.GE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mNUMBER();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-642)).when(charStream0).getCharPositionInLine();
      doReturn((-642)).when(charStream0).getLine();
      doReturn((-642), (-642)).when(charStream0).LA(anyInt());
      doReturn((-642)).when(charStream0).index();
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals((-642), sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals((-642), sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(38, SQLLexer.GE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(31, SQLLexer.OR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__120();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__114();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(41, SQLLexer.IS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(31, SQLLexer.OR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(32, SQLLexer.AND);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(37, SQLLexer.GT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__66();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(60, SQLLexer.WS);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mCREATE_SEQUENCE();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(40, SQLLexer.LE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(60, SQLLexer.WS);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(39, SQLLexer.LT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(36, SQLLexer.LTGT);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__89();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(43, SQLLexer.IN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__134();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__69();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(1238).when(charStream0).getCharPositionInLine();
      doReturn(1238).when(charStream0).getLine();
      doReturn(1238, 1238).when(charStream0).LA(anyInt());
      doReturn(1238).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(1238, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(1238, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(37, SQLLexer.GT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(4, SQLLexer.INT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(40, SQLLexer.LE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(39, SQLLexer.LT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(41, SQLLexer.IS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__101();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(32, SQLLexer.AND);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(43, SQLLexer.IN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(41, SQLLexer.IS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(40, SQLLexer.LE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(34, SQLLexer.EQ);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__81();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(32, SQLLexer.AND);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(39, SQLLexer.LT);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__128();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(40, SQLLexer.LE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(42, SQLLexer.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(4, SQLLexer.INT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__75();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(40, SQLLexer.LE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mIN();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(38, SQLLexer.GE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mNAME_LIST();
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(31, SQLLexer.OR);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(38, SQLLexer.GE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(11, SQLLexer.COMMENT);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(37, SQLLexer.GT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(38, SQLLexer.GE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(31, SQLLexer.OR);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(60, SQLLexer.WS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(92, SQLLexer.T__92);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mDROP_TABLE();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(37, SQLLexer.GT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(38, SQLLexer.GE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(31, SQLLexer.OR);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(41, SQLLexer.IS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(60, SQLLexer.WS);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(92, SQLLexer.T__92);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(32, SQLLexer.AND);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__98();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(38, SQLLexer.GE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(39, SQLLexer.LT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(32, SQLLexer.AND);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(60, SQLLexer.WS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__73();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(92, SQLLexer.T__92);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mLTGT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__121();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(2581).when(charStream0).getCharPositionInLine();
      doReturn(2581).when(charStream0).getLine();
      doReturn(2581, (-306)).when(charStream0).LA(anyInt());
      doReturn((-194)).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(2581, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(2581, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(39, SQLLexer.LT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(37, SQLLexer.GT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(38, SQLLexer.GE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__115();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mORA_CONFIGS();
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(37, SQLLexer.GT);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(116, SQLLexer.T__116);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__67();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(38, SQLLexer.GE);
      assertEquals(101, SQLLexer.T__101);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(37, SQLLexer.GT);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(39, SQLLexer.LT);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(43, SQLLexer.IN);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(60, SQLLexer.WS);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mSLASH();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(68, SQLLexer.T__68);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(37, SQLLexer.GT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(41, SQLLexer.IS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(39, SQLLexer.LT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mGT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(38, SQLLexer.GE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(37, SQLLexer.GT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(40, SQLLexer.LE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(43, SQLLexer.IN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(5, SQLLexer.NOT);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__90();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(4, SQLLexer.INT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(40, SQLLexer.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(32, SQLLexer.AND);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(60, SQLLexer.WS);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(39, SQLLexer.LT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mSTAR();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      SQLLexer sQLLexer0 = new SQLLexer(charStream0, recognizerSharedState0);
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(4, SQLLexer.INT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(32, SQLLexer.AND);
      assertNotNull(sQLLexer0);
      
      sQLLexer0.mARGUMENTS();
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(4, SQLLexer.INT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(32, SQLLexer.AND);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(7, SQLLexer.STRING);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(60, SQLLexer.WS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__84();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(0).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getCharPositionInLine());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(60, SQLLexer.WS);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(39, SQLLexer.LT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(41, SQLLexer.IS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(33, SQLLexer.XOR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(38, SQLLexer.GE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__100();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(39, SQLLexer.LT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(109, SQLLexer.T__109);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(4, SQLLexer.INT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__135();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(4, SQLLexer.INT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(31, SQLLexer.OR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(43, SQLLexer.IN);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(39, SQLLexer.LT);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__108();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(32, SQLLexer.AND);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(39, SQLLexer.LT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(37, SQLLexer.GT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__78();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(94, SQLLexer.T__94);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(41, SQLLexer.IS);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(38, SQLLexer.GE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(60, SQLLexer.WS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(129, SQLLexer.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(4, SQLLexer.INT);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(137, SQLLexer.T__137);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__129();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(60, SQLLexer.WS);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(4, SQLLexer.INT);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLLexer.AND);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(41, SQLLexer.IS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(31, SQLLexer.OR);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(39, SQLLexer.LT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__93();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(37, SQLLexer.GT);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(60, SQLLexer.WS);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(39, SQLLexer.LT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mBARBAR();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertFalse(sQLLexer0.failed());
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(40, SQLLexer.LE);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(43, SQLLexer.IN);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mSUB();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(60, SQLLexer.WS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(37, SQLLexer.GT);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(39, SQLLexer.LT);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__112();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(32, SQLLexer.AND);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(43, SQLLexer.IN);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(85, SQLLexer.T__85);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(38, SQLLexer.GE);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(37, SQLLexer.GT);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(60, SQLLexer.WS);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(40, SQLLexer.LE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__70();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(41, SQLLexer.IS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(40, SQLLexer.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(37, SQLLexer.GT);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(32, SQLLexer.AND);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(43, SQLLexer.IN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(87, SQLLexer.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mPLUS();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(121, SQLLexer.T__121);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(39, SQLLexer.LT);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(43, SQLLexer.IN);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(60, SQLLexer.WS);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(4, SQLLexer.INT);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(38, SQLLexer.GE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mNULL();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertFalse(sQLLexer0.failed());
      assertEquals(61, SQLLexer.T__61);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(31, SQLLexer.OR);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(39, SQLLexer.LT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(43, SQLLexer.IN);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(32, SQLLexer.AND);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(4, SQLLexer.INT);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(40, SQLLexer.LE);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(38, SQLLexer.GE);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mDEFAULT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(37, SQLLexer.GT);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(4, SQLLexer.INT);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(40, SQLLexer.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(39, SQLLexer.LT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(32, SQLLexer.AND);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__64();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn((-2972)).when(charStream0).getCharPositionInLine();
      doReturn((-2972)).when(charStream0).getLine();
      doReturn(1740, (-2972)).when(charStream0).LA(anyInt());
      doReturn((-2972)).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertEquals((-2972), sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals((-2972), sQLLexer0.getLine());
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(117, SQLLexer.T__117);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(32, SQLLexer.AND);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(43, SQLLexer.IN);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(38, SQLLexer.GE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(93, SQLLexer.T__93);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(37, SQLLexer.GT);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(39, SQLLexer.LT);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(31, SQLLexer.OR);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__87();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertFalse(sQLLexer0.failed());
      assertEquals(131, SQLLexer.T__131);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(38, SQLLexer.GE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(37, SQLLexer.GT);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(41, SQLLexer.IS);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(40, SQLLexer.LE);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(32, SQLLexer.AND);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(60, SQLLexer.WS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(39, SQLLexer.LT);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(31, SQLLexer.OR);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(115, SQLLexer.T__115);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mPERCENT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertFalse(sQLLexer0.failed());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(93, SQLLexer.T__93);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(43, SQLLexer.IN);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(32, SQLLexer.AND);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(60, SQLLexer.WS);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(4, SQLLexer.INT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(40, SQLLexer.LE);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(37, SQLLexer.GT);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(38, SQLLexer.GE);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(47, SQLLexer.STAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(31, SQLLexer.OR);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(39, SQLLexer.LT);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__103();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      CharStream charStream0 = mock(CharStream.class, new ViolatedAssumptionAnswer());
      doReturn(57).when(charStream0).getCharPositionInLine();
      doReturn(0).when(charStream0).getLine();
      doReturn(0, 0).when(charStream0).LA(anyInt());
      doReturn(10).when(charStream0).index();
      SQLLexer sQLLexer0 = new SQLLexer(charStream0);
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getLine());
      assertEquals(57, sQLLexer0.getCharPositionInLine());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(31, SQLLexer.OR);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(41, SQLLexer.IS);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(107, SQLLexer.T__107);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals(72, SQLLexer.T__72);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(68, SQLLexer.T__68);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(122, SQLLexer.T__122);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(39, SQLLexer.LT);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(49, SQLLexer.PERCENT);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(43, SQLLexer.IN);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(60, SQLLexer.WS);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(37, SQLLexer.GT);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(38, SQLLexer.GE);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(4, SQLLexer.INT);
      assertEquals(40, SQLLexer.LE);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(130, SQLLexer.T__130);
      assertNotNull(sQLLexer0);
      
      try { 
        sQLLexer0.mT__132();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      SQLLexer sQLLexer0 = new SQLLexer();
      assertFalse(sQLLexer0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLLexer0.getGrammarFileName());
      assertEquals(0, sQLLexer0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLLexer0.getBacktrackingLevel());
      assertEquals(0, sQLLexer0.getRuleMemoizationCacheSize());
      assertEquals(11, SQLLexer.COMMENT);
      assertEquals(94, SQLLexer.T__94);
      assertEquals(127, SQLLexer.T__127);
      assertEquals(64, SQLLexer.T__64);
      assertEquals(123, SQLLexer.T__123);
      assertEquals(52, SQLLexer.NUMBER);
      assertEquals(58, SQLLexer.TIMESTAMP);
      assertEquals(108, SQLLexer.T__108);
      assertEquals(36, SQLLexer.LTGT);
      assertEquals(75, SQLLexer.T__75);
      assertEquals(43, SQLLexer.IN);
      assertEquals(21, SQLLexer.CREATE_INDEX);
      assertEquals(134, SQLLexer.T__134);
      assertEquals(9, SQLLexer.PRIMARY);
      assertEquals(115, SQLLexer.T__115);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLLexer.NOT);
      assertEquals(28, SQLLexer.INVOCATION);
      assertEquals(83, SQLLexer.T__83);
      assertEquals(39, SQLLexer.LT);
      assertEquals(126, SQLLexer.T__126);
      assertEquals(65, SQLLexer.T__65);
      assertEquals(122, SQLLexer.T__122);
      assertEquals((-1), SQLLexer.EOF);
      assertEquals(56, SQLLexer.CHAR);
      assertEquals(95, SQLLexer.T__95);
      assertEquals(133, SQLLexer.T__133);
      assertEquals(33, SQLLexer.XOR);
      assertEquals(76, SQLLexer.T__76);
      assertEquals(10, SQLLexer.DEFAULT);
      assertEquals(107, SQLLexer.T__107);
      assertEquals(57, SQLLexer.DATE);
      assertEquals(114, SQLLexer.T__114);
      assertEquals(84, SQLLexer.T__84);
      assertEquals(48, SQLLexer.SLASH);
      assertEquals(59, SQLLexer.BEFORE);
      assertEquals(31, SQLLexer.OR);
      assertEquals(92, SQLLexer.T__92);
      assertEquals(41, SQLLexer.IS);
      assertEquals(125, SQLLexer.T__125);
      assertEquals(62, SQLLexer.T__62);
      assertEquals(121, SQLLexer.T__121);
      assertEquals(106, SQLLexer.T__106);
      assertEquals(102, SQLLexer.T__102);
      assertEquals(73, SQLLexer.T__73);
      assertEquals(45, SQLLexer.PLUS);
      assertEquals(22, SQLLexer.INDEX_NAME);
      assertEquals(132, SQLLexer.T__132);
      assertEquals(17, SQLLexer.SIZE);
      assertEquals(55, SQLLexer.BYTE);
      assertEquals(113, SQLLexer.T__113);
      assertEquals(81, SQLLexer.T__81);
      assertEquals(89, SQLLexer.T__89);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(26, SQLLexer.COMMENT_TABLE);
      assertEquals(8, SQLLexer.QUOTED_NAME);
      assertEquals(63, SQLLexer.T__63);
      assertEquals(120, SQLLexer.T__120);
      assertEquals(93, SQLLexer.T__93);
      assertEquals(131, SQLLexer.T__131);
      assertEquals(38, SQLLexer.GE);
      assertEquals(74, SQLLexer.T__74);
      assertEquals(35, SQLLexer.BANGEQ);
      assertEquals(105, SQLLexer.T__105);
      assertEquals(101, SQLLexer.T__101);
      assertEquals(25, SQLLexer.ORA_CONFIGS);
      assertEquals(112, SQLLexer.T__112);
      assertEquals(82, SQLLexer.T__82);
      assertEquals(23, SQLLexer.TABLE_DETAILS);
      assertEquals(13, SQLLexer.DROP_TABLE);
      assertEquals(20, SQLLexer.NAME_LIST);
      assertEquals(37, SQLLexer.GT);
      assertEquals(90, SQLLexer.T__90);
      assertEquals(98, SQLLexer.T__98);
      assertEquals(68, SQLLexer.T__68);
      assertEquals(104, SQLLexer.T__104);
      assertEquals(100, SQLLexer.T__100);
      assertEquals(71, SQLLexer.T__71);
      assertEquals(79, SQLLexer.T__79);
      assertEquals(27, SQLLexer.COMMENT_COLUMN);
      assertEquals(19, SQLLexer.DROP_SEQUENCE);
      assertEquals(130, SQLLexer.T__130);
      assertEquals(50, SQLLexer.BARBAR);
      assertEquals(111, SQLLexer.T__111);
      assertEquals(119, SQLLexer.T__119);
      assertEquals(40, SQLLexer.LE);
      assertEquals(54, SQLLexer.NVARCHAR2);
      assertEquals(29, SQLLexer.ARGUMENTS);
      assertEquals(34, SQLLexer.EQ);
      assertEquals(4, SQLLexer.INT);
      assertEquals(87, SQLLexer.T__87);
      assertEquals(18, SQLLexer.CREATE_SEQUENCE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(7, SQLLexer.STRING);
      assertEquals(61, SQLLexer.T__61);
      assertEquals(69, SQLLexer.T__69);
      assertEquals(91, SQLLexer.T__91);
      assertEquals(99, SQLLexer.T__99);
      assertEquals(137, SQLLexer.T__137);
      assertEquals(72, SQLLexer.T__72);
      assertEquals(53, SQLLexer.VARCHAR2);
      assertEquals(103, SQLLexer.T__103);
      assertEquals(16, SQLLexer.COLUMN_NAME);
      assertEquals(46, SQLLexer.SUB);
      assertEquals(110, SQLLexer.T__110);
      assertEquals(118, SQLLexer.T__118);
      assertEquals(80, SQLLexer.T__80);
      assertEquals(88, SQLLexer.T__88);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(30, SQLLexer.VALUE_LIST);
      assertEquals(96, SQLLexer.T__96);
      assertEquals(60, SQLLexer.WS);
      assertEquals(129, SQLLexer.T__129);
      assertEquals(66, SQLLexer.T__66);
      assertEquals(44, SQLLexer.BETWEEN);
      assertEquals(77, SQLLexer.T__77);
      assertEquals(12, SQLLexer.CREATE_TABLE);
      assertEquals(6, SQLLexer.IDENTIFIER);
      assertEquals(136, SQLLexer.T__136);
      assertEquals(32, SQLLexer.AND);
      assertEquals(117, SQLLexer.T__117);
      assertEquals(42, SQLLexer.NULL);
      assertEquals(15, SQLLexer.TABLE_NAME);
      assertEquals(24, SQLLexer.COLUMN_SPEC);
      assertEquals(85, SQLLexer.T__85);
      assertEquals(67, SQLLexer.T__67);
      assertEquals(128, SQLLexer.T__128);
      assertEquals(124, SQLLexer.T__124);
      assertEquals(97, SQLLexer.T__97);
      assertEquals(135, SQLLexer.T__135);
      assertEquals(70, SQLLexer.T__70);
      assertEquals(78, SQLLexer.T__78);
      assertEquals(14, SQLLexer.ALTER_TABLE);
      assertEquals(109, SQLLexer.T__109);
      assertEquals(116, SQLLexer.T__116);
      assertEquals(86, SQLLexer.T__86);
      assertEquals(47, SQLLexer.STAR);
      assertEquals(51, SQLLexer.ROWID);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLLexer.PERCENT);
      assertNotNull(sQLLexer0);
      
      // Undeclared exception!
      try { 
        sQLLexer0.mT__126();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Lexer", e);
      }
  }
}

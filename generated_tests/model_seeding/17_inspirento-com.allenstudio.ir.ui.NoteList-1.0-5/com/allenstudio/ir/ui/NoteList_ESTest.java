/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 13:10:46 GMT 2019
 */

package com.allenstudio.ir.ui;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.allenstudio.ir.core.plugins.CommonNote;
import com.allenstudio.ir.event.NoteListEventListener;
import com.allenstudio.ir.ui.NoteList;
import com.allenstudio.ir.ui.NoteListCell;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NoteList_ESTest extends NoteList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      noteList0.select(3, false);
      assertEquals(3, noteList0.getSelectedIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      // Undeclared exception!
      try { 
        noteList0.select((-147), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // No such child: -147
         //
         verifyException("java.awt.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      assertEquals(0, noteList0.getSelectedIndex());
      
      noteList0.select(1, false);
      int int0 = noteList0.getSelectedIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      Rectangle rectangle0 = noteList0.getVisibleRect();
      rectangle0.setFrameFromDiagonal((-684.8748), 0.0, 0.0, (-684.8748));
      int int0 = noteList0.getScrollableBlockIncrement(rectangle0, 0, 0);
      assertEquals(685, int0);
      assertEquals(5, noteList0.getCellCount());
      assertEquals(0, noteList0.getSelectedIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      Rectangle rectangle0 = new Rectangle(Integer.MAX_VALUE, (-3342));
      int int0 = noteList0.getScrollableBlockIncrement(rectangle0, 6, Integer.MAX_VALUE);
      assertEquals((-3342), int0);
      assertEquals(5, noteList0.getCellCount());
      assertEquals(0, noteList0.getSelectedIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      noteList0.removeAll();
      noteList0.getPreferredScrollableViewportSize();
      assertEquals(5, noteList0.getCellCount());
      assertEquals(0, noteList0.getSelectedIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      // Undeclared exception!
      try { 
        noteList0.getScrollableBlockIncrement((Rectangle) null, 1728, (-1446));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.NoteList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      CommonNote commonNote0 = new CommonNote();
      NoteListCell noteListCell0 = new NoteListCell(commonNote0);
      BasicScrollBarUI basicScrollBarUI0 = new BasicScrollBarUI();
      noteListCell0.setLayout(basicScrollBarUI0);
      noteList0.addCell(noteListCell0);
      // Undeclared exception!
      try { 
        noteList0.getPreferredScrollableViewportSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.plaf.basic.BasicScrollBarUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      // Undeclared exception!
      try { 
        noteList0.addCell((NoteListCell) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      CommonNote commonNote0 = new CommonNote();
      NoteListCell noteListCell0 = new NoteListCell(commonNote0);
      noteListCell0.add((Component) noteList0);
      // Undeclared exception!
      try { 
        noteList0.addCell(noteListCell0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // adding container's parent to itself
         //
         verifyException("java.awt.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      int int0 = noteList0.getCellCount();
      assertEquals(5, int0);
      assertEquals(0, noteList0.getSelectedIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      noteList0.fireCursorExit((Object) null, (Point) null);
      assertEquals(0, noteList0.getSelectedIndex());
      assertEquals(5, noteList0.getCellCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      noteList0.fireCursorEnter((Object) null, (Point) null);
      assertEquals(0, noteList0.getSelectedIndex());
      assertEquals(5, noteList0.getCellCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      noteList0.fireDoubleClick((Object) null, (Point) null);
      assertEquals(0, noteList0.getSelectedIndex());
      assertEquals(5, noteList0.getCellCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      noteList0.fireRightClick((Object) null, (Point) null);
      assertEquals(0, noteList0.getSelectedIndex());
      assertEquals(5, noteList0.getCellCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      noteList0.fireLeftClick(noteList0, (Point) null);
      assertEquals(0, noteList0.getSelectedIndex());
      assertEquals(5, noteList0.getCellCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      noteList0.select(0, true);
      assertEquals(0, noteList0.getSelectedIndex());
      assertEquals(5, noteList0.getCellCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      noteList0.addNoteListEventListener((NoteListEventListener) null);
      assertEquals(5, noteList0.getCellCount());
      assertEquals(0, noteList0.getSelectedIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      noteList0.removeAll();
      boolean boolean0 = noteList0.getScrollableTracksViewportHeight();
      assertTrue(boolean0);
      assertEquals(5, noteList0.getCellCount());
      assertEquals(0, noteList0.getSelectedIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      boolean boolean0 = noteList0.getScrollableTracksViewportHeight();
      assertEquals(5, noteList0.getCellCount());
      assertEquals(0, noteList0.getSelectedIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      Rectangle rectangle0 = noteList0.getVisibleRect();
      int int0 = noteList0.getScrollableBlockIncrement(rectangle0, 0, 0);
      assertEquals(0, noteList0.getSelectedIndex());
      assertEquals(5, noteList0.getCellCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      int int0 = noteList0.getScrollableBlockIncrement(rectangle0, (-1), 0);
      assertEquals(0, noteList0.getSelectedIndex());
      assertEquals(5, noteList0.getCellCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      noteList0.getScrollableUnitIncrement(rectangle0, 0, 1405);
      assertEquals(5, noteList0.getCellCount());
      assertEquals(0, noteList0.getSelectedIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      noteList0.removeAll();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      int int0 = noteList0.getScrollableUnitIncrement(defaultCaret0, 0, 0);
      assertEquals(0, int0);
      assertEquals(0, noteList0.getSelectedIndex());
      assertEquals(5, noteList0.getCellCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      int int0 = noteList0.getSelectedIndex();
      assertEquals(5, noteList0.getCellCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      boolean boolean0 = noteList0.getScrollableTracksViewportWidth();
      assertEquals(0, noteList0.getSelectedIndex());
      assertEquals(5, noteList0.getCellCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        NoteList.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      noteList0.removeListEventListener();
      assertEquals(0, noteList0.getSelectedIndex());
      assertEquals(5, noteList0.getCellCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      Dimension dimension0 = noteList0.getPreferredScrollableViewportSize();
      assertEquals(5, noteList0.getCellCount());
      assertEquals(0, noteList0.getSelectedIndex());
      assertEquals(387, dimension0.width);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 21:59:23 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Wall_ESTest extends Wall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 1467.98F, 1467.98F);
      wall0.containsWallStartAt(0.01F, (-2297.5166F), 1467.98F);
      Float float0 = new Float(2375.0F);
      float0.floatValue();
      wall0.intersectsRectangle((-2297.5166F), 2375.0F, (-1993.0092F), 0.01F);
      Wall wall1 = wall0.clone();
      wall1.setXStart(0.1F);
      wall1.getPoints();
      wall1.containsWallStartAt(2375.0F, 2375.0F, 2375.0F);
      wall0.setWallAtStart(wall1);
      Float float1 = new Float(2375.0F);
      float1.floatValue();
      wall0.setHeightAtEnd((Float) 2375.0F);
      wall0.move(0.1F, 0.01F);
      wall0.getStartPointToEndPointDistance();
      wall0.getLevel();
      wall0.getRightSideShininess();
      Wall.Property.values();
      wall0.setYStart((-1993.0092F));
      wall1.getLeftSideColor();
      wall1.setHeight(float1);
      Float float2 = wall0.getHeightAtEnd();
      wall0.setHeightAtEnd(float2);
      Wall.Property.values();
      Integer.valueOf(112);
      try { 
        Integer.decode("Super class isn't cloneable");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Super class isn't cloneable\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Wall wall0 = new Wall((-619.237F), (-619.237F), (-619.237F), (-619.237F), (-619.237F));
      Level level0 = mock(Level.class, new ViolatedAssumptionAnswer());
      doReturn((-1826.36F)).when(level0).getElevation();
      wall0.setLevel(level0);
      wall0.getPoints();
      wall0.setXStart((-619.237F));
      Level level1 = new Level("com.eteks.sweethome3d.model.TexturesCategory", (-3041.0F), (-3041.0F), (-619.237F));
      wall0.isAtLevel(level1);
      wall0.getHeightAtEnd();
      wall0.getWallAtStart();
      Wall wall1 = wall0.clone();
      wall1.intersectsRectangle((-647.194F), (-619.237F), 3298.67F, (-413.6307F));
      wall0.getLeftSideShininess();
      wall0.setRightSideShininess((-3041.0F));
      Integer integer0 = new Integer(115);
      Integer integer1 = new Integer((-3525));
      Wall wall2 = new Wall((-3525), (-1.0F), (-1.0F), 0.01F, 0.0F, 1.0F);
      wall2.getWallAtStart();
      integer1.equals((Object) null);
      Integer.getInteger("com.eteks.sweethome3d.model.TexturesCategory", integer1);
      Integer integer2 = new Integer((-3525));
      wall2.setRightSideColor(integer2);
      wall2.setHeight((Float) null);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-39.814686F), (-2941.5867F));
      Wall wall1 = new Wall((-285.4303F), (-2941.5867F), 0.0F, (-285.4303F), (-2941.5867F), 0.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.setXStart(1.0F);
      wall0.isAtLevel((Level) null);
      wall0.getHeightAtEnd();
      Wall wall2 = wall0.getWallAtStart();
      wall1.setLeftSideShininess((-515.216F));
      wall2.setYEnd(0.0F);
      wall2.containsWallStartAt(2507.9F, (-39.814686F), 0.0F);
      wall1.getPoints();
      Wall wall3 = new Wall(0.0F, (-515.216F), 1.0F, (-252.2196F), (-2941.5867F));
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall1.setLeftSideShininess(0.0F);
      Integer integer0 = new Integer(0);
      wall0.getPoints();
      Wall wall2 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 0, 0.0F);
      wall0.getPattern();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Wall wall0 = new Wall(2.0F, 0.01F, 2.0F, 2.0F, (-18.653706F));
      wall0.getLeftSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Wall wall1 = wall0.clone();
      wall1.getLength();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      wall0.move(0.0F, 0.0F);
      wall0.setXEnd(474.0F);
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      wall0.containsWallStartAt(474.0F, 666.0F, (-1.08213043E9F));
      wall0.setWallAtStart(wall1);
      wall0.getLeftSideShininess();
      wall0.setXStart(2.0F);
      Float.floatToIntBits((-316.74667F));
      Wall wall2 = wall0.getWallAtEnd();
      wall2.getPattern();
      wall1.setPattern((TextureImage) null);
      Float.valueOf((-1069.3104F));
      Float float0 = new Float((double) 2.0F);
      wall0.setArcExtent(float0);
      wall0.getPoints();
      wall1.getWallAtStart();
      wall0.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Wall wall0 = new Wall(814.61F, 814.61F, 814.61F, 814.61F, (-219.5F), 814.61F);
      Wall wall1 = wall0.clone();
      wall0.setWallAtStart(wall1);
      Level level0 = new Level("grjCto*MkGt", 1115.983F, 0.1F, 0.0F);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("grjCto*MkGt", (PropertyChangeListener) null);
      Object object0 = new Object();
      Integer integer0 = new Integer((-1));
      Integer.toUnsignedLong(979);
      integer0.equals(wall0);
      Integer integer1 = new Integer((-1));
      wall1.setLeftSideColor(integer1);
      wall1.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      level0.setFloorThickness(814.61F);
      wall0.setLevel(level0);
      Integer integer2 = new Integer(6);
      wall1.setLeftSideColor(integer2);
      wall1.containsWallEndAt(1115.983F, (-1), 1115.983F);
      wall0.getArcExtent();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Wall wall0 = new Wall((-2416.81F), (-2416.81F), (-2416.81F), (-2416.81F), 3166.89F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2416.81F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3166.89F, wall0.getThickness(), 0.01F);
      assertEquals((-2416.81F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-2416.81F), wall0.getYEnd(), 0.01F);
      assertEquals((-2416.81F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2416.81F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2416.81F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      wall0.setRightSideColor((Integer) null);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2416.81F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3166.89F, wall0.getThickness(), 0.01F);
      assertEquals((-2416.81F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-2416.81F), wall0.getYEnd(), 0.01F);
      assertEquals((-2416.81F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2416.81F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2416.81F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Level level0 = wall0.getLevel();
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2416.81F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3166.89F, wall0.getThickness(), 0.01F);
      assertEquals((-2416.81F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-2416.81F), wall0.getYEnd(), 0.01F);
      assertEquals((-2416.81F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2416.81F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2416.81F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(level0);
      
      Float float0 = Float.valueOf((-2416.81F));
      wall0.setHeight(float0);
      wall0.setHeight(float0);
      wall0.getLeftSideTexture();
      wall0.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Wall wall0 = new Wall((-509.4F), (-1.0F), (-1.0F), 1.0F, 0.47055435F);
      wall0.setXEnd((-509.4F));
      wall0.getThickness();
      wall0.getYArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      float float0 = 814.61F;
      Wall wall0 = new Wall(814.61F, 814.61F, 814.61F, 814.61F, (-219.5F), 814.61F);
      Wall wall1 = wall0.clone();
      wall0.setWallAtStart(wall1);
      Level level0 = new Level("grjCto*MkGt", 1115.983F, 0.1F, 0.0F);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("grjCto*MkGt", (PropertyChangeListener) null);
      Object object0 = new Object();
      level0.setName("");
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("\"V`", propertyChangeListenerProxy0);
      level0.addPropertyChangeListener(propertyChangeListenerProxy1);
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(propertyChangeListenerProxy0, "grjCto*MkGt", wall0, object0);
      propertyChangeEvent0.toString();
      wall0.setLeftSideShininess(0.0F);
      // Undeclared exception!
      try { 
        propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.beans.PropertyChangeListenerProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), 1011.2F, (-1.0F));
      float float0 = (-1.0F);
      wall0.containsPoint((-1.0F), 2.0F, 375.5F);
      wall0.getLeftSideShininess();
      wall0.getThickness();
      wall0.setYEnd(1011.2F);
      String string0 = "!/";
      String string1 = " Cwurp^w";
      Class<Object> class0 = Object.class;
      String string2 = null;
      ResourceURLContent resourceURLContent0 = null;
      try {
        resourceURLContent0 = new ResourceURLContent(class0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Wall wall0 = new Wall(2784.007F, 0.01F, 0.0F, 0.01F, 2.0F);
      wall0.move(0.01F, 2.0F);
      wall0.setXEnd(3260.1F);
      Wall wall1 = new Wall((-1.0F), 3260.1F, 0.0F, 0.0F, 81.3693F, 3260.1F);
      wall0.setWallAtStart(wall1);
      wall1.setWallAtEnd(wall0);
      wall1.setWallAtStart(wall0);
      Wall wall2 = wall0.getWallAtStart();
      wall0.setYEnd(Float.NEGATIVE_INFINITY);
      wall0.getWallAtEnd();
      wall1.containsWallEndAt((-3768.966F), 0.01F, (-3768.966F));
      wall2.containsWallEndAt(2603.9966F, 0.01F, 2603.9966F);
      Float.compare(39.77711F, 0.5438103F);
      Float float0 = new Float(3842.136F);
      wall2.setHeightAtEnd(float0);
      wall2.clone();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, (-1564.5F), 0.01F);
      wall0.getStartPointToEndPointDistance();
      Integer integer0 = new Integer((-39));
      wall0.setRightSideColor(integer0);
      wall0.containsPoint(0.0F, (-1564.5F), (-1564.5F));
      Float float0 = new Float((double) (-1564.5F));
      wall0.setThickness(0.01F);
      Float float1 = new Float(0.01F);
      wall0.setXStart(1712.519F);
      Float.floatToIntBits((-587.513F));
      Float.compare(1236.43F, 1236.43F);
      Float.compare(1236.43F, 0.01F);
      Float.compare(0, 1);
      Float.compare(0, 42.65F);
      Float.compare(0.1F, (-380.85F));
      wall0.setArcExtent((Float) (-380.85F));
      wall0.containsPoint(1094.8785F, (-239.09F), 0);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.model.Wall$Property", (PropertyChangeListener) null);
      Wall wall1 = wall0.clone();
      wall1.removePropertyChangeListener((PropertyChangeListener) null);
      wall1.getPoints();
      wall1.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Wall wall0 = new Wall(3166.89F, (-2416.81F), (-2416.81F), (-2416.81F), (-2416.81F), 3166.89F);
      Float float0 = Float.valueOf((-2416.81F));
      wall0.setHeight(float0);
      wall0.setHeight(float0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Integer integer0 = new Integer((-1202));
      Integer.divideUnsigned(2, 2);
      wall0.setRightSideColor(integer0);
      wall0.setYEnd(1788.0886F);
      Integer.valueOf(251);
      Integer integer1 = Integer.valueOf(3322);
      wall0.setRightSideColor(integer1);
      wall0.setLeftSideShininess(251);
      TexturesCategory texturesCategory0 = new TexturesCategory((String) null);
      CatalogTexture catalogTexture0 = mock(CatalogTexture.class, new ViolatedAssumptionAnswer());
      texturesCategory0.add(catalogTexture0);
      CatalogTexture catalogTexture1 = mock(CatalogTexture.class, new ViolatedAssumptionAnswer());
      texturesCategory0.getIndexOfTexture(catalogTexture1);
      // Undeclared exception!
      try { 
        texturesCategory0.delete((CatalogTexture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.TexturesCategory", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Wall wall0 = new Wall((-416.9001F), (-416.9001F), (-416.9001F), (-416.9001F), (-416.9001F));
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("'", (PropertyChangeListener) null);
      wall0.intersectsRectangle((-416.9001F), (-416.9001F), (-647.1521F), (-416.9001F));
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.containsWallEndAt((-2954.381F), (-416.9001F), (-416.9001F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>(linkedList0);
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList1);
      linkedList0.addAll(0, (Collection<? extends Wall>) list0);
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
      wall0.containsWallStartAt(0.0F, 0.0F, (-416.9001F));
      wall0.getYArcCircleCenter();
      wall0.getArcExtent();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      wall0.move(0.0F, 0.0F);
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, 0.0F, (-2911.459F), 0.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.setLeftSideShininess((-515.216F));
      wall0.setYEnd((-515.216F));
      wall0.containsWallStartAt(0.1F, 0.1F, (-515.216F));
      wall0.getPoints();
      wall1.getPoints();
      wall0.isTrapezoidal();
      wall1.getLeftSideTexture();
      wall1.getWallAtStart();
      wall1.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      wall0.move(0.0F, 0.0F);
      wall0.setXEnd(474.0F);
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      wall0.containsWallStartAt(474.0F, 666.0F, (-1.08213043E9F));
      wall0.setWallAtStart(wall1);
      wall0.getLeftSideShininess();
      wall0.setXStart(2.0F);
      Float.floatToIntBits((-316.74667F));
      Float.valueOf((-1069.3104F));
      Float float0 = new Float((double) 2.0F);
      wall0.setArcExtent(float0);
      wall0.getPoints();
      wall1.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 2.0F, 0.01F, (-19.96617F), (-1.0F));
      wall0.getLeftSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Wall wall1 = wall0.clone();
      wall0.getXEnd();
      wall1.getPattern();
      wall0.getLevel();
      CatalogTexture catalogTexture0 = new CatalogTexture("", (Content) null, 2.0F, 167.2F, true);
      catalogTexture0.getName();
      wall0.setThickness(0.01F);
      Wall wall2 = new Wall(2.0F, (-1761.6279F), 167.2F, (-1.0F), (-1761.6279F), 2694.0F);
      wall2.setPattern((TextureImage) null);
      Level level0 = new Level("RIGHT_SIDE_TEXTURE", 969.0F, 0.0F, (-1106.2F));
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", (PropertyChangeListener) null);
      level0.addPropertyChangeListener((PropertyChangeListener) null);
      wall0.setLevel((Level) null);
      wall0.isTrapezoidal();
      Float.valueOf((-4367.7583F));
      Float float0 = Float.valueOf((-4367.7583F));
      wall0.setHeight(float0);
      wall0.getYArcCircleCenter();
      wall1.getHeight();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.setYEnd((-515.216F));
      wall0.containsWallStartAt(0.1F, 0.1F, (-515.216F));
      wall1.setYEnd((-515.216F));
      wall1.containsWallStartAt(0.1F, 0.0F, 2181.5945F);
      wall0.getPoints();
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Wall wall0 = new Wall(0.34798986F, (-1.0F), (-1.0F), 0.34798986F, 1.0F);
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      wall0.move(0.0F, 0.0F);
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, 0.0F, (-2911.459F), 0.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.getLeftSideShininess();
      wall0.setXStart(0.0F);
      wall1.containsPoint(0.0F, (-293.32F), (-236.7F));
      Integer integer0 = new Integer((-789));
      Object object0 = new Object();
      Integer.compare(935, 2047);
      integer0.equals(object0);
      wall1.setRightSideColor(integer0);
      Wall wall2 = new Wall(0.0F, 0.0F, (-2997.67F), 0.0F, 1655.941F);
      wall2.getLevel();
      Float float0 = new Float(1.0000457768910564E-4);
      Float.max((-789), (-293.32F));
      wall0.setHeight(float0);
      wall1.setHeight(float0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      wall0.move(0.0F, 0.0F);
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, 0.0F, (-2911.459F), 0.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.setLeftSideShininess(466.1187F);
      wall0.move(0.0F, (-5509.0F));
      wall0.getLeftSideShininess();
      wall0.setXStart(0.0F);
      wall0.isAtLevel((Level) null);
      wall0.getHeightAtEnd();
      Wall wall2 = wall0.getWallAtStart();
      wall2.clone();
      wall1.setXStart((-1755.08F));
      wall1.setWallAtEnd(wall2);
      wall1.setHeight((Float) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      wall0.move(0.0F, 0.0F);
      wall0.setXEnd((-705.96F));
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, 30.8F, (-2911.459F), 0.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.getLeftSideShininess();
      wall0.setXStart(1.0F);
      wall0.setWallAtEnd(wall1);
      wall0.containsPoint(0.0F, 30.8F, (-705.96F));
      wall0.getHeightAtEnd();
      Wall wall2 = wall0.getWallAtStart();
      wall2.setYEnd((-413.6307F));
      wall2.setRightSideShininess(2393.6F);
      wall2.setYEnd((-5509.0F));
      Float float0 = new Float(0.0F);
      wall2.getWallAtEnd();
      wall1.getHeight();
      wall2.setThickness(1407.9227F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Wall wall0 = new Wall((-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F));
      wall0.setRightSideShininess((-2083.6F));
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Wall wall0 = new Wall(543.0F, 543.0F, 543.0F, 0.0F, 543.0F);
      wall0.move((-5509.0F), 0.0F);
      wall0.setXEnd((-705.96F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtEnd(wall0);
      wall0.containsWallStartAt((-1.08213043E9F), 543.0F, (-5509.0F));
      wall0.setWallAtStart(wall1);
      Float.floatToIntBits(0.0F);
      Float float0 = new Float(543.0F);
      wall0.setArcExtent(float0);
      wall0.getPoints();
      wall1.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Wall wall0 = new Wall((-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F));
      wall0.getStartPointToEndPointDistance();
      Integer integer0 = new Integer(0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Wall wall0 = new Wall(57.551315F, 0.01F, 0.01F, (-1.0F), 0.01F);
      wall0.getRightSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Wall wall1 = wall0.clone();
      Wall wall2 = new Wall((-1.0F), 57.551315F, (-1.0F), (-1.0F), 0.0F, 57.551315F);
      wall0.setWallAtEnd(wall2);
      Wall wall3 = new Wall((-1.0F), 0.01F, 1184.554F, (-4413.0F), 498.4035F, (-1.0F));
      wall3.setWallAtStart(wall0);
      wall3.getLeftSideShininess();
      wall0.setXStart((-1.0F));
      wall1.setLeftSideShininess((-1726.9127F));
      wall3.setYEnd(8.138639F);
      wall0.containsWallStartAt(0.0F, (-1.0F), (-1.0F));
      wall3.containsWallEndAt(1.0F, (-0.35527053F), (-1.08213043E9F));
      Level level0 = new Level("grjCto*MkGt", 1115.983F, 0.1F, 0.0F);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("grjCto*MkGt", (PropertyChangeListener) null);
      level0.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Wall wall0 = new Wall(57.551315F, 2.0F, 2.0F, (-1.0F), 0.01F);
      wall0.getLeftSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.getLength();
      wall0.setRightSideShininess(2703.0F);
      Float float0 = Float.valueOf(2688.633F);
      Float.max(2.0F, 2.0F);
      Float.max((-5509.0F), 55.632263F);
      wall0.setArcExtent(float0);
      wall0.setXEnd(0.0F);
      wall0.setLeftSideShininess((-0.014492754F));
      wall0.containsWallStartAt(619.6F, 55.632263F, (-857.95F));
      wall0.getPoints();
      wall0.setYEnd(2468.8428F);
      wall0.containsWallStartAt(619.6F, 2688.633F, 2468.8428F);
      wall0.setXStart((-1.5323665F));
      Wall wall1 = new Wall(3824.3F, 619.6F, (-857.95F), (-1.0F), 1.0F);
      wall0.getYEnd();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-39.814686F), (-2941.5867F));
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, (-5509.0F), (-2941.5867F), 0.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.setXStart(1.0F);
      wall0.isAtLevel((Level) null);
      wall0.getHeightAtEnd();
      Wall wall2 = wall0.getWallAtStart();
      wall1.setLeftSideShininess((-515.216F));
      wall2.setYEnd(0.0F);
      wall2.containsWallStartAt(2507.9F, (-39.814686F), 0.0F);
      wall1.getPoints();
      Wall wall3 = new Wall(0.0F, (-515.216F), 1.0F, (-252.2196F), (-2941.5867F));
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Wall wall0 = new Wall((-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      Float float0 = new Float((-1907.0964F));
      wall0.setHeightAtEnd(float0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-39.814686F), (-2941.5867F));
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, (-5509.0F), (-2941.5867F), 0.0F);
      wall0.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.setXStart(1.0F);
      wall1.isTrapezoidal();
      wall0.getHeightAtEnd();
      Wall wall2 = wall0.getWallAtStart();
      wall2.setYEnd(0.0F);
      wall1.getPoints();
      Wall wall3 = new Wall(0.0F, (-515.216F), 1.0F, (-252.2196F), (-2941.5867F));
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.setYEnd((-515.216F));
      wall0.setArcExtent((Float) null);
      wall1.setLeftSideShininess(0.0F);
      wall0.setYEnd((-1.0F));
      Wall wall2 = new Wall(953.27F, 2.0F, 0.0F, 0.1F, 0.0F, 0.0F);
      wall1.setWallAtEnd(wall2);
      wall2.getXEnd();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Wall wall0 = new Wall((-2416.81F), (-2416.81F), (-2416.81F), (-323.31F), 3166.89F);
      wall0.containsWallEndAt((-2416.81F), (-2416.81F), 1062.7F);
      wall0.setRightSideColor((Integer) null);
      wall0.getLevel();
      Float float0 = new Float(595.034145904809);
      wall0.setHeight(float0);
      wall0.setHeight(float0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-1312.054F), 0.0F, 0.0F, 0.0F, (-1312.054F));
      Integer integer0 = new Integer(14);
      wall0.setLeftSideColor(integer0);
      wall0.containsWallEndAt((-1553.0F), (-2048.0325F), 1100.0F);
      wall0.setXStart((-973.0F));
      wall0.setLeftSideShininess((-973.0F));
      wall0.containsWallStartAt((-1553.0F), 0.0F, 1851.5175F);
      wall0.getXEnd();
      wall0.getRightSideColor();
      wall0.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 0.01F, 0.01F, 0.01F);
      wall0.getStartPointToEndPointDistance();
      Float float0 = new Float((double) 0.01F);
      wall0.setArcExtent(float0);
      Integer integer0 = new Integer(0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Wall wall0 = new Wall((-5509.0F), (-5509.0F), 0.0F, (-5509.0F), (-39.814686F), 0.0F);
      wall0.containsWallEndAt(0.0F, (-5509.0F), (-39.814686F));
      wall0.getYArcCircleCenter();
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Wall wall0 = new Wall((-619.237F), (-619.237F), (-619.237F), (-619.237F), 4195.48F);
      TextureImage textureImage0 = mock(TextureImage.class, new ViolatedAssumptionAnswer());
      wall0.setPattern(textureImage0);
      wall0.getXStart();
      Level level0 = mock(Level.class, new ViolatedAssumptionAnswer());
      wall0.setLevel(level0);
      wall0.getPoints();
      wall0.setRightSideColor((Integer) null);
      wall0.getYArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Wall wall0 = new Wall((-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F));
      wall0.setLeftSideShininess((-871.0F));
      wall0.getYArcCircleCenter();
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Wall wall0 = new Wall((-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F));
      wall0.getYArcCircleCenter();
      Integer integer0 = new Integer(10);
      wall0.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float float0 = 2.0F;
      Wall wall0 = new Wall(0.01F, 0.01F, 2.0F, 0.01F, 7.5149174F, (-1.0F));
      wall0.getLeftSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Wall wall1 = wall0.clone();
      wall1.setThickness(0.0F);
      wall0.getXEnd();
      wall1.getPattern();
      wall1.getLevel();
      float float1 = 1.0F;
      HomeTexture homeTexture0 = null;
      try {
        homeTexture0 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 0.01F, 0.01F);
      wall0.getStartPointToEndPointDistance();
      Float float0 = new Float((double) 0.01F);
      Float.isFinite((-39));
      wall0.setArcExtent(float0);
      Float.valueOf((float) (-39));
      wall0.getLength();
      Integer.getInteger("tR9");
      wall0.getXArcCircleCenter();
      Wall wall1 = wall0.clone();
      wall1.setYStart(5480.8467F);
      wall0.getRightSideTexture();
      wall0.setLeftSideColor((Integer) null);
      wall0.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Wall wall0 = new Wall((-5749.1F), (-5749.1F), 1.0F, 2355.4668F, 2355.4668F);
      wall0.getRightSideColor();
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      Integer integer0 = new Integer(14);
      wall0.setRightSideColor(integer0);
      Float float0 = new Float((double) 0.0F);
      Float.isFinite(0.0F);
      Float.valueOf(1.0F);
      Float.valueOf(0.0F);
      Float float1 = Float.valueOf(0.01F);
      wall0.setArcExtent(float1);
      Float.valueOf(1893.0991F);
      wall0.getLength();
      Integer.getInteger("rcx8`6<qTMRYD3}49");
      wall0.getXArcCircleCenter();
      Wall wall1 = wall0.clone();
      wall1.setYStart(1.0F);
      wall1.getRightSideTexture();
      Integer integer1 = new Integer(14);
      wall1.setLeftSideColor(integer1);
      wall0.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2941.5867F));
      wall0.move(0.0F, 0.0F);
      wall0.setXEnd((-705.96F));
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, (-5.6842194F), (-2941.5867F), 0.0F);
      wall1.setWallAtStart(wall0);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.setXStart(1.0F);
      wall0.isAtLevel((Level) null);
      wall0.getHeightAtEnd();
      Wall wall2 = wall0.getWallAtStart();
      wall2.setWallAtStart(wall0);
      wall2.setYEnd((-413.6307F));
      wall2.setYEnd((-5509.0F));
      wall2.getWallAtEnd();
      wall0.containsWallEndAt(0.0F, 882.802F, 319.47F);
      wall2.containsWallEndAt(0.0F, (-5509.0F), (-5.6842194F));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Wall wall0 = new Wall((-2888.4116F), 0.0F, 0.0F, 0.0F, (-2888.4116F), 0.0F);
      wall0.setXStart((-587.513F));
      Wall.Property.values();
      wall0.setYStart(0.0F);
      wall0.getLeftSideColor();
      Float float0 = new Float((-1.0F));
      wall0.setHeight(float0);
      wall0.getHeightAtEnd();
      wall0.setHeightAtEnd(float0);
      Wall.Property.values();
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Wall wall0 = new Wall((-2416.81F), (-2416.81F), (-2416.81F), (-311.6532F), 3166.89F);
      wall0.getLevel();
      wall0.setLevel((Level) null);
      wall0.setRightSideColor((Integer) null);
      wall0.getLevel();
      Float float0 = new Float((double) (-2416.81F));
      wall0.setHeight(float0);
      wall0.setHeight(float0);
      wall0.setLeftSideColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Wall wall0 = new Wall((-4094.9F), 448.35F, 0.0F, 0.0F, 0.0F, 448.35F);
      wall0.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.move(0.0F, 0.0F);
      wall0.setWallAtEnd(wall0);
      wall0.setLeftSideShininess((-515.216F));
      Float.floatToIntBits((-433.1504F));
      Float float0 = new Float(0.0F);
      wall0.setArcExtent(float0);
      wall0.getPoints();
      Float float1 = Float.valueOf(0.0F);
      float1.floatValue();
      float1.floatValue();
      float1.floatValue();
      Float float2 = new Float(0.0F);
      float2.floatValue();
      wall0.setArcExtent((Float) 0.0F);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Wall wall0 = new Wall((-509.4F), (-1.0F), (-1.0F), 1.0F, 0.47055435F);
      wall0.getThickness();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Wall wall0 = new Wall((-426.9F), (-426.9F), (-426.9F), 0.0F, (-2911.459F));
      wall0.move(0.0F, 0.0F);
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, 0.0F, (-2911.459F), 0.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.getLeftSideShininess();
      wall1.setXStart(0.0F);
      wall0.setLeftSideShininess((-515.216F));
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("NAME", (PropertyChangeListener) null);
      wall0.addPropertyChangeListener((PropertyChangeListener) null);
      wall1.containsWallEndAt(1783.0F, (-5509.0F), 1783.0F);
      wall0.containsWallEndAt(0.0F, 0.0F, (-426.9F));
      try { 
        MockURL.URL("Jz", "Jz", "Jz");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: jz
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      Float float0 = Float.valueOf((-1.0F));
      Float.max((-1.0F), 0.1F);
      Wall wall0 = new Wall((-1946.0688F), 0.1F, 930.0F, 3154.3994F, 0.0F);
      wall0.getXStart();
      URL uRL0 = MockURL.getFileExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogTexture catalogTexture0 = new CatalogTexture("", uRLContent0, 1483.6783F, 1483.6783F, true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeTexture0.equals(uRLContent0);
      wall0.setLeftSideTexture(homeTexture0);
      wall0.setHeightAtEnd(float0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall0 = new Wall(2091.3096F, 2091.3096F, 0.1F, 2091.3096F, 2091.3096F);
      linkedList0.add(wall0);
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      wall0.setHeightAtEnd((Float) null);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Wall wall0 = new Wall((-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F));
      wall0.getYArcCircleCenter();
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Wall wall0 = new Wall(2822.29F, 2822.29F, (-285.4303F), (-285.4303F), (-285.4303F), (-1.0F));
      wall0.setYEnd((-1.0F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("}f", propertyChangeListener0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.setXEnd(2822.29F);
      wall0.getLength();
      wall0.setRightSideShininess(2688.633F);
      Float float0 = Float.valueOf((-1.0F));
      Float.min((-1.0F), 1.0F);
      Float.max((-1.0F), 0.1F);
      wall0.setArcExtent(float0);
      wall0.setXEnd((-285.4303F));
      wall0.setLeftSideShininess(2468.8428F);
      wall0.containsWallEndAt(0.1F, 0.0F, 0.0F);
      wall0.setYEnd(2.0F);
      wall0.containsWallStartAt(0.0F, 0.0F, 1173.101F);
      wall0.getRightSideShininess();
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2941.5867F));
      wall0.setXEnd((-705.96F));
      wall0.setWallAtStart(wall0);
      wall0.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall0);
      wall0.setXStart(1.0F);
      wall0.isAtLevel((Level) null);
      wall0.getHeightAtEnd();
      Wall wall1 = wall0.getWallAtStart();
      wall1.setWallAtStart(wall0);
      wall1.setYEnd((-413.6307F));
      wall1.setYEnd((-5509.0F));
      Wall wall2 = wall1.getWallAtEnd();
      CatalogTexture catalogTexture0 = new CatalogTexture((String) null, "_/0s", (Content) null, 1.0F, 1.0F, (String) null);
      catalogTexture0.getName();
      wall2.setPattern(catalogTexture0);
      wall0.containsWallEndAt(0.0F, (-413.6307F), 319.47F);
      wall1.containsWallEndAt(0.0F, (-5509.0F), (-5.6842194F));
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Wall wall0 = new Wall((-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F));
      wall0.getLeftSideTexture();
      Wall wall1 = wall0.clone();
      wall1.setLeftSideColor((Integer) null);
      Float float0 = new Float((-1907.0964F));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      wall0.move(0.0F, 0.0F);
      wall0.setXEnd((-705.96F));
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, 30.8F, (-2911.459F), 0.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.getLeftSideShininess();
      wall0.setXStart(1.0F);
      wall0.isAtLevel((Level) null);
      wall0.getHeightAtEnd();
      Wall wall2 = wall0.getWallAtStart();
      wall2.setYEnd((-413.6307F));
      wall2.setYEnd((-5509.0F));
      wall0.getXArcCircleCenter();
      wall2.getWallAtEnd();
      wall0.containsWallEndAt(0.0F, 882.802F, 319.47F);
      wall2.containsWallEndAt(0.0F, (-5509.0F), 30.8F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Wall wall0 = new Wall((-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F));
      wall0.getRightSideTexture();
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Wall wall1 = wall0.clone();
      Level level0 = new Level("", 779.9446F, (-5509.0F), (-1571.3F));
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", (PropertyChangeListener) null);
      level0.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall1.setLevel(level0);
      wall1.getLeftSideTexture();
      wall1.setRightSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall1);
      wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      wall0.getPoints();
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Wall wall0 = new Wall(543.0F, 543.0F, 543.0F, 0.0F, (-2911.459F));
      wall0.move(0.0F, 0.0F);
      wall0.setXEnd((-705.96F));
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, 30.8F, (-2911.459F), 0.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.getLeftSideShininess();
      wall0.setXStart(1.0F);
      wall0.isAtLevel((Level) null);
      wall0.getHeightAtEnd();
      Wall wall2 = wall0.getWallAtStart();
      wall2.setYEnd((-5509.0F));
      wall2.setYEnd((-5509.0F));
      wall0.getXArcCircleCenter();
      wall0.setLeftSideShininess(2603.9966F);
      Wall wall3 = wall2.getWallAtEnd();
      Float float0 = new Float(0.0F);
      wall3.setHeightAtEnd(float0);
      wall3.setHeight((Float) null);
      wall0.containsWallEndAt(543.0F, 882.802F, 319.47F);
      wall2.containsWallEndAt(0.0F, (-5509.0F), 30.8F);
      wall3.getLength();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.0F, 0.0F, 0.1F, (-527.9199F));
      wall0.containsPoint((-527.9199F), (-527.9199F), 1561.359F);
      wall0.containsWallEndAt((-527.9199F), 1561.359F, (-527.9199F));
      wall0.addPropertyChangeListener((PropertyChangeListener) null);
      wall0.setThickness((-527.9199F));
      wall0.getPoints();
      wall0.getLeftSideColor();
      Integer.valueOf((-1524));
      try { 
        Integer.parseUnsignedInt("Y_END");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Y_END\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Wall wall0 = new Wall((-2416.81F), (-2416.81F), (-2416.81F), (-2416.81F), (-2416.81F));
      wall0.getLevel();
      Float float0 = Float.valueOf((-2416.81F));
      wall0.setHeight(float0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Wall wall0 = new Wall((-426.9F), (-426.9F), (-426.9F), 0.0F, (-2911.459F));
      wall0.move(0.0F, 0.0F);
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, 0.0F, (-2911.459F), 0.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.getLeftSideShininess();
      wall1.setXStart(0.0F);
      wall0.setLeftSideShininess((-515.216F));
      wall0.setYEnd((-515.216F));
      wall0.containsWallStartAt(0.1F, 0.1F, (-515.216F));
      wall0.getXEnd();
      wall0.setHeight((Float) null);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      Integer.valueOf(0);
      Integer.valueOf(5);
      Integer.valueOf(0);
      Integer.valueOf((-974));
      Integer integer0 = new Integer((-789));
      Object object0 = new Object();
      integer0.equals(object0);
      wall0.setRightSideColor(integer0);
      wall0.intersectsRectangle(1.0F, 1.146289F, 3848.165F, (-1.0F));
      wall0.setRightSideShininess((-489.0F));
      wall0.clone();
      Integer integer1 = new Integer(183);
      wall0.setRightSideColor(integer1);
      wall0.getHeight();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Wall wall0 = new Wall((-2416.81F), (-2416.81F), (-2416.81F), 1.5194744F, (-2416.81F), (-2416.81F));
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Wall wall0 = new Wall((-619.237F), (-619.237F), (-619.237F), (-619.237F), 4195.48F);
      TextureImage textureImage0 = mock(TextureImage.class, new ViolatedAssumptionAnswer());
      wall0.setPattern(textureImage0);
      wall0.getXStart();
      Level level0 = mock(Level.class, new ViolatedAssumptionAnswer());
      wall0.setLevel(level0);
      wall0.getPoints();
      wall0.setRightSideColor((Integer) null);
      wall0.containsWallEndAt((-4189.7236F), 4195.48F, (-619.237F));
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("+}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.+}
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Wall wall0 = new Wall((-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F));
      wall0.getLeftSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Wall wall1 = wall0.clone();
      wall1.setLeftSideColor((Integer) null);
      float float0 = new Float((-1907.0964F));
      wall0.setHeight((Float) null);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Wall wall0 = new Wall(39.814686F, 39.814686F, (-977.719F), (-977.719F), (-380.85F), (-447.338F));
      Integer integer0 = new Integer((-1707));
      Integer integer1 = Integer.getInteger(")G~8#2", integer0);
      wall0.setRightSideColor(integer0);
      wall0.isTrapezoidal();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy(")G~8#2", propertyChangeListener0);
      Wall wall1 = new Wall((-1707), 2523.0F, 1778.0F, 1.0F, 39.814686F, (-1.0F));
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(wall1, ")G~8#2", ")G~8#2", integer1);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.getLeftSideColor();
      wall0.getYStart();
      wall0.getHeight();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Wall wall0 = new Wall(0.34798986F, 1.0F, 0.34798986F, (-1.0F), (-1.0F), 41.97861F);
      wall0.isTrapezoidal();
      CatalogTexture catalogTexture0 = new CatalogTexture("", (Content) null, 2688.633F, 2688.633F, false);
      catalogTexture0.getName();
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      wall0.setRightSideTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Wall wall0 = new Wall(480.35767F, (-1.5323665F), 2.0F, 755.0F, (-1.0F), 480.35767F);
      wall0.setYEnd(755.0F);
      wall0.setXEnd(0.0F);
      wall0.setRightSideShininess(2688.633F);
      Float.valueOf(248.0F);
      Float.max(480.35767F, (-1.0F));
      Float float0 = new Float(3000.0261F);
      wall0.setArcExtent((Float) null);
      wall0.setXEnd(0.0F);
      wall0.setLeftSideShininess(0.0F);
      wall0.containsWallStartAt(480.35767F, 2688.633F, 2468.8428F);
      wall0.getPoints();
      wall0.setYEnd((-1563.0F));
      Wall wall1 = new Wall(-0.0F, 0.0F, 1.0F, (-1.0F), (-1.0F));
      Integer integer0 = new Integer(2861);
      wall0.setLeftSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Wall wall0 = new Wall(0, 0, (-2022.773F), 66.11715F, (-1.0F), 0.01F);
      CatalogTexture catalogTexture0 = new CatalogTexture((String) null, "_/0s", (Content) null, 1.0F, 1.0F, (String) null);
      catalogTexture0.getName();
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      wall0.setLeftSideTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 3337.797F);
      wall0.setRightSideShininess(2.0F);
      Float float0 = Float.valueOf(0.0F);
      Float.max(2.0F, 0.01F);
      wall0.setArcExtent(float0);
      wall0.setXEnd((-1.0F));
      wall0.setLeftSideShininess(0.0F);
      wall0.containsWallEndAt((-2454.5F), (-4189.7236F), 0.0F);
      wall0.setYEnd(2.0F);
      wall0.containsWallStartAt(0.01F, (-2555.536F), (-1.0F));
      wall0.setXStart(2.0F);
      Wall wall1 = new Wall((-1.0F), 2.0F, (-2454.5F), 3337.797F, 392.0F);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Wall wall0 = new Wall((-39.814686F), (-39.814686F), (-39.814686F), 1017.755F, 1.3912053F);
      wall0.setYStart(466.2F);
      wall0.getRightSideColor();
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.getRightSideShininess();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Wall wall0 = new Wall((-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F));
      wall0.getYArcCircleCenter();
      wall0.clone();
      wall0.setThickness((-1907.0964F));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Wall wall0 = new Wall((-2888.4116F), 0.0F, 0.0F, 0.0F, (-2888.4116F), 0.0F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2888.4116F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2888.4116F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1444.2058F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2888.4116F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2888.4116F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setXStart((-587.513F));
      assertEquals(587.513F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2888.4116F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-293.7565F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(587.513F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-587.513F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      wall0.setArcExtent((Float) (-2.4061403F));
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2888.4116F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-293.7565F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(587.513F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(757.4575F, wall0.getLength(), 0.01F);
      assertEquals((-587.513F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-2.4061403F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-113.16956F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2888.4116F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-293.7565F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(587.513F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(757.4575F, wall0.getLength(), 0.01F);
      assertEquals((-587.513F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-2.4061403F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-113.16956F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(2, floatArray0.length);
      
      Integer integer0 = new Integer((-2121316203));
      wall0.setLeftSideColor(integer0);
      wall0.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Wall wall0 = new Wall(7.803559F, 7.803559F, (-2229.4846F), (-1703.25F), 220.0F, 1476.0F);
      wall0.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Wall wall0 = new Wall((-2830.4622F), 644.577F, 644.577F, 644.577F, (-2830.4622F));
      wall0.isTrapezoidal();
      Wall wall1 = wall0.clone();
      wall0.getLevel();
      wall0.getPattern();
      wall1.setYStart(644.577F);
      wall0.setPattern((TextureImage) null);
      Float float0 = new Float(0.0);
      float float1 = 0.0F;
      Float.sum(644.577F, 0.0F);
      wall0.setHeightAtEnd(float0);
      wall1.getWallAtEnd();
      try { 
        Integer.valueOf("com.eteks.sweethome3d.model.CatalogTexture");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.eteks.sweethome3d.model.CatalogTexture\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Wall wall1 = new Wall(1466.44F, 1466.44F, 0.0F, 0.0F, 0.0F, (-1.0F));
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtStart(wall0);
      wall0.setYEnd(1.0F);
      wall0.getPoints();
      wall1.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      wall0.move(0.0F, 0.0F);
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, 30.8F, (-2911.459F), 0.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.getLeftSideShininess();
      wall0.setXStart(0.0F);
      wall0.isAtLevel((Level) null);
      wall0.getHeightAtEnd();
      Wall wall2 = wall0.getWallAtStart();
      wall1.setXStart((-1755.08F));
      wall1.setWallAtEnd(wall2);
      wall1.getXEnd();
      wall1.setHeight((Float) null);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 0.01F, 0.01F, 0.01F);
      wall0.getStartPointToEndPointDistance();
      wall0.move(0.0F, 0.01F);
      Float float0 = new Float((double) 0.01F);
      Float.isFinite(0.0F);
      wall0.setArcExtent(float0);
      Integer integer0 = new Integer(0);
      wall0.setArcExtent(float0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      wall0.move(0.0F, 0.0F);
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, 0.0F, (-2911.459F), 0.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.setLeftSideShininess((-515.216F));
      wall0.setYEnd((-515.216F));
      wall0.containsWallStartAt(0.1F, 0.1F, (-515.216F));
      wall0.getPoints();
      wall1.getPoints();
      wall0.isTrapezoidal();
      wall0.setWallAtEnd(wall1);
      wall1.getXEnd();
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall0);
      wall0.setYEnd(104.0F);
      wall0.containsWallStartAt((-1991.7F), 77.0F, 0.1F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.getWallAtStart();
      wall0.getRightSideTexture();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.getPoints();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall0.getThickness();
      Float float0 = new Float(0.0F);
      wall0.setArcExtent(float0);
      wall0.getHeightAtEnd();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setYStart(0.0F);
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall1);
      Float float0 = new Float(0.0F);
      Float float1 = new Float(0.0F);
      wall0.setHeight(float1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 0.01F, 0.01F, 0.01F);
      wall0.getStartPointToEndPointDistance();
      Float float0 = new Float((double) 0.01F);
      Integer integer0 = new Integer(0);
      Float.valueOf(1.0F);
      Float float1 = Float.valueOf(0.01F);
      wall0.setHeightAtEnd(float1);
      Wall.Property.values();
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.7597372F, (-2941.5867F));
      wall0.move(0.0F, 0.7597372F);
      wall0.setXEnd(0.0F);
      wall0.setWallAtStart(wall0);
      wall0.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall0);
      Wall wall1 = wall0.getWallAtStart();
      wall0.setWallAtStart(wall1);
      Float.floatToIntBits((-5.6842194F));
      Float float0 = new Float(0.0F);
      Wall wall2 = wall0.getWallAtStart();
      Integer integer0 = new Integer((-1061821152));
      wall0.setArcExtent(float0);
      wall2.getPoints();
      Wall wall3 = wall1.getWallAtStart();
      wall3.getPoints();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      wall0.move(0.0F, 0.0F);
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, 0.0F, (-2911.459F), 0.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall1.setWallAtEnd(wall0);
      wall1.containsWallStartAt((-1.0F), 1972.6266F, (-1679.447F));
      wall1.setWallAtStart(wall0);
      Float.floatToIntBits(338.0F);
      Float float0 = new Float((-885.7F));
      Wall wall2 = wall0.getWallAtStart();
      Float.compare(0.0F, 0.0F);
      wall2.setArcExtent((Float) 0.0F);
      wall0.getPoints();
      wall1.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      wall0.setWallAtStart(wall0);
      Integer.getInteger("");
      wall0.getXArcCircleCenter();
      Wall wall1 = wall0.clone();
      wall1.setYStart((-2911.459F));
      wall1.getRightSideTexture();
      wall1.setLeftSideColor((Integer) null);
      wall0.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Wall wall0 = new Wall((-55.0F), (-55.0F), (-2466.66F), (-4112.6074F), (-1657.2904F), (-829.7401F));
      wall0.setYEnd(615.2F);
      Float.floatToIntBits(0.0F);
      wall0.setHeight((Float) 1.0F);
      wall0.getRightSideColor();
      Float float0 = new Float(0.90039F);
      Float.isFinite(0);
      wall0.move(1.0F, 543.0F);
      wall0.setArcExtent(float0);
      Wall wall1 = new Wall(674.7F, 0.0F, (-0.5994266F), 1.0F, 1.0F);
      wall1.containsWallStartAt(615.2F, 710.56F, 615.2F);
      wall0.setWallAtStart(wall1);
      Float.floatToIntBits((-4966.0F));
      Float float1 = new Float((float) (-979685376));
      wall1.setArcExtent(float1);
      URL uRL0 = MockURL.getFileExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogTexture catalogTexture0 = new CatalogTexture("", uRLContent0, 1483.6783F, 1483.6783F, true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeTexture0.equals(uRLContent0);
      wall1.setRightSideTexture(homeTexture0);
      wall1.getPoints();
      wall1.getWallAtStart();
      Wall.Property.values();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      Wall wall1 = wall0.clone();
      Integer.valueOf(0);
      Integer.valueOf(5);
      Integer.valueOf(0);
      Integer integer0 = Integer.valueOf((-974));
      wall0.setRightSideColor(integer0);
      wall1.setYEnd(0.0F);
      wall0.setYEnd(0.0F);
      Wall wall2 = wall0.clone();
      wall0.getXArcCircleCenter();
      wall2.getWallAtEnd();
      wall0.containsWallEndAt(5, 755.0F, 402.26724F);
      wall1.containsWallEndAt((-974), 248, 0.01F);
      wall1.clone();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall0);
      wall0.setXStart(0.0F);
      Float float0 = new Float((double) 0.0F);
      wall0.setArcExtent(float0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2941.5867F));
      wall0.setXEnd(0.0F);
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, (-5.6842194F), (-2941.5867F), 0.0F);
      wall1.setWallAtStart(wall0);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.setXStart(1.0F);
      wall0.isAtLevel((Level) null);
      wall0.getHeightAtEnd();
      Wall wall2 = wall0.getWallAtStart();
      wall2.setWallAtStart(wall0);
      wall2.setYEnd((-413.6307F));
      wall2.setYEnd((-5509.0F));
      wall2.getWallAtEnd();
      wall0.containsWallEndAt(0.0F, 882.802F, 319.47F);
      wall2.containsWallEndAt(0.0F, (-5509.0F), (-5.6842194F));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-39.814686F), (-2941.5867F));
      Wall wall1 = new Wall((-5509.0F), (-2941.5867F), 0.0F, (-5509.0F), (-2941.5867F), 0.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.isAtLevel((Level) null);
      wall0.getHeightAtEnd();
      Wall wall2 = wall0.getWallAtStart();
      wall1.setLeftSideShininess((-515.216F));
      wall2.setYEnd(0.0F);
      wall2.containsWallStartAt(2507.9F, (-39.814686F), 0.0F);
      wall0.getPoints();
      wall1.getPattern();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Wall wall0 = new Wall(2822.29F, 2822.29F, (-285.4303F), (-285.4303F), (-285.4303F), (-1.0F));
      wall0.setYEnd((-1.0F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("}f", propertyChangeListener0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.setXEnd(2822.29F);
      wall0.getLength();
      wall0.setRightSideShininess(2688.633F);
      Float float0 = Float.valueOf((-1.0F));
      Float.max((-1.0F), 0.1F);
      wall0.setArcExtent(float0);
      wall0.setXEnd((-285.4303F));
      wall0.setLeftSideShininess(2468.8428F);
      wall0.containsWallEndAt(0.1F, 0.0F, 0.0F);
      wall0.setYEnd(2.0F);
      wall0.containsWallStartAt(0.0F, 0.0F, 1173.101F);
      wall0.setXStart((-1.0F));
      Wall wall1 = new Wall(2688.633F, 1173.101F, 0.1F, 2688.633F, 0.1F);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall0 = new Wall(2091.3096F, 0.0F, 0.1F, 0.0F, 2091.3096F);
      linkedList0.add(wall0);
      linkedList0.clone();
      wall0.getXEnd();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Wall wall0 = new Wall((-39.814686F), (-39.814686F), (-39.814686F), 1017.755F, 621.0F);
      Integer integer0 = new Integer(0);
      wall0.setArcExtent((Float) null);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Wall wall0 = new Wall((-55.14081F), (-1563.1562F), (-2466.66F), (-4114.412F), (-1656.7057F), 2984.243F);
      wall0.setRightSideShininess(2984.243F);
      wall0.intersectsRectangle((-1656.7057F), (-1563.1562F), 0.90039355F, (-2118.9163F));
      wall0.setYEnd(615.2F);
      Float.floatToIntBits(0.0F);
      Float.floatToIntBits(1.0F);
      wall0.setHeight((Float) 1.0F);
      wall0.getRightSideColor();
      Float float0 = new Float(0.90039355F);
      Float.isFinite(0);
      wall0.setArcExtent(float0);
      wall0.getLength();
      wall0.getXArcCircleCenter();
      wall0.setYStart((-1563.1562F));
      wall0.getRightSideTexture();
      wall0.setLeftSideColor((Integer) null);
      wall0.getWallAtStart();
      wall0.setThickness(0.0F);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall0);
      Float float0 = new Float(0.0F);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      Wall wall1 = wall0.clone();
      Integer.valueOf(0);
      Integer.valueOf(5);
      Integer integer0 = Integer.valueOf(0);
      Integer.toUnsignedLong(5);
      Integer integer1 = Integer.valueOf((-974));
      wall0.setRightSideColor(integer1);
      wall1.intersectsRectangle((-647.194F), (-5509.0F), (-5509.0F), 0.0F);
      wall0.getLeftSideShininess();
      wall0.setRightSideShininess((-489.0F));
      Integer.getInteger("com.eteks.sweethome3d.model.Level", integer0);
      wall0.setRightSideColor(integer1);
      wall0.getHeight();
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-39.814686F), (-2941.5867F));
      wall0.setXEnd((-705.96F));
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, (-5.6842194F), (-2941.5867F), 0.0F);
      wall1.setWallAtStart(wall0);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.setXStart(1.0F);
      wall0.isAtLevel((Level) null);
      wall0.getHeightAtEnd();
      Wall wall2 = wall0.getWallAtStart();
      wall2.setWallAtStart(wall0);
      wall2.setYEnd((-413.6307F));
      wall2.setYEnd((-5509.0F));
      Wall wall3 = wall2.getWallAtEnd();
      wall3.move((-705.96F), 0.0F);
      wall1.setArcExtent((Float) null);
      wall0.containsWallEndAt(0.0F, 882.802F, 319.47F);
      wall3.isTrapezoidal();
      wall1.getHeight();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Wall wall0 = new Wall((-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F));
      wall0.getYArcCircleCenter();
      Wall wall1 = wall0.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.model.TexturesCategory", propertyChangeListener0);
      wall1.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2941.5867F));
      wall0.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall0);
      wall0.setXStart(1.0F);
      wall0.getHeightAtEnd();
      Wall wall1 = wall0.getWallAtStart();
      wall1.setWallAtStart(wall0);
      wall1.setYEnd((-413.6307F));
      wall1.setYEnd((-5509.0F));
      Wall wall2 = wall0.getWallAtEnd();
      wall2.setHeightAtEnd((Float) null);
      wall0.containsWallEndAt((-868.6339F), 1.0F, (-5509.0F));
      wall1.getRightSideTexture();
      wall0.getThickness();
      wall0.getLevel();
      wall2.getXStart();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Wall wall0 = new Wall(861.0F, (-1313.2047F), 861.0F, 0.0F, (-5.6842194F));
      Wall wall1 = wall0.clone();
      wall1.getPattern();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 0.01F, 0.01F, 0.01F);
      wall0.getStartPointToEndPointDistance();
      Float float0 = new Float((double) 0.01F);
      wall0.setArcExtent(float0);
      wall0.setYEnd(0.0F);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      Integer.valueOf(0);
      Integer.valueOf(5);
      Integer.valueOf(0);
      Integer integer0 = Integer.valueOf((-974));
      wall0.setRightSideColor(integer0);
      wall0.intersectsRectangle((-647.194F), (-5509.0F), (-5509.0F), 0.0F);
      wall0.setRightSideShininess((-647.194F));
      wall0.setRightSideColor(integer0);
      wall0.getHeight();
      wall0.getXStart();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.setYEnd((-515.216F));
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      wall0.move(0.0F, 0.0F);
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, 0.0F, (-2911.459F), 0.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall1.setWallAtEnd(wall0);
      wall1.containsWallStartAt((-1.0F), 1972.6266F, (-1679.447F));
      wall1.setWallAtStart(wall0);
      wall0.setXStart((-5509.0F));
      Float.floatToIntBits(338.0F);
      Float float0 = new Float((-885.7F));
      Wall wall2 = wall0.getWallAtStart();
      wall1.setThickness(338.0F);
      Float.compare(0.0F, 0.0F);
      wall1.setRightSideShininess(1135149056);
      wall2.setArcExtent((Float) 0.0F);
      wall0.getPoints();
      wall1.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Wall wall0 = new Wall(543.0F, 543.0F, 543.0F, 0.0F, (-2911.459F));
      wall0.move(0.0F, 0.0F);
      wall0.setXEnd((-705.96F));
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, 30.8F, (-2911.459F), 0.0F);
      Float float0 = new Float(433.964);
      wall1.setHeightAtEnd(float0);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.getLeftSideShininess();
      wall0.setXStart(1.0F);
      wall0.isAtLevel((Level) null);
      wall0.getHeightAtEnd();
      Wall wall2 = wall0.getWallAtStart();
      wall2.setYEnd((-5509.0F));
      wall2.setYEnd((-5509.0F));
      wall0.getXArcCircleCenter();
      Wall wall3 = wall2.getWallAtEnd();
      wall3.setHeight((Float) null);
      wall0.containsWallEndAt(543.0F, 882.802F, 319.47F);
      wall2.containsWallEndAt(0.0F, (-5509.0F), 30.8F);
      wall0.getRightSideShininess();
      Wall.Property.values();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 2.0F, 0.01F, (-19.96617F), (-1.0F));
      wall0.getLeftSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Wall wall1 = wall0.clone();
      wall1.setThickness(0.0F);
      wall0.getXEnd();
      wall1.getPattern();
      wall0.getLevel();
      CatalogTexture catalogTexture0 = new CatalogTexture("", (Content) null, 2.0F, 167.2F, true);
      catalogTexture0.getName();
      Wall wall2 = new Wall(2.0F, (-1761.6279F), 167.2F, (-1.0F), (-1761.6279F), 2694.0F);
      wall2.setPattern((TextureImage) null);
      Level level0 = new Level("RIGHT_SIDE_TEXTURE", 969.0F, 0.0F, (-1106.2F));
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", (PropertyChangeListener) null);
      level0.addPropertyChangeListener((PropertyChangeListener) null);
      wall0.setLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Wall wall0 = new Wall(2822.29F, 2822.29F, (-285.4303F), (-285.4303F), (-285.4303F), (-1.0F));
      wall0.setYEnd((-1.0F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("}f", propertyChangeListener0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.setXEnd(2822.29F);
      wall0.getLength();
      CatalogTexture catalogTexture0 = new CatalogTexture("", (Content) null, 2688.633F, 2688.633F, false);
      catalogTexture0.getName();
      wall0.setPattern(catalogTexture0);
      Level level0 = new Level("grjCto*MkGt", 1115.983F, 0.1F, 0.0F);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("grjCto*MkGt", (PropertyChangeListener) null);
      level0.addPropertyChangeListener(propertyChangeListenerProxy1);
      wall0.setLevel(level0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 0.01F, 0.01F);
      wall0.getStartPointToEndPointDistance();
      Integer integer0 = new Integer((-39));
      wall0.setRightSideColor(integer0);
      wall0.containsPoint(0.0F, 0.0F, 0.0F);
      Float float0 = new Float((double) 0.01F);
      Float.isFinite((-39));
      Float.min((-868.6339F), (-868.6339F));
      wall0.setArcExtent(float0);
      wall0.setRightSideShininess(0.0F);
      Float.valueOf((-1251.685F));
      Float.max(0.0F, (-4501.0F));
      wall0.setArcExtent(float0);
      wall0.setLeftSideShininess(1094.8785F);
      wall0.containsWallEndAt((-258.0F), 0.1F, 0.0F);
      wall0.setYEnd(1778.0F);
      wall0.getWallAtEnd();
      wall0.setWallAtEnd((Wall) null);
      wall0.getXEnd();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Wall wall0 = new Wall((-1907.0964F), 448.35F, 0.0F, 0.0F, 0.0F, 448.35F);
      wall0.containsWallStartAt((-3816.0552F), 448.35F, 1.0F);
      wall0.getYArcCircleCenter();
      wall0.getArcExtent();
      wall0.getRightSideShininess();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Wall wall0 = new Wall(2822.29F, (-285.4303F), 2822.29F, (-1.0F), 2822.29F);
      wall0.setYEnd((-1.0F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      wall0.setXEnd(2822.29F);
      wall0.getLength();
      wall0.setRightSideShininess(2688.633F);
      Float float0 = Float.valueOf((-1.0F));
      wall0.setArcExtent(float0);
      wall0.setXEnd((-285.4303F));
      wall0.setLeftSideShininess(2468.8428F);
      float float1 = new Float((-285.4303F));
      wall0.setArcExtent((Float) null);
      wall0.setXEnd((-589.6F));
      Wall wall1 = wall0.clone();
      wall1.setLeftSideShininess(2393.6F);
      wall0.containsWallEndAt((-4647.14F), (-4501.0F), 284.4303F);
      wall1.setYEnd((-33.812126F));
      wall0.getWallAtEnd();
      wall0.setWallAtEnd((Wall) null);
      wall1.getXEnd();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 3337.797F);
      Float float0 = new Float(0.0);
      Float.sum(0.0F, 0.0F);
      Float.min(1334.5101F, 3337.797F);
      wall0.intersectsRectangle(1334.5101F, (-1211.603F), (-1211.603F), 1334.5101F);
      Float.max(0.0F, 0.0F);
      wall0.setHeightAtEnd(float0);
      wall0.setArcExtent(float0);
      wall0.setHeightAtEnd((Float) 0.0F);
      wall0.getArcExtent();
      wall0.setHeight(float0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2941.5867F));
      wall0.move(0.0F, 0.0F);
      wall0.setXEnd((-705.96F));
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, (-5.6842194F), (-2941.5867F), 0.0F);
      wall1.setWallAtStart(wall0);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall1.getWallAtStart();
      wall1.setYEnd((-3768.966F));
      wall0.setYEnd(2822.29F);
      Wall wall2 = wall1.clone();
      wall2.getWallAtEnd();
      wall1.containsWallEndAt((-3233.34F), (-3768.966F), 2822.29F);
      wall2.containsWallEndAt((-5.6842194F), (-2941.5867F), (-1.0F));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-39.814686F), (-2941.5867F));
      Wall wall1 = new Wall((-5509.0F), (-2941.5867F), 0.0F, (-5509.0F), (-2941.5867F), 0.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.setXStart(1.0F);
      wall0.isAtLevel((Level) null);
      wall0.getHeightAtEnd();
      Wall wall2 = wall0.getWallAtStart();
      wall1.setLeftSideShininess((-515.216F));
      wall2.setYEnd(0.0F);
      wall2.containsWallStartAt(2507.9F, (-39.814686F), 0.0F);
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Wall wall0 = new Wall((-1909.5084F), (-1909.5084F), (-1909.5084F), (-1909.5084F), (-1909.5084F));
      Integer integer0 = Integer.valueOf((-522));
      wall0.setRightSideColor(integer0);
      wall0.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-39.814686F), 0.0F);
      wall0.setXEnd(0.0F);
      Wall wall1 = new Wall((-5509.0F), (-5509.0F), 0.0F, (-5509.0F), (-39.814686F), 0.0F);
      wall1.containsWallEndAt(0.0F, (-5509.0F), (-39.814686F));
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.setXStart(0.0F);
      wall0.setWallAtEnd(wall1);
      Wall wall2 = new Wall((-5509.0F), 0.0F, 0.0F, (-5509.0F), (-1411.92F), 1.15675302E9F);
      wall0.setWallAtStart(wall2);
      wall0.setLeftSideShininess((-39.814686F));
      wall1.setYEnd(0.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall2.getHeight();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Wall wall0 = new Wall(2822.29F, 2822.29F, (-285.4303F), (-285.4303F), (-285.4303F), (-1.0F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("}f", propertyChangeListener0);
      wall0.setXEnd(2822.29F);
      wall0.getLength();
      wall0.setRightSideShininess(2688.633F);
      Float.valueOf((-1.0F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall1 = wall0.clone();
      linkedList0.add(wall1);
      linkedList0.clone();
      Integer integer0 = Integer.valueOf((-580));
      Integer.toUnsignedString((-831));
      wall1.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Wall wall0 = new Wall((-2888.4116F), (-21.064365F), 0.0F, (-2888.4116F), (-2888.4116F), 0.0F);
      wall0.setRightSideShininess(0.0F);
      Integer integer0 = Integer.valueOf((-974));
      wall0.intersectsRectangle((-196.702F), (-587.513F), (-974), (-974));
      wall0.setRightSideColor(integer0);
      wall0.getHeight();
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.1F, 1.0F, 0.1F, 0.0F);
      wall0.getXEnd();
      Integer integer0 = new Integer(2229);
      integer0.equals((Object) null);
      wall0.setLeftSideColor(integer0);
      Integer integer1 = new Integer(0);
      integer1.equals((Object) null);
      wall0.setLeftSideColor(integer1);
      Level level0 = new Level("", 1.0F, 2431.96F, 2158.2327F);
      level0.setHeight(0.0F);
      wall0.setLevel(level0);
      wall0.containsWallStartAt(0.0F, 499.0F, 499.0F);
      wall0.move(2229, 499.0F);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Wall wall0 = new Wall(2822.29F, 2822.29F, (-285.4303F), (-285.4303F), (-285.4303F), (-1.0F));
      wall0.setYEnd((-1.0F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("}f", propertyChangeListener0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.setXEnd(2822.29F);
      wall0.getLength();
      wall0.setRightSideShininess(2688.633F);
      Float float0 = Float.valueOf((-1.0F));
      Float.max((-1.0F), 0.1F);
      wall0.setArcExtent(float0);
      wall0.setXEnd((-285.4303F));
      wall0.setLeftSideShininess(2468.8428F);
      wall0.setYEnd(2.0F);
      wall0.containsWallStartAt(0.0F, 0.0F, 1173.101F);
      wall0.setXStart(1173.101F);
      Wall wall1 = new Wall(2688.633F, 1173.101F, 0.1F, 2688.633F, 0.1F);
      wall1.getPoints();
      wall0.getArcExtent();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-39.814686F), (-2941.5867F));
      wall0.setXEnd(0.0F);
      Wall wall1 = wall0.clone();
      wall1.setWallAtEnd(wall0);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.setXStart(1.0F);
      wall0.isAtLevel((Level) null);
      Wall wall2 = wall0.getWallAtStart();
      wall2.setWallAtStart(wall0);
      wall2.setYEnd((-412.5812F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      wall0.containsWallEndAt(0.0F, 882.802F, (-39.814686F));
      wall2.containsWallEndAt((-2941.5867F), 0.0F, 0.0F);
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Wall wall0 = new Wall((-39.814686F), (-39.814686F), (-39.814686F), 1017.755F, 1017.755F);
      wall0.getRightSideColor();
      wall0.getLeftSideTexture();
      wall0.getHeight();
      wall0.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Wall wall0 = new Wall(2822.29F, 2822.29F, (-285.4303F), (-285.4303F), (-285.4303F), (-1.0F));
      wall0.setYEnd((-1.0F));
      wall0.setXEnd(2822.29F);
      wall0.getLength();
      wall0.setRightSideShininess(2688.633F);
      Float float0 = Float.valueOf((-1.5323665F));
      Float.max((-1.0F), 0.1F);
      wall0.setArcExtent(float0);
      wall0.setXEnd((-285.4303F));
      wall0.setLeftSideShininess(2468.8428F);
      wall0.containsWallStartAt((-1.0F), 2688.633F, (-1.0F));
      wall0.getPoints();
      wall0.getXArcCircleCenter();
      wall0.setYStart((-1317.7261F));
      wall0.getRightSideTexture();
      Integer integer0 = new Integer(13);
      wall0.setLeftSideColor(integer0);
      wall0.getWallAtStart();
      wall0.setThickness((-1.0F));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Wall wall0 = new Wall((-1251.685F), 2.0F, (-1251.685F), 0.01F, 0.01F);
      wall0.getStartPointToEndPointDistance();
      Integer integer0 = new Integer((-39));
      wall0.setRightSideColor(integer0);
      wall0.containsPoint((-2279.0F), 0.01F, 288.1299F);
      Float float0 = new Float(1905.581868284893);
      Float.isFinite((-870.021F));
      Float.min((-1251.685F), 1.99F);
      wall0.setArcExtent(float0);
      wall0.setRightSideShininess((-1340.8369F));
      Float float1 = Float.valueOf(1094.8785F);
      Float.max((-1340.8369F), 2.0F);
      wall0.setArcExtent(float1);
      wall0.setXEnd((-1251.685F));
      wall0.setLeftSideShininess((-1.0F));
      wall0.containsWallEndAt(0.0F, (-1251.685F), 2.0F);
      wall0.setYEnd(1942.05F);
      wall0.containsWallStartAt((-1340.8369F), 0.1F, 0.1F);
      wall0.setXStart(882.802F);
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 593.7463F, 593.7463F, 3021.8F, 0.0F, 593.7463F);
      Wall wall1 = new Wall(593.7463F, 2465.384F, 0.0F, 1043.176F, 0.0F, (-322.69965F));
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtStart(wall0);
      wall0.setYEnd(0.0F);
      wall0.getPoints();
      Float.floatToIntBits(593.7463F);
      Float.floatToIntBits(0.0F);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Wall wall0 = new Wall(543.0F, 543.0F, 543.0F, 0.0F, (-2911.0F));
      wall0.move(0.0F, 0.0F);
      wall0.setXEnd((-705.96F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtEnd(wall0);
      wall0.containsWallStartAt((-1.08213043E9F), 543.0F, (-5509.0F));
      wall0.setWallAtStart(wall1);
      Float.floatToIntBits(0.0F);
      Float float0 = new Float(0.0F);
      wall0.setArcExtent(float0);
      wall0.getPoints();
      wall1.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Wall wall0 = new Wall((-1907.0964F), 448.35F, 0.0F, 0.0F, 0.0F, 448.35F);
      wall0.setXStart(2369.028F);
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Wall wall0 = new Wall(2.0F, 2.0F, (-1492.3876F), (-1492.3876F), (-515.216F), (-1492.3876F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("HV&:Ti%D<f*KVG", propertyChangeListener0);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      Wall wall1 = wall0.clone();
      wall1.getWallAtStart();
      HomeTexture homeTexture0 = null;
      try {
        homeTexture0 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Wall wall0 = new Wall((-2416.81F), (-2416.81F), 3166.89F, 3166.89F, 3166.89F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(375.03992F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3166.89F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(3166.89F, wall0.getXEnd(), 0.01F);
      assertEquals(7896.5444F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3166.89F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(375.03992F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2416.81F), wall0.getXStart(), 0.01F);
      assertEquals((-2416.81F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7896.5444F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = wall0.getLevel();
      assertNull(wall0.getLeftSideColor());
      assertEquals(375.03992F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3166.89F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(3166.89F, wall0.getXEnd(), 0.01F);
      assertEquals(7896.5444F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3166.89F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(375.03992F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2416.81F), wall0.getXStart(), 0.01F);
      assertEquals((-2416.81F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7896.5444F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(level0);
      
      Float float0 = Float.valueOf((-2416.81F));
      assertNotNull(float0);
      assertEquals((-2416.81F), (float)float0, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals((-1017.41925F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3166.89F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0663237E7F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2416.81F), wall0.getArcExtent(), 0.01F);
      assertEquals(3166.89F, wall0.getXEnd(), 0.01F);
      assertEquals(7896.5444F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3166.89F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2416.81F), wall0.getXStart(), 0.01F);
      assertEquals((-2416.81F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1767.499F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-1017.41925F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3166.89F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0663237E7F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2416.81F), wall0.getArcExtent(), 0.01F);
      assertEquals(3166.89F, wall0.getXEnd(), 0.01F);
      assertEquals(7896.5444F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3166.89F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2416.81F), wall0.getXStart(), 0.01F);
      assertEquals((-2416.81F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1767.499F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(7616, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setXEnd((-705.96F));
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, 30.8F, (-2911.459F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(5509.086F, wall1.getLength(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5509.086F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(5509.086F, wall1.getLength(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5509.086F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(5509.086F, wall1.getLength(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5509.086F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float0 = wall0.getLeftSideShininess();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(wall0, wall1);
      
      wall0.setXStart(1.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      
      Integer integer0 = new Integer((-1272));
      assertNotNull(integer0);
      assertEquals((-1272), (int)integer0);
      
      wall1.setRightSideColor(integer0);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(5509.086F, wall1.getLength(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1272), (int)wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5509.086F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      
      boolean boolean0 = wall1.intersectsRectangle(0.01F, 0.0F, 0.0F, (-1697.5287F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(5509.086F, wall1.getLength(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1272), (int)wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5509.086F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertTrue(boolean0);
      assertNotSame(wall1, wall0);
      
      float float1 = wall0.getLeftSideShininess();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float1, float0, 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertNotSame(wall0, wall1);
      
      wall0.setRightSideShininess(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      
      Integer integer1 = new Integer((-1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      Integer integer2 = Integer.getInteger("zE yH!8,I AI", integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      
      wall0.setRightSideColor((Integer) null);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Wall wall0 = new Wall((-416.9001F), (-416.9001F), (-416.9001F), (-416.9001F), (-416.9001F));
      assertEquals((-416.9001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-416.9001F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-416.9001F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-416.9001F), wall0.getXEnd(), 0.01F);
      assertEquals((-416.9001F), wall0.getThickness(), 0.01F);
      assertEquals((-416.9001F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-416.9001F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("'", (PropertyChangeListener) null);
      assertEquals("'", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      boolean boolean0 = wall0.intersectsRectangle((-416.9001F), (-416.9001F), (-647.1521F), (-416.9001F));
      assertEquals((-416.9001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-416.9001F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-416.9001F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-416.9001F), wall0.getXEnd(), 0.01F);
      assertEquals((-416.9001F), wall0.getThickness(), 0.01F);
      assertEquals((-416.9001F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-416.9001F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(boolean0);
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals((-416.9001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-416.9001F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-416.9001F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-416.9001F), wall0.getXEnd(), 0.01F);
      assertEquals((-416.9001F), wall0.getThickness(), 0.01F);
      assertEquals((-416.9001F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-416.9001F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals("'", propertyChangeListenerProxy0.getPropertyName());
      
      boolean boolean1 = wall0.containsWallEndAt((-2954.381F), (-416.9001F), (-416.9001F));
      assertTrue(boolean1 == boolean0);
      assertEquals((-416.9001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-416.9001F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-416.9001F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-416.9001F), wall0.getXEnd(), 0.01F);
      assertEquals((-416.9001F), wall0.getThickness(), 0.01F);
      assertEquals((-416.9001F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-416.9001F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(boolean1);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>(linkedList0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(linkedList1.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList1);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(linkedList1.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      
      boolean boolean2 = linkedList0.addAll(0, (Collection<? extends Wall>) list0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(linkedList1.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(boolean2);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      
      boolean boolean3 = linkedList0.add(wall0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(linkedList0.contains(wall0));
      assertEquals((-416.9001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-416.9001F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-416.9001F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-416.9001F), wall0.getXEnd(), 0.01F);
      assertEquals((-416.9001F), wall0.getThickness(), 0.01F);
      assertEquals((-416.9001F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-416.9001F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean3);
      assertNotSame(linkedList0, linkedList1);
      
      List<Wall> list1 = new LinkedList<Wall>();
      assertTrue(list1.equals((Object)list0));
      assertFalse(list1.contains(wall0));
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      boolean boolean4 = wall0.containsWallStartAt(0.0F, 0.0F, (-416.9001F));
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertEquals((-416.9001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-416.9001F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-416.9001F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-416.9001F), wall0.getXEnd(), 0.01F);
      assertEquals((-416.9001F), wall0.getThickness(), 0.01F);
      assertEquals((-416.9001F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-416.9001F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(boolean4);
      
      float float0 = wall0.getYArcCircleCenter();
      assertEquals((-416.9001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-416.9001F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-416.9001F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-416.9001F), wall0.getXEnd(), 0.01F);
      assertEquals((-416.9001F), wall0.getThickness(), 0.01F);
      assertEquals((-416.9001F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-416.9001F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-416.9001F), float0, 0.01F);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertEquals((-416.9001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-416.9001F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-416.9001F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-416.9001F), wall0.getXEnd(), 0.01F);
      assertEquals((-416.9001F), wall0.getThickness(), 0.01F);
      assertEquals((-416.9001F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-416.9001F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(textureImage0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-416.9001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-416.9001F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-416.9001F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-416.9001F), wall0.getXEnd(), 0.01F);
      assertEquals((-416.9001F), wall0.getThickness(), 0.01F);
      assertEquals((-416.9001F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-416.9001F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      float float1 = wall0.getYEnd();
      assertEquals(float1, float0, 0.01F);
      assertEquals((-416.9001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-416.9001F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-416.9001F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-416.9001F), wall0.getXEnd(), 0.01F);
      assertEquals((-416.9001F), wall0.getThickness(), 0.01F);
      assertEquals((-416.9001F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-416.9001F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-416.9001F), float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Wall wall0 = new Wall((-2888.4116F), 0.0F, 0.0F, 0.0F, (-2888.4116F), 0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-2888.4116F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2888.4116F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2888.4116F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2888.4116F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1444.2058F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setXStart((-561.6874F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-2888.4116F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(561.6874F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-561.6874F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-280.8437F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(561.6874F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setArcExtent((Float) 0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-2888.4116F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(4.58652562E18F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(561.6874F, wall0.getLength(), 0.01F);
      assertEquals((-561.6874F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-561.6874F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(561.6874F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-2888.4116F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(4.58652562E18F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(561.6874F, wall0.getLength(), 0.01F);
      assertEquals((-561.6874F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-561.6874F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(561.6874F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      wall0.setXEnd(0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      
      Wall wall1 = new Wall((-5509.0F), (-5509.0F), 0.0F, (-5509.0F), 0.0F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(5509.0F, wall1.getLength(), 0.01F);
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-5509.0F), wall1.getYStart(), 0.01F);
      assertEquals((-5509.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(5509.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotNull(wall1);
      
      boolean boolean0 = wall1.containsWallEndAt(0.0F, (-5509.0F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(5509.0F, wall1.getLength(), 0.01F);
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-5509.0F), wall1.getYStart(), 0.01F);
      assertEquals((-5509.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(5509.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(boolean0);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(5509.0F, wall1.getLength(), 0.01F);
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-5509.0F), wall1.getYStart(), 0.01F);
      assertEquals((-5509.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(5509.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(5509.0F, wall1.getLength(), 0.01F);
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-5509.0F), wall1.getYStart(), 0.01F);
      assertEquals((-5509.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(5509.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setXStart(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNotSame(wall0, wall1);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(5509.0F, wall1.getLength(), 0.01F);
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-5509.0F), wall1.getYStart(), 0.01F);
      assertEquals((-5509.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(5509.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      int int0 = Float.floatToIntBits(39.814686F);
      assertEquals(1109344829, int0);
      
      int int1 = Float.floatToIntBits(145.0F);
      assertFalse(int1 == int0);
      assertEquals(1125187584, int1);
      
      wall0.setArcExtent((Float) 145.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(145.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(5509.0F, wall1.getLength(), 0.01F);
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-5509.0F), wall1.getYStart(), 0.01F);
      assertEquals((-5509.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(5509.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      wall0.move(0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      
      wall0.setXEnd((-705.96F));
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, 30.8F, (-2911.459F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(5509.086F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(5509.086F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(5509.086F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(5509.086F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(5509.086F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(5509.086F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float0 = wall0.getLeftSideShininess();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(wall0, wall1);
      
      wall0.setXStart(1.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall0.isAtLevel((Level) null);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertTrue(boolean0);
      assertNotSame(wall0, wall1);
      
      Float float1 = wall0.getHeightAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(float1);
      assertNotSame(wall0, wall1);
      
      Wall wall2 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(5509.086F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(15.4F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals(30.8F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(5509.086F, wall2.getLength(), 0.01F);
      assertNotNull(wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall2.setYEnd((-413.6307F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-206.81535F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(5524.5063F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals((-413.6307F), wall2.getYEnd(), 0.01F);
      assertEquals(5524.5063F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall2.setYEnd((-5509.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      float float2 = wall0.getXArcCircleCenter();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-352.48F), float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      Wall wall3 = wall2.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(706.96F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall3.getXStart(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(706.96F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals((-2911.459F), wall3.getThickness(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-352.48F), wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getRightSideColor());
      assertEquals((-705.96F), wall3.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertNotNull(wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall0, wall3);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall3, wall1);
      assertSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      
      wall3.setHeight((Float) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(706.96F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall3.getXStart(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(706.96F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals((-2911.459F), wall3.getThickness(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-352.48F), wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getRightSideColor());
      assertEquals((-705.96F), wall3.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall0, wall3);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall3, wall1);
      assertSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      
      boolean boolean1 = wall0.containsWallEndAt(0.0F, 882.802F, 319.47F);
      assertFalse(boolean1 == boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall0, wall3);
      
      boolean boolean2 = wall2.containsWallEndAt(0.0F, (-5509.0F), 30.8F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(boolean2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall0, wall3);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setYEnd(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall0.containsWallStartAt(0.1F, 0.1F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNotNull(wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Wall wall0 = new Wall((-619.237F), (-619.237F), (-619.237F), (-619.237F), 4195.48F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-619.237F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-619.237F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-619.237F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-619.237F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4195.48F, wall0.getThickness(), 0.01F);
      assertEquals((-619.237F), wall0.getXEnd(), 0.01F);
      assertEquals((-619.237F), wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      TextureImage textureImage0 = mock(TextureImage.class, new ViolatedAssumptionAnswer());
      wall0.setPattern(textureImage0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-619.237F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-619.237F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-619.237F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-619.237F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4195.48F, wall0.getThickness(), 0.01F);
      assertEquals((-619.237F), wall0.getXEnd(), 0.01F);
      assertEquals((-619.237F), wall0.getYEnd(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-619.237F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-619.237F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-619.237F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-619.237F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4195.48F, wall0.getThickness(), 0.01F);
      assertEquals((-619.237F), wall0.getXEnd(), 0.01F);
      assertEquals((-619.237F), wall0.getYEnd(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-619.237F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-619.237F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-619.237F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-619.237F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4195.48F, wall0.getThickness(), 0.01F);
      assertEquals((-619.237F), wall0.getXEnd(), 0.01F);
      assertEquals((-619.237F), wall0.getYEnd(), 0.01F);
      
      float float0 = wall0.getXStart();
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-619.237F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-619.237F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-619.237F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-619.237F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4195.48F, wall0.getThickness(), 0.01F);
      assertEquals((-619.237F), wall0.getXEnd(), 0.01F);
      assertEquals((-619.237F), wall0.getYEnd(), 0.01F);
      assertEquals((-619.237F), float0, 0.01F);
      
      Level level0 = mock(Level.class, new ViolatedAssumptionAnswer());
      wall0.setLevel(level0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-619.237F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-619.237F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-619.237F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-619.237F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4195.48F, wall0.getThickness(), 0.01F);
      assertEquals((-619.237F), wall0.getXEnd(), 0.01F);
      assertEquals((-619.237F), wall0.getYEnd(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-619.237F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-619.237F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-619.237F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-619.237F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4195.48F, wall0.getThickness(), 0.01F);
      assertEquals((-619.237F), wall0.getXEnd(), 0.01F);
      assertEquals((-619.237F), wall0.getYEnd(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = wall0.containsWallStartAt((-1.0F), 1173.101F, (-1639.4231F));
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-619.237F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-619.237F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-619.237F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-619.237F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4195.48F, wall0.getThickness(), 0.01F);
      assertEquals((-619.237F), wall0.getXEnd(), 0.01F);
      assertEquals((-619.237F), wall0.getYEnd(), 0.01F);
      assertFalse(boolean0);
      
      wall0.setXStart((-2423.006F));
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-619.237F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-619.237F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1803.769F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1803.769F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2423.006F), wall0.getXStart(), 0.01F);
      assertEquals(4195.48F, wall0.getThickness(), 0.01F);
      assertEquals((-1521.1216F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-619.237F), wall0.getXEnd(), 0.01F);
      assertEquals((-619.237F), wall0.getYEnd(), 0.01F);
      
      Wall wall1 = new Wall(2175.4153F, (-1.0F), (-2423.006F), (-779.32F), (-2423.006F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2423.006F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(4663.8247F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2175.4153F, wall1.getXStart(), 0.01F);
      assertEquals((-390.16F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-123.79541F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-2423.006F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(4663.8247F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-779.32F), wall1.getYEnd(), 0.01F);
      assertNotNull(wall1);
      
      Float float1 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-619.237F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-619.237F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1803.769F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1803.769F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2423.006F), wall0.getXStart(), 0.01F);
      assertEquals(4195.48F, wall0.getThickness(), 0.01F);
      assertEquals((-1521.1216F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-619.237F), wall0.getXEnd(), 0.01F);
      assertEquals((-619.237F), wall0.getYEnd(), 0.01F);
      assertNull(float1);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Integer integer0 = new Integer(46);
      assertNotNull(integer0);
      assertEquals(46, (int)integer0);
      
      Wall wall0 = new Wall(1100.0F, (-1.0F), 0.0F, (-2370.0F), (-1.0F), (-1553.0F));
      assertEquals(2611.9268F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1553.0F), wall0.getHeight(), 0.01F);
      assertEquals(1100.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1185.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(550.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2370.0F), wall0.getYEnd(), 0.01F);
      assertEquals(2611.9268F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallEndAt(14, (-112.0F), (-1086.55F));
      assertEquals(2611.9268F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1553.0F), wall0.getHeight(), 0.01F);
      assertEquals(1100.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1185.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(550.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2370.0F), wall0.getYEnd(), 0.01F);
      assertEquals(2611.9268F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertFalse(boolean0);
      
      wall0.setXStart(1942.05F);
      assertEquals(1942.05F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1553.0F), wall0.getHeight(), 0.01F);
      assertEquals(3063.2856F, wall0.getLength(), 0.01F);
      assertEquals(971.025F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1185.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3063.2856F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2370.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      
      wall0.setLeftSideShininess((-1.0F));
      assertEquals(1942.05F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1553.0F), wall0.getHeight(), 0.01F);
      assertEquals(3063.2856F, wall0.getLength(), 0.01F);
      assertEquals(971.025F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1185.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3063.2856F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2370.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      
      boolean boolean1 = wall0.containsWallStartAt(0.0F, 1304.9366F, 0.0F);
      assertTrue(boolean1 == boolean0);
      assertEquals(1942.05F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1553.0F), wall0.getHeight(), 0.01F);
      assertEquals(3063.2856F, wall0.getLength(), 0.01F);
      assertEquals(971.025F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1185.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3063.2856F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2370.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertFalse(boolean1);
      
      float float0 = wall0.getXEnd();
      assertEquals(1942.05F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1553.0F), wall0.getHeight(), 0.01F);
      assertEquals(3063.2856F, wall0.getLength(), 0.01F);
      assertEquals(971.025F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1185.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3063.2856F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2370.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      Integer integer1 = wall0.getRightSideColor();
      assertEquals(1942.05F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1553.0F), wall0.getHeight(), 0.01F);
      assertEquals(3063.2856F, wall0.getLength(), 0.01F);
      assertEquals(971.025F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1185.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3063.2856F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2370.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(integer1);
      
      Integer integer2 = wall0.getRightSideColor();
      assertEquals(1942.05F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1553.0F), wall0.getHeight(), 0.01F);
      assertEquals(3063.2856F, wall0.getLength(), 0.01F);
      assertEquals(971.025F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1185.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3063.2856F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2370.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(integer2);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Wall wall0 = new Wall((-4094.9F), 448.35F, (-4094.9F), (-4094.9F), (-4094.9F), 448.35F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1823.2749F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4094.9F), wall0.getXStart(), 0.01F);
      assertEquals((-4094.9F), wall0.getThickness(), 0.01F);
      assertEquals(448.35F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-4094.9F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4543.25F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4543.25F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(448.35F, wall0.getHeight(), 0.01F);
      assertEquals((-4094.9F), wall0.getYEnd(), 0.01F);
      assertEquals((-4094.9F), wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Wall wall0 = new Wall((-1251.685F), 2.0F, (-1251.685F), 0.01F, 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(1.99F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(1.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(1.99F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(1.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertEquals(1.99F, float0, 0.01F);
      
      wall0.setYEnd((-1251.685F));
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(1253.685F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getXEnd(), 0.01F);
      assertEquals(1253.685F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1251.685F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-624.8425F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      
      wall0.setXEnd((-1.0F));
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(1770.8584F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1770.8584F, wall0.getLength(), 0.01F);
      assertEquals((-624.8425F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertEquals((-626.3425F), wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setRightSideShininess(2.0F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(1770.8584F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(2.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1770.8584F, wall0.getLength(), 0.01F);
      assertEquals((-624.8425F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertEquals((-626.3425F), wall0.getXArcCircleCenter(), 0.01F);
      
      Float float1 = Float.valueOf((-1251.685F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1251.685F), (float)float1, 0.01F);
      
      float float2 = Float.max(2688.633F, (-1.0F));
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(2688.633F, float2, 0.01F);
      
      wall0.setArcExtent(float1);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-1251.685F), wall0.getArcExtent(), 0.01F);
      assertEquals(1794712.4F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(1770.8584F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1424.7632F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertEquals((-1421.3525F), wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setXEnd((-1251.685F));
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(1270572.6F, wall0.getLength(), 0.01F);
      assertEquals((-2050.1057F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1251.685F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getXEnd(), 0.01F);
      assertEquals(1253.685F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1251.685F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(2.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-624.8425F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      
      wall0.setLeftSideShininess(2688.633F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(1270572.6F, wall0.getLength(), 0.01F);
      assertEquals((-2050.1057F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1251.685F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1251.685F), wall0.getXEnd(), 0.01F);
      assertEquals(1253.685F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1251.685F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(2.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2688.633F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-624.8425F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      
      boolean boolean0 = wall0.containsWallStartAt((-149.36977F), 7.305666E-4F, 2.0F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(1270572.6F, wall0.getLength(), 0.01F);
      assertEquals((-2050.1057F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1251.685F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1251.685F), wall0.getXEnd(), 0.01F);
      assertEquals(1253.685F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1251.685F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(2.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2688.633F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-624.8425F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertFalse(boolean0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(1270572.6F, wall0.getLength(), 0.01F);
      assertEquals((-2050.1057F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1251.685F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1251.685F), wall0.getXEnd(), 0.01F);
      assertEquals(1253.685F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1251.685F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(2.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2688.633F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-624.8425F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(2258, floatArray0.length);
      
      wall0.setLeftSideShininess((-1.0F));
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(1270572.6F, wall0.getLength(), 0.01F);
      assertEquals((-2050.1057F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1251.685F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getXEnd(), 0.01F);
      assertEquals(1253.685F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1251.685F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(2.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-624.8425F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      
      wall0.setYEnd(1.99F);
      assertEquals(1.99F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-1251.6914F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1251.685F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.00999999F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getXEnd(), 0.01F);
      assertEquals(1.995F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(2.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertEquals(10.114102F, wall0.getLength(), 0.01F);
      
      boolean boolean1 = wall0.containsWallStartAt(1.99F, 1173.101F, (-1251.685F));
      assertTrue(boolean1 == boolean0);
      assertEquals(1.99F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-1251.6914F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1251.685F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.00999999F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getXEnd(), 0.01F);
      assertEquals(1.995F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(2.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertEquals(10.114102F, wall0.getLength(), 0.01F);
      assertFalse(boolean1);
      
      Wall wall1 = new Wall((-3735.502F), 0.0F, 0.1F, 1.99F, (-56.1178F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1867.7009F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertEquals(3735.6025F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.995F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.99F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-56.1178F), wall1.getThickness(), 0.01F);
      assertEquals(3735.6025F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3735.502F), wall1.getXStart(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setHeight(float1);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1867.7009F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(3735.6025F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.995F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1251.685F), wall1.getHeight(), 0.01F);
      assertEquals(1.99F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-56.1178F), wall1.getThickness(), 0.01F);
      assertEquals(3735.6025F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3735.502F), wall1.getXStart(), 0.01F);
      assertNotSame(wall1, wall0);
      
      float float3 = wall0.getLeftSideShininess();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(1.99F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-1251.6914F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1251.685F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.00999999F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getXEnd(), 0.01F);
      assertEquals(1.995F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(2.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertEquals(10.114102F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), float3, 0.01F);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      wall0.move(0.0F, 0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      
      wall0.setXEnd((-705.96F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, 30.8F, (-2911.459F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(5509.086F, wall1.getLength(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(5509.086F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(5509.086F, wall1.getLength(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(5509.086F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(5509.086F, wall1.getLength(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(5509.086F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Integer integer0 = new Integer(2432);
      assertNotNull(integer0);
      assertEquals(2432, (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = integer0.equals(object0);
      assertFalse(boolean0);
      
      Integer integer1 = Integer.valueOf(1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      wall1.setLeftSideColor(integer1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(5509.086F, wall1.getLength(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1, (int)wall1.getLeftSideColor());
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(5509.086F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      
      Level level0 = new Level("Super class isn't cloneable", (-299.4678F), 0.0F, 0.0F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("Super class isn't cloneable", level0.getName());
      assertEquals((-299.4678F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      level0.setHeight((-2911.459F));
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("Super class isn't cloneable", level0.getName());
      assertEquals((-299.4678F), level0.getElevation(), 0.01F);
      assertEquals((-2911.459F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      
      wall1.setLevel(level0);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(5509.086F, wall1.getLength(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1, (int)wall1.getLeftSideColor());
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(5509.086F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("Super class isn't cloneable", level0.getName());
      assertEquals((-299.4678F), level0.getElevation(), 0.01F);
      assertEquals((-2911.459F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotSame(wall1, wall0);
      
      boolean boolean1 = wall1.containsWallStartAt(149.1502F, 0.0F, (-357.09F));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(5509.086F, wall1.getLength(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1, (int)wall1.getLeftSideColor());
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(5509.086F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(boolean1);
      assertNotSame(wall1, wall0);
      
      wall1.move(0.0F, 149.1502F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(164.5502F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(149.1502F, wall1.getYStart(), 0.01F);
      assertEquals(179.95021F, wall1.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(5509.086F, wall1.getLength(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1, (int)wall1.getLeftSideColor());
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(5509.086F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      wall0.setYEnd((-515.216F));
      assertEquals(515.216F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(515.216F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-257.608F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-515.216F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(515.216F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(515.216F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-257.608F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-515.216F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Wall wall0 = new Wall((-1907.0964F), 448.35F, 0.0F, 0.0F, 0.0F, 448.35F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1959.0902F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1959.0902F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(448.35F, wall0.getHeight(), 0.01F);
      assertEquals(448.35F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-953.5482F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(224.175F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1907.0964F), wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallStartAt((-3816.0552F), 448.35F, (-1907.0964F));
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1959.0902F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1959.0902F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(448.35F, wall0.getHeight(), 0.01F);
      assertEquals(448.35F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-953.5482F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(224.175F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1907.0964F), wall0.getXStart(), 0.01F);
      assertFalse(boolean0);
      
      float float0 = wall0.getYArcCircleCenter();
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1959.0902F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1959.0902F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(448.35F, wall0.getHeight(), 0.01F);
      assertEquals(448.35F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-953.5482F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(224.175F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1907.0964F), wall0.getXStart(), 0.01F);
      assertEquals(224.175F, float0, 0.01F);
      
      Float float1 = wall0.getArcExtent();
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1959.0902F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1959.0902F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(448.35F, wall0.getHeight(), 0.01F);
      assertEquals(448.35F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-953.5482F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(224.175F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1907.0964F), wall0.getXStart(), 0.01F);
      assertNull(float1);
      
      float float2 = wall0.getRightSideShininess();
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1959.0902F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1959.0902F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(448.35F, wall0.getHeight(), 0.01F);
      assertEquals(448.35F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-953.5482F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(224.175F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1907.0964F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Level level0 = new Level("", 779.9446F, (-5509.0F), (-1571.3F));
      assertTrue(level0.isVisible());
      assertEquals(779.9446F, level0.getElevation(), 0.01F);
      assertEquals((-5509.0F), level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-1571.3F), level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      level0.setHeight(0.0F);
      assertTrue(level0.isVisible());
      assertEquals(779.9446F, level0.getElevation(), 0.01F);
      assertEquals((-5509.0F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", (PropertyChangeListener) null);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      level0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertTrue(level0.isVisible());
      assertEquals(779.9446F, level0.getElevation(), 0.01F);
      assertEquals((-5509.0F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      wall1.setLevel(level0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(779.9446F, level0.getElevation(), 0.01F);
      assertEquals((-5509.0F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      HomeTexture homeTexture0 = wall1.getLeftSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(homeTexture0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setRightSideTexture((HomeTexture) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Level level1 = wall1.getLevel();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), level1.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(779.9446F, level1.getElevation(), 0.01F);
      assertNotNull(level1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertSame(level1, level0);
      
      int int0 = Float.floatToIntBits((-1.0F));
      assertEquals((-1082130432), int0);
      
      wall1.setHeight((Float) (-1.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, (-1564.5F), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-782.245F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1564.51F, wall0.getLength(), 0.01F);
      assertEquals((-1564.5F), wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1564.51F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-782.245F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1564.51F, wall0.getLength(), 0.01F);
      assertEquals((-1564.5F), wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1564.51F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(1564.51F, float0, 0.01F);
      
      Integer integer0 = new Integer((-39));
      assertNotNull(integer0);
      assertEquals((-39), (int)integer0);
      
      wall0.setRightSideColor(integer0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-782.245F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1564.51F, wall0.getLength(), 0.01F);
      assertEquals((-39), (int)wall0.getRightSideColor());
      assertEquals((-1564.5F), wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1564.51F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint(0.0F, (-1564.5F), (-1564.5F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-782.245F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1564.51F, wall0.getLength(), 0.01F);
      assertEquals((-39), (int)wall0.getRightSideColor());
      assertEquals((-1564.5F), wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1564.51F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertFalse(boolean0);
      
      Float float1 = new Float((double) (-1564.5F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1564.5F), (float)float1, 0.01F);
      
      float float2 = (-868.6339F);
      boolean boolean1 = Float.isFinite((-39));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float float3 = (-3534.024F);
      float float4 = Float.min((-868.6339F), (-3534.024F));
      assertNotEquals(float4, float0, 0.01F);
      assertEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertEquals((-3534.024F), float4, 0.01F);
      
      wall0.setArcExtent(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float3, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float4, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1564.5F), wall0.getArcExtent(), 0.01F);
      assertEquals(119049.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-782.245F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.86256944E8F, wall0.getLength(), 0.01F);
      assertEquals((-39), (int)wall0.getRightSideColor());
      assertEquals((-1564.5F), wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1564.51F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      
      wall0.setRightSideShininess(1564.51F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1564.5F), wall0.getArcExtent(), 0.01F);
      assertEquals(119049.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-782.245F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.86256944E8F, wall0.getLength(), 0.01F);
      assertEquals((-39), (int)wall0.getRightSideColor());
      assertEquals((-1564.5F), wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(1564.51F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1564.51F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      
      float float5 = (-1251.685F);
      Float float6 = Float.valueOf((-1251.685F));
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertEquals((float)float6, (float)float5, 0.01F);
      assertNotNull(float6);
      assertEquals((-1251.685F), (float)float6, 0.01F);
      
      // Undeclared exception!
      wall0.containsWallEndAt((-1564.5F), 2393.6F, (-1564.5F));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.move(0.0F, 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      Level level0 = new Level("grjCto*MkGt", 1115.983F, 0.1F, 0.0F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1115.983F, level0.getElevation(), 0.01F);
      assertEquals("grjCto*MkGt", level0.getName());
      assertEquals(0.1F, level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("grjCto*MkGt", (PropertyChangeListener) null);
      assertEquals("grjCto*MkGt", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      level0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1115.983F, level0.getElevation(), 0.01F);
      assertEquals("grjCto*MkGt", level0.getName());
      assertEquals(0.1F, level0.getFloorThickness(), 0.01F);
      assertEquals("grjCto*MkGt", propertyChangeListenerProxy0.getPropertyName());
      
      wall0.setLevel(level0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1115.983F, level0.getElevation(), 0.01F);
      assertEquals("grjCto*MkGt", level0.getName());
      assertEquals(0.1F, level0.getFloorThickness(), 0.01F);
      
      wall0.setXEnd((-705.96F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, 30.8F, (-2911.459F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(5509.086F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5509.086F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(5509.086F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5509.086F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(5509.086F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5509.086F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float0 = wall0.getLeftSideShininess();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(wall0, wall1);
      
      wall0.setXStart(1.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall0.isAtLevel((Level) null);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      
      Float float1 = wall0.getHeightAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(float1);
      assertNotSame(wall0, wall1);
      
      Wall wall2 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5509.086F, wall2.getLength(), 0.01F);
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(15.4F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals(30.8F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(5509.086F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotNull(wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall2.setYEnd((-413.6307F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5524.5063F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-206.81535F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals((-413.6307F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(5524.5063F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall2.setYEnd((-5509.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      float float2 = wall0.getXArcCircleCenter();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNotEquals(float2, float0, 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-352.48F), float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      Wall wall3 = wall2.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-705.96F), wall3.getXEnd(), 0.01F);
      assertEquals(706.96F, wall3.getLength(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertEquals(706.96F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals((-352.48F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-2911.459F), wall3.getThickness(), 0.01F);
      assertEquals(1.0F, wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertNull(wall3.getHeight());
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotNull(wall3);
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertSame(wall3, wall0);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      
      boolean boolean1 = wall0.containsWallEndAt(0.0F, 882.802F, 319.47F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertTrue(boolean1 == boolean0);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(boolean1);
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      boolean boolean2 = wall2.containsWallEndAt(0.0F, (-5509.0F), 30.8F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(boolean2);
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.move(0.0F, 5120.529F);
      assertEquals(5120.529F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5120.529F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5120.529F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Wall wall1 = new Wall(1564.51F, (-4793.5F), 0.0F, 0.0F, 0.0F, 2314.7422F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-2396.75F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2314.7422F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(5042.354F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(782.255F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1564.51F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4793.5F), wall1.getYStart(), 0.01F);
      assertEquals(5042.354F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(5120.529F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5120.529F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5120.529F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-2396.75F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2314.7422F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(5042.354F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(782.255F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1564.51F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4793.5F), wall1.getYStart(), 0.01F);
      assertEquals(5042.354F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(5120.529F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5120.529F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5120.529F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-2396.75F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2314.7422F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(5042.354F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(782.255F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1564.51F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4793.5F), wall1.getYStart(), 0.01F);
      assertEquals(5042.354F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float0 = wall1.getLeftSideShininess();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-2396.75F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2314.7422F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(5042.354F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(782.255F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1564.51F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4793.5F), wall1.getYStart(), 0.01F);
      assertEquals(5042.354F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(wall1, wall0);
      
      wall0.setXStart(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(5120.529F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5120.529F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5120.529F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      
      wall1.setLeftSideShininess(0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-2396.75F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2314.7422F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(5042.354F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(782.255F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1564.51F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4793.5F), wall1.getYStart(), 0.01F);
      assertEquals(5042.354F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall1.getWallAtEnd();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-2396.75F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2314.7422F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(5042.354F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(782.255F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1564.51F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4793.5F), wall1.getYStart(), 0.01F);
      assertEquals(5042.354F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(5120.529F, wall2.getYStart(), 0.01F);
      assertEquals(5120.529F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(5120.529F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotNull(wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      
      wall2.setYEnd(5120.529F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-2396.75F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2314.7422F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(5042.354F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(782.255F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1564.51F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4793.5F), wall1.getYStart(), 0.01F);
      assertEquals(5042.354F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(5120.529F, wall2.getYStart(), 0.01F);
      assertEquals(5120.529F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(5120.529F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      
      boolean boolean0 = wall0.containsWallStartAt(0.0F, 1151.63F, 718.4474F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(5120.529F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5120.529F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5120.529F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      
      boolean boolean1 = wall2.containsWallEndAt(266.4F, 0.0F, 39.814686F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-2396.75F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2314.7422F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(5042.354F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(782.255F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1564.51F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4793.5F), wall1.getYStart(), 0.01F);
      assertEquals(5042.354F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(5120.529F, wall2.getYStart(), 0.01F);
      assertEquals(5120.529F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(5120.529F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(boolean1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Wall wall0 = new Wall((-5509.0F), 0.0F, 0.0F, 0.0F, (-2911.459F), 0.0F);
      assertEquals(5509.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(5509.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-5509.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setXStart((-587.513F));
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(587.513F, wall0.getLength(), 0.01F);
      assertEquals((-293.7565F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(587.513F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-587.513F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      int int0 = Float.floatToIntBits(2.0F);
      assertEquals(1073741824, int0);
      
      wall0.setArcExtent((Float) 2.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(698.1976F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-293.7565F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(587.513F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-587.513F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(188.61888F, wall0.getYArcCircleCenter(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(698.1976F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-293.7565F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(587.513F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-587.513F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(188.61888F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(2, floatArray0.length);
      
      Integer integer0 = wall0.getRightSideColor();
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(698.1976F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-293.7565F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(587.513F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-587.513F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(188.61888F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Wall wall0 = new Wall((-2888.4116F), (-2888.4116F), (-3041.0F), (-2888.4116F), (-1897.74F));
      assertEquals(152.58838F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2888.4116F), wall0.getYEnd(), 0.01F);
      assertEquals((-3041.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2888.4116F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(152.58838F, wall0.getLength(), 0.01F);
      assertEquals((-2888.4116F), wall0.getYStart(), 0.01F);
      assertEquals((-2888.4116F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1897.74F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2964.7058F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(152.58838F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2888.4116F), wall0.getYEnd(), 0.01F);
      assertEquals((-3041.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2888.4116F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(152.58838F, wall0.getLength(), 0.01F);
      assertEquals((-2888.4116F), wall0.getYStart(), 0.01F);
      assertEquals((-2888.4116F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1897.74F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2964.7058F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(152.58838F, float0, 0.01F);
      
      wall0.setYStart((-39));
      assertEquals((-1463.7058F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-39.0F), wall0.getYStart(), 0.01F);
      assertEquals((-2888.4116F), wall0.getYEnd(), 0.01F);
      assertEquals((-3041.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2888.4116F), wall0.getXStart(), 0.01F);
      assertEquals(2853.4944F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1897.74F), wall0.getThickness(), 0.01F);
      assertEquals(2853.4944F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2964.7058F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float1 = new Float((double) (-39));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-39.0F), (float)float1, 0.01F);
      
      boolean boolean0 = Float.isFinite(0.9999999F);
      assertTrue(boolean0);
      
      int int0 = Float.floatToIntBits(0.0F);
      assertEquals(0, int0);
      
      int int1 = Float.floatToIntBits(0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = Float.floatToIntBits(0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      wall0.setArcExtent((Float) 0.0F);
      assertEquals((-39.0F), wall0.getYStart(), 0.01F);
      assertEquals(2.3267212E19F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2888.4116F), wall0.getYEnd(), 0.01F);
      assertEquals((-3041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.24597867E18F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-2888.4116F), wall0.getXStart(), 0.01F);
      assertEquals(2853.4944F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1897.74F), wall0.getThickness(), 0.01F);
      assertEquals(2853.4944F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float2 = Float.valueOf(787.02606F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(787.02606F, (float)float2, 0.01F);
      
      float float3 = wall0.getLength();
      assertNotEquals(float3, float0, 0.01F);
      assertEquals((-39.0F), wall0.getYStart(), 0.01F);
      assertEquals(2.3267212E19F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2888.4116F), wall0.getYEnd(), 0.01F);
      assertEquals((-3041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.24597867E18F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-2888.4116F), wall0.getXStart(), 0.01F);
      assertEquals(2853.4944F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1897.74F), wall0.getThickness(), 0.01F);
      assertEquals(2853.4944F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2853.4944F, float3, 0.01F);
      
      float float4 = wall0.getXArcCircleCenter();
      assertNotEquals(float4, float0, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertEquals((-39.0F), wall0.getYStart(), 0.01F);
      assertEquals(2.3267212E19F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2888.4116F), wall0.getYEnd(), 0.01F);
      assertEquals((-3041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.24597867E18F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-2888.4116F), wall0.getXStart(), 0.01F);
      assertEquals(2853.4944F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1897.74F), wall0.getThickness(), 0.01F);
      assertEquals(2853.4944F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.3267212E19F, float4, 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-39.0F), wall0.getYStart(), 0.01F);
      assertEquals(2.3267212E19F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2888.4116F), wall0.getYEnd(), 0.01F);
      assertEquals((-3041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.24597867E18F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-2888.4116F), wall0.getXStart(), 0.01F);
      assertEquals(2853.4944F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1897.74F), wall0.getThickness(), 0.01F);
      assertEquals(2853.4944F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2888.4116F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1.24597867E18F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2853.4944F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2888.4116F), wall1.getYEnd(), 0.01F);
      assertEquals(2.3267212E19F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-3041.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-39.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1897.74F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2853.4944F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall0.clone();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-39.0F), wall0.getYStart(), 0.01F);
      assertEquals(2.3267212E19F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2888.4116F), wall0.getYEnd(), 0.01F);
      assertEquals((-3041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.24597867E18F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-2888.4116F), wall0.getXStart(), 0.01F);
      assertEquals(2853.4944F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1897.74F), wall0.getThickness(), 0.01F);
      assertEquals(2853.4944F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-39.0F), wall2.getYStart(), 0.01F);
      assertEquals(2.3267212E19F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1897.74F), wall2.getThickness(), 0.01F);
      assertEquals((-2888.4116F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(2853.4944F, wall2.getLength(), 0.01F);
      assertEquals(2853.4944F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2888.4116F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getArcExtent(), 0.01F);
      assertEquals((-3041.0F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.24597867E18F), wall2.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall2);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall2.setYStart((-924.0F));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-39.0F), wall0.getYStart(), 0.01F);
      assertEquals(2.3267212E19F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2888.4116F), wall0.getYEnd(), 0.01F);
      assertEquals((-3041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.24597867E18F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-2888.4116F), wall0.getXStart(), 0.01F);
      assertEquals(2853.4944F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1897.74F), wall0.getThickness(), 0.01F);
      assertEquals(2853.4944F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1970.329F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1897.74F), wall2.getThickness(), 0.01F);
      assertEquals(1.6040638E19F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-2888.4116F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-2888.4116F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getArcExtent(), 0.01F);
      assertEquals((-924.0F), wall2.getYStart(), 0.01F);
      assertEquals(1970.329F, wall2.getLength(), 0.01F);
      assertEquals((-3041.0F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.24597867E18F), wall2.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      HomeTexture homeTexture0 = wall2.getRightSideTexture();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-39.0F), wall0.getYStart(), 0.01F);
      assertEquals(2.3267212E19F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2888.4116F), wall0.getYEnd(), 0.01F);
      assertEquals((-3041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.24597867E18F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-2888.4116F), wall0.getXStart(), 0.01F);
      assertEquals(2853.4944F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1897.74F), wall0.getThickness(), 0.01F);
      assertEquals(2853.4944F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1970.329F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1897.74F), wall2.getThickness(), 0.01F);
      assertEquals(1.6040638E19F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-2888.4116F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-2888.4116F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getArcExtent(), 0.01F);
      assertEquals((-924.0F), wall2.getYStart(), 0.01F);
      assertEquals(1970.329F, wall2.getLength(), 0.01F);
      assertEquals((-3041.0F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.24597867E18F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(homeTexture0);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      Integer integer0 = new Integer((-789));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals((-789), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = integer0.equals(object0);
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      wall0.setLeftSideColor(integer0);
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-789), (int)wall0.getLeftSideColor());
      assertEquals((-39.0F), wall0.getYStart(), 0.01F);
      assertEquals(2.3267212E19F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2888.4116F), wall0.getYEnd(), 0.01F);
      assertEquals((-3041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.24597867E18F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-2888.4116F), wall0.getXStart(), 0.01F);
      assertEquals(2853.4944F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1897.74F), wall0.getThickness(), 0.01F);
      assertEquals(2853.4944F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      
      Integer integer1 = wall1.getRightSideColor();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-789), (int)wall0.getLeftSideColor());
      assertEquals((-39.0F), wall0.getYStart(), 0.01F);
      assertEquals(2.3267212E19F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2888.4116F), wall0.getYEnd(), 0.01F);
      assertEquals((-3041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.24597867E18F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-2888.4116F), wall0.getXStart(), 0.01F);
      assertEquals(2853.4944F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1897.74F), wall0.getThickness(), 0.01F);
      assertEquals(2853.4944F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2888.4116F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1.24597867E18F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2853.4944F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2888.4116F), wall1.getYEnd(), 0.01F);
      assertEquals(2.3267212E19F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-3041.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-39.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1897.74F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2853.4944F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(integer1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Wall wall0 = new Wall((-619.237F), (-619.237F), (-619.237F), (-619.237F), 4195.48F);
      assertEquals((-619.237F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4195.48F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-619.237F), wall0.getXStart(), 0.01F);
      assertEquals((-619.237F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-619.237F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-619.237F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-619.237F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      TextureImage textureImage0 = mock(TextureImage.class, new ViolatedAssumptionAnswer());
      wall0.setPattern(textureImage0);
      assertEquals((-619.237F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4195.48F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-619.237F), wall0.getXStart(), 0.01F);
      assertEquals((-619.237F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-619.237F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-619.237F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-619.237F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      float float0 = wall0.getXStart();
      assertEquals((-619.237F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4195.48F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-619.237F), wall0.getXStart(), 0.01F);
      assertEquals((-619.237F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-619.237F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-619.237F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-619.237F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-619.237F), float0, 0.01F);
      
      Wall wall1 = new Wall((-1.0F), 2.0F, (-2583.0F), 2.0F, 0.01F, (-705.96F));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2582.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(2.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(2582.0F, wall1.getLength(), 0.01F);
      assertEquals((-2583.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1292.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotNull(wall1);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-619.237F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4195.48F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-619.237F), wall0.getXStart(), 0.01F);
      assertEquals((-619.237F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-619.237F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-619.237F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-619.237F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2582.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(2.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(2582.0F, wall1.getLength(), 0.01F);
      assertEquals((-2583.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1292.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-619.237F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4195.48F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-619.237F), wall0.getXStart(), 0.01F);
      assertEquals((-619.237F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-619.237F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-619.237F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-619.237F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2582.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(2.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(2582.0F, wall1.getLength(), 0.01F);
      assertEquals((-2583.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1292.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall0.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-619.237F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4195.48F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-619.237F), wall0.getXStart(), 0.01F);
      assertEquals((-619.237F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-619.237F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-619.237F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-619.237F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-2583.0F), wall2.getXEnd(), 0.01F);
      assertEquals(2.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals((-705.96F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2582.0F, wall2.getLength(), 0.01F);
      assertEquals(2.0F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2582.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-1292.0F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall2.getThickness(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertNotNull(wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      float float1 = wall2.getLeftSideShininess();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-619.237F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4195.48F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-619.237F), wall0.getXStart(), 0.01F);
      assertEquals((-619.237F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-619.237F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-619.237F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-619.237F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-2583.0F), wall2.getXEnd(), 0.01F);
      assertEquals(2.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals((-705.96F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2582.0F, wall2.getLength(), 0.01F);
      assertEquals(2.0F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2582.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-1292.0F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall2.getThickness(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      wall2.setXStart(30.8F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-619.237F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4195.48F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-619.237F), wall0.getXStart(), 0.01F);
      assertEquals((-619.237F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-619.237F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-619.237F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-619.237F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-2583.0F), wall2.getXEnd(), 0.01F);
      assertEquals(2.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(30.8F, wall2.getXStart(), 0.01F);
      assertEquals((-705.96F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2613.8F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1276.1F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall2.getThickness(), 0.01F);
      assertEquals(2613.8F, wall2.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      boolean boolean0 = wall2.isAtLevel((Level) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-619.237F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4195.48F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-619.237F), wall0.getXStart(), 0.01F);
      assertEquals((-619.237F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-619.237F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-619.237F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-619.237F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-2583.0F), wall2.getXEnd(), 0.01F);
      assertEquals(2.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(30.8F, wall2.getXStart(), 0.01F);
      assertEquals((-705.96F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2613.8F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1276.1F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall2.getThickness(), 0.01F);
      assertEquals(2613.8F, wall2.getLength(), 0.01F);
      assertTrue(boolean0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      Float float2 = wall1.getHeightAtEnd();
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1276.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2.0F, wall1.getYEnd(), 0.01F);
      assertEquals(2613.8F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(2613.8F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2583.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-705.96F), wall1.getHeight(), 0.01F);
      assertEquals(30.8F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(float2);
      assertSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      Wall wall3 = wall1.getWallAtStart();
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1276.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2.0F, wall1.getYEnd(), 0.01F);
      assertEquals(2613.8F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(2613.8F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2583.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-705.96F), wall1.getHeight(), 0.01F);
      assertEquals(30.8F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall3);
      assertSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      wall2.setYEnd(30.8F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-619.237F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4195.48F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-619.237F), wall0.getXStart(), 0.01F);
      assertEquals((-619.237F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-619.237F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-619.237F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-619.237F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-2583.0F), wall2.getXEnd(), 0.01F);
      assertEquals(2613.9587F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(30.8F, wall2.getXStart(), 0.01F);
      assertEquals((-705.96F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2.0F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1276.1F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2613.9587F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(16.4F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(30.8F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall2.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      wall1.setYEnd(0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1276.1F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(2613.8008F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals(2613.8008F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2583.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-705.96F), wall1.getHeight(), 0.01F);
      assertEquals(30.8F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      float float3 = wall2.getXArcCircleCenter();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals((-619.237F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4195.48F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-619.237F), wall0.getXStart(), 0.01F);
      assertEquals((-619.237F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-619.237F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-619.237F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-619.237F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-2583.0F), wall2.getXEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(30.8F, wall2.getXStart(), 0.01F);
      assertEquals((-705.96F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2.0F, wall2.getYStart(), 0.01F);
      assertEquals(2613.8008F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1276.1F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall2.getThickness(), 0.01F);
      assertEquals(2613.8008F, wall2.getLength(), 0.01F);
      assertEquals((-1276.1F), float3, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      Wall wall4 = wall2.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-619.237F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4195.48F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-619.237F), wall0.getXStart(), 0.01F);
      assertEquals((-619.237F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-619.237F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-619.237F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-619.237F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-2583.0F), wall2.getXEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(30.8F, wall2.getXStart(), 0.01F);
      assertEquals((-705.96F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2.0F, wall2.getYStart(), 0.01F);
      assertEquals(2613.8008F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1276.1F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall2.getThickness(), 0.01F);
      assertEquals(2613.8008F, wall2.getLength(), 0.01F);
      assertNull(wall4);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.move(0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      
      Level level0 = new Level("grjCto*MkGt", 1115.983F, 0.1F, 0.0F);
      assertEquals("grjCto*MkGt", level0.getName());
      assertEquals(0.1F, level0.getFloorThickness(), 0.01F);
      assertEquals(1115.983F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("grjCto*MkGt", (PropertyChangeListener) null);
      assertEquals("grjCto*MkGt", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      level0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals("grjCto*MkGt", level0.getName());
      assertEquals(0.1F, level0.getFloorThickness(), 0.01F);
      assertEquals(1115.983F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("grjCto*MkGt", propertyChangeListenerProxy0.getPropertyName());
      
      wall0.setLevel(level0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals("grjCto*MkGt", level0.getName());
      assertEquals(0.1F, level0.getFloorThickness(), 0.01F);
      assertEquals(1115.983F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      
      wall0.setXEnd((-705.96F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      
      Wall wall1 = new Wall((-5509.0F), 0.0F, (-1942.249F), 30.8F, (-2911.459F), (-1942.249F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(3566.884F, wall1.getLength(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3725.6245F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1942.249F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3566.884F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1942.249F), wall1.getXEnd(), 0.01F);
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3566.884F, wall1.getLength(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3725.6245F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1942.249F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3566.884F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1942.249F), wall1.getXEnd(), 0.01F);
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3566.884F, wall1.getLength(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3725.6245F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1942.249F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3566.884F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1942.249F), wall1.getXEnd(), 0.01F);
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float0 = new Float(0.0F);
      assertEquals(0.0F, float0, 0.01F);
      
      wall0.setXStart(1.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall0.isAtLevel((Level) null);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      
      Float float1 = wall0.getHeightAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(float1);
      assertNotSame(wall0, wall1);
      
      Wall wall2 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3725.6245F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(15.4F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(3566.884F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1942.249F), wall2.getHeight(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(30.8F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1942.249F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertEquals(3566.884F, wall2.getLength(), 0.01F);
      assertNotNull(wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      wall2.setYEnd((-413.6307F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3725.6245F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-206.81535F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getRightSideColor());
      assertEquals((-413.6307F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-1942.249F), wall2.getHeight(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1942.249F), wall2.getXEnd(), 0.01F);
      assertEquals(3590.655F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3590.655F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      boolean boolean1 = wall2.containsWallEndAt(0.0F, 1115.983F, 814.48474F);
      assertTrue(boolean1 == boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3725.6245F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-206.81535F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getRightSideColor());
      assertEquals((-413.6307F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-1942.249F), wall2.getHeight(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1942.249F), wall2.getXEnd(), 0.01F);
      assertEquals(3590.655F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3590.655F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      boolean boolean2 = wall1.containsWallEndAt(1115.983F, (-2233.1938F), (-1942.249F));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(3590.655F, wall1.getLength(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3590.655F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3725.6245F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1942.249F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-413.6307F), wall1.getYEnd(), 0.01F);
      assertEquals((-1942.249F), wall1.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals((-206.81535F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(boolean2);
      assertSame(wall1, wall2);
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Wall wall0 = new Wall(0.06560591F, (-3707.0703F), 0.06560591F, 0.06560591F, 0.06560591F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3707.136F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.06560591F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3707.0703F), wall0.getYStart(), 0.01F);
      assertEquals(3707.136F, wall0.getLength(), 0.01F);
      assertEquals(0.06560591F, wall0.getThickness(), 0.01F);
      assertEquals(0.06560591F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1853.5023F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.06560591F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.06560591F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((-3707.0703F));
      assertNotNull(float0);
      assertEquals((-3707.0703F), (float)float0, 0.01F);
      
      wall0.setHeightAtEnd(float0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3707.136F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.06560591F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3707.0703F), wall0.getYStart(), 0.01F);
      assertEquals(3707.136F, wall0.getLength(), 0.01F);
      assertEquals(0.06560591F, wall0.getThickness(), 0.01F);
      assertEquals(0.06560591F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1853.5023F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3707.0703F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.06560591F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.06560591F, wall0.getYEnd(), 0.01F);
      
      wall0.move((-3909.2454F), (-923.5F));
      assertEquals((-923.4344F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3909.1797F), wall0.getXStart(), 0.01F);
      assertEquals(3707.136F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3707.136F, wall0.getLength(), 0.01F);
      assertEquals(0.06560591F, wall0.getThickness(), 0.01F);
      assertEquals((-2777.0024F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3909.1797F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3909.1797F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4630.5703F), wall0.getYStart(), 0.01F);
      assertEquals((-3707.0703F), wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float float1 = wall0.getStartPointToEndPointDistance();
      assertEquals((-923.4344F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3909.1797F), wall0.getXStart(), 0.01F);
      assertEquals(3707.136F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3707.136F, wall0.getLength(), 0.01F);
      assertEquals(0.06560591F, wall0.getThickness(), 0.01F);
      assertEquals((-2777.0024F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3909.1797F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3909.1797F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4630.5703F), wall0.getYStart(), 0.01F);
      assertEquals((-3707.0703F), wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3707.136F, float1, 0.01F);
      
      Level level0 = wall0.getLevel();
      assertEquals((-923.4344F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3909.1797F), wall0.getXStart(), 0.01F);
      assertEquals(3707.136F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3707.136F, wall0.getLength(), 0.01F);
      assertEquals(0.06560591F, wall0.getThickness(), 0.01F);
      assertEquals((-2777.0024F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3909.1797F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3909.1797F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4630.5703F), wall0.getYStart(), 0.01F);
      assertEquals((-3707.0703F), wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(level0);
      
      float float2 = wall0.getRightSideShininess();
      assertNotEquals(float2, float1, 0.01F);
      assertEquals((-923.4344F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3909.1797F), wall0.getXStart(), 0.01F);
      assertEquals(3707.136F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3707.136F, wall0.getLength(), 0.01F);
      assertEquals(0.06560591F, wall0.getThickness(), 0.01F);
      assertEquals((-2777.0024F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3909.1797F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3909.1797F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4630.5703F), wall0.getYStart(), 0.01F);
      assertEquals((-3707.0703F), wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, float2, 0.01F);
      
      wall0.setYStart((-923.5F));
      assertEquals((-923.46716F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.06561279F, wall0.getLength(), 0.01F);
      assertEquals((-923.4344F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3909.1797F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.06560591F, wall0.getThickness(), 0.01F);
      assertEquals((-3909.1797F), wall0.getXEnd(), 0.01F);
      assertEquals(0.06561279F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3909.1797F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-923.5F), wall0.getYStart(), 0.01F);
      assertEquals((-3707.0703F), wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Integer integer0 = wall0.getLeftSideColor();
      assertEquals((-923.46716F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.06561279F, wall0.getLength(), 0.01F);
      assertEquals((-923.4344F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3909.1797F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.06560591F, wall0.getThickness(), 0.01F);
      assertEquals((-3909.1797F), wall0.getXEnd(), 0.01F);
      assertEquals(0.06561279F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3909.1797F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-923.5F), wall0.getYStart(), 0.01F);
      assertEquals((-3707.0703F), wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(integer0);
      
      wall0.setHeight(float0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertEquals((-923.46716F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3707.0703F), wall0.getHeight(), 0.01F);
      assertEquals(0.06561279F, wall0.getLength(), 0.01F);
      assertEquals((-923.4344F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3909.1797F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.06560591F, wall0.getThickness(), 0.01F);
      assertEquals((-3909.1797F), wall0.getXEnd(), 0.01F);
      assertEquals(0.06561279F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3909.1797F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-923.5F), wall0.getYStart(), 0.01F);
      assertEquals((-3707.0703F), wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float3 = wall0.getHeightAtEnd();
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((-923.46716F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3707.0703F), wall0.getHeight(), 0.01F);
      assertEquals(0.06561279F, wall0.getLength(), 0.01F);
      assertEquals((-923.4344F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3909.1797F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.06560591F, wall0.getThickness(), 0.01F);
      assertEquals((-3909.1797F), wall0.getXEnd(), 0.01F);
      assertEquals(0.06561279F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3909.1797F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-923.5F), wall0.getYStart(), 0.01F);
      assertEquals((-3707.0703F), wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(float3);
      assertEquals((-3707.0703F), (float)float3, 0.01F);
      
      wall0.setHeightAtEnd(float0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertEquals((-923.46716F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3707.0703F), wall0.getHeight(), 0.01F);
      assertEquals(0.06561279F, wall0.getLength(), 0.01F);
      assertEquals((-923.4344F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3909.1797F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.06560591F, wall0.getThickness(), 0.01F);
      assertEquals((-3909.1797F), wall0.getXEnd(), 0.01F);
      assertEquals(0.06561279F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3909.1797F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-923.5F), wall0.getYStart(), 0.01F);
      assertEquals((-3707.0703F), wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setRightSideColor((Integer) null);
      assertEquals((-923.46716F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3707.0703F), wall0.getHeight(), 0.01F);
      assertEquals(0.06561279F, wall0.getLength(), 0.01F);
      assertEquals((-923.4344F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3909.1797F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.06560591F, wall0.getThickness(), 0.01F);
      assertEquals((-3909.1797F), wall0.getXEnd(), 0.01F);
      assertEquals(0.06561279F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3909.1797F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-923.5F), wall0.getYStart(), 0.01F);
      assertEquals((-3707.0703F), wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setHeightAtEnd(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((-923.46716F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3707.0703F), wall0.getHeight(), 0.01F);
      assertEquals(0.06561279F, wall0.getLength(), 0.01F);
      assertEquals((-923.4344F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3909.1797F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.06560591F, wall0.getThickness(), 0.01F);
      assertEquals((-3909.1797F), wall0.getXEnd(), 0.01F);
      assertEquals(0.06561279F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3909.1797F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-923.5F), wall0.getYStart(), 0.01F);
      assertEquals((-3707.0703F), wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Wall wall0 = new Wall(1853.6055F, 1853.6055F, 1853.6055F, (-656.84F), (-1935.2F), (-656.84F));
      assertEquals((-1935.2F), wall0.getThickness(), 0.01F);
      assertEquals(1853.6055F, wall0.getXStart(), 0.01F);
      assertEquals(1853.6055F, wall0.getYStart(), 0.01F);
      assertEquals(2510.4456F, wall0.getLength(), 0.01F);
      assertEquals((-656.84F), wall0.getHeight(), 0.01F);
      assertEquals(2510.4456F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(598.3827F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1853.6055F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1853.6055F, wall0.getXEnd(), 0.01F);
      assertEquals((-656.84F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallEndAt((-1.0F), (-1826.36F), 1853.6055F);
      assertEquals((-1935.2F), wall0.getThickness(), 0.01F);
      assertEquals(1853.6055F, wall0.getXStart(), 0.01F);
      assertEquals(1853.6055F, wall0.getYStart(), 0.01F);
      assertEquals(2510.4456F, wall0.getLength(), 0.01F);
      assertEquals((-656.84F), wall0.getHeight(), 0.01F);
      assertEquals(2510.4456F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(598.3827F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1853.6055F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1853.6055F, wall0.getXEnd(), 0.01F);
      assertEquals((-656.84F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(boolean0);
      
      Float float0 = new Float(1853.6055F);
      assertNotNull(float0);
      assertEquals(1853.6055F, (float)float0, 0.01F);
      
      boolean boolean1 = Float.isFinite(1853.6055F);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float float1 = Float.max(3763.2007F, (-1902.3F));
      assertEquals(3763.2007F, float1, 0.01F);
      
      float float2 = Float.min(1853.6055F, 1853.6055F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(1853.6055F, float2, 0.01F);
      
      wall0.setHeightAtEnd(float0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      assertEquals((-1935.2F), wall0.getThickness(), 0.01F);
      assertEquals(1853.6055F, wall0.getXStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1853.6055F, wall0.getYStart(), 0.01F);
      assertEquals(2510.4456F, wall0.getLength(), 0.01F);
      assertEquals((-656.84F), wall0.getHeight(), 0.01F);
      assertEquals(2510.4456F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(598.3827F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1853.6055F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1853.6055F, wall0.getXEnd(), 0.01F);
      assertEquals((-656.84F), wall0.getYEnd(), 0.01F);
      assertEquals(1853.6055F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float float3 = wall0.getThickness();
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals((-1935.2F), wall0.getThickness(), 0.01F);
      assertEquals(1853.6055F, wall0.getXStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1853.6055F, wall0.getYStart(), 0.01F);
      assertEquals(2510.4456F, wall0.getLength(), 0.01F);
      assertEquals((-656.84F), wall0.getHeight(), 0.01F);
      assertEquals(2510.4456F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(598.3827F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1853.6055F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1853.6055F, wall0.getXEnd(), 0.01F);
      assertEquals((-656.84F), wall0.getYEnd(), 0.01F);
      assertEquals(1853.6055F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1935.2F), float3, 0.01F);
      
      float float4 = wall0.getThickness();
      assertEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertEquals((-1935.2F), wall0.getThickness(), 0.01F);
      assertEquals(1853.6055F, wall0.getXStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1853.6055F, wall0.getYStart(), 0.01F);
      assertEquals(2510.4456F, wall0.getLength(), 0.01F);
      assertEquals((-656.84F), wall0.getHeight(), 0.01F);
      assertEquals(2510.4456F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(598.3827F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1853.6055F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1853.6055F, wall0.getXEnd(), 0.01F);
      assertEquals((-656.84F), wall0.getYEnd(), 0.01F);
      assertEquals(1853.6055F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1935.2F), float4, 0.01F);
      
      Level level0 = wall0.getLevel();
      assertEquals((-1935.2F), wall0.getThickness(), 0.01F);
      assertEquals(1853.6055F, wall0.getXStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1853.6055F, wall0.getYStart(), 0.01F);
      assertEquals(2510.4456F, wall0.getLength(), 0.01F);
      assertEquals((-656.84F), wall0.getHeight(), 0.01F);
      assertEquals(2510.4456F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(598.3827F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1853.6055F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1853.6055F, wall0.getXEnd(), 0.01F);
      assertEquals((-656.84F), wall0.getYEnd(), 0.01F);
      assertEquals(1853.6055F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(level0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1935.2F), wall0.getThickness(), 0.01F);
      assertEquals(1853.6055F, wall0.getXStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1853.6055F, wall0.getYStart(), 0.01F);
      assertEquals(2510.4456F, wall0.getLength(), 0.01F);
      assertEquals((-656.84F), wall0.getHeight(), 0.01F);
      assertEquals(2510.4456F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(598.3827F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1853.6055F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1853.6055F, wall0.getXEnd(), 0.01F);
      assertEquals((-656.84F), wall0.getYEnd(), 0.01F);
      assertEquals(1853.6055F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1853.6055F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1853.6055F, wall1.getXEnd(), 0.01F);
      assertEquals(2510.4456F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1935.2F), wall1.getThickness(), 0.01F);
      assertEquals(1853.6055F, wall1.getYStart(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1853.6055F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-656.84F), wall1.getHeight(), 0.01F);
      assertEquals(2510.4456F, wall1.getLength(), 0.01F);
      assertEquals(1853.6055F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(598.3827F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-656.84F), wall1.getYEnd(), 0.01F);
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setRightSideShininess((-1.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1935.2F), wall0.getThickness(), 0.01F);
      assertEquals(1853.6055F, wall0.getXStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1853.6055F, wall0.getYStart(), 0.01F);
      assertEquals(2510.4456F, wall0.getLength(), 0.01F);
      assertEquals((-656.84F), wall0.getHeight(), 0.01F);
      assertEquals(2510.4456F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(598.3827F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1853.6055F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1853.6055F, wall0.getXEnd(), 0.01F);
      assertEquals((-656.84F), wall0.getYEnd(), 0.01F);
      assertEquals(1853.6055F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1853.6055F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1853.6055F, wall1.getXEnd(), 0.01F);
      assertEquals(2510.4456F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1935.2F), wall1.getThickness(), 0.01F);
      assertEquals(1853.6055F, wall1.getYStart(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1853.6055F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-656.84F), wall1.getHeight(), 0.01F);
      assertEquals(2510.4456F, wall1.getLength(), 0.01F);
      assertEquals(1853.6055F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(598.3827F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-656.84F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float5 = wall1.getYArcCircleCenter();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertEquals((-1935.2F), wall0.getThickness(), 0.01F);
      assertEquals(1853.6055F, wall0.getXStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1853.6055F, wall0.getYStart(), 0.01F);
      assertEquals(2510.4456F, wall0.getLength(), 0.01F);
      assertEquals((-656.84F), wall0.getHeight(), 0.01F);
      assertEquals(2510.4456F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(598.3827F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1853.6055F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1853.6055F, wall0.getXEnd(), 0.01F);
      assertEquals((-656.84F), wall0.getYEnd(), 0.01F);
      assertEquals(1853.6055F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1853.6055F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1853.6055F, wall1.getXEnd(), 0.01F);
      assertEquals(2510.4456F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1935.2F), wall1.getThickness(), 0.01F);
      assertEquals(1853.6055F, wall1.getYStart(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1853.6055F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-656.84F), wall1.getHeight(), 0.01F);
      assertEquals(2510.4456F, wall1.getLength(), 0.01F);
      assertEquals(1853.6055F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(598.3827F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-656.84F), wall1.getYEnd(), 0.01F);
      assertEquals(598.3827F, float5, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Float float6 = wall0.getHeightAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertEquals((-1935.2F), wall0.getThickness(), 0.01F);
      assertEquals(1853.6055F, wall0.getXStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1853.6055F, wall0.getYStart(), 0.01F);
      assertEquals(2510.4456F, wall0.getLength(), 0.01F);
      assertEquals((-656.84F), wall0.getHeight(), 0.01F);
      assertEquals(2510.4456F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(598.3827F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1853.6055F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1853.6055F, wall0.getXEnd(), 0.01F);
      assertEquals((-656.84F), wall0.getYEnd(), 0.01F);
      assertEquals(1853.6055F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(float6);
      assertEquals(1853.6055F, (float)float6, 0.01F);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-39.814686F), 0.0F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      wall0.setXEnd(0.0F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, (-5509.0F), (-39.814686F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(7790.9023F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(7790.9023F, wall1.getLength(), 0.01F);
      assertEquals((-39.814686F), wall1.getThickness(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotNull(wall1);
      
      boolean boolean0 = wall1.containsWallEndAt(0.0F, 0.0F, (-39.814686F));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(7790.9023F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(7790.9023F, wall1.getLength(), 0.01F);
      assertEquals((-39.814686F), wall1.getThickness(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(boolean0);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(7790.9023F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(7790.9023F, wall1.getLength(), 0.01F);
      assertEquals((-39.814686F), wall1.getThickness(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(7790.9023F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(7790.9023F, wall1.getLength(), 0.01F);
      assertEquals((-39.814686F), wall1.getThickness(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setXStart(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(7790.9023F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(7790.9023F, wall1.getLength(), 0.01F);
      assertEquals((-39.814686F), wall1.getThickness(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = new Wall((-5509.0F), 2552.0F, 0.0F, 253.78746F, (-1411.92F), 1.15675302E9F);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(1402.8937F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1.15675302E9F, wall2.getHeight(), 0.01F);
      assertEquals(253.78746F, wall2.getYEnd(), 0.01F);
      assertEquals(5969.159F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2552.0F, wall2.getYStart(), 0.01F);
      assertEquals(5969.159F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1411.92F), wall2.getThickness(), 0.01F);
      assertNotNull(wall2);
      
      wall0.setWallAtStart(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1402.8937F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1.15675302E9F, wall2.getHeight(), 0.01F);
      assertEquals(253.78746F, wall2.getYEnd(), 0.01F);
      assertEquals(5969.159F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2552.0F, wall2.getYStart(), 0.01F);
      assertEquals(5969.159F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1411.92F), wall2.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      wall0.setLeftSideShininess((-39.814686F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-39.814686F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      wall1.setYEnd(0.0F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals((-39.814686F), wall1.getThickness(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(5509.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(5509.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      boolean boolean1 = wall0.containsWallStartAt(2116.8F, (-515.216F), 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertTrue(boolean1 == boolean0);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-39.814686F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-39.814686F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      Wall wall3 = new Wall(2116.8F, 2985.6587F, 0.0F, 0.0F, 2606.0F);
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertEquals(1058.4F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(2985.6587F, wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(3659.918F, wall3.getLength(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(2606.0F, wall3.getThickness(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals(3659.918F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(1492.8293F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(2116.8F, wall3.getXStart(), 0.01F);
      assertNotNull(wall3);
      
      float[][] floatArray1 = wall3.getPoints();
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1058.4F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(2985.6587F, wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(3659.918F, wall3.getLength(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(2606.0F, wall3.getThickness(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals(3659.918F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(1492.8293F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(2116.8F, wall3.getXStart(), 0.01F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean2 = wall0.isTrapezoidal();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-39.814686F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(boolean2);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-39.814686F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(homeTexture0);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Wall wall0 = new Wall((-55.14081F), (-55.14081F), (-2466.66F), (-4114.412F), (-1657.2904F), (-829.7401F));
      assertEquals((-2084.7764F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-4114.412F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-829.7401F), wall0.getHeight(), 0.01F);
      assertEquals(4721.5576F, wall0.getLength(), 0.01F);
      assertEquals((-55.14081F), wall0.getYStart(), 0.01F);
      assertEquals((-55.14081F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1657.2904F), wall0.getThickness(), 0.01F);
      assertEquals((-2466.66F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4721.5576F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1260.9004F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYEnd(615.2F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(280.0296F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-829.7401F), wall0.getHeight(), 0.01F);
      assertEquals(2502.9546F, wall0.getLength(), 0.01F);
      assertEquals((-55.14081F), wall0.getYStart(), 0.01F);
      assertEquals(615.2F, wall0.getYEnd(), 0.01F);
      assertEquals((-55.14081F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2502.9546F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1657.2904F), wall0.getThickness(), 0.01F);
      assertEquals((-2466.66F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1260.9004F), wall0.getXArcCircleCenter(), 0.01F);
      
      int int0 = Float.floatToIntBits(0.0F);
      assertEquals(0, int0);
      
      wall0.setHeight((Float) 1.0F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(280.0296F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2502.9546F, wall0.getLength(), 0.01F);
      assertEquals((-55.14081F), wall0.getYStart(), 0.01F);
      assertEquals(615.2F, wall0.getYEnd(), 0.01F);
      assertEquals((-55.14081F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2502.9546F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1657.2904F), wall0.getThickness(), 0.01F);
      assertEquals((-2466.66F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1260.9004F), wall0.getXArcCircleCenter(), 0.01F);
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(wall0.getLeftSideColor());
      assertEquals(280.0296F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2502.9546F, wall0.getLength(), 0.01F);
      assertEquals((-55.14081F), wall0.getYStart(), 0.01F);
      assertEquals(615.2F, wall0.getYEnd(), 0.01F);
      assertEquals((-55.14081F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2502.9546F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1657.2904F), wall0.getThickness(), 0.01F);
      assertEquals((-2466.66F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1260.9004F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(integer0);
      
      Float float0 = new Float(0.90039F);
      assertNotNull(float0);
      assertEquals(0.90039F, (float)float0, 0.01F);
      
      boolean boolean0 = Float.isFinite(0);
      assertTrue(boolean0);
      
      wall0.setArcExtent(float0);
      assertEquals((-2214.84F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.90039F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1954.4105F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-55.14081F), wall0.getYStart(), 0.01F);
      assertEquals(2589.5452F, wall0.getLength(), 0.01F);
      assertEquals(615.2F, wall0.getYEnd(), 0.01F);
      assertEquals((-55.14081F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2502.9546F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1657.2904F), wall0.getThickness(), 0.01F);
      assertEquals((-2466.66F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float float1 = new Integer(0);
      assertEquals(0, float1, 0.01F);
      
      Integer integer1 = Integer.getInteger("%W-[");
      assertNull(integer1);
      
      float float2 = wall0.getXArcCircleCenter();
      assertEquals((-2214.84F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.90039F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1954.4105F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-55.14081F), wall0.getYStart(), 0.01F);
      assertEquals(2589.5452F, wall0.getLength(), 0.01F);
      assertEquals(615.2F, wall0.getYEnd(), 0.01F);
      assertEquals((-55.14081F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2502.9546F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1657.2904F), wall0.getThickness(), 0.01F);
      assertEquals((-2466.66F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1954.4105F), float2, 0.01F);
      
      wall0.setYStart((-55.14081F));
      assertEquals((-2214.84F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.90039F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1954.4105F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-55.14081F), wall0.getYStart(), 0.01F);
      assertEquals(2589.5452F, wall0.getLength(), 0.01F);
      assertEquals(615.2F, wall0.getYEnd(), 0.01F);
      assertEquals((-55.14081F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2502.9546F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1657.2904F), wall0.getThickness(), 0.01F);
      assertEquals((-2466.66F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals((-2214.84F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.90039F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1954.4105F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-55.14081F), wall0.getYStart(), 0.01F);
      assertEquals(2589.5452F, wall0.getLength(), 0.01F);
      assertEquals(615.2F, wall0.getYEnd(), 0.01F);
      assertEquals((-55.14081F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2502.9546F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1657.2904F), wall0.getThickness(), 0.01F);
      assertEquals((-2466.66F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals((-2214.84F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.90039F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1954.4105F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-55.14081F), wall0.getYStart(), 0.01F);
      assertEquals(2589.5452F, wall0.getLength(), 0.01F);
      assertEquals(615.2F, wall0.getYEnd(), 0.01F);
      assertEquals((-55.14081F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2502.9546F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1657.2904F), wall0.getThickness(), 0.01F);
      assertEquals((-2466.66F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Integer integer2 = wall0.getRightSideColor();
      assertEquals((-2214.84F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.90039F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1954.4105F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-55.14081F), wall0.getYStart(), 0.01F);
      assertEquals(2589.5452F, wall0.getLength(), 0.01F);
      assertEquals(615.2F, wall0.getYEnd(), 0.01F);
      assertEquals((-55.14081F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2502.9546F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1657.2904F), wall0.getThickness(), 0.01F);
      assertEquals((-2466.66F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(integer2);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals((-2214.84F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.90039F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1954.4105F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-55.14081F), wall0.getYStart(), 0.01F);
      assertEquals(2589.5452F, wall0.getLength(), 0.01F);
      assertEquals(615.2F, wall0.getYEnd(), 0.01F);
      assertEquals((-55.14081F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2502.9546F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1657.2904F), wall0.getThickness(), 0.01F);
      assertEquals((-2466.66F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float3 = wall0.getHeight();
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((-2214.84F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.90039F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1954.4105F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-55.14081F), wall0.getYStart(), 0.01F);
      assertEquals(2589.5452F, wall0.getLength(), 0.01F);
      assertEquals(615.2F, wall0.getYEnd(), 0.01F);
      assertEquals((-55.14081F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2502.9546F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1657.2904F), wall0.getThickness(), 0.01F);
      assertEquals((-2466.66F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(float3);
      assertEquals(1.0F, (float)float3, 0.01F);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-39.814686F), (-2941.5867F));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      wall0.setXEnd(0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-2941.5867F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-39.814686F), wall1.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(39.814686F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-2941.5867F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-39.814686F), wall1.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(39.814686F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-2941.5867F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-39.814686F), wall1.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(39.814686F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-2941.5867F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-39.814686F), wall1.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(39.814686F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setXStart(1.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotSame(wall0, wall1);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-2941.5867F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-39.814686F), wall1.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(39.814686F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setYEnd((-307.75F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-2941.5867F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(307.75F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-307.75F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-153.875F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(307.75F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      boolean boolean0 = wall1.containsWallStartAt(2.0F, 0.0F, (-1651.2987F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-2941.5867F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(307.75F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-307.75F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-153.875F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(307.75F, wall1.getLength(), 0.01F);
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      
      float[][] floatArray1 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      
      Wall wall2 = wall1.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-2941.5867F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(307.75F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-307.75F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-153.875F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(307.75F, wall1.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals((-2941.5867F), wall2.getThickness(), 0.01F);
      assertEquals((-19.907343F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.5F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(39.827244F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-39.814686F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(39.827244F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall2);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 440.7551F, (-120.36F), 0.0F);
      assertEquals(440.7551F, wall0.getXEnd(), 0.01F);
      assertEquals((-120.36F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(456.8934F, wall0.getLength(), 0.01F);
      assertEquals((-60.18F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(220.37755F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(456.8934F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallStartAt(0.0F, (-2289.0F), (-120.36F));
      assertEquals(440.7551F, wall0.getXEnd(), 0.01F);
      assertEquals((-120.36F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(456.8934F, wall0.getLength(), 0.01F);
      assertEquals((-60.18F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(220.37755F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(456.8934F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(boolean0);
      
      Float float0 = new Float(440.7551F);
      assertNotNull(float0);
      assertEquals(440.7551F, (float)float0, 0.01F);
      
      Float float1 = new Float(0.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      float float2 = float1.floatValue();
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      
      boolean boolean1 = wall0.intersectsRectangle(2375.0F, 0.0F, 0.0F, (-2289.0F));
      assertFalse(boolean1 == boolean0);
      assertEquals(440.7551F, wall0.getXEnd(), 0.01F);
      assertEquals((-120.36F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(456.8934F, wall0.getLength(), 0.01F);
      assertEquals((-60.18F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(220.37755F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(456.8934F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(boolean1);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(440.7551F, wall0.getXEnd(), 0.01F);
      assertEquals((-120.36F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(456.8934F, wall0.getLength(), 0.01F);
      assertEquals((-60.18F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(220.37755F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(456.8934F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-60.18F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(456.8934F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(456.8934F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(220.37755F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(440.7551F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-120.36F), wall1.getYEnd(), 0.01F);
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(440.7551F, wall0.getXEnd(), 0.01F);
      assertEquals((-120.36F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(456.8934F, wall0.getLength(), 0.01F);
      assertEquals((-60.18F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(220.37755F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(456.8934F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-60.18F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(456.8934F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(456.8934F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(220.37755F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(440.7551F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-120.36F), wall1.getYEnd(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(440.7551F, wall0.getXEnd(), 0.01F);
      assertEquals((-120.36F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(456.8934F, wall0.getLength(), 0.01F);
      assertEquals((-60.18F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(220.37755F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(456.8934F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-60.18F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(456.8934F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(456.8934F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(220.37755F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(440.7551F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-120.36F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Float float3 = new Float(2375.0F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      assertEquals(2375.0F, (float)float3, 0.01F);
      
      float float4 = float3.floatValue();
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertEquals(2375.0F, float4, 0.01F);
      
      wall0.setHeightAtEnd(float3);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float4, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(440.7551F, wall0.getXEnd(), 0.01F);
      assertEquals((-120.36F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(456.8934F, wall0.getLength(), 0.01F);
      assertEquals((-60.18F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2375.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(220.37755F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(456.8934F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      
      wall1.move((-1993.0092F), 3053.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(440.7551F, wall0.getXEnd(), 0.01F);
      assertEquals((-120.36F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(456.8934F, wall0.getLength(), 0.01F);
      assertEquals((-60.18F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2375.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(220.37755F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(456.8934F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1772.6316F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(456.89346F, wall1.getLength(), 0.01F);
      assertEquals((-1552.254F), wall1.getXEnd(), 0.01F);
      assertEquals(3053.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(456.89346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(2992.8198F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1993.0092F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2932.64F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float5 = wall1.getStartPointToEndPointDistance();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertEquals(440.7551F, wall0.getXEnd(), 0.01F);
      assertEquals((-120.36F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(456.8934F, wall0.getLength(), 0.01F);
      assertEquals((-60.18F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2375.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(220.37755F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(456.8934F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1772.6316F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(456.89346F, wall1.getLength(), 0.01F);
      assertEquals((-1552.254F), wall1.getXEnd(), 0.01F);
      assertEquals(3053.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(456.89346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(2992.8198F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1993.0092F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2932.64F, wall1.getYEnd(), 0.01F);
      assertEquals(456.89346F, float5, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Level level0 = wall0.getLevel();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(440.7551F, wall0.getXEnd(), 0.01F);
      assertEquals((-120.36F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(456.8934F, wall0.getLength(), 0.01F);
      assertEquals((-60.18F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2375.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(220.37755F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(456.8934F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(level0);
      assertNotSame(wall0, wall1);
      
      float float6 = wall1.getRightSideShininess();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float6, float5, 0.01F);
      assertNotEquals(float6, float4, 0.01F);
      assertEquals(float6, float2, 0.01F);
      assertEquals(440.7551F, wall0.getXEnd(), 0.01F);
      assertEquals((-120.36F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(456.8934F, wall0.getLength(), 0.01F);
      assertEquals((-60.18F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2375.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(220.37755F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(456.8934F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1772.6316F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(456.89346F, wall1.getLength(), 0.01F);
      assertEquals((-1552.254F), wall1.getXEnd(), 0.01F);
      assertEquals(3053.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(456.89346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(2992.8198F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1993.0092F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2932.64F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, float6, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      wall1.setYStart(0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(440.7551F, wall0.getXEnd(), 0.01F);
      assertEquals((-120.36F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(456.8934F, wall0.getLength(), 0.01F);
      assertEquals((-60.18F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2375.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(220.37755F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(456.8934F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1772.6316F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1552.254F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1466.325F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2965.5662F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2965.5662F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals((-1993.0092F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2932.64F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Integer integer0 = wall1.getLeftSideColor();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(440.7551F, wall0.getXEnd(), 0.01F);
      assertEquals((-120.36F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(456.8934F, wall0.getLength(), 0.01F);
      assertEquals((-60.18F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2375.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(220.37755F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(456.8934F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1772.6316F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1552.254F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1466.325F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2965.5662F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2965.5662F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals((-1993.0092F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2932.64F, wall1.getYEnd(), 0.01F);
      assertNull(integer0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Float float7 = new Float(2375.0F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotNull(float7);
      assertEquals(2375.0F, (float)float7, 0.01F);
      
      wall0.setHeight(float7);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertEquals(440.7551F, wall0.getXEnd(), 0.01F);
      assertEquals((-120.36F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(456.8934F, wall0.getLength(), 0.01F);
      assertEquals((-60.18F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2375.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(220.37755F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2375.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(456.8934F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      
      Float float8 = wall0.getHeightAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertEquals(440.7551F, wall0.getXEnd(), 0.01F);
      assertEquals((-120.36F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(456.8934F, wall0.getLength(), 0.01F);
      assertEquals((-60.18F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2375.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(220.37755F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2375.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(456.8934F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(float8);
      assertEquals(2375.0F, (float)float8, 0.01F);
      assertNotSame(wall0, wall1);
      
      Float float9 = new Float((-1386.04484));
      assertNotEquals((float)float9, (float)float0, 0.01F);
      assertNotEquals((float)float9, (float)float3, 0.01F);
      assertNotEquals((float)float9, (float)float7, 0.01F);
      assertNotEquals((float)float9, (float)float6, 0.01F);
      assertNotEquals((float)float9, (float)float2, 0.01F);
      assertNotEquals((float)float9, (float)float1, 0.01F);
      assertNotEquals((float)float9, (float)float8, 0.01F);
      assertNotEquals((float)float9, (float)float5, 0.01F);
      assertNotEquals((float)float9, (float)float4, 0.01F);
      assertNotNull(float9);
      assertEquals((-1386.0448F), (float)float9, 0.01F);
      
      wall0.setHeightAtEnd(float9);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float9, (float)float0, 0.01F);
      assertNotEquals((float)float9, (float)float3, 0.01F);
      assertNotEquals((float)float9, (float)float7, 0.01F);
      assertNotEquals((float)float9, (float)float6, 0.01F);
      assertNotEquals((float)float9, (float)float2, 0.01F);
      assertNotEquals((float)float9, (float)float1, 0.01F);
      assertNotEquals((float)float9, (float)float8, 0.01F);
      assertNotEquals((float)float9, (float)float5, 0.01F);
      assertNotEquals((float)float9, (float)float4, 0.01F);
      assertEquals(440.7551F, wall0.getXEnd(), 0.01F);
      assertEquals((-120.36F), wall0.getYEnd(), 0.01F);
      assertEquals((-1386.0448F), wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(456.8934F, wall0.getLength(), 0.01F);
      assertEquals((-60.18F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(220.37755F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2375.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(456.8934F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      
      Wall.Property[] wall_PropertyArray1 = Wall.Property.values();
      assertFalse(wall_PropertyArray1.equals((Object)wall_PropertyArray0));
      assertNotNull(wall_PropertyArray1);
      assertEquals(18, wall_PropertyArray1.length);
      assertNotSame(wall_PropertyArray1, wall_PropertyArray0);
      
      boolean boolean2 = wall0.isTrapezoidal();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(440.7551F, wall0.getXEnd(), 0.01F);
      assertEquals((-120.36F), wall0.getYEnd(), 0.01F);
      assertEquals((-1386.0448F), wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(456.8934F, wall0.getLength(), 0.01F);
      assertEquals((-60.18F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(220.37755F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2375.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(456.8934F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(boolean2);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Wall wall0 = new Wall((-1907.0964F), 448.35F, 0.0F, 0.0F, 0.0F, 448.35F);
      assertEquals(1959.0902F, wall0.getLength(), 0.01F);
      assertEquals(448.35F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1907.0964F), wall0.getXStart(), 0.01F);
      assertEquals(1959.0902F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-953.5482F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(224.175F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(448.35F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getYArcCircleCenter();
      assertEquals(1959.0902F, wall0.getLength(), 0.01F);
      assertEquals(448.35F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1907.0964F), wall0.getXStart(), 0.01F);
      assertEquals(1959.0902F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-953.5482F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(224.175F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(448.35F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(224.175F, float0, 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1959.0902F, wall0.getLength(), 0.01F);
      assertEquals(448.35F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1907.0964F), wall0.getXStart(), 0.01F);
      assertEquals(1959.0902F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-953.5482F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(224.175F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(448.35F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-953.5482F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1959.0902F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1907.0964F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1959.0902F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(448.35F, wall1.getYStart(), 0.01F);
      assertEquals(224.175F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(448.35F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setThickness(448.35F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1959.0902F, wall0.getLength(), 0.01F);
      assertEquals(448.35F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1907.0964F), wall0.getXStart(), 0.01F);
      assertEquals(1959.0902F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-953.5482F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(224.175F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(448.35F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-953.5482F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1959.0902F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(448.35F, wall1.getThickness(), 0.01F);
      assertEquals((-1907.0964F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1959.0902F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(448.35F, wall1.getYStart(), 0.01F);
      assertEquals(224.175F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(448.35F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float1 = wall0.getRightSideShininess();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1959.0902F, wall0.getLength(), 0.01F);
      assertEquals(448.35F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1907.0964F), wall0.getXStart(), 0.01F);
      assertEquals(1959.0902F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-953.5482F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(224.175F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(448.35F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Wall wall0 = new Wall(2822.29F, 2822.29F, (-285.4303F), (-285.4303F), (-285.4303F), (-1.0F));
      assertEquals(2822.29F, wall0.getYStart(), 0.01F);
      assertEquals(1268.4299F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-285.4303F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-285.4303F), wall0.getThickness(), 0.01F);
      assertEquals(4394.9805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4394.9805F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-285.4303F), wall0.getYEnd(), 0.01F);
      assertEquals(1268.4299F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2822.29F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYEnd((-1.0F));
      assertEquals(2822.29F, wall0.getYStart(), 0.01F);
      assertEquals(1410.645F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1268.4299F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-285.4303F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(4198.6772F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-285.4303F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2822.29F, wall0.getXStart(), 0.01F);
      assertEquals(4198.6772F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      wall0.setXEnd(2822.29F);
      assertEquals(2822.29F, wall0.getYStart(), 0.01F);
      assertEquals(1410.645F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2822.29F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-285.4303F), wall0.getThickness(), 0.01F);
      assertEquals(2823.29F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2822.29F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2822.29F, wall0.getXStart(), 0.01F);
      assertEquals(2823.29F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float float0 = wall0.getLength();
      assertEquals(2822.29F, wall0.getYStart(), 0.01F);
      assertEquals(1410.645F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2822.29F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-285.4303F), wall0.getThickness(), 0.01F);
      assertEquals(2823.29F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2822.29F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2822.29F, wall0.getXStart(), 0.01F);
      assertEquals(2823.29F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2823.29F, float0, 0.01F);
      
      Float float1 = new Float(1.2781082385563284E8);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.27810824E8F, (float)float1, 0.01F);
      
      float float2 = Float.sum((-285.4303F), (-1.0F));
      assertNotEquals(float2, float0, 0.01F);
      assertEquals((-286.4303F), float2, 0.01F);
      
      float float3 = Float.min(3011.7195F, (-285.4303F));
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertEquals((-285.4303F), float3, 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 0.0F, (-334.1F), 1334.5101F);
      assertEquals(2822.29F, wall0.getYStart(), 0.01F);
      assertEquals(1410.645F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2822.29F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-285.4303F), wall0.getThickness(), 0.01F);
      assertEquals(2823.29F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2822.29F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2822.29F, wall0.getXStart(), 0.01F);
      assertEquals(2823.29F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(boolean0);
      
      float float4 = Float.max(449.78378F, (-286.4303F));
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float0, 0.01F);
      assertEquals(449.78378F, float4, 0.01F);
      
      int int0 = Float.compare(0.0F, 0.0F);
      assertEquals(0, int0);
      
      wall0.setHeightAtEnd((Float) 0.0F);
      assertEquals(2822.29F, wall0.getYStart(), 0.01F);
      assertEquals(1410.645F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2822.29F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-285.4303F), wall0.getThickness(), 0.01F);
      assertEquals(2823.29F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(2822.29F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2822.29F, wall0.getXStart(), 0.01F);
      assertEquals(2823.29F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setArcExtent(float1);
      assertNotEquals((float)float1, (float)float4, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float3, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertEquals(2822.29F, wall0.getYStart(), 0.01F);
      assertEquals(1410.645F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3183.5657F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2822.29F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-285.4303F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2822.29F, wall0.getXStart(), 0.01F);
      assertEquals(1.27810824E8F, wall0.getArcExtent(), 0.01F);
      assertEquals(2823.29F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.86238468E11F, wall0.getLength(), 0.01F);
      
      wall0.setHeightAtEnd(float1);
      assertNotEquals((float)float1, (float)float4, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float3, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertEquals(2822.29F, wall0.getYStart(), 0.01F);
      assertEquals(1410.645F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3183.5657F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2822.29F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-285.4303F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1.27810824E8F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2822.29F, wall0.getXStart(), 0.01F);
      assertEquals(1.27810824E8F, wall0.getArcExtent(), 0.01F);
      assertEquals(2823.29F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.86238468E11F, wall0.getLength(), 0.01F);
      
      Float float5 = wall0.getArcExtent();
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertEquals(2822.29F, wall0.getYStart(), 0.01F);
      assertEquals(1410.645F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3183.5657F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2822.29F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-285.4303F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1.27810824E8F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2822.29F, wall0.getXStart(), 0.01F);
      assertEquals(1.27810824E8F, wall0.getArcExtent(), 0.01F);
      assertEquals(2823.29F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.86238468E11F, wall0.getLength(), 0.01F);
      assertNotNull(float5);
      assertEquals(1.27810824E8F, (float)float5, 0.01F);
      
      try { 
        Float.valueOf("r(3>dY&T~$':");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Wall wall0 = new Wall((-465.0F), 1557.79F, (-1.0F), 39.81469F, 340.5321F, 129.5938F);
      assertEquals(340.5321F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(129.5938F, wall0.getHeight(), 0.01F);
      assertEquals(1587.3075F, wall0.getLength(), 0.01F);
      assertEquals(39.81469F, wall0.getYEnd(), 0.01F);
      assertEquals((-465.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1587.3075F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-233.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(798.80237F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1557.79F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYEnd((-465.0F));
      assertEquals(340.5321F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2075.3254F, wall0.getLength(), 0.01F);
      assertEquals(546.395F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2075.3254F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(129.5938F, wall0.getHeight(), 0.01F);
      assertEquals((-465.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-465.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-233.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1557.79F, wall0.getYStart(), 0.01F);
      
      int int0 = Float.floatToIntBits((-587.513F));
      assertEquals((-1005395755), int0);
      
      Float float0 = new Float((double) 615.2F);
      assertNotNull(float0);
      assertEquals(615.2F, (float)float0, 0.01F);
      
      wall0.setHeight(float0);
      assertEquals(340.5321F, wall0.getThickness(), 0.01F);
      assertEquals(615.2F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2075.3254F, wall0.getLength(), 0.01F);
      assertEquals(546.395F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2075.3254F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-465.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-465.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-233.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1557.79F, wall0.getYStart(), 0.01F);
      
      Integer integer0 = wall0.getRightSideColor();
      assertEquals(340.5321F, wall0.getThickness(), 0.01F);
      assertEquals(615.2F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2075.3254F, wall0.getLength(), 0.01F);
      assertEquals(546.395F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2075.3254F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-465.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-465.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-233.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1557.79F, wall0.getYStart(), 0.01F);
      assertNull(integer0);
      
      Float float1 = new Float(0.90039F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(0.90039F, (float)float1, 0.01F);
      
      boolean boolean0 = Float.isFinite(1.0F);
      assertTrue(boolean0);
      
      Float float2 = new Float((-1.0F));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals((-1.0F), (float)float2, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = float2.equals(object0);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      wall0.setArcExtent(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(340.5321F, wall0.getThickness(), 0.01F);
      assertEquals(615.2F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2075.3254F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(121.72187F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-465.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2084.3462F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2164.3877F, wall0.getLength(), 0.01F);
      assertEquals((-465.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1557.79F, wall0.getYStart(), 0.01F);
      
      float float3 = wall0.getLength();
      assertEquals(340.5321F, wall0.getThickness(), 0.01F);
      assertEquals(615.2F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2075.3254F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(121.72187F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-465.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2084.3462F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2164.3877F, wall0.getLength(), 0.01F);
      assertEquals((-465.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1557.79F, wall0.getYStart(), 0.01F);
      assertEquals(2164.3877F, float3, 0.01F);
      
      Integer integer1 = Integer.getInteger((String) null);
      assertNull(integer1);
      
      float float4 = wall0.getXArcCircleCenter();
      assertNotEquals(float4, float3, 0.01F);
      assertEquals(340.5321F, wall0.getThickness(), 0.01F);
      assertEquals(615.2F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2075.3254F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(121.72187F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-465.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2084.3462F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2164.3877F, wall0.getLength(), 0.01F);
      assertEquals((-465.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1557.79F, wall0.getYStart(), 0.01F);
      assertEquals((-2084.3462F), float4, 0.01F);
      
      wall0.setYStart(150.84314F);
      assertEquals(340.5321F, wall0.getThickness(), 0.01F);
      assertEquals((-581.7516F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(804.167F, wall0.getLength(), 0.01F);
      assertEquals(150.84314F, wall0.getYStart(), 0.01F);
      assertEquals(615.2F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-796.64667F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-465.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-465.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(771.07635F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(340.5321F, wall0.getThickness(), 0.01F);
      assertEquals((-581.7516F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(804.167F, wall0.getLength(), 0.01F);
      assertEquals(150.84314F, wall0.getYStart(), 0.01F);
      assertEquals(615.2F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-796.64667F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-465.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-465.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(771.07635F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(homeTexture0);
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals(340.5321F, wall0.getThickness(), 0.01F);
      assertEquals((-581.7516F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(804.167F, wall0.getLength(), 0.01F);
      assertEquals(150.84314F, wall0.getYStart(), 0.01F);
      assertEquals(615.2F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-796.64667F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-465.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-465.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(771.07635F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Integer integer2 = wall0.getRightSideColor();
      assertEquals(340.5321F, wall0.getThickness(), 0.01F);
      assertEquals((-581.7516F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(804.167F, wall0.getLength(), 0.01F);
      assertEquals(150.84314F, wall0.getYStart(), 0.01F);
      assertEquals(615.2F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-796.64667F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-465.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-465.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(771.07635F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(integer2);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Wall wall0 = new Wall(0.06560591F, (-3707.0703F), 0.06560591F, 0.06560591F, 0.06560591F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-3707.0703F), wall0.getYStart(), 0.01F);
      assertEquals(3707.136F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3707.136F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1853.5023F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.06560591F, wall0.getXStart(), 0.01F);
      assertEquals(0.06560591F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.06560591F, wall0.getXEnd(), 0.01F);
      assertEquals(0.06560591F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.06560591F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(linkedList0.contains(wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-3707.0703F), wall0.getYStart(), 0.01F);
      assertEquals(3707.136F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3707.136F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1853.5023F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.06560591F, wall0.getXStart(), 0.01F);
      assertEquals(0.06560591F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.06560591F, wall0.getXEnd(), 0.01F);
      assertEquals(0.06560591F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.06560591F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Wall wall0 = new Wall((-2416.81F), (-2416.81F), (-2416.81F), (-2416.81F), 3166.89F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2416.81F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2416.81F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2416.81F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(3166.89F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2416.81F), wall0.getYEnd(), 0.01F);
      assertEquals((-2416.81F), wall0.getXEnd(), 0.01F);
      assertEquals((-2416.81F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Level level0 = wall0.getLevel();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2416.81F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2416.81F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2416.81F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(3166.89F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2416.81F), wall0.getYEnd(), 0.01F);
      assertEquals((-2416.81F), wall0.getXEnd(), 0.01F);
      assertEquals((-2416.81F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(level0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 271.9753F, 271.9753F, 0.1F, (-2759.77F), 589.213F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-2759.77F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(136.03766F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(271.9753F, wall0.getYStart(), 0.01F);
      assertEquals(589.213F, wall0.getHeight(), 0.01F);
      assertEquals(384.48975F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(136.03766F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(384.48975F, wall0.getLength(), 0.01F);
      assertEquals(271.9753F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-2759.77F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(136.03766F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(271.9753F, wall0.getYStart(), 0.01F);
      assertEquals(589.213F, wall0.getHeight(), 0.01F);
      assertEquals(384.48975F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(136.03766F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(384.48975F, wall0.getLength(), 0.01F);
      assertEquals(271.9753F, wall0.getXEnd(), 0.01F);
      assertEquals(384.48975F, wall1.getLength(), 0.01F);
      assertEquals(271.9753F, wall1.getXEnd(), 0.01F);
      assertEquals(136.03766F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(384.48975F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(589.213F, wall1.getHeight(), 0.01F);
      assertEquals(271.9753F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(136.03766F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-2759.77F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      HomeTexture homeTexture0 = wall1.getLeftSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-2759.77F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(136.03766F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(271.9753F, wall0.getYStart(), 0.01F);
      assertEquals(589.213F, wall0.getHeight(), 0.01F);
      assertEquals(384.48975F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(136.03766F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(384.48975F, wall0.getLength(), 0.01F);
      assertEquals(271.9753F, wall0.getXEnd(), 0.01F);
      assertEquals(384.48975F, wall1.getLength(), 0.01F);
      assertEquals(271.9753F, wall1.getXEnd(), 0.01F);
      assertEquals(136.03766F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(384.48975F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(589.213F, wall1.getHeight(), 0.01F);
      assertEquals(271.9753F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(136.03766F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-2759.77F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(homeTexture0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      boolean boolean0 = wall0.intersectsRectangle(589.213F, (-1.0F), (-2759.77F), 23.87F);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-2759.77F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(136.03766F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(271.9753F, wall0.getYStart(), 0.01F);
      assertEquals(589.213F, wall0.getHeight(), 0.01F);
      assertEquals(384.48975F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(136.03766F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(384.48975F, wall0.getLength(), 0.01F);
      assertEquals(271.9753F, wall0.getXEnd(), 0.01F);
      assertTrue(boolean0);
      assertNotSame(wall0, wall1);
      
      float float0 = wall0.getThickness();
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-2759.77F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(136.03766F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(271.9753F, wall0.getYStart(), 0.01F);
      assertEquals(589.213F, wall0.getHeight(), 0.01F);
      assertEquals(384.48975F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(136.03766F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(384.48975F, wall0.getLength(), 0.01F);
      assertEquals(271.9753F, wall0.getXEnd(), 0.01F);
      assertEquals((-2759.77F), float0, 0.01F);
      assertNotSame(wall0, wall1);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall1.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-2759.77F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(136.03766F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(271.9753F, wall0.getYStart(), 0.01F);
      assertEquals(589.213F, wall0.getHeight(), 0.01F);
      assertEquals(384.48975F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(136.03766F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(384.48975F, wall0.getLength(), 0.01F);
      assertEquals(271.9753F, wall0.getXEnd(), 0.01F);
      assertEquals(384.48975F, wall1.getLength(), 0.01F);
      assertEquals(271.9753F, wall1.getXEnd(), 0.01F);
      assertEquals(136.03766F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(384.48975F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(589.213F, wall1.getHeight(), 0.01F);
      assertEquals(271.9753F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(136.03766F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-2759.77F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      wall0.setRightSideColor(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-2759.77F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(136.03766F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1), (int)wall0.getRightSideColor());
      assertEquals(271.9753F, wall0.getYStart(), 0.01F);
      assertEquals(589.213F, wall0.getHeight(), 0.01F);
      assertEquals(384.48975F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(136.03766F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(384.48975F, wall0.getLength(), 0.01F);
      assertEquals(271.9753F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      
      wall1.setLeftSideTexture((HomeTexture) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-2759.77F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(136.03766F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1), (int)wall0.getRightSideColor());
      assertEquals(271.9753F, wall0.getYStart(), 0.01F);
      assertEquals(589.213F, wall0.getHeight(), 0.01F);
      assertEquals(384.48975F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(136.03766F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(384.48975F, wall0.getLength(), 0.01F);
      assertEquals(271.9753F, wall0.getXEnd(), 0.01F);
      assertEquals(384.48975F, wall1.getLength(), 0.01F);
      assertEquals(271.9753F, wall1.getXEnd(), 0.01F);
      assertEquals(136.03766F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(384.48975F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(589.213F, wall1.getHeight(), 0.01F);
      assertEquals(271.9753F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(136.03766F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-2759.77F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      boolean boolean1 = wall1.containsPoint((-1.0F), (-4621.839F), 271.9753F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-2759.77F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(136.03766F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1), (int)wall0.getRightSideColor());
      assertEquals(271.9753F, wall0.getYStart(), 0.01F);
      assertEquals(589.213F, wall0.getHeight(), 0.01F);
      assertEquals(384.48975F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(136.03766F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(384.48975F, wall0.getLength(), 0.01F);
      assertEquals(271.9753F, wall0.getXEnd(), 0.01F);
      assertEquals(384.48975F, wall1.getLength(), 0.01F);
      assertEquals(271.9753F, wall1.getXEnd(), 0.01F);
      assertEquals(136.03766F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(384.48975F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(589.213F, wall1.getHeight(), 0.01F);
      assertEquals(271.9753F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(136.03766F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-2759.77F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      boolean boolean2 = wall1.intersectsRectangle(0.0F, 2998.925F, (-871.8F), (-1));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-2759.77F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(136.03766F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1), (int)wall0.getRightSideColor());
      assertEquals(271.9753F, wall0.getYStart(), 0.01F);
      assertEquals(589.213F, wall0.getHeight(), 0.01F);
      assertEquals(384.48975F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(136.03766F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(384.48975F, wall0.getLength(), 0.01F);
      assertEquals(271.9753F, wall0.getXEnd(), 0.01F);
      assertEquals(384.48975F, wall1.getLength(), 0.01F);
      assertEquals(271.9753F, wall1.getXEnd(), 0.01F);
      assertEquals(136.03766F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(384.48975F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(589.213F, wall1.getHeight(), 0.01F);
      assertEquals(271.9753F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(136.03766F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-2759.77F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertTrue(boolean2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      HomeTexture homeTexture1 = wall0.getLeftSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-2759.77F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(136.03766F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1), (int)wall0.getRightSideColor());
      assertEquals(271.9753F, wall0.getYStart(), 0.01F);
      assertEquals(589.213F, wall0.getHeight(), 0.01F);
      assertEquals(384.48975F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(136.03766F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(384.48975F, wall0.getLength(), 0.01F);
      assertEquals(271.9753F, wall0.getXEnd(), 0.01F);
      assertNull(homeTexture1);
      assertNotSame(wall0, wall1);
      
      Level level0 = wall0.getLevel();
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-2759.77F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(136.03766F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1), (int)wall0.getRightSideColor());
      assertEquals(271.9753F, wall0.getYStart(), 0.01F);
      assertEquals(589.213F, wall0.getHeight(), 0.01F);
      assertEquals(384.48975F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(136.03766F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(384.48975F, wall0.getLength(), 0.01F);
      assertEquals(271.9753F, wall0.getXEnd(), 0.01F);
      assertNull(level0);
      assertNotSame(wall0, wall1);
      
      // Undeclared exception!
      try { 
        Wall.Property.valueOf(".%$Bw6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property..%$Bw6
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.move((-5509.0F), 0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-5509.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-5509.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals((-5509.0F), wall0.getXEnd(), 0.01F);
      
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, 0.0F, (-2911.459F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(5509.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(5509.0F, wall1.getLength(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotNull(wall1);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-5509.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-5509.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals((-5509.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(5509.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(5509.0F, wall1.getLength(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-5509.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-5509.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals((-5509.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(5509.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(5509.0F, wall1.getLength(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setLeftSideShininess((-515.216F));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-515.216F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-5509.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-5509.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals((-5509.0F), wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall0.containsWallStartAt(0.0F, 0.0F, (-515.216F));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-515.216F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-5509.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-5509.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals((-5509.0F), wall0.getXEnd(), 0.01F);
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-515.216F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-5509.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-5509.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals((-5509.0F), wall0.getXEnd(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      
      float[][] floatArray1 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(5509.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(5509.0F, wall1.getLength(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertNotSame(wall1, wall0);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertEquals((-515.216F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-5509.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-5509.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals((-5509.0F), wall0.getXEnd(), 0.01F);
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-515.216F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-5509.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-5509.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals((-5509.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(5509.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(5509.0F, wall1.getLength(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float0 = wall1.getXEnd();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(5509.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(5509.0F, wall1.getLength(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray2 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(5509.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(5509.0F, wall1.getLength(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotNull(floatArray2);
      assertEquals(4, floatArray2.length);
      assertNotSame(wall1, wall0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Wall wall0 = new Wall(7.803559F, 7.803559F, (-2229.4846F), (-1703.25F), 220.0F, 1476.0F);
      assertEquals(7.803559F, wall0.getXStart(), 0.01F);
      assertEquals((-1703.25F), wall0.getYEnd(), 0.01F);
      assertEquals(220.0F, wall0.getThickness(), 0.01F);
      assertEquals(2816.5872F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1110.8406F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7.803559F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2816.5872F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1476.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2229.4846F), wall0.getXEnd(), 0.01F);
      assertEquals((-847.7232F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setPattern((TextureImage) null);
      assertEquals(7.803559F, wall0.getXStart(), 0.01F);
      assertEquals((-1703.25F), wall0.getYEnd(), 0.01F);
      assertEquals(220.0F, wall0.getThickness(), 0.01F);
      assertEquals(2816.5872F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1110.8406F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7.803559F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2816.5872F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1476.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2229.4846F), wall0.getXEnd(), 0.01F);
      assertEquals((-847.7232F), wall0.getYArcCircleCenter(), 0.01F);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertEquals(7.803559F, wall0.getXStart(), 0.01F);
      assertEquals((-1703.25F), wall0.getYEnd(), 0.01F);
      assertEquals(220.0F, wall0.getThickness(), 0.01F);
      assertEquals(2816.5872F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1110.8406F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7.803559F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2816.5872F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1476.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2229.4846F), wall0.getXEnd(), 0.01F);
      assertEquals((-847.7232F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(integer0);
      
      Float float0 = new Float(1.0E-6);
      assertNotNull(float0);
      assertEquals(1.0E-6F, (float)float0, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(7.803559F, wall0.getXStart(), 0.01F);
      assertEquals((-1703.25F), wall0.getYEnd(), 0.01F);
      assertEquals(220.0F, wall0.getThickness(), 0.01F);
      assertEquals(2816.5872F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7.803559F, wall0.getYStart(), 0.01F);
      assertEquals(2816.587F, wall0.getLength(), 0.01F);
      assertEquals((-2.23728896E9F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1476.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.71105242E9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0E-6F, wall0.getArcExtent(), 0.01F);
      assertEquals((-2229.4846F), wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Wall wall0 = new Wall((-416.9001F), (-416.9001F), (-416.9001F), (-416.9001F), (-416.9001F));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-416.9001F), wall0.getXEnd(), 0.01F);
      assertEquals((-416.9001F), wall0.getYEnd(), 0.01F);
      assertEquals((-416.9001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-416.9001F), wall0.getXStart(), 0.01F);
      assertEquals((-416.9001F), wall0.getYStart(), 0.01F);
      assertEquals((-416.9001F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-416.9001F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("'", (PropertyChangeListener) null);
      assertEquals("'", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      boolean boolean0 = wall0.intersectsRectangle((-416.9001F), (-416.9001F), (-647.1521F), (-416.9001F));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-416.9001F), wall0.getXEnd(), 0.01F);
      assertEquals((-416.9001F), wall0.getYEnd(), 0.01F);
      assertEquals((-416.9001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-416.9001F), wall0.getXStart(), 0.01F);
      assertEquals((-416.9001F), wall0.getYStart(), 0.01F);
      assertEquals((-416.9001F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-416.9001F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(boolean0);
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-416.9001F), wall0.getXEnd(), 0.01F);
      assertEquals((-416.9001F), wall0.getYEnd(), 0.01F);
      assertEquals((-416.9001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-416.9001F), wall0.getXStart(), 0.01F);
      assertEquals((-416.9001F), wall0.getYStart(), 0.01F);
      assertEquals((-416.9001F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-416.9001F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals("'", propertyChangeListenerProxy0.getPropertyName());
      
      Wall wall1 = new Wall((-647.1521F), (-1251.685F), (-647.1521F), (-1.0F), (-2954.381F), (-781.34F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2954.381F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1250.685F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-781.34F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals((-647.1521F), wall1.getXEnd(), 0.01F);
      assertEquals((-626.3425F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-647.1521F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-647.1521F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1250.685F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1251.685F), wall1.getYStart(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-416.9001F), wall0.getXEnd(), 0.01F);
      assertEquals((-416.9001F), wall0.getYEnd(), 0.01F);
      assertEquals((-416.9001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-416.9001F), wall0.getXStart(), 0.01F);
      assertEquals((-416.9001F), wall0.getYStart(), 0.01F);
      assertEquals((-416.9001F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-416.9001F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2954.381F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1250.685F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-781.34F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals((-647.1521F), wall1.getXEnd(), 0.01F);
      assertEquals((-626.3425F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-647.1521F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-647.1521F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1250.685F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1251.685F), wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-416.9001F), wall0.getXEnd(), 0.01F);
      assertEquals((-416.9001F), wall0.getYEnd(), 0.01F);
      assertEquals((-416.9001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-416.9001F), wall0.getXStart(), 0.01F);
      assertEquals((-416.9001F), wall0.getYStart(), 0.01F);
      assertEquals((-416.9001F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-416.9001F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2954.381F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1250.685F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-781.34F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals((-647.1521F), wall1.getXEnd(), 0.01F);
      assertEquals((-626.3425F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-647.1521F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-647.1521F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1250.685F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1251.685F), wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float0 = wall1.getLeftSideShininess();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2954.381F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1250.685F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-781.34F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals((-647.1521F), wall1.getXEnd(), 0.01F);
      assertEquals((-626.3425F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-647.1521F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-647.1521F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1250.685F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1251.685F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(wall1, wall0);
      
      wall0.setXStart(1241.4F);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(1658.3F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(412.24997F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-416.9001F), wall0.getXEnd(), 0.01F);
      assertEquals((-416.9001F), wall0.getYEnd(), 0.01F);
      assertEquals((-416.9001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1241.4F, wall0.getXStart(), 0.01F);
      assertEquals((-416.9001F), wall0.getYStart(), 0.01F);
      assertEquals((-416.9001F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1658.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotSame(wall0, wall1);
      
      boolean boolean1 = wall1.isAtLevel((Level) null);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2954.381F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1250.685F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-781.34F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals((-647.1521F), wall1.getXEnd(), 0.01F);
      assertEquals((-626.3425F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-647.1521F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-647.1521F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1250.685F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1251.685F), wall1.getYStart(), 0.01F);
      assertTrue(boolean1);
      assertNotSame(wall1, wall0);
      
      Float float1 = wall1.getHeightAtEnd();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2954.381F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1250.685F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-781.34F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals((-647.1521F), wall1.getXEnd(), 0.01F);
      assertEquals((-626.3425F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-647.1521F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-647.1521F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1250.685F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1251.685F), wall1.getYStart(), 0.01F);
      assertNull(float1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(1658.3F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(412.24997F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-416.9001F), wall0.getXEnd(), 0.01F);
      assertEquals((-416.9001F), wall0.getYEnd(), 0.01F);
      assertEquals((-416.9001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1241.4F, wall0.getXStart(), 0.01F);
      assertEquals((-416.9001F), wall0.getYStart(), 0.01F);
      assertEquals((-416.9001F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1658.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-1251.685F), wall2.getYStart(), 0.01F);
      assertEquals((-1.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-781.34F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-626.3425F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-647.1521F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-2954.381F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1250.685F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-647.1521F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-647.1521F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1250.685F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall2);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall0.setYEnd((-781.34F));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-781.34F), wall0.getYEnd(), 0.01F);
      assertEquals(1697.8739F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(412.24997F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-416.9001F), wall0.getXEnd(), 0.01F);
      assertEquals(1241.4F, wall0.getXStart(), 0.01F);
      assertEquals((-416.9001F), wall0.getYStart(), 0.01F);
      assertEquals((-599.12006F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-416.9001F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1697.8739F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      
      Wall wall3 = wall1.getWallAtEnd();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2954.381F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1250.685F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-781.34F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals((-647.1521F), wall1.getXEnd(), 0.01F);
      assertEquals((-626.3425F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-647.1521F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-647.1521F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1250.685F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1251.685F), wall1.getYStart(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertEquals((-416.9001F), wall3.getXEnd(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getHeight());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-416.9001F), wall3.getThickness(), 0.01F);
      assertEquals(1697.8739F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-781.34F), wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(412.24997F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(1697.8739F, wall3.getLength(), 0.01F);
      assertEquals(1241.4F, wall3.getXStart(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-416.9001F), wall3.getYStart(), 0.01F);
      assertEquals((-599.12006F), wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertNotNull(wall3);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertSame(wall1, wall2);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertSame(wall3, wall0);
      
      try { 
        Integer.decode("'");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"'\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Wall wall0 = new Wall((-2416.81F), (-2416.81F), (-2416.81F), (-2416.81F), 3166.89F);
      assertEquals((-2416.81F), wall0.getXStart(), 0.01F);
      assertEquals((-2416.81F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2416.81F), wall0.getYStart(), 0.01F);
      assertEquals(3166.89F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2416.81F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2416.81F), wall0.getXEnd(), 0.01F);
      assertEquals((-2416.81F), wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.getWallAtEnd();
      assertEquals((-2416.81F), wall0.getXStart(), 0.01F);
      assertEquals((-2416.81F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2416.81F), wall0.getYStart(), 0.01F);
      assertEquals(3166.89F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2416.81F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2416.81F), wall0.getXEnd(), 0.01F);
      assertEquals((-2416.81F), wall0.getYEnd(), 0.01F);
      assertNull(wall1);
      
      wall0.setWallAtEnd((Wall) null);
      assertEquals((-2416.81F), wall0.getXStart(), 0.01F);
      assertEquals((-2416.81F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2416.81F), wall0.getYStart(), 0.01F);
      assertEquals(3166.89F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2416.81F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2416.81F), wall0.getXEnd(), 0.01F);
      assertEquals((-2416.81F), wall0.getYEnd(), 0.01F);
      
      Level level0 = wall0.getLevel();
      assertEquals((-2416.81F), wall0.getXStart(), 0.01F);
      assertEquals((-2416.81F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2416.81F), wall0.getYStart(), 0.01F);
      assertEquals(3166.89F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2416.81F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2416.81F), wall0.getXEnd(), 0.01F);
      assertEquals((-2416.81F), wall0.getYEnd(), 0.01F);
      assertNull(level0);
      
      Wall wall2 = wall0.getWallAtEnd();
      assertEquals((-2416.81F), wall0.getXStart(), 0.01F);
      assertEquals((-2416.81F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2416.81F), wall0.getYStart(), 0.01F);
      assertEquals(3166.89F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2416.81F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2416.81F), wall0.getXEnd(), 0.01F);
      assertEquals((-2416.81F), wall0.getYEnd(), 0.01F);
      assertNull(wall2);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Integer integer0 = Integer.valueOf(248);
      assertNotNull(integer0);
      assertEquals(248, (int)integer0);
      
      Integer integer1 = Integer.valueOf(0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = Integer.valueOf(5);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(5, (int)integer2);
      
      Integer integer3 = Integer.valueOf(0);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      Integer integer4 = Integer.valueOf((-2364));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals((-2364), (int)integer4);
      
      Integer integer5 = Integer.valueOf((-974));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals((-974), (int)integer5);
      
      wall0.setRightSideColor(integer5);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-974), (int)wall0.getRightSideColor());
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall1.intersectsRectangle((-647.194F), (-5509.0F), (-5509.0F), 3298.67F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-974), (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float0 = wall0.getLeftSideShininess();
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-974), (int)wall0.getRightSideColor());
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(wall0, wall1);
      
      wall0.setRightSideShininess((-489.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-489.0F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-974), (int)wall0.getRightSideColor());
      assertNotSame(wall0, wall1);
      
      Integer integer6 = new Integer(115);
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertNotNull(integer6);
      assertEquals(115, (int)integer6);
      
      Integer integer7 = Integer.getInteger("com.eteks.sweethome3d.model.Level", integer6);
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer1));
      assertNotNull(integer7);
      assertEquals(115, (int)integer7);
      
      wall0.setRightSideColor(integer5);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(integer5.equals((Object)integer7));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer6));
      assertEquals((-489.0F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-974), (int)wall0.getRightSideColor());
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 0.01F, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      Integer integer0 = new Integer((-39));
      assertNotNull(integer0);
      assertEquals((-39), (int)integer0);
      
      wall0.setRightSideColor((Integer) null);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      
      Integer integer1 = Integer.valueOf(1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      Integer integer2 = Integer.valueOf(1);
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1, (int)integer2);
      
      Integer integer3 = Integer.valueOf(368276);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(368276, (int)integer3);
      
      Integer integer4 = Integer.valueOf((-39));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals((-39), (int)integer4);
      
      Integer integer5 = Integer.valueOf(112);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      assertEquals(112, (int)integer5);
      
      wall0.setRightSideColor(integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(112, (int)wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(2784.007F, 0.01F, 0.0F, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(112, (int)wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertFalse(boolean0);
      
      wall0.setRightSideShininess(0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(112, (int)wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      
      wall0.setRightSideColor(integer3);
      assertFalse(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)integer5));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(368276, (int)wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      
      Float float1 = wall0.getHeight();
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(368276, (int)wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertNull(float1);
      
      float float2 = wall0.getThickness();
      assertEquals(float2, float0, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(368276, (int)wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.move(0.0F, 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setXEnd((-705.96F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, 30.8F, (-2911.459F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(5509.086F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(5509.086F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5509.086F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(5509.086F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5509.086F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(5509.086F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float0 = wall0.getLeftSideShininess();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(wall0, wall1);
      
      wall0.setXStart(1.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall0.isAtLevel((Level) null);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertTrue(boolean0);
      assertNotSame(wall0, wall1);
      
      Float float1 = wall0.getHeightAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(float1);
      assertNotSame(wall0, wall1);
      
      Wall wall2 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(5509.086F, wall2.getLength(), 0.01F);
      assertEquals(15.4F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(30.8F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(5509.086F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNotNull(wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      boolean boolean1 = wall1.containsWallStartAt((-4359.2F), 0.0F, (-4359.2F));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      assertEquals(5509.086F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(5509.086F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(boolean1);
      assertNotSame(wall1, wall0);
      assertSame(wall1, wall2);
      
      wall1.setXStart((-1755.08F));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-877.54F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(1755.3502F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertEquals(1755.3502F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1755.08F), wall1.getXStart(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertSame(wall1, wall2);
      
      wall1.setWallAtEnd(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-877.54F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(1755.3502F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertEquals(1755.3502F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1755.08F), wall1.getXStart(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertEquals((-1755.08F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(15.4F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(30.8F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(1755.3502F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-877.54F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1755.3502F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      float float2 = wall1.getXEnd();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(float2, float0, 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-877.54F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(1755.3502F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertEquals(1755.3502F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1755.08F), wall1.getXStart(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      assertNotSame(wall1, wall0);
      assertSame(wall1, wall2);
      
      float float3 = wall2.getXStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertEquals((-1755.08F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(15.4F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(30.8F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(1755.3502F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-877.54F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1755.3502F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals((-1755.08F), float3, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-39.814686F), (-2941.5867F));
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setXEnd(0.0F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(39.814686F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-2941.5867F), wall1.getThickness(), 0.01F);
      assertEquals((-19.907343F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-39.814686F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(39.814686F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(39.814686F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-2941.5867F), wall1.getThickness(), 0.01F);
      assertEquals((-19.907343F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-39.814686F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(39.814686F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(39.814686F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-2941.5867F), wall1.getThickness(), 0.01F);
      assertEquals((-19.907343F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-39.814686F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(39.814686F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(39.814686F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-2941.5867F), wall1.getThickness(), 0.01F);
      assertEquals((-19.907343F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-39.814686F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(39.814686F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setXStart(1.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall0.isAtLevel((Level) null);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertTrue(boolean0);
      assertNotSame(wall0, wall1);
      
      Wall wall2 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-19.907343F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(39.814686F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-39.814686F), wall2.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-2941.5867F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNotNull(wall2);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall2.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-19.907343F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(39.814686F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-39.814686F), wall2.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-2941.5867F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall2.setYEnd((-412.5812F));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-412.5812F), wall2.getYEnd(), 0.01F);
      assertEquals(412.5812F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-206.2906F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-2941.5867F), wall2.getThickness(), 0.01F);
      assertEquals(412.5812F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall0.setYEnd((-412.5812F));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-206.2906F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(412.58243F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-412.5812F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(412.58243F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      
      Float float0 = new Float((double) 1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      wall2.setArcExtent(float0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-206.2906F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(412.58243F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-412.5812F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(412.58243F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-412.5812F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-206.2906F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(430.28708F, wall2.getLength(), 0.01F);
      assertEquals((-2941.5867F), wall2.getThickness(), 0.01F);
      assertEquals(412.5812F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(377.61243F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      // Undeclared exception!
      try { 
        wall2.getPoints();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Wall wall0 = new Wall(543.0F, 543.0F, 543.0F, 543.0F, 543.0F);
      assertEquals(543.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(543.0F, wall0.getYStart(), 0.01F);
      assertEquals(543.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(543.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(543.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(543.0F, wall0.getYEnd(), 0.01F);
      assertEquals(543.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      wall0.move((-5509.0F), 543.0F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1086.0F, wall0.getYStart(), 0.01F);
      assertEquals(1086.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(543.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-4966.0F), wall0.getXStart(), 0.01F);
      assertEquals((-4966.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-4966.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1086.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setXStart((-1411.881F));
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1411.881F), wall0.getXStart(), 0.01F);
      assertEquals(1086.0F, wall0.getYStart(), 0.01F);
      assertEquals(1086.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(543.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(3554.1191F, wall0.getLength(), 0.01F);
      assertEquals((-4966.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-3188.9404F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1086.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3554.1191F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      float float0 = wall0.getLeftSideShininess();
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1411.881F), wall0.getXStart(), 0.01F);
      assertEquals(1086.0F, wall0.getYStart(), 0.01F);
      assertEquals(1086.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(543.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(3554.1191F, wall0.getLength(), 0.01F);
      assertEquals((-4966.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-3188.9404F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1086.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3554.1191F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, float0, 0.01F);
      
      wall0.setXStart((-587.513F));
      assertNull(wall0.getLeftSideColor());
      assertEquals(1086.0F, wall0.getYStart(), 0.01F);
      assertEquals(1086.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(543.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2776.7566F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(4378.487F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-587.513F), wall0.getXStart(), 0.01F);
      assertEquals((-4966.0F), wall0.getXEnd(), 0.01F);
      assertEquals(4378.487F, wall0.getLength(), 0.01F);
      assertEquals(1086.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      int int0 = Float.floatToIntBits((-587.513F));
      assertEquals((-1005395755), int0);
      
      Float float1 = Float.valueOf(0.0F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      wall0.setArcExtent(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1086.0F, wall0.getYStart(), 0.01F);
      assertEquals(543.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-4966.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(4378.487F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-587.513F), wall0.getXStart(), 0.01F);
      assertEquals((-4966.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-3.575306E19F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4378.487F, wall0.getLength(), 0.01F);
      assertEquals(1086.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      float[][] floatArray0 = wall0.getPoints();
      assertNull(wall0.getLeftSideColor());
      assertEquals(1086.0F, wall0.getYStart(), 0.01F);
      assertEquals(543.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-4966.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(4378.487F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-587.513F), wall0.getXStart(), 0.01F);
      assertEquals((-4966.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-3.575306E19F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4378.487F, wall0.getLength(), 0.01F);
      assertEquals(1086.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      Wall wall1 = wall0.getWallAtStart();
      assertNull(wall0.getLeftSideColor());
      assertEquals(1086.0F, wall0.getYStart(), 0.01F);
      assertEquals(543.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-4966.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(4378.487F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-587.513F), wall0.getXStart(), 0.01F);
      assertEquals((-4966.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-3.575306E19F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4378.487F, wall0.getLength(), 0.01F);
      assertEquals(1086.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      wall0.move(0.0F, 0.0F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, 0.0F, (-2911.459F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(5509.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(5509.0F, wall1.getLength(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(5509.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(5509.0F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(5509.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(5509.0F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float0 = wall0.getLeftSideShininess();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(wall0, wall1);
      
      wall0.setXStart(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      
      wall0.setLeftSideShininess((-515.216F));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-515.216F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      
      wall0.setYEnd((-515.216F));
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-257.608F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(515.216F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-515.216F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-515.216F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(515.216F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall0.containsWallStartAt(0.1F, 0.1F, (-515.216F));
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-257.608F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(515.216F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-515.216F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-515.216F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(515.216F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      
      wall1.setXStart((-587.513F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-293.7565F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(587.513F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(587.513F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-587.513F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertNotSame(wall1, wall0);
      
      boolean boolean1 = wall0.containsWallEndAt((-129.212F), (-1.08213043E9F), (-1564.5F));
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-257.608F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(515.216F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-515.216F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-515.216F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(515.216F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-560.7F), (-1.0F), 2915.8457F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(559.7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-280.85F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-560.7F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2915.8457F, wall0.getHeight(), 0.01F);
      assertEquals(559.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = new Integer((-3803));
      assertNotNull(integer0);
      assertEquals((-3803), (int)integer0);
      
      wall0.setRightSideColor(integer0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(559.7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-280.85F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-560.7F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2915.8457F, wall0.getHeight(), 0.01F);
      assertEquals(559.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3803), (int)wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      float float1 = float0.floatValue();
      assertEquals(0.0F, float1, 0.01F);
      
      Float float2 = new Float(0.0F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      boolean boolean0 = Float.isFinite(0.0F);
      assertTrue(boolean0);
      
      float float3 = Float.min(0.0F, 2915.8457F);
      assertEquals(float3, float1, 0.01F);
      assertEquals(0.0F, float3, 0.01F);
      
      float float4 = Float.min(266.6F, (-560.7F));
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertEquals((-560.7F), float4, 0.01F);
      
      float float5 = float2.floatValue();
      assertEquals((float)float2, (float)float3, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float4, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertEquals(float5, float1, 0.01F);
      assertEquals(float5, float3, 0.01F);
      assertEquals(0.0F, float5, 0.01F);
      
      wall0.setHeight((Float) 0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(559.7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-280.85F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-560.7F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(559.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3803), (int)wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      
      Float float6 = wall0.getHeightAtEnd();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(559.7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-280.85F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-560.7F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(559.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3803), (int)wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(float6);
      
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("|[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.|[
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Wall wall0 = new Wall(543.0F, 543.0F, 543.0F, 0.0F, (-2911.459F));
      assertEquals(271.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(543.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(543.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(543.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(543.0F, wall0.getLength(), 0.01F);
      assertEquals(543.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(543.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      wall0.move(0.0F, 0.0F);
      assertEquals(271.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(543.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(543.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(543.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(543.0F, wall0.getLength(), 0.01F);
      assertEquals(543.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(543.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      wall0.setXEnd((-705.96F));
      assertEquals(1361.8921F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(271.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(543.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(543.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(1361.8921F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals((-81.48001F), wall0.getXArcCircleCenter(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1361.8921F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(271.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(543.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(543.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(1361.8921F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals((-81.48001F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-705.96F), wall1.getXEnd(), 0.01F);
      assertEquals(1361.8921F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-81.48001F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(543.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1361.8921F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(271.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(543.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1361.8921F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(271.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(543.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(543.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(1361.8921F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals((-81.48001F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-705.96F), wall1.getXEnd(), 0.01F);
      assertEquals(1361.8921F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-81.48001F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(543.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1361.8921F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(271.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(543.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      boolean boolean0 = wall0.containsWallStartAt((-1.08213043E9F), 543.0F, (-5509.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1361.8921F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(271.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(543.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(543.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(1361.8921F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals((-81.48001F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1361.8921F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(271.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(543.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(543.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(1361.8921F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals((-81.48001F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-705.96F), wall1.getXEnd(), 0.01F);
      assertEquals(1361.8921F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-81.48001F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(543.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1361.8921F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(271.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(543.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float0 = wall0.getLeftSideShininess();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1361.8921F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(271.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(543.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(543.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(1361.8921F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals((-81.48001F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(wall0, wall1);
      
      wall0.setXStart((-1364.3992F));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(271.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(853.4583F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1035.1796F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1364.3992F), wall0.getXStart(), 0.01F);
      assertEquals(543.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(853.4583F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      
      int int0 = Float.floatToIntBits(1.0F);
      assertEquals(1065353216, int0);
      
      Float float1 = Float.valueOf(1.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      wall1.setArcExtent(float1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(271.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(853.4583F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1035.1796F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1364.3992F), wall0.getXStart(), 0.01F);
      assertEquals(543.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(853.4583F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-705.96F), wall1.getXEnd(), 0.01F);
      assertEquals(415.4974F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1361.8921F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(543.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-871.60297F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(543.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1420.3374F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      // Undeclared exception!
      try { 
        wall1.getPoints();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotNull(wall1);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setYEnd((-515.216F));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-257.608F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(515.216F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(515.216F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-515.216F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      
      int int0 = Float.floatToIntBits(334.2397F);
      assertEquals(1135025838, int0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      wall0.move(0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      
      wall0.setXEnd((-705.96F));
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, 30.8F, (-2911.459F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(5509.086F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(5509.086F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(5509.086F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(5509.086F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(5509.086F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(5509.086F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float0 = wall0.getLeftSideShininess();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(wall0, wall1);
      
      wall0.setXStart(1.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall0.isAtLevel((Level) null);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertTrue(boolean0);
      assertNotSame(wall0, wall1);
      
      Float float1 = wall0.getHeightAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(float1);
      assertNotSame(wall0, wall1);
      
      Wall wall2 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(5509.086F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(30.8F, wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(5509.086F, wall2.getLength(), 0.01F);
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals(15.4F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotNull(wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall2.setYEnd((-413.6307F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(5524.5063F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-413.6307F), wall2.getYEnd(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals((-206.81535F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(5524.5063F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall2.setYEnd((-5509.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      float float2 = wall0.getXArcCircleCenter();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-352.48F), float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      Wall wall3 = wall2.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-2911.459F), wall3.getThickness(), 0.01F);
      assertEquals(1.0F, wall3.getXStart(), 0.01F);
      assertEquals(706.96F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-705.96F), wall3.getXEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(706.96F, wall3.getLength(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-352.48F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertNull(wall3.getHeight());
      assertNotNull(wall3);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall3, wall1);
      assertSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      
      boolean boolean1 = wall1.containsWallEndAt(0.0F, 30.8F, 0.0F);
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(7790.9023F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2754.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(7790.9023F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(boolean1);
      assertNotSame(wall1, wall3);
      assertSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      boolean boolean2 = wall0.containsWallEndAt((-413.6307F), (-5509.0F), 0.0F);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(boolean2);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall2);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2941.5867F));
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtStart(wall0);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      wall0.setXStart(1.0F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      Float float0 = wall0.getHeightAtEnd();
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(float0);
      
      Wall wall1 = wall0.getWallAtStart();
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2941.5867F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertNotNull(wall1);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      
      wall1.setWallAtStart(wall0);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2941.5867F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      
      wall1.setYEnd((-413.6307F));
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals((-206.81535F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(413.63193F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-413.6307F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(413.63193F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-206.81535F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2941.5867F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-413.6307F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(413.63193F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(413.63193F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      
      wall1.setYEnd((-5509.0F));
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-5509.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5509.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(5509.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(5509.0F, wall1.getLength(), 0.01F);
      assertEquals((-2941.5867F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(5509.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      
      Wall wall2 = wall1.getWallAtEnd();
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-5509.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5509.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(5509.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(5509.0F, wall1.getLength(), 0.01F);
      assertEquals((-2941.5867F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(5509.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-2941.5867F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(5509.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.5F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(5509.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall2);
      assertSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertSame(wall1, wall2);
      assertSame(wall1, wall0);
      assertSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      wall1.setYEnd(0.0F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2941.5867F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertSame(wall1, wall2);
      assertSame(wall1, wall0);
      
      float float1 = wall1.getXArcCircleCenter();
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2941.5867F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals(0.5F, float1, 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertSame(wall1, wall2);
      assertSame(wall1, wall0);
      
      Wall wall3 = wall0.getWallAtEnd();
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall3.getHeight());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.5F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall3.getLength(), 0.01F);
      assertEquals(1.0F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNull(wall3.getLeftSideColor());
      assertEquals(1.0F, wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals((-2941.5867F), wall3.getThickness(), 0.01F);
      assertNotNull(wall3);
      assertSame(wall0, wall3);
      assertSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertSame(wall3, wall0);
      assertSame(wall3, wall2);
      assertSame(wall3, wall1);
      
      boolean boolean0 = wall1.containsWallEndAt(0.5F, (-705.96F), (-413.6307F));
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2941.5867F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertFalse(boolean0);
      assertSame(wall0, wall3);
      assertSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertSame(wall1, wall2);
      assertSame(wall1, wall0);
      assertSame(wall1, wall3);
      
      wall3.setRightSideShininess(2603.9966F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2603.9966F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall3.getHeight());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.5F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall3.getLength(), 0.01F);
      assertEquals(1.0F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(2603.9966F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(1.0F, wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals((-2941.5867F), wall3.getThickness(), 0.01F);
      assertSame(wall0, wall3);
      assertSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertSame(wall3, wall0);
      assertSame(wall3, wall2);
      assertSame(wall3, wall1);
      
      Wall wall4 = wall0.getWallAtEnd();
      assertEquals((-2941.5867F), wall4.getThickness(), 0.01F);
      assertEquals(0.0F, wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall4.getYStart(), 0.01F);
      assertNull(wall4.getHeight());
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertEquals(0.0F, wall4.getXEnd(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertEquals(2603.9966F, wall4.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall4.getLength(), 0.01F);
      assertEquals(0.0F, wall4.getYEnd(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertNull(wall4.getHeightAtEnd());
      assertEquals(0.5F, wall4.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall4.getXStart(), 0.01F);
      assertEquals(1.0F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2603.9966F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotNull(wall4);
      assertSame(wall4, wall2);
      assertSame(wall4, wall1);
      assertSame(wall4, wall0);
      assertSame(wall4, wall3);
      assertSame(wall0, wall3);
      assertSame(wall0, wall4);
      assertSame(wall0, wall1);
      assertSame(wall0, wall2);
      
      wall4.setRightSideColor((Integer) null);
      assertEquals((-2941.5867F), wall4.getThickness(), 0.01F);
      assertEquals(0.0F, wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall4.getYStart(), 0.01F);
      assertNull(wall4.getHeight());
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertEquals(0.0F, wall4.getXEnd(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertEquals(2603.9966F, wall4.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall4.getLength(), 0.01F);
      assertEquals(0.0F, wall4.getYEnd(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertNull(wall4.getHeightAtEnd());
      assertEquals(0.5F, wall4.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall4.getXStart(), 0.01F);
      assertEquals(1.0F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2603.9966F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertSame(wall4, wall2);
      assertSame(wall4, wall1);
      assertSame(wall4, wall0);
      assertSame(wall4, wall3);
      assertSame(wall0, wall3);
      assertSame(wall0, wall4);
      assertSame(wall0, wall1);
      assertSame(wall0, wall2);
      
      Float float2 = wall0.getHeight();
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2603.9966F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(float2);
      assertSame(wall0, wall3);
      assertSame(wall0, wall4);
      assertSame(wall0, wall1);
      assertSame(wall0, wall2);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-39.814686F), 0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      wall0.setXEnd(0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, (-5509.0F), (-39.814686F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(7790.9023F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2754.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(7790.9023F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-39.814686F), wall1.getThickness(), 0.01F);
      assertNotNull(wall1);
      
      boolean boolean0 = wall1.containsWallEndAt(0.0F, 0.0F, (-39.814686F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(7790.9023F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2754.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(7790.9023F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-39.814686F), wall1.getThickness(), 0.01F);
      assertFalse(boolean0);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(7790.9023F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2754.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(7790.9023F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-39.814686F), wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(7790.9023F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2754.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(7790.9023F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-39.814686F), wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setXStart(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotSame(wall0, wall1);
      
      boolean boolean1 = wall0.isAtLevel((Level) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean1 == boolean0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertTrue(boolean1);
      assertNotSame(wall0, wall1);
      
      Float float0 = wall0.getHeightAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(float0);
      assertNotSame(wall0, wall1);
      
      Wall wall2 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-39.814686F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNotNull(wall2);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      wall2.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-39.814686F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      wall2.setYEnd((-413.6307F));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(5524.5063F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-39.814686F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(5524.5063F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-206.81535F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-413.6307F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      wall2.setYEnd((-5509.0F));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-39.814686F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      Wall wall3 = wall2.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-39.814686F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall3.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(39.814686F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals((-19.907343F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertNotNull(wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertSame(wall2, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertSame(wall3, wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("NAME", propertyChangeListener0);
      assertEquals("NAME", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall3.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-39.814686F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall3.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(39.814686F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals((-19.907343F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals("NAME", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertSame(wall2, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertSame(wall3, wall0);
      
      boolean boolean2 = wall0.containsWallEndAt(0.0F, 882.802F, 882.802F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(boolean2);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall3);
      
      boolean boolean3 = wall2.containsWallEndAt(0.0F, (-5509.0F), 0.0F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-39.814686F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(boolean3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertSame(wall2, wall1);
      
      try { 
        MockURL.URL("NAME", "NAME", "NAME");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: name
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Wall wall0 = new Wall((-619.237F), (-619.237F), (-619.237F), 0.0F, (-659.3F), 0.0F);
      assertEquals((-619.237F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-619.237F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-309.6185F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-619.237F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.3F), wall0.getThickness(), 0.01F);
      assertEquals((-619.237F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(619.237F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(619.237F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = Integer.valueOf((-522));
      assertNotNull(integer0);
      assertEquals((-522), (int)integer0);
      
      wall0.setRightSideShininess((-39.814686F));
      assertEquals((-619.237F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-619.237F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-309.6185F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-619.237F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.3F), wall0.getThickness(), 0.01F);
      assertEquals((-619.237F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(619.237F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(619.237F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-39.814686F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      wall0.setRightSideColor(integer0);
      assertEquals((-619.237F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-619.237F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-309.6185F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-619.237F), wall0.getXEnd(), 0.01F);
      assertEquals((-522), (int)wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.3F), wall0.getThickness(), 0.01F);
      assertEquals((-619.237F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(619.237F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(619.237F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-39.814686F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      float float0 = wall0.getRightSideShininess();
      assertEquals((-619.237F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-619.237F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-309.6185F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-619.237F), wall0.getXEnd(), 0.01F);
      assertEquals((-522), (int)wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.3F), wall0.getThickness(), 0.01F);
      assertEquals((-619.237F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(619.237F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(619.237F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-39.814686F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-39.814686F), float0, 0.01F);
      
      float float1 = wall0.getStartPointToEndPointDistance();
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-619.237F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-619.237F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-309.6185F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-619.237F), wall0.getXEnd(), 0.01F);
      assertEquals((-522), (int)wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.3F), wall0.getThickness(), 0.01F);
      assertEquals((-619.237F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(619.237F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(619.237F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-39.814686F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(619.237F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Wall wall0 = new Wall((-0.26042837F), (-0.26042837F), (-0.26042837F), (-0.26042837F), (-0.26042837F), (-0.26042837F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.26042837F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.26042837F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.26042837F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.26042837F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.26042837F), wall0.getThickness(), 0.01F);
      assertEquals((-0.26042837F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.26042837F), wall0.getYStart(), 0.01F);
      assertEquals((-0.26042837F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall((-0.26042837F), 0.0F, 0.0F, 0.0F, (-0.26042837F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-0.26042837F), wall1.getXStart(), 0.01F);
      assertEquals((-0.26042837F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.26042837F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.26042837F, wall1.getLength(), 0.01F);
      assertEquals((-0.13021418F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.26042837F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.26042837F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.26042837F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.26042837F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.26042837F), wall0.getThickness(), 0.01F);
      assertEquals((-0.26042837F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.26042837F), wall0.getYStart(), 0.01F);
      assertEquals((-0.26042837F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.26042837F), wall1.getXStart(), 0.01F);
      assertEquals((-0.26042837F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.26042837F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.26042837F, wall1.getLength(), 0.01F);
      assertEquals((-0.13021418F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.26042837F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.26042837F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.26042837F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.26042837F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.26042837F), wall0.getThickness(), 0.01F);
      assertEquals((-0.26042837F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.26042837F), wall0.getYStart(), 0.01F);
      assertEquals((-0.26042837F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.26042837F), wall1.getXStart(), 0.01F);
      assertEquals((-0.26042837F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.26042837F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.26042837F, wall1.getLength(), 0.01F);
      assertEquals((-0.13021418F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-0.26042837F), wall1.getXStart(), 0.01F);
      assertEquals((-0.26042837F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.26042837F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.26042837F, wall1.getLength(), 0.01F);
      assertEquals((-0.13021418F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall1.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-0.26042837F), wall1.getXStart(), 0.01F);
      assertEquals((-0.26042837F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.26042837F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.26042837F, wall1.getLength(), 0.01F);
      assertEquals((-0.13021418F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-0.26042837F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-0.26042837F), wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-0.13021418F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.26042837F, wall2.getLength(), 0.01F);
      assertEquals(0.26042837F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNotNull(wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Wall wall0 = new Wall((-1251.685F), 2.0F, (-1251.685F), 0.01F, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1251.685F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(1.99F, wall0.getLength(), 0.01F);
      assertEquals(1.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-1251.685F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1251.685F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(1.99F, wall0.getLength(), 0.01F);
      assertEquals(1.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-1251.685F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.99F, float0, 0.01F);
      
      wall0.setYEnd((-1251.685F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getYEnd(), 0.01F);
      assertEquals((-1251.685F), wall0.getXEnd(), 0.01F);
      assertEquals((-624.8425F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertEquals(1253.685F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-1251.685F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1253.685F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setXEnd((-1.0F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getYEnd(), 0.01F);
      assertEquals((-624.8425F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1770.8584F, wall0.getLength(), 0.01F);
      assertEquals((-626.3425F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertEquals(1770.8584F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setRightSideShininess(1030.3562F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getYEnd(), 0.01F);
      assertEquals((-624.8425F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1770.8584F, wall0.getLength(), 0.01F);
      assertEquals((-626.3425F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1030.3562F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertEquals(1770.8584F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      Float float1 = Float.valueOf(2638.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(2638.0F, (float)float1, 0.01F);
      
      Float float2 = new Float(2688.633F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(2688.633F, (float)float2, 0.01F);
      
      wall0.setArcExtent(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1030.3562F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertEquals(1770.8584F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-2758.2876F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2764.905F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(8463440.0F, wall0.getLength(), 0.01F);
      assertEquals(2688.633F, wall0.getArcExtent(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setXEnd(1030.3562F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getYEnd(), 0.01F);
      assertEquals(1.2444001E7F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1030.3562F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2603.7356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2688.633F, wall0.getArcExtent(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4517.597F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2249.227F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1030.3562F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      boolean boolean0 = wall0.containsWallEndAt(837.02893F, (-1614.2109F), 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getYEnd(), 0.01F);
      assertEquals(1.2444001E7F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1030.3562F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2603.7356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2688.633F, wall0.getArcExtent(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4517.597F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2249.227F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1030.3562F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertFalse(boolean0);
      
      wall0.setYEnd(296.6262F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(296.6262F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1030.3562F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertEquals(391.91516F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2688.633F, wall0.getArcExtent(), 0.01F);
      assertEquals((-3743.4412F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2300.9817F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0997052E7F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1030.3562F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      // Undeclared exception!
      wall0.containsWallStartAt(2688.633F, 837.02893F, 2.0F);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-39.814686F), (-2941.5867F));
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, (-5509.0F), (-2941.5867F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(7790.9023F, wall1.getLength(), 0.01F);
      assertEquals((-2941.5867F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(7790.9023F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(7790.9023F, wall1.getLength(), 0.01F);
      assertEquals((-2941.5867F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(7790.9023F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(7790.9023F, wall1.getLength(), 0.01F);
      assertEquals((-2941.5867F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(7790.9023F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setXStart(1.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      
      Float float0 = wall0.getHeightAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(float0);
      assertNotSame(wall0, wall1);
      
      Wall wall2 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall2.getThickness(), 0.01F);
      assertNotNull(wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall1.setLeftSideShininess((-515.216F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-515.216F), wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(7790.9023F, wall1.getLength(), 0.01F);
      assertEquals((-2941.5867F), wall1.getThickness(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(7790.9023F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertSame(wall1, wall2);
      
      boolean boolean0 = wall2.containsWallStartAt(2507.9F, (-39.814686F), 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-515.216F), wall2.getLeftSideShininess(), 0.01F);
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall2.getThickness(), 0.01F);
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-515.216F), wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(7790.9023F, wall1.getLength(), 0.01F);
      assertEquals((-2941.5867F), wall1.getThickness(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(7790.9023F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall1, wall0);
      assertSame(wall1, wall2);
      
      Wall wall3 = new Wall(0.0F, (-515.216F), 1.0F, (-252.2196F), (-2941.5867F));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-515.216F), wall3.getYStart(), 0.01F);
      assertEquals((-252.2196F), wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.5F, wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals((-2941.5867F), wall3.getThickness(), 0.01F);
      assertEquals(262.9983F, wall3.getLength(), 0.01F);
      assertEquals(262.9983F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertNull(wall3.getHeight());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals((-383.7178F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall3.getXEnd(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertNotNull(wall3);
      
      float[][] floatArray1 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Wall wall0 = new Wall(543.0F, 543.0F, 543.0F, 0.0F, (-2911.459F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(543.0F, wall0.getYStart(), 0.01F);
      assertEquals(543.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(271.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(543.0F, wall0.getXEnd(), 0.01F);
      assertEquals(543.0F, wall0.getLength(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(543.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(543.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      wall0.move(0.0F, 0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(543.0F, wall0.getYStart(), 0.01F);
      assertEquals(543.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(271.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(543.0F, wall0.getXEnd(), 0.01F);
      assertEquals(543.0F, wall0.getLength(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(543.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(543.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setXEnd((-705.96F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1361.8921F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(543.0F, wall0.getYStart(), 0.01F);
      assertEquals((-81.48001F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(543.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1361.8921F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(271.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1361.8921F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(543.0F, wall0.getYStart(), 0.01F);
      assertEquals((-81.48001F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(543.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1361.8921F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(271.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1361.8921F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(271.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-705.96F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-81.48001F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(543.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1361.8921F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(543.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1361.8921F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(543.0F, wall0.getYStart(), 0.01F);
      assertEquals((-81.48001F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(543.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1361.8921F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(271.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1361.8921F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(271.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-705.96F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-81.48001F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(543.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1361.8921F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(543.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      boolean boolean0 = wall0.containsWallStartAt((-1.08213043E9F), 543.0F, (-5509.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1361.8921F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(543.0F, wall0.getYStart(), 0.01F);
      assertEquals((-81.48001F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(543.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1361.8921F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(271.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1361.8921F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(543.0F, wall0.getYStart(), 0.01F);
      assertEquals((-81.48001F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(543.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1361.8921F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(271.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1361.8921F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(271.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-705.96F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-81.48001F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(543.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1361.8921F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(543.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float0 = wall0.getLeftSideShininess();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1361.8921F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(543.0F, wall0.getYStart(), 0.01F);
      assertEquals((-81.48001F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(543.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1361.8921F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(271.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(wall0, wall1);
      
      wall0.setXStart((-1364.3992F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(853.4583F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(543.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1364.3992F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(271.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1035.1796F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(853.4583F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      
      int int0 = Float.floatToIntBits(1256.5465F);
      assertEquals(1151144317, int0);
      
      Float float1 = Float.valueOf(0.0F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      wall0.setArcExtent(float1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(853.4583F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(543.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1364.3992F), wall0.getXStart(), 0.01F);
      assertEquals(4.43393127E18F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5.3765635E18F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(853.4583F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(853.4583F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(543.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1364.3992F), wall0.getXStart(), 0.01F);
      assertEquals(4.43393127E18F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5.3765635E18F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(853.4583F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1361.8921F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(271.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-705.96F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-81.48001F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(543.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1361.8921F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(543.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(853.4583F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(543.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1364.3992F), wall0.getXStart(), 0.01F);
      assertEquals(4.43393127E18F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5.3765635E18F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(853.4583F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1361.8921F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(271.5F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-81.48001F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(543.0F, wall2.getXStart(), 0.01F);
      assertEquals((-705.96F), wall2.getXEnd(), 0.01F);
      assertEquals(1361.8921F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertEquals(543.0F, wall2.getYStart(), 0.01F);
      assertNotNull(wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-39.814686F), 0.0F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      float float0 = (-5509.0F);
      float float1 = 0.0F;
      wall0.setXEnd(0.0F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      Wall wall1 = new Wall((-5509.0F), (-5509.0F), 0.0F, (-5509.0F), (-39.814686F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-39.814686F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(5509.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(5509.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-5509.0F), wall1.getYStart(), 0.01F);
      assertNotNull(wall1);
      
      boolean boolean0 = wall1.containsWallEndAt(0.0F, (-5509.0F), (-39.814686F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-39.814686F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(5509.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(5509.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-5509.0F), wall1.getYStart(), 0.01F);
      assertFalse(boolean0);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-39.814686F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(5509.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(5509.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-5509.0F), wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setXStart(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotSame(wall0, wall1);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-39.814686F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(5509.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(5509.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-5509.0F), wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = new Wall((-5509.0F), 0.0F, 0.0F, (-5509.0F), 0.0F, 1.15675302E9F);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1.15675302E9F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall2);
      
      wall0.setWallAtStart(wall2);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1.15675302E9F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      wall0.setLeftSideShininess((-39.814686F));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-39.814686F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      
      // Undeclared exception!
      try { 
        Float.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Wall wall0 = new Wall(1040.7875F, 1040.7875F, 1.3912053F, 1040.7875F, (-39.814686F), (-39.814686F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-39.814686F), wall0.getThickness(), 0.01F);
      assertEquals(521.08936F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1040.7875F, wall0.getYStart(), 0.01F);
      assertEquals(1040.7875F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1040.7875F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1039.3962F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1039.3962F, wall0.getLength(), 0.01F);
      assertEquals(1.3912053F, wall0.getXEnd(), 0.01F);
      assertEquals(1040.7875F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-39.814686F), wall0.getHeight(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-39.814686F), wall0.getThickness(), 0.01F);
      assertEquals(521.08936F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1040.7875F, wall0.getYStart(), 0.01F);
      assertEquals(1040.7875F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1040.7875F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1039.3962F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1039.3962F, wall0.getLength(), 0.01F);
      assertEquals(1.3912053F, wall0.getXEnd(), 0.01F);
      assertEquals(1040.7875F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-39.814686F), wall0.getHeight(), 0.01F);
      assertNull(integer0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall1 = wall0.getWallAtEnd();
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-39.814686F), wall0.getThickness(), 0.01F);
      assertEquals(521.08936F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1040.7875F, wall0.getYStart(), 0.01F);
      assertEquals(1040.7875F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1040.7875F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1039.3962F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1039.3962F, wall0.getLength(), 0.01F);
      assertEquals(1.3912053F, wall0.getXEnd(), 0.01F);
      assertEquals(1040.7875F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-39.814686F), wall0.getHeight(), 0.01F);
      assertNull(wall1);
      
      boolean boolean0 = linkedList0.add((Wall) null);
      assertFalse(linkedList0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      LinkedList linkedList1 = (LinkedList)linkedList0.clone();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertNotNull(linkedList1);
      
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Wall wall0 = new Wall((-1251.685F), 2.0F, (-1251.685F), 0.01F, 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(1.99F, wall0.getLength(), 0.01F);
      assertEquals((-1251.685F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getXEnd(), 0.01F);
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(1.99F, wall0.getLength(), 0.01F);
      assertEquals((-1251.685F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getXEnd(), 0.01F);
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.99F, float0, 0.01F);
      
      Integer integer0 = new Integer((-39));
      assertNotNull(integer0);
      assertEquals((-39), (int)integer0);
      
      wall0.setRightSideColor(integer0);
      assertEquals((-39), (int)wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(1.99F, wall0.getLength(), 0.01F);
      assertEquals((-1251.685F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getXEnd(), 0.01F);
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals(1.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      boolean boolean0 = wall0.containsPoint(1.99F, 0.01F, 288.1299F);
      assertEquals((-39), (int)wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(1.99F, wall0.getLength(), 0.01F);
      assertEquals((-1251.685F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getXEnd(), 0.01F);
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals(1.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(boolean0);
      
      Float float1 = new Float(1905.581868284893);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1905.5819F, (float)float1, 0.01F);
      
      boolean boolean1 = Float.isFinite((-868.6339F));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float float2 = Float.min((-1251.685F), 1.99F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals((-1251.685F), float2, 0.01F);
      
      wall0.setArcExtent(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertEquals((-39), (int)wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1250.8765F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2443.1973F, wall0.getLength(), 0.01F);
      assertEquals((-1251.685F), wall0.getXEnd(), 0.01F);
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1905.5819F, wall0.getArcExtent(), 0.01F);
      
      wall0.setRightSideShininess((-1340.8369F));
      assertEquals((-39), (int)wall0.getRightSideColor());
      assertEquals((-1340.8369F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-1250.8765F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2443.1973F, wall0.getLength(), 0.01F);
      assertEquals((-1251.685F), wall0.getXEnd(), 0.01F);
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1905.5819F, wall0.getArcExtent(), 0.01F);
      
      Float float3 = Float.valueOf(1094.8785F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      assertEquals(1094.8785F, (float)float3, 0.01F);
      
      float float4 = Float.max((-1340.8369F), 2.0F);
      assertNotEquals(float4, float2, 0.01F);
      assertEquals(float4, float0, 0.01F);
      assertEquals(2.0F, float4, 0.01F);
      
      wall0.setArcExtent(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float4, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((-39), (int)wall0.getRightSideColor());
      assertEquals(1515.4374F, wall0.getLength(), 0.01F);
      assertEquals((-1340.8369F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getXEnd(), 0.01F);
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertEquals(1094.8785F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1250.7229F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setXEnd((-1251.685F));
      assertEquals((-39), (int)wall0.getRightSideColor());
      assertEquals(1515.4374F, wall0.getLength(), 0.01F);
      assertEquals((-1340.8369F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getXEnd(), 0.01F);
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertEquals(1094.8785F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1250.7229F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setLeftSideShininess((-1.0F));
      assertEquals((-39), (int)wall0.getRightSideColor());
      assertEquals(1515.4374F, wall0.getLength(), 0.01F);
      assertEquals((-1340.8369F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getXEnd(), 0.01F);
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertEquals(1094.8785F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1250.7229F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      boolean boolean2 = wall0.containsWallEndAt(0.0F, (-1251.685F), 2.0F);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals((-39), (int)wall0.getRightSideColor());
      assertEquals(1515.4374F, wall0.getLength(), 0.01F);
      assertEquals((-1340.8369F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1251.685F), wall0.getXEnd(), 0.01F);
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertEquals(1094.8785F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1250.7229F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(boolean2);
      
      wall0.setYEnd(1942.05F);
      assertEquals((-39), (int)wall0.getRightSideColor());
      assertEquals((-1340.8369F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(1940.05F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1477440.1F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(972.025F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2189.7463F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1942.05F, wall0.getYEnd(), 0.01F);
      assertEquals((-1251.685F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertEquals(1094.8785F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = wall0.getWallAtEnd();
      assertEquals((-39), (int)wall0.getRightSideColor());
      assertEquals((-1340.8369F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(1940.05F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1477440.1F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(972.025F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2189.7463F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1942.05F, wall0.getYEnd(), 0.01F);
      assertEquals((-1251.685F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertEquals(1094.8785F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall1);
      
      wall0.setWallAtEnd((Wall) null);
      assertEquals((-39), (int)wall0.getRightSideColor());
      assertEquals((-1340.8369F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(1940.05F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1477440.1F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(972.025F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2189.7463F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1942.05F, wall0.getYEnd(), 0.01F);
      assertEquals((-1251.685F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertEquals(1094.8785F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float float5 = wall0.getXEnd();
      assertNotEquals(float5, float4, 0.01F);
      assertEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float0, 0.01F);
      assertEquals((-39), (int)wall0.getRightSideColor());
      assertEquals((-1340.8369F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(1940.05F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1477440.1F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(972.025F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2189.7463F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1942.05F, wall0.getYEnd(), 0.01F);
      assertEquals((-1251.685F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1251.685F), wall0.getXStart(), 0.01F);
      assertEquals(1094.8785F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1251.685F), float5, 0.01F);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 2.0F, 0.01F, (-19.96617F), (-1.0F));
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.99F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-19.96617F), wall0.getThickness(), 0.01F);
      assertEquals(1.005F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.99F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-19.96617F), wall0.getThickness(), 0.01F);
      assertEquals(1.005F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.99F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-19.96617F), wall0.getThickness(), 0.01F);
      assertEquals(1.005F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.99F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-19.96617F), wall0.getThickness(), 0.01F);
      assertEquals(1.005F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.01F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-19.96617F), wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.99F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(1.005F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(1.99F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float0 = wall0.getXEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.99F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-19.96617F), wall0.getThickness(), 0.01F);
      assertEquals(1.005F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, float0, 0.01F);
      assertNotSame(wall0, wall1);
      
      TextureImage textureImage0 = wall1.getPattern();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.99F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-19.96617F), wall0.getThickness(), 0.01F);
      assertEquals(1.005F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.01F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-19.96617F), wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.99F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(1.005F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(1.99F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(textureImage0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Level level0 = wall0.getLevel();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.99F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-19.96617F), wall0.getThickness(), 0.01F);
      assertEquals(1.005F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(level0);
      assertNotSame(wall0, wall1);
      
      wall1.setXEnd(2.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.99F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-19.96617F), wall0.getThickness(), 0.01F);
      assertEquals(1.005F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.01F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-19.96617F), wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.99F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(1.005F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(1.99F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = new Wall(2.0F, 2.0F, 492.27F, (-1317.7261F), 492.27F, 2.0F);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(2.0F, wall2.getXStart(), 0.01F);
      assertEquals((-1317.7261F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-657.86304F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(492.27F, wall2.getThickness(), 0.01F);
      assertEquals(247.135F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1407.85F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getArcExtent());
      assertEquals(492.27F, wall2.getXEnd(), 0.01F);
      assertEquals(2.0F, wall2.getHeight(), 0.01F);
      assertEquals(1407.85F, wall2.getLength(), 0.01F);
      assertNotNull(wall2);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.99F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-19.96617F), wall0.getThickness(), 0.01F);
      assertEquals(1.005F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.01F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-19.96617F), wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.99F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(1.005F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(1.99F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("X_START", propertyChangeListener0);
      assertEquals("X_START", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall2.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(2.0F, wall2.getXStart(), 0.01F);
      assertEquals((-1317.7261F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-657.86304F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(492.27F, wall2.getThickness(), 0.01F);
      assertEquals(247.135F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1407.85F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getArcExtent());
      assertEquals(492.27F, wall2.getXEnd(), 0.01F);
      assertEquals(2.0F, wall2.getHeight(), 0.01F);
      assertEquals(1407.85F, wall2.getLength(), 0.01F);
      assertEquals("X_START", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      wall2.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.99F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-19.96617F), wall0.getThickness(), 0.01F);
      assertEquals(1.005F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall2.getXStart(), 0.01F);
      assertEquals((-1317.7261F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-657.86304F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(492.27F, wall2.getThickness(), 0.01F);
      assertEquals(247.135F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1407.85F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getArcExtent());
      assertEquals(492.27F, wall2.getXEnd(), 0.01F);
      assertEquals(2.0F, wall2.getHeight(), 0.01F);
      assertEquals(1407.85F, wall2.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      float float1 = wall2.getLeftSideShininess();
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(2.0F, wall2.getXStart(), 0.01F);
      assertEquals((-1317.7261F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-657.86304F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(492.27F, wall2.getThickness(), 0.01F);
      assertEquals(247.135F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1407.85F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getArcExtent());
      assertEquals(492.27F, wall2.getXEnd(), 0.01F);
      assertEquals(2.0F, wall2.getHeight(), 0.01F);
      assertEquals(1407.85F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      wall0.setXStart(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-19.96617F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      boolean boolean0 = wall2.containsPoint((-1.0F), (-1190.1102F), 0.01F);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(2.0F, wall2.getXStart(), 0.01F);
      assertEquals((-1317.7261F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-657.86304F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(492.27F, wall2.getThickness(), 0.01F);
      assertEquals(247.135F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1407.85F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getArcExtent());
      assertEquals(492.27F, wall2.getXEnd(), 0.01F);
      assertEquals(2.0F, wall2.getHeight(), 0.01F);
      assertEquals(1407.85F, wall2.getLength(), 0.01F);
      assertFalse(boolean0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      Float float2 = wall0.getHeightAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-19.96617F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(float2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      Wall wall3 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-19.96617F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      wall1.setYEnd(1.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-19.96617F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2.222656F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-19.96617F), wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.505F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.005F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2.222656F, wall1.getLength(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      
      Wall wall4 = wall2.clone();
      assertFalse(wall4.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(2.0F, wall4.getYStart(), 0.01F);
      assertEquals(2.0F, wall4.getXStart(), 0.01F);
      assertEquals(492.27F, wall4.getThickness(), 0.01F);
      assertEquals((-1317.7261F), wall4.getYEnd(), 0.01F);
      assertEquals((-657.86304F), wall4.getYArcCircleCenter(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertEquals(247.135F, wall4.getXArcCircleCenter(), 0.01F);
      assertNull(wall4.getHeightAtEnd());
      assertEquals(1407.85F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall4.getHeight(), 0.01F);
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertNull(wall4.getRightSideColor());
      assertEquals(1407.85F, wall4.getLength(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertEquals(492.27F, wall4.getXEnd(), 0.01F);
      assertEquals(2.0F, wall2.getXStart(), 0.01F);
      assertEquals((-1317.7261F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-657.86304F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(492.27F, wall2.getThickness(), 0.01F);
      assertEquals(247.135F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1407.85F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getArcExtent());
      assertEquals(492.27F, wall2.getXEnd(), 0.01F);
      assertEquals(2.0F, wall2.getHeight(), 0.01F);
      assertEquals(1407.85F, wall2.getLength(), 0.01F);
      assertNotNull(wall4);
      assertNotSame(wall4, wall1);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall2);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall4.setYEnd(1.0F);
      assertFalse(wall4.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(2.0F, wall4.getYStart(), 0.01F);
      assertEquals(2.0F, wall4.getXStart(), 0.01F);
      assertEquals(492.27F, wall4.getThickness(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertEquals(247.135F, wall4.getXArcCircleCenter(), 0.01F);
      assertNull(wall4.getHeightAtEnd());
      assertEquals(490.271F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall4.getHeight(), 0.01F);
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertNull(wall4.getRightSideColor());
      assertNull(wall4.getLeftSideColor());
      assertEquals(1.0F, wall4.getYEnd(), 0.01F);
      assertEquals(490.271F, wall4.getLength(), 0.01F);
      assertEquals(492.27F, wall4.getXEnd(), 0.01F);
      assertEquals(1.5F, wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall2.getXStart(), 0.01F);
      assertEquals((-1317.7261F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-657.86304F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(492.27F, wall2.getThickness(), 0.01F);
      assertEquals(247.135F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1407.85F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getArcExtent());
      assertEquals(492.27F, wall2.getXEnd(), 0.01F);
      assertEquals(2.0F, wall2.getHeight(), 0.01F);
      assertEquals(1407.85F, wall2.getLength(), 0.01F);
      assertNotSame(wall4, wall1);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall2);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      Float float3 = new Float((-1193.3175F));
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      assertEquals((-1193.3175F), (float)float3, 0.01F);
      
      Wall wall5 = wall4.getWallAtEnd();
      assertFalse(wall4.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(2.0F, wall4.getYStart(), 0.01F);
      assertEquals(2.0F, wall4.getXStart(), 0.01F);
      assertEquals(492.27F, wall4.getThickness(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertEquals(247.135F, wall4.getXArcCircleCenter(), 0.01F);
      assertNull(wall4.getHeightAtEnd());
      assertEquals(490.271F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall4.getHeight(), 0.01F);
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertNull(wall4.getRightSideColor());
      assertNull(wall4.getLeftSideColor());
      assertEquals(1.0F, wall4.getYEnd(), 0.01F);
      assertEquals(490.271F, wall4.getLength(), 0.01F);
      assertEquals(492.27F, wall4.getXEnd(), 0.01F);
      assertEquals(1.5F, wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall2.getXStart(), 0.01F);
      assertEquals((-1317.7261F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-657.86304F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(492.27F, wall2.getThickness(), 0.01F);
      assertEquals(247.135F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1407.85F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getArcExtent());
      assertEquals(492.27F, wall2.getXEnd(), 0.01F);
      assertEquals(2.0F, wall2.getHeight(), 0.01F);
      assertEquals(1407.85F, wall2.getLength(), 0.01F);
      assertNull(wall5);
      assertNotSame(wall4, wall1);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall2);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      Wall wall6 = wall2.getWallAtStart();
      assertFalse(wall6.equals((Object)wall4));
      assertFalse(wall6.equals((Object)wall2));
      assertFalse(wall6.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall6.isTrapezoidal());
      assertEquals(0.0F, wall6.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall6.getLength(), 0.01F);
      assertEquals(2.0F, wall6.getXEnd(), 0.01F);
      assertEquals(1.0F, wall6.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall6.getYEnd(), 0.01F);
      assertNull(wall6.getLeftSideColor());
      assertNull(wall6.getArcExtent());
      assertNull(wall6.getRightSideColor());
      assertEquals((-19.96617F), wall6.getThickness(), 0.01F);
      assertNull(wall6.getHeightAtEnd());
      assertEquals(0.01F, wall6.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall6.getHeight(), 0.01F);
      assertEquals(2.0F, wall6.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall6.getXStart(), 0.01F);
      assertEquals(0.01F, wall6.getYStart(), 0.01F);
      assertEquals(0.0F, wall6.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall2.getXStart(), 0.01F);
      assertEquals((-1317.7261F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-657.86304F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(492.27F, wall2.getThickness(), 0.01F);
      assertEquals(247.135F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1407.85F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getArcExtent());
      assertEquals(492.27F, wall2.getXEnd(), 0.01F);
      assertEquals(2.0F, wall2.getHeight(), 0.01F);
      assertEquals(1407.85F, wall2.getLength(), 0.01F);
      assertNotNull(wall6);
      assertNotSame(wall6, wall4);
      assertSame(wall6, wall0);
      assertNotSame(wall6, wall2);
      assertNotSame(wall6, wall1);
      assertNotSame(wall2, wall6);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      int int0 = Float.floatToIntBits((-1.0F));
      assertEquals((-1082130432), int0);
      
      wall2.setArcExtent((Float) (-1.0F));
      assertFalse(wall2.equals((Object)wall6));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(2.0F, wall2.getXStart(), 0.01F);
      assertEquals((-960.73615F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1317.7261F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(492.27F, wall2.getThickness(), 0.01F);
      assertEquals(1468.2676F, wall2.getLength(), 0.01F);
      assertEquals(1407.85F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1.0F), wall2.getArcExtent(), 0.01F);
      assertEquals((-1106.5796F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(492.27F, wall2.getXEnd(), 0.01F);
      assertEquals(2.0F, wall2.getHeight(), 0.01F);
      assertNotSame(wall2, wall6);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 3337.797F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3337.797F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      float float1 = Float.sum(0.0F, 0.0F);
      assertEquals(0.0F, float1, 0.01F);
      
      float float2 = Float.min(1334.5101F, 3337.797F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(1334.5101F, float2, 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(1334.5101F, (-1211.603F), (-1211.603F), 1334.5101F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3337.797F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertTrue(boolean0);
      
      float float3 = Float.max(0.0F, 0.0F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(float3, float1, 0.01F);
      assertEquals(0.0F, float3, 0.01F);
      
      wall0.setHeightAtEnd(float0);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3337.797F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3337.797F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      
      float float4 = float0.floatValue();
      assertEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertEquals(float4, float1, 0.01F);
      assertEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertEquals(0.0F, float4, 0.01F);
      
      wall0.setHeightAtEnd((Float) 0.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3337.797F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      
      // Undeclared exception!
      try { 
        Wall.Property.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Wall wall0 = new Wall((-1120.4154F), (-1120.4154F), (-1120.4154F), (-1120.4154F), 3166.89F);
      assertEquals((-1120.4154F), wall0.getYEnd(), 0.01F);
      assertEquals((-1120.4154F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1120.4154F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1120.4154F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3166.89F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1120.4154F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1120.4154F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Level level0 = wall0.getLevel();
      assertEquals((-1120.4154F), wall0.getYEnd(), 0.01F);
      assertEquals((-1120.4154F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1120.4154F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1120.4154F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3166.89F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1120.4154F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1120.4154F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(level0);
      
      Integer integer0 = wall0.getRightSideColor();
      assertEquals((-1120.4154F), wall0.getYEnd(), 0.01F);
      assertEquals((-1120.4154F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1120.4154F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1120.4154F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3166.89F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1120.4154F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1120.4154F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(integer0);
      
      wall0.setThickness((-1120.4154F));
      assertEquals((-1120.4154F), wall0.getYEnd(), 0.01F);
      assertEquals((-1120.4154F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1120.4154F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1120.4154F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1120.4154F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1120.4154F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1120.4154F), wall0.getThickness(), 0.01F);
      
      wall0.move((-1120.4154F), (-1120.4154F));
      assertEquals((-2240.8308F), wall0.getYEnd(), 0.01F);
      assertEquals((-2240.8308F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2240.8308F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2240.8308F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2240.8308F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2240.8308F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1120.4154F), wall0.getThickness(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals((-2240.8308F), wall0.getYEnd(), 0.01F);
      assertEquals((-2240.8308F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2240.8308F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2240.8308F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2240.8308F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2240.8308F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1120.4154F), wall0.getThickness(), 0.01F);
      assertNull(homeTexture0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-2240.8308F), wall0.getYEnd(), 0.01F);
      assertEquals((-2240.8308F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2240.8308F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2240.8308F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2240.8308F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2240.8308F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1120.4154F), wall0.getThickness(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      wall0.move(0.0F, 0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      wall0.setXEnd((-705.96F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, 30.8F, 0.0F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(5509.086F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(5509.086F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(5509.086F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(5509.086F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(5509.086F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(5509.086F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float0 = wall0.getLeftSideShininess();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(wall0, wall1);
      
      wall0.setXStart(1.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall0.isAtLevel((Level) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertTrue(boolean0);
      assertNotSame(wall0, wall1);
      
      Float float1 = wall0.getHeightAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(float1);
      assertNotSame(wall0, wall1);
      
      Wall wall2 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(30.8F, wall2.getYEnd(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(15.4F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(5509.086F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(5509.086F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall2.setYEnd((-413.6307F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-413.6307F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(5524.5063F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(5524.5063F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-206.81535F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      float float2 = wall0.getXArcCircleCenter();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNotEquals(float2, float0, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-352.48F), float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall2.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-413.6307F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(5524.5063F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(5524.5063F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-206.81535F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Wall wall0 = new Wall((-39.814686F), (-39.814686F), (-39.814686F), 1017.755F, 1017.755F);
      assertEquals(1017.755F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getXEnd(), 0.01F);
      assertEquals(1017.755F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-39.814686F), wall0.getXStart(), 0.01F);
      assertEquals(1057.5697F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(488.97015F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-39.814686F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1057.5697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-39.814686F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = wall0.getRightSideColor();
      assertEquals(1017.755F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getXEnd(), 0.01F);
      assertEquals(1017.755F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-39.814686F), wall0.getXStart(), 0.01F);
      assertEquals(1057.5697F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(488.97015F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-39.814686F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1057.5697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-39.814686F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(integer0);
      
      Float float0 = new Float(194892.8038330078);
      assertNotNull(float0);
      assertEquals(194892.8F, (float)float0, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(1017.755F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getXEnd(), 0.01F);
      assertEquals(1017.755F, wall0.getYEnd(), 0.01F);
      assertEquals(2.24246272E8F, wall0.getLength(), 0.01F);
      assertEquals(194892.8F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-39.814686F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(488.97015F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1061.7236F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1057.5697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-39.814686F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      // Undeclared exception!
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      float float0 = 2.0F;
      Wall wall0 = new Wall(0.01F, 0.01F, 2.0F, 0.01F, (-19.96617F), (-1.0F));
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(1.005F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-19.96617F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.99F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(1.005F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-19.96617F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.99F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(homeTexture0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(1.005F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-19.96617F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.99F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(1.005F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-19.96617F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.99F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-19.96617F), wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.005F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(1.99F, wall1.getLength(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(0.01F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.99F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setThickness(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(1.005F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-19.96617F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.99F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.005F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.99F, wall1.getLength(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(0.01F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.99F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float1 = wall0.getXEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float1, float0, 0.01F);
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(1.005F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-19.96617F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.99F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, float1, 0.01F);
      assertNotSame(wall0, wall1);
      
      TextureImage textureImage0 = wall1.getPattern();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(1.005F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-19.96617F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.99F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.005F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.99F, wall1.getLength(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(0.01F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.99F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(textureImage0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Level level0 = wall0.getLevel();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(1.005F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-19.96617F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.99F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(level0);
      assertNotSame(wall0, wall1);
      
      float float2 = 1.0F;
      HomeTexture homeTexture1 = null;
      try {
        homeTexture1 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Wall wall0 = new Wall((-2888.4116F), (-2888.4116F), 0.0F, (-2888.4116F), (-2888.4116F), 0.0F);
      assertEquals((-2888.4116F), wall0.getThickness(), 0.01F);
      assertEquals((-2888.4116F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2888.4116F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2888.4116F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2888.4116F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1444.2058F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2888.4116F, wall0.getLength(), 0.01F);
      assertEquals(2888.4116F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.intersectsRectangle((-196.702F), (-589.38873F), 0, 0);
      assertEquals((-2888.4116F), wall0.getThickness(), 0.01F);
      assertEquals((-2888.4116F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2888.4116F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2888.4116F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2888.4116F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1444.2058F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2888.4116F, wall0.getLength(), 0.01F);
      assertEquals(2888.4116F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertFalse(boolean0);
      
      wall0.setRightSideShininess(840.561F);
      assertEquals((-2888.4116F), wall0.getThickness(), 0.01F);
      assertEquals((-2888.4116F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2888.4116F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2888.4116F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2888.4116F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(840.561F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1444.2058F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2888.4116F, wall0.getLength(), 0.01F);
      assertEquals(2888.4116F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-39.814686F), 0.0F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      wall0.setXEnd(0.0F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, (-5509.0F), (-39.814686F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-39.814686F), wall1.getThickness(), 0.01F);
      assertEquals(7790.9023F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(7790.9023F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotNull(wall1);
      
      boolean boolean0 = wall1.containsWallEndAt(0.0F, 0.0F, (-39.814686F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-39.814686F), wall1.getThickness(), 0.01F);
      assertEquals(7790.9023F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(7790.9023F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(boolean0);
      assertNotSame(wall1, wall0);
      
      wall1.setLeftSideShininess((-126.94F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-39.814686F), wall1.getThickness(), 0.01F);
      assertEquals(7790.9023F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(7790.9023F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-126.94F), wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-39.814686F), wall1.getThickness(), 0.01F);
      assertEquals(7790.9023F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(7790.9023F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-126.94F), wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-39.814686F), wall1.getThickness(), 0.01F);
      assertEquals(7790.9023F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(7790.9023F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-126.94F), wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setXStart(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotSame(wall0, wall1);
      
      boolean boolean1 = wall0.isAtLevel((Level) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean1 == boolean0);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertTrue(boolean1);
      assertNotSame(wall0, wall1);
      
      Float float0 = wall0.getHeightAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(float0);
      assertNotSame(wall0, wall1);
      
      Wall wall2 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-126.94F), wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-39.814686F), wall2.getThickness(), 0.01F);
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertNotNull(wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall2.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-126.94F), wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-39.814686F), wall2.getThickness(), 0.01F);
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall2.setYEnd((-413.6307F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(5524.5063F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-126.94F), wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals((-413.6307F), wall2.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals(5524.5063F, wall2.getLength(), 0.01F);
      assertEquals((-206.81535F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-39.814686F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall2.setYEnd((-5509.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-126.94F), wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-39.814686F), wall2.getThickness(), 0.01F);
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      Wall wall3 = wall2.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-126.94F), wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-39.814686F), wall2.getThickness(), 0.01F);
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-19.907343F), wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertEquals(39.814686F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertNull(wall3.getHeight());
      assertEquals(39.814686F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall3.getYEnd(), 0.01F);
      assertNotNull(wall3);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall3, wall2);
      assertSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("NAME", propertyChangeListener0);
      assertEquals("NAME", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall3.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertEquals("NAME", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-126.94F), wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-39.814686F), wall2.getThickness(), 0.01F);
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-19.907343F), wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertEquals(39.814686F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertNull(wall3.getHeight());
      assertEquals(39.814686F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall3.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall3, wall2);
      assertSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      
      boolean boolean2 = wall0.intersectsRectangle((-5509.0F), (-5509.0F), 882.802F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertTrue(boolean2);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      
      boolean boolean3 = wall2.containsWallEndAt(0.0F, (-5509.0F), 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-126.94F), wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-39.814686F), wall2.getThickness(), 0.01F);
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertFalse(boolean3);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      
      try { 
        MockURL.URL("NAME", "NAME", "NAME");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: name
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Wall wall0 = new Wall((-285.4303F), (-1.0F), 2822.29F, (-1.0F), 2822.29F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2822.29F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3107.7202F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-285.4303F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(3107.7202F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2822.29F, wall0.getThickness(), 0.01F);
      assertEquals(1268.4299F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("}f", propertyChangeListener0);
      assertEquals("}f", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2822.29F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3107.7202F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-285.4303F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(3107.7202F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2822.29F, wall0.getThickness(), 0.01F);
      assertEquals(1268.4299F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals("}f", propertyChangeListenerProxy0.getPropertyName());
      
      wall0.setXEnd(2822.29F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2822.29F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3107.7202F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-285.4303F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(3107.7202F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2822.29F, wall0.getThickness(), 0.01F);
      assertEquals(1268.4299F, wall0.getXArcCircleCenter(), 0.01F);
      
      float float0 = wall0.getLength();
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2822.29F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3107.7202F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-285.4303F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(3107.7202F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2822.29F, wall0.getThickness(), 0.01F);
      assertEquals(1268.4299F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3107.7202F, float0, 0.01F);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("", (Content) null, 2688.633F, 2688.633F, false);
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals("", catalogTexture0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals(2688.633F, catalogTexture0.getWidth(), 0.01F);
      assertEquals(2688.633F, catalogTexture0.getHeight(), 0.01F);
      assertNotNull(catalogTexture0);
      
      String string0 = catalogTexture0.getName();
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals("", catalogTexture0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals(2688.633F, catalogTexture0.getWidth(), 0.01F);
      assertEquals(2688.633F, catalogTexture0.getHeight(), 0.01F);
      assertNotNull(string0);
      assertEquals("", string0);
      
      wall0.setPattern(catalogTexture0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2822.29F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3107.7202F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-285.4303F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(3107.7202F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2822.29F, wall0.getThickness(), 0.01F);
      assertEquals(1268.4299F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals("", catalogTexture0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals(2688.633F, catalogTexture0.getWidth(), 0.01F);
      assertEquals(2688.633F, catalogTexture0.getHeight(), 0.01F);
      
      Level level0 = new Level("grjCto*MkGt", 1115.983F, 0.1F, 0.0F);
      assertEquals(0.1F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("grjCto*MkGt", level0.getName());
      assertEquals(1115.983F, level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("grjCto*MkGt", (PropertyChangeListener) null);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertEquals("grjCto*MkGt", propertyChangeListenerProxy1.getPropertyName());
      assertNotNull(propertyChangeListenerProxy1);
      
      level0.addPropertyChangeListener(propertyChangeListenerProxy1);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertEquals(0.1F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("grjCto*MkGt", level0.getName());
      assertEquals(1115.983F, level0.getElevation(), 0.01F);
      assertEquals("grjCto*MkGt", propertyChangeListenerProxy1.getPropertyName());
      assertNotSame(propertyChangeListenerProxy1, propertyChangeListenerProxy0);
      
      wall0.setLevel(level0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2822.29F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3107.7202F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-285.4303F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(3107.7202F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2822.29F, wall0.getThickness(), 0.01F);
      assertEquals(1268.4299F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("grjCto*MkGt", level0.getName());
      assertEquals(1115.983F, level0.getElevation(), 0.01F);
      
      Wall wall1 = wall0.getWallAtEnd();
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2822.29F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3107.7202F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-285.4303F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(3107.7202F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2822.29F, wall0.getThickness(), 0.01F);
      assertEquals(1268.4299F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1);
      
      wall0.setHeightAtEnd((Float) null);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2822.29F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3107.7202F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-285.4303F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(3107.7202F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2822.29F, wall0.getThickness(), 0.01F);
      assertEquals(1268.4299F, wall0.getXArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 0.01F, 0.01F, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      Float float1 = new Float((double) 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(0.01F, (float)float1, 0.01F);
      
      wall0.setArcExtent(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      wall0.setArcExtent(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      Integer integer1 = wall0.getLeftSideColor();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertNull(integer1);
      
      float float2 = wall0.getLength();
      assertEquals(float2, float0, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Wall wall0 = new Wall(883.26F, 883.26F, 883.26F, (-3768.966F), 883.26F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-1442.853F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(883.26F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3768.966F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(883.26F, wall0.getXEnd(), 0.01F);
      assertEquals(4652.226F, wall0.getLength(), 0.01F);
      assertEquals(883.26F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(883.26F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4652.226F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(883.26F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsPoint(1.0F, (-1408.1874F), 2933.2476F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-1442.853F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(883.26F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3768.966F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(883.26F, wall0.getXEnd(), 0.01F);
      assertEquals(4652.226F, wall0.getLength(), 0.01F);
      assertEquals(883.26F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(883.26F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4652.226F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(883.26F, wall0.getThickness(), 0.01F);
      assertTrue(boolean0);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-1442.853F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(883.26F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3768.966F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(883.26F, wall0.getXEnd(), 0.01F);
      assertEquals(4652.226F, wall0.getLength(), 0.01F);
      assertEquals(883.26F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(883.26F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4652.226F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(883.26F, wall0.getThickness(), 0.01F);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Wall wall0 = new Wall((-1909.5084F), (-1909.5084F), (-1909.5084F), (-1909.5084F), (-1909.5084F));
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1909.5084F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1909.5084F), wall0.getXStart(), 0.01F);
      assertEquals((-1909.5084F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1909.5084F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1909.5084F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1909.5084F), wall0.getYEnd(), 0.01F);
      assertEquals((-1909.5084F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall((-1909.5084F), (-1909.5084F), (-1909.5084F), (-1.0F), (-1909.5084F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1909.5084F), wall1.getThickness(), 0.01F);
      assertEquals((-1909.5084F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1909.5084F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-955.2542F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1909.5084F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1908.5084F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1908.5084F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1909.5084F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1909.5084F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1909.5084F), wall0.getXStart(), 0.01F);
      assertEquals((-1909.5084F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1909.5084F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1909.5084F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1909.5084F), wall0.getYEnd(), 0.01F);
      assertEquals((-1909.5084F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1909.5084F), wall1.getThickness(), 0.01F);
      assertEquals((-1909.5084F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1909.5084F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-955.2542F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1909.5084F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1908.5084F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1908.5084F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1909.5084F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setYEnd((-1909.5084F));
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1909.5084F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1909.5084F), wall0.getXStart(), 0.01F);
      assertEquals((-1909.5084F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1909.5084F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1909.5084F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1909.5084F), wall0.getYEnd(), 0.01F);
      assertEquals((-1909.5084F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1909.5084F), wall1.getThickness(), 0.01F);
      assertEquals((-1909.5084F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1909.5084F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-955.2542F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1909.5084F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1908.5084F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1908.5084F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1909.5084F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Wall wall0 = new Wall((-416.9001F), (-416.9001F), (-416.9001F), (-416.9001F), (-416.9001F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-416.9001F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-416.9001F), wall0.getXEnd(), 0.01F);
      assertEquals((-416.9001F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-416.9001F), wall0.getXStart(), 0.01F);
      assertEquals((-416.9001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-416.9001F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-416.9001F), wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("'", (PropertyChangeListener) null);
      assertEquals("'", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      boolean boolean0 = wall0.intersectsRectangle((-416.9001F), (-416.9001F), (-647.1521F), (-416.9001F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-416.9001F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-416.9001F), wall0.getXEnd(), 0.01F);
      assertEquals((-416.9001F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-416.9001F), wall0.getXStart(), 0.01F);
      assertEquals((-416.9001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-416.9001F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-416.9001F), wall0.getYStart(), 0.01F);
      assertFalse(boolean0);
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-416.9001F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-416.9001F), wall0.getXEnd(), 0.01F);
      assertEquals((-416.9001F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-416.9001F), wall0.getXStart(), 0.01F);
      assertEquals((-416.9001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-416.9001F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-416.9001F), wall0.getYStart(), 0.01F);
      assertEquals("'", propertyChangeListenerProxy0.getPropertyName());
      
      boolean boolean1 = wall0.containsWallEndAt((-2954.381F), (-416.9001F), (-416.9001F));
      assertTrue(boolean1 == boolean0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-416.9001F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-416.9001F), wall0.getXEnd(), 0.01F);
      assertEquals((-416.9001F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-416.9001F), wall0.getXStart(), 0.01F);
      assertEquals((-416.9001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-416.9001F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-416.9001F), wall0.getYStart(), 0.01F);
      assertFalse(boolean1);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>(linkedList0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(linkedList1.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList1);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(linkedList1.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      
      boolean boolean2 = linkedList0.addAll(0, (Collection<? extends Wall>) list0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(linkedList1.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(boolean2);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      
      boolean boolean3 = linkedList0.add(wall0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(linkedList0.contains(wall0));
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-416.9001F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-416.9001F), wall0.getXEnd(), 0.01F);
      assertEquals((-416.9001F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-416.9001F), wall0.getXStart(), 0.01F);
      assertEquals((-416.9001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-416.9001F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-416.9001F), wall0.getYStart(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean3);
      assertNotSame(linkedList0, linkedList1);
      
      List<Wall> list1 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(list1.equals((Object)list0));
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertNotNull(list1);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(list1, list0);
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-416.9001F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-416.9001F), wall0.getXEnd(), 0.01F);
      assertEquals((-416.9001F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-416.9001F), wall0.getXStart(), 0.01F);
      assertEquals((-416.9001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-416.9001F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-416.9001F), wall0.getYStart(), 0.01F);
      assertNull(integer0);
      
      float float0 = wall0.getYStart();
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-416.9001F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-416.9001F), wall0.getXEnd(), 0.01F);
      assertEquals((-416.9001F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-416.9001F), wall0.getXStart(), 0.01F);
      assertEquals((-416.9001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-416.9001F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-416.9001F), wall0.getYStart(), 0.01F);
      assertEquals((-416.9001F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, (-1564.5F), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1564.51F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-1564.5F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1564.51F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-782.245F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1564.51F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-1564.5F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1564.51F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-782.245F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1564.51F, float0, 0.01F);
      
      Integer integer0 = new Integer((-39));
      assertNotNull(integer0);
      assertEquals((-39), (int)integer0);
      
      wall0.setRightSideColor(integer0);
      assertEquals((-39), (int)wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1564.51F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-1564.5F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1564.51F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-782.245F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      boolean boolean0 = wall0.containsPoint(0.0F, (-1564.5F), (-1564.5F));
      assertEquals((-39), (int)wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1564.51F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-1564.5F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1564.51F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-782.245F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(boolean0);
      
      Float float1 = new Float((double) (-1564.5F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1564.5F), (float)float1, 0.01F);
      
      boolean boolean1 = Float.isFinite((-39));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float float2 = Float.min((-868.6339F), (-3534.024F));
      assertNotEquals(float2, float0, 0.01F);
      assertEquals((-3534.024F), float2, 0.01F);
      
      wall0.setArcExtent(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertEquals((-39), (int)wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1564.51F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-1564.5F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(119049.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.86256944E8F, wall0.getLength(), 0.01F);
      assertEquals((-1564.5F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-782.245F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setRightSideShininess(1564.51F);
      assertEquals((-39), (int)wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(1564.51F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1564.51F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-1564.5F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(119049.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.86256944E8F, wall0.getLength(), 0.01F);
      assertEquals((-1564.5F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-782.245F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float3 = Float.valueOf((-1251.685F));
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      assertEquals((-1251.685F), (float)float3, 0.01F);
      
      float float4 = Float.max(0.0F, (-4501.0F));
      assertNotEquals(float4, float0, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertEquals(0.0F, float4, 0.01F);
      
      wall0.setArcExtent(float1);
      assertNotEquals((float)float1, (float)float4, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float3, 0.01F);
      assertEquals((-39), (int)wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(1564.51F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1564.51F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-1564.5F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(119049.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.86256944E8F, wall0.getLength(), 0.01F);
      assertEquals((-1564.5F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-782.245F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setXEnd((-868.6339F));
      assertEquals((-39), (int)wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(1564.51F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1564.5F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(118615.19F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1789.4786F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.13039776E8F, wall0.getLength(), 0.01F);
      assertEquals((-1564.5F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals((-66880.66F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-868.6339F), wall0.getXEnd(), 0.01F);
      
      wall0.setLeftSideShininess(1094.8785F);
      assertEquals(1094.8785F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-39), (int)wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(1564.51F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1564.5F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(118615.19F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1789.4786F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.13039776E8F, wall0.getLength(), 0.01F);
      assertEquals((-1564.5F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals((-66880.66F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-868.6339F), wall0.getXEnd(), 0.01F);
      
      // Undeclared exception!
      wall0.containsWallEndAt((-258.0F), 0.1F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Wall wall0 = new Wall((-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1907.0964F), wall0.getXEnd(), 0.01F);
      assertEquals((-1907.0964F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1907.0964F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1907.0964F), wall0.getYStart(), 0.01F);
      assertEquals((-1907.0964F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1907.0964F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1907.0964F), wall0.getHeight(), 0.01F);
      assertEquals((-1907.0964F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Integer integer0 = Integer.valueOf((-2553));
      assertNotNull(integer0);
      assertEquals((-2553), (int)integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1907.0964F), wall0.getXEnd(), 0.01F);
      assertEquals((-1907.0964F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1907.0964F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1907.0964F), wall0.getYStart(), 0.01F);
      assertEquals((-1907.0964F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2553), (int)wall0.getLeftSideColor());
      assertEquals((-1907.0964F), wall0.getXStart(), 0.01F);
      assertEquals((-1907.0964F), wall0.getHeight(), 0.01F);
      assertEquals((-1907.0964F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      float float0 = wall0.getYArcCircleCenter();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1907.0964F), wall0.getXEnd(), 0.01F);
      assertEquals((-1907.0964F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1907.0964F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1907.0964F), wall0.getYStart(), 0.01F);
      assertEquals((-1907.0964F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2553), (int)wall0.getLeftSideColor());
      assertEquals((-1907.0964F), wall0.getXStart(), 0.01F);
      assertEquals((-1907.0964F), wall0.getHeight(), 0.01F);
      assertEquals((-1907.0964F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1907.0964F), float0, 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1907.0964F), wall0.getXEnd(), 0.01F);
      assertEquals((-1907.0964F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1907.0964F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1907.0964F), wall0.getYStart(), 0.01F);
      assertEquals((-1907.0964F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2553), (int)wall0.getLeftSideColor());
      assertEquals((-1907.0964F), wall0.getXStart(), 0.01F);
      assertEquals((-1907.0964F), wall0.getHeight(), 0.01F);
      assertEquals((-1907.0964F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1907.0964F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1907.0964F), wall1.getYStart(), 0.01F);
      assertEquals((-2553), (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1907.0964F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1907.0964F), wall1.getXStart(), 0.01F);
      assertEquals((-1907.0964F), wall1.getXEnd(), 0.01F);
      assertEquals((-1907.0964F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1907.0964F), wall1.getYEnd(), 0.01F);
      assertEquals((-1907.0964F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float1 = wall0.getThickness();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1907.0964F), wall0.getXEnd(), 0.01F);
      assertEquals((-1907.0964F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1907.0964F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1907.0964F), wall0.getYStart(), 0.01F);
      assertEquals((-1907.0964F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2553), (int)wall0.getLeftSideColor());
      assertEquals((-1907.0964F), wall0.getXStart(), 0.01F);
      assertEquals((-1907.0964F), wall0.getHeight(), 0.01F);
      assertEquals((-1907.0964F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1907.0964F), float1, 0.01F);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Wall wall0 = new Wall(124.0F, 1.0F, 4947.53F, 812.47F, 731.24475F, 124.0F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(812.47F, wall0.getYEnd(), 0.01F);
      assertEquals(4891.311F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4891.311F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(124.0F, wall0.getHeight(), 0.01F);
      assertEquals(406.735F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(731.24475F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2535.765F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4947.53F, wall0.getXEnd(), 0.01F);
      assertEquals(124.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeightAtEnd();
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(812.47F, wall0.getYEnd(), 0.01F);
      assertEquals(4891.311F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4891.311F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(124.0F, wall0.getHeight(), 0.01F);
      assertEquals(406.735F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(731.24475F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2535.765F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4947.53F, wall0.getXEnd(), 0.01F);
      assertEquals(124.0F, wall0.getXStart(), 0.01F);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotNull(wall1);
      
      wall0.setRightSideShininess(1.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setXStart(2767.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1383.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2767.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2767.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2767.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1383.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2767.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2767.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2767.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setYEnd(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1383.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2767.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2767.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2767.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall0.containsWallStartAt(0.1F, 0.1F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1383.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2767.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2767.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2767.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1383.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2767.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2767.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2767.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNotNull(wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-39.814686F), 1.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setXEnd(0.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, (-5.6842194F), 1.0F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(5509.003F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2.8421097F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-5.6842194F), wall1.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(5509.003F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotNull(wall1);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(5509.003F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2.8421097F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-5.6842194F), wall1.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(5509.003F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(5509.003F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2.8421097F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-5.6842194F), wall1.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(5509.003F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(5509.003F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2.8421097F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-5.6842194F), wall1.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(5509.003F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setXStart(1.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall0.isAtLevel((Level) null);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertTrue(boolean0);
      assertNotSame(wall0, wall1);
      
      Float float0 = wall0.getHeightAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(float0);
      assertNotSame(wall0, wall1);
      
      Wall wall2 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(5509.003F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-2.8421097F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-5.6842194F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(5509.003F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertNotNull(wall2);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall2.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(5509.003F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-2.8421097F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-5.6842194F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(5509.003F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall2.setYEnd((-413.6307F));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(5524.5063F, wall2.getLength(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertEquals(5524.5063F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-413.6307F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals((-206.81535F), wall2.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall2.setYEnd((-5509.0F));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      Wall wall3 = wall2.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals(1.0F, wall3.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall3.getYEnd(), 0.01F);
      assertEquals(1.0F, wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals(39.827244F, wall3.getLength(), 0.01F);
      assertEquals((-19.907343F), wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.5F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(39.827244F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeight());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertNotNull(wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall3);
      assertNotSame(wall2, wall3);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("NAME", propertyChangeListener0);
      assertEquals("NAME", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall3.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals(1.0F, wall3.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall3.getYEnd(), 0.01F);
      assertEquals(1.0F, wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals(39.827244F, wall3.getLength(), 0.01F);
      assertEquals((-19.907343F), wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.5F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(39.827244F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeight());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals("NAME", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall3);
      assertNotSame(wall2, wall3);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      
      boolean boolean1 = wall0.containsWallEndAt(0.0F, 882.802F, 319.47F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean1 == boolean0);
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertFalse(boolean1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall3);
      
      boolean boolean2 = wall2.containsWallEndAt(0.0F, (-5509.0F), (-5.6842194F));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertFalse(boolean2);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall3);
      assertNotSame(wall2, wall3);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("", uRLContent0, 1483.6783F, 1483.6783F, true);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertTrue(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals(1483.6783F, catalogTexture0.getWidth(), 0.01F);
      assertEquals(1483.6783F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("", catalogTexture0.getName());
      assertNotNull(catalogTexture0);
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertTrue(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals(1483.6783F, catalogTexture0.getWidth(), 0.01F);
      assertEquals(1483.6783F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("", catalogTexture0.getName());
      assertEquals(1483.6783F, homeTexture0.getHeight(), 0.01F);
      assertEquals(1483.6783F, homeTexture0.getWidth(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals("", homeTexture0.getName());
      assertNotNull(homeTexture0);
      
      boolean boolean3 = homeTexture0.equals(uRLContent0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertTrue(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals(1483.6783F, catalogTexture0.getWidth(), 0.01F);
      assertEquals(1483.6783F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("", catalogTexture0.getName());
      assertEquals(1483.6783F, homeTexture0.getHeight(), 0.01F);
      assertEquals(1483.6783F, homeTexture0.getWidth(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals("", homeTexture0.getName());
      assertFalse(boolean3);
      
      wall3.setLeftSideTexture(homeTexture0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertTrue(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals(1483.6783F, catalogTexture0.getWidth(), 0.01F);
      assertEquals(1483.6783F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("", catalogTexture0.getName());
      assertEquals(1483.6783F, homeTexture0.getHeight(), 0.01F);
      assertEquals(1483.6783F, homeTexture0.getWidth(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals("", homeTexture0.getName());
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals(1.0F, wall3.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall3.getYEnd(), 0.01F);
      assertEquals(1.0F, wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals(39.827244F, wall3.getLength(), 0.01F);
      assertEquals((-19.907343F), wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.5F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(39.827244F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeight());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall3);
      assertNotSame(wall2, wall3);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      wall0.move(0.0F, 0.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      wall0.setXEnd((-705.96F));
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, 30.8F, (-2911.459F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(30.8F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(30.8F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(30.8F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(30.8F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(30.8F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(30.8F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float0 = wall0.getLeftSideShininess();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(705.96F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(705.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-352.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(wall0, wall1);
      
      wall0.setXStart(1.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotSame(wall0, wall1);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(30.8F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(30.8F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      boolean boolean0 = wall0.containsPoint(0.0F, 30.8F, (-705.96F));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      
      Float float1 = wall0.getHeightAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(float1);
      assertNotSame(wall0, wall1);
      
      Wall wall2 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(30.8F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(30.8F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(15.4F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(30.8F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNotNull(wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      Wall wall3 = wall1.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(30.8F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals(30.8F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(30.8F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(30.8F, wall3.getYEnd(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertEquals(30.8F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(15.4F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getHeight(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall3.getThickness(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertNotNull(wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertSame(wall1, wall2);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      
      wall0.setXStart((-1130.2863F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(424.32623F, wall0.getLength(), 0.01F);
      assertEquals((-1130.2863F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals((-918.12317F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(424.32623F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      
      Wall wall4 = new Wall(568.0F, (-1755.08F), 0.0F, 2.0F, (-705.96F));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall0));
      assertEquals((-705.96F), wall4.getThickness(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertNull(wall4.getHeight());
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertNull(wall4.getHeightAtEnd());
      assertNull(wall4.getLeftSideColor());
      assertFalse(wall4.isTrapezoidal());
      assertEquals(1846.6061F, wall4.getLength(), 0.01F);
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertEquals(568.0F, wall4.getXStart(), 0.01F);
      assertEquals((-1755.08F), wall4.getYStart(), 0.01F);
      assertEquals(284.0F, wall4.getXArcCircleCenter(), 0.01F);
      assertEquals(1846.6061F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall4.getYEnd(), 0.01F);
      assertEquals(0.0F, wall4.getXEnd(), 0.01F);
      assertEquals((-876.54F), wall4.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall4);
      
      wall4.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall4));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall0));
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(424.32623F, wall0.getLength(), 0.01F);
      assertEquals((-1130.2863F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals((-918.12317F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(424.32623F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-705.96F), wall4.getThickness(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertNull(wall4.getHeight());
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertNull(wall4.getHeightAtEnd());
      assertNull(wall4.getLeftSideColor());
      assertFalse(wall4.isTrapezoidal());
      assertEquals(1846.6061F, wall4.getLength(), 0.01F);
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertEquals(568.0F, wall4.getXStart(), 0.01F);
      assertEquals((-1755.08F), wall4.getYStart(), 0.01F);
      assertEquals(284.0F, wall4.getXArcCircleCenter(), 0.01F);
      assertEquals(1846.6061F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall4.getYEnd(), 0.01F);
      assertEquals(0.0F, wall4.getXEnd(), 0.01F);
      assertEquals((-876.54F), wall4.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall4);
      assertNotSame(wall4, wall3);
      assertNotSame(wall4, wall2);
      assertNotSame(wall4, wall1);
      assertNotSame(wall4, wall0);
      
      float float2 = wall4.getXEnd();
      assertEquals(float2, float0, 0.01F);
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall0));
      assertEquals((-705.96F), wall4.getThickness(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertNull(wall4.getHeight());
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertNull(wall4.getHeightAtEnd());
      assertNull(wall4.getLeftSideColor());
      assertFalse(wall4.isTrapezoidal());
      assertEquals(1846.6061F, wall4.getLength(), 0.01F);
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertEquals(568.0F, wall4.getXStart(), 0.01F);
      assertEquals((-1755.08F), wall4.getYStart(), 0.01F);
      assertEquals(284.0F, wall4.getXArcCircleCenter(), 0.01F);
      assertEquals(1846.6061F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall4.getYEnd(), 0.01F);
      assertEquals(0.0F, wall4.getXEnd(), 0.01F);
      assertEquals((-876.54F), wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      assertNotSame(wall4, wall3);
      assertNotSame(wall4, wall2);
      assertNotSame(wall4, wall1);
      assertNotSame(wall4, wall0);
      
      wall2.setHeight((Float) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(424.32623F, wall0.getLength(), 0.01F);
      assertEquals((-1130.2863F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals((-918.12317F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(424.32623F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(30.8F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(30.8F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(15.4F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(30.8F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall4);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall3);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      wall0.move((-392.12F), 0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-392.12F), wall0.getXStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-392.12F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-392.12F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, (-392.12F), (-2911.459F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-392.12F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(5522.9375F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(5522.9375F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-196.06F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-392.12F), wall0.getXStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-392.12F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-392.12F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-392.12F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(5522.9375F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(5522.9375F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-196.06F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-392.12F), wall0.getXStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-392.12F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-392.12F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-392.12F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(5522.9375F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(5522.9375F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-196.06F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setLeftSideShininess((-515.216F));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-515.216F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-392.12F), wall0.getXStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-392.12F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-392.12F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      
      wall0.setYEnd((-515.216F));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(515.216F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-515.216F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(515.216F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-392.12F), wall0.getXStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-257.608F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-392.12F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-392.12F), wall0.getXEnd(), 0.01F);
      assertEquals((-515.216F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall0.containsWallStartAt(0.0F, 543.0F, 1371.7F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(515.216F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-515.216F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(515.216F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-392.12F), wall0.getXStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-257.608F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-392.12F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-392.12F), wall0.getXEnd(), 0.01F);
      assertEquals((-515.216F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertTrue(boolean0);
      assertNotSame(wall0, wall1);
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-392.12F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(5522.9375F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(5522.9375F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-196.06F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = new Wall(0.0F, 543.0F, 0.0F, (-392.12F), 0.0F);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-392.12F), wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(935.12F, wall2.getLength(), 0.01F);
      assertEquals(75.44F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(543.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(935.12F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNotNull(wall2);
      
      Integer integer0 = new Integer(961);
      assertNotNull(integer0);
      assertEquals(961, (int)integer0);
      
      wall2.setLeftSideColor(integer0);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-392.12F), wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(935.12F, wall2.getLength(), 0.01F);
      assertEquals(75.44F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(543.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(961, (int)wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(935.12F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      wall2.setXEnd(0.0F);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-392.12F), wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(935.12F, wall2.getLength(), 0.01F);
      assertEquals(75.44F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(543.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(961, (int)wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(935.12F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      float[][] floatArray1 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(515.216F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-515.216F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(515.216F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-392.12F), wall0.getXStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-257.608F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-392.12F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-392.12F), wall0.getXEnd(), 0.01F);
      assertEquals((-515.216F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean1 = wall2.isTrapezoidal();
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-392.12F), wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(935.12F, wall2.getLength(), 0.01F);
      assertEquals(75.44F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(543.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(961, (int)wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(935.12F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(boolean1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals(515.216F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-515.216F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(515.216F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-392.12F), wall0.getXStart(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-257.608F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-392.12F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-392.12F), wall0.getXEnd(), 0.01F);
      assertEquals((-515.216F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(homeTexture0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-39.814686F), (-2941.5867F));
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall((-2941.5867F), (-2941.5867F), (-5514.408F), (-5514.408F), (-5514.408F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-5514.408F), wall1.getXEnd(), 0.01F);
      assertEquals((-5514.408F), wall1.getYEnd(), 0.01F);
      assertEquals((-4227.9976F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(3638.519F, wall1.getLength(), 0.01F);
      assertEquals((-5514.408F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2941.5867F), wall1.getYStart(), 0.01F);
      assertEquals((-2941.5867F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-4227.9976F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3638.519F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotNull(wall1);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-5514.408F), wall1.getXEnd(), 0.01F);
      assertEquals((-5514.408F), wall1.getYEnd(), 0.01F);
      assertEquals((-4227.9976F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(3638.519F, wall1.getLength(), 0.01F);
      assertEquals((-5514.408F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2941.5867F), wall1.getYStart(), 0.01F);
      assertEquals((-2941.5867F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-4227.9976F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3638.519F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-5514.408F), wall1.getXEnd(), 0.01F);
      assertEquals((-5514.408F), wall1.getYEnd(), 0.01F);
      assertEquals((-4227.9976F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(3638.519F, wall1.getLength(), 0.01F);
      assertEquals((-5514.408F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2941.5867F), wall1.getYStart(), 0.01F);
      assertEquals((-2941.5867F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-4227.9976F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3638.519F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setXStart(1.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall0.isAtLevel((Level) null);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertTrue(boolean0);
      assertNotSame(wall0, wall1);
      
      Float float0 = wall0.getHeightAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(float0);
      assertNotSame(wall0, wall1);
      
      Wall wall2 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3638.519F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-2941.5867F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-5514.408F), wall2.getXEnd(), 0.01F);
      assertEquals((-4227.9976F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-5514.408F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-5514.408F), wall2.getThickness(), 0.01F);
      assertEquals(3638.519F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2941.5867F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-4227.9976F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNotNull(wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      wall1.setLeftSideShininess((-515.216F));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-5514.408F), wall1.getXEnd(), 0.01F);
      assertEquals((-5514.408F), wall1.getYEnd(), 0.01F);
      assertEquals((-4227.9976F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(3638.519F, wall1.getLength(), 0.01F);
      assertEquals((-5514.408F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2941.5867F), wall1.getYStart(), 0.01F);
      assertEquals((-2941.5867F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-515.216F), wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-4227.9976F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3638.519F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      wall2.setYEnd(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-2941.5867F), wall2.getXStart(), 0.01F);
      assertEquals(3907.9844F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-5514.408F), wall2.getXEnd(), 0.01F);
      assertEquals((-4227.9976F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-5514.408F), wall2.getThickness(), 0.01F);
      assertEquals((-515.216F), wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-2941.5867F), wall2.getYStart(), 0.01F);
      assertEquals((-1470.7933F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(3907.9844F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      boolean boolean1 = wall2.containsWallStartAt(2507.9F, (-39.814686F), 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-2941.5867F), wall2.getXStart(), 0.01F);
      assertEquals(3907.9844F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-5514.408F), wall2.getXEnd(), 0.01F);
      assertEquals((-4227.9976F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-5514.408F), wall2.getThickness(), 0.01F);
      assertEquals((-515.216F), wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-2941.5867F), wall2.getYStart(), 0.01F);
      assertEquals((-1470.7933F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(3907.9844F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-5514.408F), wall1.getXEnd(), 0.01F);
      assertEquals(3907.9844F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-5514.408F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1470.7933F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3907.9844F, wall1.getLength(), 0.01F);
      assertEquals((-2941.5867F), wall1.getYStart(), 0.01F);
      assertEquals((-2941.5867F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-515.216F), wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-4227.9976F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(39.827244F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2941.5867F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(39.827244F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Wall wall0 = new Wall(2822.29F, (-285.4303F), 2822.29F, (-1.0F), 2822.29F);
      assertEquals(2822.29F, wall0.getThickness(), 0.01F);
      assertEquals((-285.4303F), wall0.getYStart(), 0.01F);
      assertEquals(284.4303F, wall0.getLength(), 0.01F);
      assertEquals(2822.29F, wall0.getXStart(), 0.01F);
      assertEquals(284.4303F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2822.29F, wall0.getXEnd(), 0.01F);
      assertEquals((-143.21515F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2822.29F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      wall0.setYEnd((-1.0F));
      assertEquals(2822.29F, wall0.getThickness(), 0.01F);
      assertEquals((-285.4303F), wall0.getYStart(), 0.01F);
      assertEquals(284.4303F, wall0.getLength(), 0.01F);
      assertEquals(2822.29F, wall0.getXStart(), 0.01F);
      assertEquals(284.4303F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2822.29F, wall0.getXEnd(), 0.01F);
      assertEquals((-143.21515F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2822.29F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      wall0.setXEnd(2822.29F);
      assertEquals(2822.29F, wall0.getThickness(), 0.01F);
      assertEquals((-285.4303F), wall0.getYStart(), 0.01F);
      assertEquals(284.4303F, wall0.getLength(), 0.01F);
      assertEquals(2822.29F, wall0.getXStart(), 0.01F);
      assertEquals(284.4303F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2822.29F, wall0.getXEnd(), 0.01F);
      assertEquals((-143.21515F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2822.29F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      float float0 = wall0.getLength();
      assertEquals(2822.29F, wall0.getThickness(), 0.01F);
      assertEquals((-285.4303F), wall0.getYStart(), 0.01F);
      assertEquals(284.4303F, wall0.getLength(), 0.01F);
      assertEquals(2822.29F, wall0.getXStart(), 0.01F);
      assertEquals(284.4303F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2822.29F, wall0.getXEnd(), 0.01F);
      assertEquals((-143.21515F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2822.29F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(284.4303F, float0, 0.01F);
      
      wall0.setRightSideShininess(2688.633F);
      assertEquals(2822.29F, wall0.getThickness(), 0.01F);
      assertEquals((-285.4303F), wall0.getYStart(), 0.01F);
      assertEquals(284.4303F, wall0.getLength(), 0.01F);
      assertEquals(2822.29F, wall0.getXStart(), 0.01F);
      assertEquals(284.4303F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2822.29F, wall0.getXEnd(), 0.01F);
      assertEquals((-143.21515F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2822.29F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2688.633F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Float float1 = Float.valueOf((-1.0F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1.0F), (float)float1, 0.01F);
      
      boolean boolean0 = Float.isFinite((-2257.0F));
      assertTrue(boolean0);
      
      wall0.setArcExtent(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2822.29F, wall0.getThickness(), 0.01F);
      assertEquals((-285.4303F), wall0.getYStart(), 0.01F);
      assertEquals(2822.29F, wall0.getXStart(), 0.01F);
      assertEquals(284.4303F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3082.613F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(296.6365F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2822.29F, wall0.getXEnd(), 0.01F);
      assertEquals((-143.21515F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2688.633F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setXEnd((-285.4303F));
      assertEquals(2822.29F, wall0.getThickness(), 0.01F);
      assertEquals((-285.4303F), wall0.getYStart(), 0.01F);
      assertEquals(2822.29F, wall0.getXStart(), 0.01F);
      assertEquals(3120.7092F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-285.4303F), wall0.getXEnd(), 0.01F);
      assertEquals(3254.6338F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2701.1067F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1528.753F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2688.633F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      boolean boolean1 = wall0.containsWallEndAt(284.4303F, 0.0F, 0.0F);
      assertFalse(boolean1 == boolean0);
      assertEquals(2822.29F, wall0.getThickness(), 0.01F);
      assertEquals((-285.4303F), wall0.getYStart(), 0.01F);
      assertEquals(2822.29F, wall0.getXStart(), 0.01F);
      assertEquals(3120.7092F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-285.4303F), wall0.getXEnd(), 0.01F);
      assertEquals(3254.6338F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2701.1067F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1528.753F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2688.633F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(boolean1);
      
      wall0.setYEnd(0.0F);
      assertEquals(2822.29F, wall0.getThickness(), 0.01F);
      assertEquals(3254.729F, wall0.getLength(), 0.01F);
      assertEquals((-285.4303F), wall0.getYStart(), 0.01F);
      assertEquals(2822.29F, wall0.getXStart(), 0.01F);
      assertEquals(1529.6682F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3120.8005F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-285.4303F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2701.6067F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2688.633F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      boolean boolean2 = wall0.containsWallStartAt(0.0F, 278.50333F, 0.0F);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(2822.29F, wall0.getThickness(), 0.01F);
      assertEquals(3254.729F, wall0.getLength(), 0.01F);
      assertEquals((-285.4303F), wall0.getYStart(), 0.01F);
      assertEquals(2822.29F, wall0.getXStart(), 0.01F);
      assertEquals(1529.6682F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3120.8005F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-285.4303F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2701.6067F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2688.633F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(boolean2);
      
      wall0.setXStart(2.0F);
      assertEquals(2822.29F, wall0.getThickness(), 0.01F);
      assertEquals(120.353676F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-285.4303F), wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(119.523186F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-285.4303F), wall0.getXEnd(), 0.01F);
      assertEquals(422.45987F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(405.07608F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2688.633F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      boolean boolean3 = wall0.containsWallEndAt((-285.4303F), 2822.29F, 937.97894F);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(2822.29F, wall0.getThickness(), 0.01F);
      assertEquals(120.353676F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-285.4303F), wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(119.523186F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-285.4303F), wall0.getXEnd(), 0.01F);
      assertEquals(422.45987F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(405.07608F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2688.633F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(boolean3);
      
      boolean boolean4 = wall0.containsWallEndAt((-1.0F), (-285.4303F), 2822.29F);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertEquals(2822.29F, wall0.getThickness(), 0.01F);
      assertEquals(120.353676F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-285.4303F), wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(119.523186F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-285.4303F), wall0.getXEnd(), 0.01F);
      assertEquals(422.45987F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(405.07608F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2688.633F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertTrue(boolean4);
      
      float float2 = wall0.getYEnd();
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(2822.29F, wall0.getThickness(), 0.01F);
      assertEquals(120.353676F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-285.4303F), wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(119.523186F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-285.4303F), wall0.getXEnd(), 0.01F);
      assertEquals(422.45987F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(405.07608F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2688.633F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Wall wall0 = new Wall((-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F), (-1907.0964F));
      assertEquals((-1907.0964F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1907.0964F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1907.0964F), wall0.getXEnd(), 0.01F);
      assertEquals((-1907.0964F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1907.0964F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1907.0964F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1907.0964F), wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getYArcCircleCenter();
      assertEquals((-1907.0964F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1907.0964F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1907.0964F), wall0.getXEnd(), 0.01F);
      assertEquals((-1907.0964F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1907.0964F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1907.0964F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1907.0964F), wall0.getYStart(), 0.01F);
      assertEquals((-1907.0964F), float0, 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1907.0964F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1907.0964F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1907.0964F), wall0.getXEnd(), 0.01F);
      assertEquals((-1907.0964F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1907.0964F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1907.0964F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1907.0964F), wall0.getYStart(), 0.01F);
      assertEquals((-1907.0964F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1907.0964F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1907.0964F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1907.0964F), wall1.getYStart(), 0.01F);
      assertEquals((-1907.0964F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1907.0964F), wall1.getXEnd(), 0.01F);
      assertEquals((-1907.0964F), wall1.getYEnd(), 0.01F);
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setThickness((-619.237F));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-1907.0964F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1907.0964F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1907.0964F), wall0.getXEnd(), 0.01F);
      assertEquals((-1907.0964F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1907.0964F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-619.237F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1907.0964F), wall0.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(0.0F, 0.0F, 39.814686F, 3166.7559F, 39.814686F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(3167.006F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(39.814686F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3166.7559F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1583.3779F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(19.907343F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3167.006F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(39.814686F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(wall1);
      
      Level level0 = wall1.getLevel();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(3167.006F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(39.814686F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3166.7559F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1583.3779F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(19.907343F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3167.006F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(39.814686F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(level0);
      assertNotSame(wall1, wall0);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("dPw)Wzn$83XF_", "dPw)Wzn$83XF_", resourceURLContent0, 709.3568F, 39.814686F, (String) null, false);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals("dPw)Wzn$83XF_", catalogTexture0.getName());
      assertEquals(39.814686F, catalogTexture0.getHeight(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("dPw)Wzn$83XF_", catalogTexture0.getId());
      assertEquals(709.3568F, catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertNotNull(catalogTexture0);
      
      wall0.setPattern(catalogTexture0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals("dPw)Wzn$83XF_", catalogTexture0.getName());
      assertEquals(39.814686F, catalogTexture0.getHeight(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("dPw)Wzn$83XF_", catalogTexture0.getId());
      assertEquals(709.3568F, catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertNotSame(wall0, wall1);
      
      wall0.setLevel((Level) null);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      
      wall0.setXEnd(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      
      Wall wall2 = wall0.clone();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNotNull(wall2);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      Wall wall3 = new Wall((-1.0F), 0.0F, (-115.4649F), (-7211.91F), (-7211.91F), 523.9F);
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertEquals((-58.23245F), wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertEquals((-7211.91F), wall3.getYEnd(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertEquals(7212.8184F, wall3.getLength(), 0.01F);
      assertEquals((-7211.91F), wall3.getThickness(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getLeftSideColor());
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-115.4649F), wall3.getXEnd(), 0.01F);
      assertEquals(7212.8184F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(523.9F, wall3.getHeight(), 0.01F);
      assertEquals((-3605.955F), wall3.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall3);
      
      wall1.setXStart(39.814686F);
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals(3166.7559F, wall1.getLength(), 0.01F);
      assertEquals(39.814686F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3166.7559F, wall1.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1583.3779F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(39.814686F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3166.7559F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(39.814686F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((double) 39.814686F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(39.814686F, (float)float1, 0.01F);
      
      int int0 = Float.compare(0.0F, 0.0F);
      assertEquals(0, int0);
      
      wall0.setArcExtent((Float) 0.0F);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall2.containsWallEndAt((-1.0F), 2430.332F, 727.9317F);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertFalse(boolean0);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      
      CatalogTexture catalogTexture1 = (CatalogTexture)wall2.getPattern();
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(catalogTexture1.isModifiable());
      assertEquals("dPw)Wzn$83XF_", catalogTexture1.getId());
      assertEquals(709.3568F, catalogTexture1.getWidth(), 0.01F);
      assertNull(catalogTexture1.getCreator());
      assertEquals("dPw)Wzn$83XF_", catalogTexture1.getName());
      assertEquals(39.814686F, catalogTexture1.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNotNull(catalogTexture1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(catalogTexture1, catalogTexture0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Wall wall0 = new Wall(2.0F, 2.0F, (-1774.93F), 158.5F, (-170.9F));
      assertEquals(1783.8085F, wall0.getLength(), 0.01F);
      assertEquals(80.25F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-886.465F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(158.5F, wall0.getYEnd(), 0.01F);
      assertEquals(1783.8085F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1774.93F), wall0.getXEnd(), 0.01F);
      assertEquals((-170.9F), wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = new Level("grjCto*MkGt", 1115.983F, 0.1F, 0.0F);
      assertEquals(0.1F, level0.getFloorThickness(), 0.01F);
      assertEquals(1115.983F, level0.getElevation(), 0.01F);
      assertEquals("grjCto*MkGt", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("grjCto*MkGt", (PropertyChangeListener) null);
      assertEquals("grjCto*MkGt", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      level0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(0.1F, level0.getFloorThickness(), 0.01F);
      assertEquals(1115.983F, level0.getElevation(), 0.01F);
      assertEquals("grjCto*MkGt", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("grjCto*MkGt", propertyChangeListenerProxy0.getPropertyName());
      
      wall0.setLevel(level0);
      assertEquals(1783.8085F, wall0.getLength(), 0.01F);
      assertEquals(80.25F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-886.465F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(158.5F, wall0.getYEnd(), 0.01F);
      assertEquals(1783.8085F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1774.93F), wall0.getXEnd(), 0.01F);
      assertEquals((-170.9F), wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, level0.getFloorThickness(), 0.01F);
      assertEquals(1115.983F, level0.getElevation(), 0.01F);
      assertEquals("grjCto*MkGt", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(1783.8085F, wall0.getLength(), 0.01F);
      assertEquals(80.25F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-886.465F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(158.5F, wall0.getYEnd(), 0.01F);
      assertEquals(1783.8085F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1774.93F), wall0.getXEnd(), 0.01F);
      assertEquals((-170.9F), wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(1783.8085F, wall0.getLength(), 0.01F);
      assertEquals(80.25F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-886.465F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(158.5F, wall0.getYEnd(), 0.01F);
      assertEquals(1783.8085F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1774.93F), wall0.getXEnd(), 0.01F);
      assertEquals((-170.9F), wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-39.814686F), 1.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      wall0.setXEnd(0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, (-5.6842194F), 1.0F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(5509.003F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5509.003F, wall1.getLength(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-5.6842194F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2.8421097F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(5509.003F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5509.003F, wall1.getLength(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-5.6842194F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2.8421097F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(5509.003F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5509.003F, wall1.getLength(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-5.6842194F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2.8421097F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(39.814686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(39.814686F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(5509.003F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5509.003F, wall1.getLength(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-5.6842194F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2.8421097F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setXStart((-39.814686F));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-19.907343F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(56.30647F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-39.814686F), wall0.getXStart(), 0.01F);
      assertEquals(56.30647F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall0.isAtLevel((Level) null);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-19.907343F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(56.30647F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-39.814686F), wall0.getXStart(), 0.01F);
      assertEquals(56.30647F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(boolean0);
      assertNotSame(wall0, wall1);
      
      Float float0 = wall0.getHeightAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-19.907343F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(56.30647F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-39.814686F), wall0.getXStart(), 0.01F);
      assertEquals(56.30647F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(float0);
      assertNotSame(wall0, wall1);
      
      Wall wall2 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-19.907343F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(56.30647F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-39.814686F), wall0.getXStart(), 0.01F);
      assertEquals(56.30647F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-5.6842194F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(5509.003F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-2.8421097F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(5509.003F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNotNull(wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      wall2.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-19.907343F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(56.30647F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-39.814686F), wall0.getXStart(), 0.01F);
      assertEquals(56.30647F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-5.6842194F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(5509.003F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-2.8421097F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(5509.003F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      wall2.setYEnd((-413.6307F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-19.907343F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(56.30647F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-39.814686F), wall0.getXStart(), 0.01F);
      assertEquals(56.30647F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(5524.5063F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-413.6307F), wall2.getYEnd(), 0.01F);
      assertEquals((-206.81535F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(5524.5063F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      wall2.setYEnd((-5509.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-19.907343F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(56.30647F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-39.814686F), wall0.getXStart(), 0.01F);
      assertEquals(56.30647F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      Wall wall3 = wall2.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-19.907343F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(56.30647F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-39.814686F), wall0.getXStart(), 0.01F);
      assertEquals(56.30647F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(56.30647F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-39.814686F), wall3.getXStart(), 0.01F);
      assertEquals(56.30647F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-19.907343F), wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals((-39.814686F), wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals(1.0F, wall3.getThickness(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-19.907343F), wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertNotNull(wall3);
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertSame(wall2, wall1);
      assertNotSame(wall3, wall1);
      assertSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      
      boolean boolean1 = wall3.containsWallStartAt((-1760.7F), 428.4F, 882.802F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-19.907343F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(56.30647F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-39.814686F), wall0.getXStart(), 0.01F);
      assertEquals(56.30647F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(56.30647F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-39.814686F), wall3.getXStart(), 0.01F);
      assertEquals(56.30647F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-19.907343F), wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals((-39.814686F), wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals(1.0F, wall3.getThickness(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-19.907343F), wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertFalse(boolean1);
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertSame(wall2, wall1);
      assertNotSame(wall3, wall1);
      assertSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      
      wall3.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-19.907343F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(56.30647F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-19.907343F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-39.814686F), wall0.getXStart(), 0.01F);
      assertEquals(56.30647F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(7790.9023F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(7790.9023F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-2754.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(56.30647F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-39.814686F), wall3.getXStart(), 0.01F);
      assertEquals(56.30647F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-19.907343F), wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals((-39.814686F), wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals(1.0F, wall3.getThickness(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-19.907343F), wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertSame(wall2, wall1);
      assertNotSame(wall3, wall1);
      assertSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      
      int int0 = Float.floatToIntBits(0.0F);
      assertEquals(0, int0);
      
      Float float1 = new Float(1.0F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      wall0.setArcExtent(float1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(16.532803F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-39.814686F), wall0.getXStart(), 0.01F);
      assertEquals(56.30647F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(16.532803F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(58.72285F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(7790.9023F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(7790.9023F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-2754.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertSame(wall1, wall2);
      
      Wall wall4 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall3));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(16.532803F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.814686F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-39.814686F), wall0.getXStart(), 0.01F);
      assertEquals(56.30647F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(16.532803F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(58.72285F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall4.getLeftSideColor());
      assertFalse(wall4.isTrapezoidal());
      assertEquals(0.0F, wall4.getHeight(), 0.01F);
      assertNull(wall4.getHeightAtEnd());
      assertEquals((-2754.5F), wall4.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall4.getXEnd(), 0.01F);
      assertEquals(7790.9023F, wall4.getLength(), 0.01F);
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertEquals(0.0F, wall4.getYStart(), 0.01F);
      assertEquals(1.0F, wall4.getThickness(), 0.01F);
      assertEquals((-5509.0F), wall4.getXStart(), 0.01F);
      assertEquals(7790.9023F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertEquals((-2754.5F), wall4.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall4.getYEnd(), 0.01F);
      assertNotNull(wall4);
      assertNotSame(wall0, wall4);
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall4, wall1);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall3);
      assertSame(wall4, wall2);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Wall wall0 = new Wall(1094.8785F, 1094.8785F, 1094.8785F, 1094.8785F, 1094.8785F);
      assertEquals(1094.8785F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1094.8785F, wall0.getXStart(), 0.01F);
      assertEquals(1094.8785F, wall0.getYStart(), 0.01F);
      assertEquals(1094.8785F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1094.8785F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1094.8785F, wall0.getYEnd(), 0.01F);
      assertEquals(1094.8785F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(1094.8785F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1094.8785F, wall0.getXStart(), 0.01F);
      assertEquals(1094.8785F, wall0.getYStart(), 0.01F);
      assertEquals(1094.8785F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1094.8785F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1094.8785F, wall0.getYEnd(), 0.01F);
      assertEquals(1094.8785F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(homeTexture0);
      
      wall0.setYEnd(2173.329F);
      assertEquals(1094.8785F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1094.8785F, wall0.getXStart(), 0.01F);
      assertEquals(1078.4506F, wall0.getLength(), 0.01F);
      assertEquals(1094.8785F, wall0.getYStart(), 0.01F);
      assertEquals(1634.1038F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2173.329F, wall0.getYEnd(), 0.01F);
      assertEquals(1094.8785F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1078.4506F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1094.8785F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      
      wall0.setXStart(0.58539844F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(547.732F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1094.8785F, wall0.getYStart(), 0.01F);
      assertEquals(1634.1038F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2173.329F, wall0.getYEnd(), 0.01F);
      assertEquals(1094.8785F, wall0.getThickness(), 0.01F);
      assertEquals(0.58539844F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1536.4026F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1094.8785F, wall0.getXEnd(), 0.01F);
      assertEquals(1536.4026F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      
      Float float0 = new Float((-1.0F));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(1602.3372F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1534.7773F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1094.8785F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2173.329F, wall0.getYEnd(), 0.01F);
      assertEquals(1094.8785F, wall0.getThickness(), 0.01F);
      assertEquals(0.58539844F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1536.4026F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(632.5587F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1094.8785F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(1602.3372F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1534.7773F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1094.8785F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2173.329F, wall0.getYEnd(), 0.01F);
      assertEquals(1094.8785F, wall0.getThickness(), 0.01F);
      assertEquals(0.58539844F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1536.4026F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(632.5587F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1094.8785F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(floatArray0);
      assertEquals(96, floatArray0.length);
      
      float float1 = wall0.getYArcCircleCenter();
      assertEquals(1602.3372F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1534.7773F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1094.8785F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2173.329F, wall0.getYEnd(), 0.01F);
      assertEquals(1094.8785F, wall0.getThickness(), 0.01F);
      assertEquals(0.58539844F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1536.4026F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(632.5587F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1094.8785F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(632.5587F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotNull(wall1);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setYEnd((-515.216F));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.isTrapezoidal());
      assertEquals(515.216F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-257.608F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-515.216F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(515.216F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall0);
      
      Float float0 = new Float((double) 0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      wall1.setArcExtent(float0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.isTrapezoidal());
      assertEquals(515.216F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-772.82404F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-515.216F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(515.216F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(4.20705804E18F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall0);
      
      boolean boolean0 = wall1.containsWallStartAt(0.0F, 0.1F, 983.2031F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.isTrapezoidal());
      assertEquals(515.216F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-772.82404F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-515.216F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(515.216F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(4.20705804E18F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertTrue(boolean0);
      assertNotSame(wall1, wall0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall1));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall2 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-772.82404F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-515.216F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(4.20705804E18F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(515.216F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(515.216F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotNull(wall2);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      float float1 = wall1.getLength();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.isTrapezoidal());
      assertEquals(515.216F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-772.82404F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-515.216F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(515.216F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(4.20705804E18F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(515.216F, float1, 0.01F);
      assertSame(wall1, wall2);
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Wall wall0 = new Wall(0.5554808F, 0.5554808F, 0.5554808F, 0.5554808F, 0.5554808F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.5554808F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.5554808F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.5554808F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.5554808F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5554808F, wall0.getXStart(), 0.01F);
      assertEquals(0.5554808F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.5554808F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(0.5554808F, 0.0F, 0.0F, 0.0F, 0.5554808F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.5554808F, wall1.getLength(), 0.01F);
      assertEquals(0.2777404F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.5554808F, wall1.getXStart(), 0.01F);
      assertEquals(0.5554808F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.5554808F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.5554808F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.5554808F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.5554808F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.5554808F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5554808F, wall0.getXStart(), 0.01F);
      assertEquals(0.5554808F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.5554808F, wall0.getThickness(), 0.01F);
      assertEquals(0.5554808F, wall1.getLength(), 0.01F);
      assertEquals(0.2777404F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.5554808F, wall1.getXStart(), 0.01F);
      assertEquals(0.5554808F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.5554808F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.5554808F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.5554808F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.5554808F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.5554808F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5554808F, wall0.getXStart(), 0.01F);
      assertEquals(0.5554808F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.5554808F, wall0.getThickness(), 0.01F);
      assertEquals(0.5554808F, wall1.getLength(), 0.01F);
      assertEquals(0.2777404F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.5554808F, wall1.getXStart(), 0.01F);
      assertEquals(0.5554808F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.5554808F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setYEnd((-515.216F));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(515.7715F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.5554808F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.5554808F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.5554808F, wall0.getXStart(), 0.01F);
      assertEquals(0.5554808F, wall0.getYStart(), 0.01F);
      assertEquals((-257.33026F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(515.7715F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.5554808F, wall0.getThickness(), 0.01F);
      assertEquals((-515.216F), wall0.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall0.containsWallStartAt(0.1F, 0.1F, (-515.216F));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(515.7715F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.5554808F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.5554808F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.5554808F, wall0.getXStart(), 0.01F);
      assertEquals(0.5554808F, wall0.getYStart(), 0.01F);
      assertEquals((-257.33026F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(515.7715F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.5554808F, wall0.getThickness(), 0.01F);
      assertEquals((-515.216F), wall0.getYEnd(), 0.01F);
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(515.7715F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.5554808F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.5554808F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.5554808F, wall0.getXStart(), 0.01F);
      assertEquals(0.5554808F, wall0.getYStart(), 0.01F);
      assertEquals((-257.33026F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(515.7715F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.5554808F, wall0.getThickness(), 0.01F);
      assertEquals((-515.216F), wall0.getYEnd(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      
      float[][] floatArray1 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0.5554808F, wall1.getLength(), 0.01F);
      assertEquals(0.2777404F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.5554808F, wall1.getXStart(), 0.01F);
      assertEquals(0.5554808F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.5554808F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertNotSame(wall1, wall0);
      assertNotSame(floatArray1, floatArray0);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      try { 
        Integer.valueOf("WALL_AT_START");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"WALL_AT_START\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Wall wall0 = new Wall(2.0F, 2.0F, (-1774.93F), (-1774.93F), (-170.9F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2512.9585F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-886.465F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1774.93F), wall0.getYEnd(), 0.01F);
      assertEquals((-1774.93F), wall0.getXEnd(), 0.01F);
      assertEquals((-170.9F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-886.465F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(2512.9585F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setXEnd((-705.96F));
      assertEquals(1912.7697F, wall0.getLength(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1774.93F), wall0.getYEnd(), 0.01F);
      assertEquals((-170.9F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-886.465F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-351.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(1912.7697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall wall1 = new Wall((-705.96F), (-170.9F), 1.0F, 2822.29F, 1030.3562F, 2.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1030.3562F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-705.96F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3075.5454F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3075.5454F, wall1.getLength(), 0.01F);
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-170.9F), wall1.getYStart(), 0.01F);
      assertEquals(2822.29F, wall1.getYEnd(), 0.01F);
      assertEquals((-352.48F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1325.6951F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      
      Wall wall2 = new Wall((-1.0F), (-705.96F), 2.0F, (-619.237F), (-2610.26F), 0.0F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-2610.26F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.5F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-705.96F), wall2.getYStart(), 0.01F);
      assertEquals((-619.237F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals(86.774895F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-662.5985F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall2.getXEnd(), 0.01F);
      assertEquals(86.774895F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNotNull(wall2);
      
      wall2.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(1912.7697F, wall0.getLength(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1774.93F), wall0.getYEnd(), 0.01F);
      assertEquals((-170.9F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-886.465F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-351.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(1912.7697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-2610.26F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.5F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-705.96F), wall2.getYStart(), 0.01F);
      assertEquals((-619.237F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals(86.774895F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-662.5985F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall2.getXEnd(), 0.01F);
      assertEquals(86.774895F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall1.setWallAtStart(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(1030.3562F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-705.96F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3075.5454F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3075.5454F, wall1.getLength(), 0.01F);
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-170.9F), wall1.getYStart(), 0.01F);
      assertEquals(2822.29F, wall1.getYEnd(), 0.01F);
      assertEquals((-352.48F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1325.6951F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-2610.26F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.5F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-705.96F), wall2.getYStart(), 0.01F);
      assertEquals((-619.237F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals(86.774895F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-662.5985F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall2.getXEnd(), 0.01F);
      assertEquals(86.774895F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      float float0 = wall2.getLeftSideShininess();
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-2610.26F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.5F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-705.96F), wall2.getYStart(), 0.01F);
      assertEquals((-619.237F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals(86.774895F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-662.5985F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall2.getXEnd(), 0.01F);
      assertEquals(86.774895F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall1.setXStart((-285.4303F));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals(1030.3562F, wall1.getThickness(), 0.01F);
      assertEquals((-285.4303F), wall1.getXStart(), 0.01F);
      assertEquals(3006.8635F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertEquals(3006.8635F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-170.9F), wall1.getYStart(), 0.01F);
      assertEquals(2822.29F, wall1.getYEnd(), 0.01F);
      assertEquals(1325.6951F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-142.21515F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      
      boolean boolean0 = wall1.isAtLevel((Level) null);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals(1030.3562F, wall1.getThickness(), 0.01F);
      assertEquals((-285.4303F), wall1.getXStart(), 0.01F);
      assertEquals(3006.8635F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertEquals(3006.8635F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-170.9F), wall1.getYStart(), 0.01F);
      assertEquals(2822.29F, wall1.getYEnd(), 0.01F);
      assertEquals(1325.6951F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-142.21515F), wall1.getXArcCircleCenter(), 0.01F);
      assertTrue(boolean0);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      
      Float float1 = wall2.getHeightAtEnd();
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-2610.26F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.5F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-705.96F), wall2.getYStart(), 0.01F);
      assertEquals((-619.237F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals(86.774895F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-662.5985F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall2.getXEnd(), 0.01F);
      assertEquals(86.774895F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(float1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      Wall wall3 = wall1.getWallAtStart();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertEquals(1030.3562F, wall1.getThickness(), 0.01F);
      assertEquals((-285.4303F), wall1.getXStart(), 0.01F);
      assertEquals(3006.8635F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertEquals(3006.8635F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-170.9F), wall1.getYStart(), 0.01F);
      assertEquals(2822.29F, wall1.getYEnd(), 0.01F);
      assertEquals(1325.6951F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-142.21515F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals((-619.237F), wall3.getYEnd(), 0.01F);
      assertEquals((-2610.26F), wall3.getThickness(), 0.01F);
      assertEquals((-1.0F), wall3.getXStart(), 0.01F);
      assertEquals((-705.96F), wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getHeight(), 0.01F);
      assertEquals(86.774895F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall3.getXEnd(), 0.01F);
      assertEquals(86.774895F, wall3.getLength(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-662.5985F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertNotNull(wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall2);
      assertNotSame(wall3, wall1);
      assertSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      
      wall3.setXStart(0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertEquals(1030.3562F, wall1.getThickness(), 0.01F);
      assertEquals((-285.4303F), wall1.getXStart(), 0.01F);
      assertEquals(3006.8635F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertEquals(3006.8635F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-170.9F), wall1.getYStart(), 0.01F);
      assertEquals(2822.29F, wall1.getYEnd(), 0.01F);
      assertEquals(1325.6951F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-142.21515F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(86.74608F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-619.237F), wall3.getYEnd(), 0.01F);
      assertEquals((-2610.26F), wall3.getThickness(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertEquals((-705.96F), wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getHeight(), 0.01F);
      assertEquals(2.0F, wall3.getXEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-662.5985F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(86.74608F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall2);
      assertNotSame(wall3, wall1);
      assertSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      
      wall1.setYEnd(3693.94F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals(1030.3562F, wall1.getThickness(), 0.01F);
      assertEquals((-285.4303F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3875.4395F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3693.94F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1761.52F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3875.4395F, wall1.getLength(), 0.01F);
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-170.9F), wall1.getYStart(), 0.01F);
      assertEquals((-142.21515F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall2);
      
      wall1.setYEnd(1.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals(1030.3562F, wall1.getThickness(), 0.01F);
      assertEquals((-285.4303F), wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-84.95F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(334.05377F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(334.05377F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-170.9F), wall1.getYStart(), 0.01F);
      assertEquals((-142.21515F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall2);
      
      float float2 = wall3.getXArcCircleCenter();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(1030.3562F, wall1.getThickness(), 0.01F);
      assertEquals((-285.4303F), wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-84.95F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(334.05377F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(334.05377F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-170.9F), wall1.getYStart(), 0.01F);
      assertEquals((-142.21515F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(86.74608F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-619.237F), wall3.getYEnd(), 0.01F);
      assertEquals((-2610.26F), wall3.getThickness(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertEquals((-705.96F), wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getHeight(), 0.01F);
      assertEquals(2.0F, wall3.getXEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-662.5985F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(86.74608F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(1.0F, float2, 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall2);
      assertNotSame(wall3, wall1);
      assertSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      
      Wall wall4 = wall0.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1912.7697F, wall0.getLength(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1774.93F), wall0.getYEnd(), 0.01F);
      assertEquals((-170.9F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-886.465F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-351.98F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(1912.7697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall4);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      wall0.setYEnd(0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      wall0.setXEnd((-1.0F));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      
      wall0.setRightSideShininess(2688.633F);
      assertEquals(2688.633F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      
      Float float1 = Float.valueOf((-2911.459F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-2911.459F), (float)float1, 0.01F);
      
      float float2 = Float.max(803.8163F, (-1.0F));
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(803.8163F, float2, 0.01F);
      
      wall0.setArcExtent(float1);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.21063246F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2688.633F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-2911.459F), wall0.getArcExtent(), 0.01F);
      assertEquals(1579.627F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setXEnd((-1.0F));
      assertEquals(0.21063246F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2688.633F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-2911.459F), wall0.getArcExtent(), 0.01F);
      assertEquals(1579.627F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setLeftSideShininess((-357.09F));
      assertEquals(0.21063246F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2688.633F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-2911.459F), wall0.getArcExtent(), 0.01F);
      assertEquals(1579.627F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-357.09F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      boolean boolean0 = wall0.containsWallStartAt((-1.0F), 7.7740264F, 0.0F);
      assertEquals(0.21063246F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2688.633F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-2911.459F), wall0.getArcExtent(), 0.01F);
      assertEquals(1579.627F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-357.09F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(boolean0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.21063246F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2688.633F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-2911.459F), wall0.getArcExtent(), 0.01F);
      assertEquals(1579.627F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-357.09F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(floatArray0);
      assertEquals(2, floatArray0.length);
      
      wall0.setYEnd((-1.0F));
      assertEquals(2688.633F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-2911.459F), wall0.getArcExtent(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-0.28936756F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-357.09F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.71063244F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2233.9297F, wall0.getLength(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      boolean boolean1 = wall0.containsWallStartAt(0.0F, 7.305666E-4F, (-1.0F));
      assertTrue(boolean1 == boolean0);
      assertEquals(2688.633F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-2911.459F), wall0.getArcExtent(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-0.28936756F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-357.09F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.71063244F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2233.9297F, wall0.getLength(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(boolean1);
      
      Wall wall1 = new Wall(2334.0F, (-1.0F), 1.0F, 0.0F, (-1.0F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1167.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(2333.0002F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2334.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2333.0002F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(wall1);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Wall wall0 = new Wall((-1975.0883F), (-1975.0883F), (-2833.0F), (-2833.0F), (-1975.0883F));
      assertEquals((-1975.0883F), wall0.getYStart(), 0.01F);
      assertEquals((-1975.0883F), wall0.getThickness(), 0.01F);
      assertEquals(1213.2704F, wall0.getLength(), 0.01F);
      assertEquals((-1975.0883F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2404.0442F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2404.0442F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2833.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2833.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1213.2704F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals((-1975.0883F), wall0.getYStart(), 0.01F);
      assertEquals((-1975.0883F), wall0.getThickness(), 0.01F);
      assertEquals(1213.2704F, wall0.getLength(), 0.01F);
      assertEquals((-1975.0883F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2404.0442F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2404.0442F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2833.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2833.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1213.2704F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1213.2704F, float0, 0.01F);
      
      boolean boolean0 = wall0.containsPoint(0.01F, 388.0716F, 0.0F);
      assertEquals((-1975.0883F), wall0.getYStart(), 0.01F);
      assertEquals((-1975.0883F), wall0.getThickness(), 0.01F);
      assertEquals(1213.2704F, wall0.getLength(), 0.01F);
      assertEquals((-1975.0883F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2404.0442F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2404.0442F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2833.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2833.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1213.2704F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(boolean0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-1975.0883F), wall0.getYStart(), 0.01F);
      assertEquals((-1975.0883F), wall0.getThickness(), 0.01F);
      assertEquals(1213.2704F, wall0.getLength(), 0.01F);
      assertEquals((-1975.0883F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2404.0442F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2404.0442F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2833.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2833.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1213.2704F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      Integer integer0 = new Integer(1540);
      assertNotNull(integer0);
      assertEquals(1540, (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = Integer.max(1540, (-180));
      assertEquals(1540, int0);
      
      boolean boolean1 = integer0.equals(object0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      wall0.setLeftSideColor(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1975.0883F), wall0.getYStart(), 0.01F);
      assertEquals((-1975.0883F), wall0.getThickness(), 0.01F);
      assertEquals(1213.2704F, wall0.getLength(), 0.01F);
      assertEquals(1540, (int)wall0.getLeftSideColor());
      assertEquals((-1975.0883F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2404.0442F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2404.0442F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2833.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2833.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1213.2704F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      
      wall0.setYStart(0.0F);
      assertEquals((-1975.0883F), wall0.getThickness(), 0.01F);
      assertEquals(1540, (int)wall0.getLeftSideColor());
      assertEquals((-1975.0883F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2960.051F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1416.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2404.0442F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2833.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2833.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2960.051F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals((-1975.0883F), wall0.getThickness(), 0.01F);
      assertEquals(1540, (int)wall0.getLeftSideColor());
      assertEquals((-1975.0883F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2960.051F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1416.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2404.0442F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2833.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2833.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2960.051F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      
      Float float1 = new Float((-2833.0F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-2833.0F), (float)float1, 0.01F);
      
      float float2 = Float.sum((-1975.0883F), 357.61905F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals((-1617.4692F), float2, 0.01F);
      
      wall0.setArcExtent(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertEquals((-1975.0883F), wall0.getThickness(), 0.01F);
      assertEquals(1540, (int)wall0.getLeftSideColor());
      assertEquals((-1975.0883F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1378.8562F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2833.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(1.1956849E7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2960.051F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2562.068F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2833.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2833.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      
      Integer integer1 = wall0.getLeftSideColor();
      assertTrue(integer1.equals((Object)int0));
      assertEquals((-1975.0883F), wall0.getThickness(), 0.01F);
      assertEquals(1540, (int)wall0.getLeftSideColor());
      assertEquals((-1975.0883F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1378.8562F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2833.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(1.1956849E7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2960.051F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2562.068F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2833.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2833.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(integer1);
      assertEquals(1540, (int)integer1);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals((-1975.0883F), wall0.getThickness(), 0.01F);
      assertEquals(1540, (int)wall0.getLeftSideColor());
      assertEquals((-1975.0883F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1378.8562F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2833.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(1.1956849E7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2960.051F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2562.068F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2833.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2833.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      
      float[][] floatArray1 = wall0.getPoints();
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals((-1975.0883F), wall0.getThickness(), 0.01F);
      assertEquals(1540, (int)wall0.getLeftSideColor());
      assertEquals((-1975.0883F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1378.8562F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2833.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(1.1956849E7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2960.051F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2562.068F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2833.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2833.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(floatArray1);
      assertEquals(6056, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals((-1975.0883F), wall0.getThickness(), 0.01F);
      assertEquals(1540, (int)wall0.getLeftSideColor());
      assertEquals((-1975.0883F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1378.8562F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2833.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(1.1956849E7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2960.051F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2562.068F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2833.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2833.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(homeTexture0);
      
      Float float3 = Float.valueOf(1.0F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      assertEquals(1.0F, (float)float3, 0.01F);
      
      boolean boolean2 = Float.isFinite(2268.43F);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      wall0.setArcExtent(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((-2201.6985F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1975.0883F), wall0.getThickness(), 0.01F);
      assertEquals(1540, (int)wall0.getLeftSideColor());
      assertEquals((-1975.0883F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3087.081F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2960.051F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2833.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2833.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(188.84167F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Wall wall0 = new Wall((-5509.0F), (-5509.0F), (-5509.0F), (-5509.0F), (-5509.0F), 2.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-5509.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-5509.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-5509.0F), wall0.getThickness(), 0.01F);
      assertEquals((-5509.0F), wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-5509.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-5509.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-5509.0F), wall0.getThickness(), 0.01F);
      assertEquals((-5509.0F), wall0.getYStart(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      wall0.move(0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      wall0.setLeftSideShininess((-515.0F));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-515.0F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      wall0.setYEnd((-515.0F));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-257.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(515.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-515.0F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-515.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(515.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      boolean boolean0 = wall0.containsWallStartAt(0.1F, 0.1F, (-515.0F));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-257.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(515.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-515.0F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-515.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(515.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(boolean0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-257.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(515.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-515.0F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-515.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(515.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      float[][] floatArray1 = wall0.getPoints();
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-257.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(515.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-515.0F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-515.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(515.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-257.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(515.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-515.0F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-515.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(515.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(boolean1);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-257.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(515.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-515.0F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-515.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(515.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(homeTexture0);
      
      Wall wall1 = wall0.getWallAtEnd();
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-257.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(515.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-515.0F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-515.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(515.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(515.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-257.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(515.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-515.0F), wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-515.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotNull(wall1);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      
      Wall wall2 = wall1.getWallAtStart();
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-257.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(515.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-515.0F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-515.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(515.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(515.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-257.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(515.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-515.0F), wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-515.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-257.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(515.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-515.0F), wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(515.0F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-515.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotNull(wall2);
      assertSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertSame(wall1, wall0);
      assertSame(wall1, wall2);
      assertSame(wall2, wall1);
      assertSame(wall2, wall0);
      
      boolean boolean2 = wall1.isTrapezoidal();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-257.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(515.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-515.0F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-515.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(515.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(515.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-257.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(515.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-515.0F), wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-515.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(boolean2);
      assertSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertSame(wall1, wall0);
      assertSame(wall1, wall2);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone(list0);
      assertTrue(list1.equals((Object)list0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      
      List<Wall> list2 = Wall.clone(list1);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotNull(list2);
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertNotSame(list1, list2);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtEnd(wall0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      wall0.setYEnd(104.0F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(104.0F, wall0.getYEnd(), 0.01F);
      assertEquals(52.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(104.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(104.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      wall0.setXStart(1094.8785F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1099.8068F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(104.0F, wall0.getYEnd(), 0.01F);
      assertEquals(52.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(547.4393F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1094.8785F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1099.8068F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      Float float0 = new Float(104.0F);
      assertNotNull(float0);
      assertEquals(104.0F, (float)float0, 0.01F);
      
      wall0.setArcExtent(float0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(556.02966F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(104.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(57965.09F, wall0.getLength(), 0.01F);
      assertEquals(104.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(142.4369F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1094.8785F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1099.8068F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(556.02966F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(104.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(57965.09F, wall0.getLength(), 0.01F);
      assertEquals(104.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(142.4369F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1094.8785F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1099.8068F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(484, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Wall wall0 = new Wall(2.0F, 0.01F, 2.0F, 2.0F, (-18.653706F));
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(1.99F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-18.653706F), wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(1.99F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-18.653706F), wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(1.99F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-18.653706F), wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(1.99F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-18.653706F), wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall1.getYEnd(), 0.01F);
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.99F, wall1.getLength(), 0.01F);
      assertEquals(1.99F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(1.005F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(2.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-18.653706F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Level level0 = new Level("j/", (-18.653706F), (-1.0F), 2.0F);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-18.653706F), level0.getElevation(), 0.01F);
      assertEquals("j/", level0.getName());
      assertEquals(2.0F, level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      boolean boolean0 = wall0.isAtLevel(level0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(1.99F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-18.653706F), wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-18.653706F), level0.getElevation(), 0.01F);
      assertEquals("j/", level0.getName());
      assertEquals(2.0F, level0.getHeight(), 0.01F);
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Wall wall0 = new Wall(543.0F, 543.0F, 543.0F, 543.0F, (-2911.459F));
      assertEquals(543.0F, wall0.getYStart(), 0.01F);
      assertEquals(543.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(543.0F, wall0.getXEnd(), 0.01F);
      assertEquals(543.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(543.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(543.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      wall0.move(0.0F, 543.0F);
      assertEquals(1086.0F, wall0.getYStart(), 0.01F);
      assertEquals(543.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(543.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1086.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1086.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(543.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      wall0.setXEnd((-705.96F));
      assertEquals(1086.0F, wall0.getYStart(), 0.01F);
      assertEquals(543.0F, wall0.getXStart(), 0.01F);
      assertEquals((-81.48001F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(1086.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1086.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1248.96F, wall0.getLength(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(1248.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, 30.8F, (-2911.459F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5509.086F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(5509.086F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotNull(wall1);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1086.0F, wall0.getYStart(), 0.01F);
      assertEquals(543.0F, wall0.getXStart(), 0.01F);
      assertEquals((-81.48001F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(1086.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1086.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1248.96F, wall0.getLength(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(1248.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5509.086F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(5509.086F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1086.0F, wall0.getYStart(), 0.01F);
      assertEquals(543.0F, wall0.getXStart(), 0.01F);
      assertEquals((-81.48001F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(1086.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1086.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1248.96F, wall0.getLength(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(1248.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5509.086F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(5509.086F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(15.4F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals(30.8F, wall1.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float0 = wall0.getLeftSideShininess();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1086.0F, wall0.getYStart(), 0.01F);
      assertEquals(543.0F, wall0.getXStart(), 0.01F);
      assertEquals((-81.48001F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(1086.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1086.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1248.96F, wall0.getLength(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(1248.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(wall0, wall1);
      
      wall0.setXStart(1.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1086.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(1086.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1086.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall0.isAtLevel((Level) null);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1086.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(1086.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1086.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertTrue(boolean0);
      assertNotSame(wall0, wall1);
      
      Float float1 = wall0.getHeightAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1086.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(1086.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1086.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(float1);
      assertNotSame(wall0, wall1);
      
      Wall wall2 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(1086.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(1086.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1086.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(5509.086F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(15.4F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals(5509.086F, wall2.getLength(), 0.01F);
      assertEquals(30.8F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNotNull(wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      wall2.setYEnd((-5509.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(1086.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(1086.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1086.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      float float2 = Float.max(0.0F, 0.0F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      
      wall2.setYEnd((-5509.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(1086.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(1086.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1086.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      float float3 = wall0.getXArcCircleCenter();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertEquals(1086.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(1086.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1086.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-352.48F), float3, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      Wall wall3 = wall2.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertEquals(1086.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(1086.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1086.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertEquals(1086.0F, wall3.getYStart(), 0.01F);
      assertEquals(1086.0F, wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertNull(wall3.getHeight());
      assertEquals((-352.48F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall3.getXEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(706.96F, wall3.getLength(), 0.01F);
      assertEquals(1086.0F, wall3.getYEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall3.getThickness(), 0.01F);
      assertEquals(1.0F, wall3.getXStart(), 0.01F);
      assertEquals(706.96F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertNotNull(wall3);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertSame(wall3, wall0);
      
      wall3.setHeight((Float) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertEquals(1086.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(1086.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1086.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertEquals(1086.0F, wall3.getYStart(), 0.01F);
      assertEquals(1086.0F, wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertNull(wall3.getHeight());
      assertEquals((-352.48F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall3.getXEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(706.96F, wall3.getLength(), 0.01F);
      assertEquals(1086.0F, wall3.getYEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-2911.459F), wall3.getThickness(), 0.01F);
      assertEquals(1.0F, wall3.getXStart(), 0.01F);
      assertEquals(706.96F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertSame(wall3, wall0);
      
      boolean boolean1 = wall1.containsWallEndAt(2209.141F, (-705.96F), (-2453.899F));
      assertFalse(boolean1 == boolean0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall3));
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(7790.9023F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(7790.9023F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(boolean1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertSame(wall1, wall2);
      
      HomeTexture homeTexture0 = wall2.getRightSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(1086.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(1086.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1086.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2754.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-5509.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(7790.9023F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall2.getXStart(), 0.01F);
      assertEquals((-2754.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(7790.9023F, wall2.getLength(), 0.01F);
      assertNull(homeTexture0);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      float float4 = wall0.getThickness();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNotEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float0, 0.01F);
      assertEquals(1086.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(706.96F, wall0.getLength(), 0.01F);
      assertEquals((-352.48F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(1086.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1086.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2911.459F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(706.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2911.459F), float4, 0.01F);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      
      float float5 = wall1.getYStart();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall3));
      assertEquals(float5, float0, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(7790.9023F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(7790.9023F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, float5, 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertSame(wall1, wall2);
      
      HomeTexture homeTexture1 = wall1.getLeftSideTexture();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall3));
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2911.459F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(7790.9023F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-5509.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2754.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-5509.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2754.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(7790.9023F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(homeTexture1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertSame(wall1, wall2);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-39.814686F), 1.0F);
      wall0.setXEnd(0.0F);
      Wall wall1 = new Wall((-5509.0F), (-6.919359F), (-39.814686F), (-6.919359F), 0.0F, 1.0F);
      wall1.setWallAtStart(wall0);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.setXStart((-39.814686F));
      wall0.isAtLevel((Level) null);
      wall1.setWallAtStart(wall0);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      Wall wall2 = wall1.getWallAtStart();
      wall2.setWallAtStart(wall1);
      Float.floatToIntBits(0.3929048F);
      Float float0 = new Float((-11.685478F));
      wall1.getWallAtStart();
      Integer integer0 = new Integer((-1005));
      wall2.setArcExtent(float0);
      wall2.getPoints();
      assertEquals(22.329567F, wall2.getXArcCircleCenter(), 0.01F);
      
      Wall wall3 = new Wall((-6.919359F), 1053371089, (-6.919359F), (-11.685478F), 0.0F);
      wall1.getPoints();
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Wall wall0 = new Wall(2232.0981F, 2232.0981F, 2232.0981F, 2232.0981F, 2232.0981F);
      wall0.getLeftSideTexture();
      assertEquals(2232.0981F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      wall0.move(0.0F, 0.0F);
      wall0.setXEnd((-705.96F));
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, 30.8F, (-2911.459F), 0.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.getLeftSideShininess();
      wall0.setXStart(1.0F);
      wall0.isAtLevel((Level) null);
      wall0.getHeightAtEnd();
      Wall wall2 = wall0.getWallAtStart();
      wall2.setYEnd((-413.6307F));
      wall2.setYEnd((-5509.0F));
      wall0.getXArcCircleCenter();
      Wall wall3 = wall2.getWallAtEnd();
      Wall wall4 = wall3.clone();
      float float0 = wall4.getYArcCircleCenter();
      assertEquals((-705.96F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2941.5867F));
      wall0.setWallAtStart(wall0);
      wall0.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall0);
      wall0.setXStart(1.0F);
      wall0.isAtLevel((Level) null);
      wall0.getHeightAtEnd();
      Wall wall1 = wall0.getWallAtStart();
      wall1.setWallAtStart(wall0);
      wall1.setYEnd((-413.6307F));
      wall1.setYEnd((-5509.0F));
      wall1.getWallAtEnd();
      wall1.setYEnd(0.0F);
      wall1.getXArcCircleCenter();
      wall0.getWallAtEnd();
      wall1.containsWallEndAt(0.5F, (-705.96F), (-413.6307F));
      wall0.containsWallEndAt((-868.6339F), 1.0F, (-2453.899F));
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2941.5867F));
      wall0.move(0.0F, 0.0F);
      wall0.setXEnd(0.0F);
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, (-5.6842194F), (-2941.5867F), 0.0F);
      wall1.setWallAtStart(wall0);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      Wall wall2 = wall1.getWallAtStart();
      wall0.setYEnd(2822.29F);
      wall0.getWallAtEnd();
      wall1.containsWallEndAt((-3233.34F), (-3768.966F), 2822.29F);
      wall2.containsWallEndAt((-5.6842194F), (-2941.5867F), (-1.0F));
      assertEquals(2822.29F, wall2.getLength(), 0.01F);
      
      Float.compare(0.0F, 0.0F);
      wall1.setHeightAtEnd((Float) 0.0F);
      assertEquals((-2941.5867F), wall1.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      wall0.move(0.0F, 0.0F);
      wall0.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall0);
      wall0.setWallAtEnd(wall0);
      boolean boolean0 = wall0.containsWallStartAt((-1.0F), 1972.6266F, (-1679.447F));
      assertFalse(boolean0);
      
      wall0.setWallAtStart(wall0);
      Float.floatToIntBits(338.0F);
      Float float0 = new Float((-885.7F));
      Wall wall1 = wall0.getWallAtStart();
      Float.compare(0.0F, 0.0F);
      wall1.setArcExtent((Float) 0.0F);
      wall0.getPoints();
      Wall wall2 = wall0.getWallAtStart();
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-2911.459F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-2911.459F));
      wall0.move(0.0F, 0.0F);
      Wall wall1 = new Wall((-5509.0F), 0.0F, 0.0F, 0.0F, (-2911.459F), 0.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.getLeftSideShininess();
      wall0.setXStart(0.0F);
      wall0.setLeftSideShininess((-515.216F));
      wall0.setYEnd((-515.216F));
      Wall wall2 = wall0.clone();
      wall1.getPattern();
      wall2.setPattern((TextureImage) null);
      wall0.containsWallStartAt(0.1F, 0.1F, (-515.216F));
      wall0.containsWallEndAt((-129.212F), (-1.08213043E9F), (-1564.5F));
      assertEquals((-515.216F), wall0.getLeftSideShininess(), 0.01F);
      
      wall1.getRightSideColor();
      assertEquals(5509.0F, wall1.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, 18.247467F, 0.0F, 0.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.setYEnd(18.247467F);
      wall0.isTrapezoidal();
      float[][] floatArray0 = wall1.getPoints();
      float[][] floatArray1 = wall0.getPoints();
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-39.814686F), 1.0F);
      wall0.setXEnd(0.0F);
      wall0.setWallAtStart(wall0);
      wall0.setWallAtEnd(wall0);
      wall0.setXStart((-39.814686F));
      wall0.isAtLevel((Level) null);
      wall0.setWallAtStart(wall0);
      Wall wall1 = wall0.getWallAtStart();
      wall1.setWallAtStart(wall0);
      Float.floatToIntBits(0.3929048F);
      Float float0 = new Float((-11.685478F));
      wall0.getWallAtStart();
      Integer integer0 = new Integer((-1005));
      wall1.setArcExtent(float0);
      wall1.getPoints();
      Wall wall2 = new Wall((-6.919359F), 1053371089, (-6.919359F), (-11.685478F), 0.0F);
      wall0.getPoints();
      assertEquals((-39.814686F), wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Wall wall0 = new Wall((-1909.5084F), (-1909.5084F), (-1909.5084F), (-1909.5084F), (-1909.5084F));
      wall0.setWallAtStart((Wall) null);
      wall0.setYEnd(330.58F);
      Float.floatToIntBits((-522));
      wall0.getPoints();
      assertEquals(330.58F, wall0.getYEnd(), 0.01F);
  }
}

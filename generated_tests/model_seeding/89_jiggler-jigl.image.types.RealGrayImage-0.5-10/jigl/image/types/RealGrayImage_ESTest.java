/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 22:32:05 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import java.awt.image.ImageProducer;
import java.awt.image.MemoryImageSource;
import java.net.URL;
import java.net.URLStreamHandler;
import javax.swing.JApplet;
import jigl.image.ROI;
import jigl.image.types.RealGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RealGrayImage_ESTest extends RealGrayImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(16, 16, (float) 0);
      realGrayImage1.X();
      ROI rOI0 = new ROI();
      realGrayImage1.toString(rOI0);
      rOI0.Y();
      rOI0.setROI(16, 0, 1, 0);
      // Undeclared exception!
      try { 
        realGrayImage1.divide((float) 1143, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float[][] floatArray0 = new float[0][1];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      // Undeclared exception!
      try { 
        realGrayImage0.add(1, 1, (float) 1, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      int int2 = 0;
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        realGrayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage((RealGrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      ROI rOI0 = new ROI();
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      realGrayImage0.subtract(realGrayImage1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(16, 16, (float) 0);
      realGrayImage1.X();
      ROI rOI0 = new ROI();
      rOI0.X();
      realGrayImage1.toString(rOI0);
      rOI0.Y();
      ROI rOI1 = new ROI((-2963), 44, 128, 8);
      rOI1.Y();
      rOI1.setROI(0, 1064, 0, 1064);
      RealGrayImage realGrayImage2 = new RealGrayImage(10, 1);
      RealGrayImage realGrayImage3 = null;
      try {
        realGrayImage3 = new RealGrayImage(10, 269, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      RealGrayImage realGrayImage2 = realGrayImage1.addbuffer(2, 2, 0, 2170, 3975.4055F);
      realGrayImage2.copy();
      ROI rOI0 = new ROI(0, 0, 2389, 1004);
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.uy();
      rOI0.ux();
      rOI0.lx();
      // Undeclared exception!
      try { 
        realGrayImage0.divide((-1754.6068F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.addbuffer(0, 471, (float) 0);
      ROI rOI0 = new ROI();
      RealGrayImage realGrayImage1 = new RealGrayImage(0, 0);
      // Undeclared exception!
      try { 
        realGrayImage1.clip(0, 471, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      // Undeclared exception!
      try { 
        realGrayImage1.toString((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(16, 16, (float) 0);
      realGrayImage1.X();
      ROI rOI0 = new ROI();
      Integer integer0 = new Integer(0);
      RealGrayImage realGrayImage2 = realGrayImage1.copy();
      RealGrayImage realGrayImage3 = realGrayImage1.copy(rOI0);
      realGrayImage2.toString(rOI0);
      realGrayImage1.copy();
      RealGrayImage realGrayImage4 = new RealGrayImage(2583, 1);
      realGrayImage2.subtract(realGrayImage0);
      realGrayImage2.subtract((float) 0);
      realGrayImage3.toString();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      RealGrayImage realGrayImage0 = new RealGrayImage(2, 0, floatArray0);
      Float.valueOf("0");
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      realGrayImage0.getJavaImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        realGrayImage0.add(968, 120, 255.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 120
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 1;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(1, 1, floatArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(16, 16, (float) 0);
      realGrayImage1.X();
      ROI rOI0 = new ROI();
      RealGrayImage realGrayImage2 = realGrayImage0.copy();
      realGrayImage1.toString(rOI0);
      realGrayImage2.addbuffer(16, 16, (float) 16);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(16, 16, (float) 0);
      realGrayImage1.addbuffer(0, 0, (float) 0);
      realGrayImage1.X();
      ROI rOI0 = new ROI();
      rOI0.X();
      realGrayImage1.copy();
      realGrayImage1.copy();
      ROI rOI1 = new ROI();
      // Undeclared exception!
      try { 
        realGrayImage0.divide(realGrayImage1, rOI1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 128;
      int int1 = (-16777216);
      int[] intArray0 = new int[0];
      MemoryImageSource memoryImageSource0 = new MemoryImageSource(128, (-16777216), intArray0, (-16777216), 128);
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(128, 847).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn(memoryImageSource0).when(image0).getSource();
      doReturn(860, 128).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      RealGrayImage realGrayImage0 = new RealGrayImage(image0);
      float float0 = 2873.259F;
      RealGrayImage realGrayImage1 = realGrayImage0.subtract(float0);
      realGrayImage0.getJavaImage();
      int int2 = (-2054);
      realGrayImage1.addbuffer(int2, int2, float0);
      int int3 = 2073;
      int int4 = 2170;
      RealGrayImage realGrayImage2 = realGrayImage1.addbuffer(int0, int1, int3, int1, (float) int4);
      realGrayImage2.max();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      Float.valueOf((-324.5584F));
      realGrayImage0.copy();
      Float.valueOf((-324.5584F));
      // Undeclared exception!
      try { 
        realGrayImage0.addbuffer((-413), (-413), 2170, (-1), 32767.0F);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 128);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      RealGrayImage realGrayImage2 = realGrayImage1.addbuffer(2170, 0, 2, 2170, 255.0F);
      realGrayImage2.toString();
      realGrayImage0.max();
      // Undeclared exception!
      try { 
        realGrayImage2.multiply(2170, 0, (-1.0F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      float[][] floatArray0 = new float[7][1];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 1950.0F;
      floatArray1[1] = 255.0F;
      floatArray1[2] = (-1.0F);
      floatArray1[3] = (-1309.67F);
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[2];
      floatArray2[0] = 0.0F;
      floatArray2[1] = 1950.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[0];
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[8];
      floatArray4[0] = (-1.0F);
      floatArray4[1] = (-1.0F);
      floatArray4[2] = (-1.0F);
      floatArray4[3] = 551.429F;
      floatArray4[4] = 255.0F;
      floatArray4[5] = (-1.0F);
      floatArray4[6] = 0.0F;
      floatArray4[7] = (-1309.67F);
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[0];
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[8];
      floatArray6[0] = 255.0F;
      floatArray6[1] = 0.0F;
      floatArray6[2] = (-1.0F);
      floatArray6[3] = 0.0F;
      floatArray6[4] = 0.0F;
      floatArray6[5] = (-1309.67F);
      floatArray6[6] = 255.0F;
      floatArray6[7] = (-1.0F);
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[1];
      floatArray7[0] = 0.0F;
      floatArray0[6] = floatArray7;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 185);
      int int0 = (-1);
      ROI rOI0 = new ROI();
      rOI0.setROI(0, (-1), 213, 213);
      rOI0.X();
      rOI0.setROI(1410, 1410, (-1), 128);
      rOI0.Y();
      // Undeclared exception!
      try { 
        realGrayImage0.clip(0, (-1), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(16, 16, (float) 0);
      realGrayImage1.X();
      RealGrayImage realGrayImage2 = new RealGrayImage(5740, 16);
      RealGrayImage realGrayImage3 = new RealGrayImage(16, 0);
      RealGrayImage realGrayImage4 = new RealGrayImage(realGrayImage3);
      RealGrayImage realGrayImage5 = realGrayImage1.multiply((float) 255);
      ROI rOI0 = new ROI(5740, 73, (-2528), 73);
      // Undeclared exception!
      try { 
        realGrayImage5.add(16, 255, (-32768.0F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 328
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 19;
      RealGrayImage realGrayImage0 = new RealGrayImage(19, 19);
      // Undeclared exception!
      try { 
        realGrayImage0.divide((float) 19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 128);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      ROI rOI0 = new ROI(2, 1090, 3, (-1));
      RealGrayImage realGrayImage2 = new RealGrayImage(2, 128);
      // Undeclared exception!
      try { 
        realGrayImage2.add(3975.4055F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(16, 16, (float) 0);
      realGrayImage1.X();
      ROI rOI0 = new ROI();
      rOI0.X();
      RealGrayImage realGrayImage2 = realGrayImage0.copy();
      realGrayImage1.toString(rOI0);
      realGrayImage1.copy();
      rOI0.Y();
      realGrayImage2.clip(1143, 16);
      // Undeclared exception!
      try { 
        realGrayImage0.addbuffer(1143, (-1451), (float) 16);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      ROI rOI0 = new ROI();
      RealGrayImage realGrayImage1 = new RealGrayImage(128, 128);
      ROI rOI1 = new ROI();
      ROI rOI2 = new ROI();
      // Undeclared exception!
      try { 
        realGrayImage1.subtract(1.0F, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 2786;
      float[] floatArray0 = new float[0];
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(2786, 2786, floatArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      ROI rOI0 = new ROI();
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      realGrayImage1.toString();
      realGrayImage0.subtract(realGrayImage1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.addbuffer(0, 0, 1944.8F);
      ROI rOI0 = new ROI();
      RealGrayImage realGrayImage1 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage2 = new RealGrayImage(realGrayImage1);
      ROI rOI1 = new ROI(14, 14, 25, 801);
      RealGrayImage realGrayImage3 = new RealGrayImage(255, 3);
      // Undeclared exception!
      try { 
        realGrayImage1.add((-324.5584F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      int int0 = 16;
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(0, 0, (float) 0);
      realGrayImage0.X();
      ROI rOI0 = new ROI();
      realGrayImage0.copy();
      realGrayImage0.copy();
      ROI rOI1 = new ROI();
      realGrayImage0.byteSize();
      realGrayImage1.add((float) 0);
      // Undeclared exception!
      try { 
        realGrayImage1.copy(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      int int0 = 247;
      RealGrayImage realGrayImage2 = realGrayImage1.addbuffer(10, 1254, 247, 2060, (float) 1254);
      RealGrayImage realGrayImage3 = realGrayImage2.copy();
      int int1 = 2389;
      int int2 = 1004;
      int int3 = (-72);
      int int4 = 22;
      ROI rOI0 = new ROI(int1, int3, int2, int4);
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.uy();
      rOI0.ux();
      rOI0.lx();
      realGrayImage3.divide((float) int0, rOI0);
      JApplet jApplet0 = new JApplet();
      realGrayImage1.byteSize();
      ROI rOI1 = new ROI();
      RealGrayImage realGrayImage4 = new RealGrayImage();
      int int5 = (-4335);
      RealGrayImage realGrayImage5 = new RealGrayImage(int5, int4);
      realGrayImage2.copy(rOI1);
      RealGrayImage realGrayImage6 = new RealGrayImage(realGrayImage1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float[][] floatArray0 = new float[7][2];
      float[] floatArray1 = new float[8];
      floatArray1[0] = 662.0768F;
      floatArray1[1] = 1.0F;
      floatArray1[2] = 701.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = (-32768.0F);
      floatArray1[5] = (-962.0F);
      floatArray1[6] = (-446.8712F);
      floatArray1[7] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      floatArray2[0] = (-32768.0F);
      floatArray2[1] = (-32768.0F);
      floatArray2[2] = 662.0768F;
      floatArray2[3] = 1.0F;
      floatArray2[4] = 0.0F;
      floatArray2[5] = 0.0F;
      floatArray2[6] = (-32768.0F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[6];
      floatArray3[0] = 0.0F;
      floatArray3[1] = 0.0F;
      floatArray3[2] = (-32768.0F);
      floatArray3[3] = (-446.8712F);
      floatArray3[4] = (-32768.0F);
      floatArray3[5] = 662.0768F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[1];
      floatArray4[0] = 0.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[4];
      floatArray5[0] = 0.0F;
      floatArray5[1] = 0.0F;
      floatArray5[2] = 662.0768F;
      floatArray5[3] = (-446.8712F);
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[1];
      floatArray6[0] = 1.0F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[5];
      floatArray7[0] = (-32768.0F);
      floatArray7[1] = (-32768.0F);
      floatArray7[2] = 0.0F;
      floatArray7[3] = 1937.6486F;
      floatArray7[4] = (-32768.0F);
      floatArray0[6] = floatArray7;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.addbuffer(0, 0, 1944.8F);
      ROI rOI0 = new ROI();
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      RealGrayImage realGrayImage2 = realGrayImage1.addbuffer(801, 3, (float) 801);
      realGrayImage1.X();
      RealGrayImage realGrayImage3 = realGrayImage1.copy();
      realGrayImage2.sqrSum();
      realGrayImage3.add((-543.0F));
      // Undeclared exception!
      try { 
        realGrayImage0.multiply(0, 128, (-324.5584F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 128
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 128;
      int[] intArray0 = new int[0];
      MemoryImageSource memoryImageSource0 = new MemoryImageSource(128, (-16777216), intArray0, (-16777216), 128);
      int int1 = 42;
      ROI rOI0 = new ROI(128, 847, 42, 2);
      ROI rOI1 = new ROI();
      int int2 = 1;
      RealGrayImage realGrayImage0 = new RealGrayImage(1, 128);
      rOI1.Y();
      int int3 = 15;
      realGrayImage0.addbuffer(58, 15, 1948.7167F);
      RealGrayImage realGrayImage1 = null;
      try {
        realGrayImage1 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 255;
      RealGrayImage realGrayImage0 = new RealGrayImage(255, 255);
      int int1 = 1;
      int int2 = 2158;
      Float float0 = new Float(0.0);
      ROI rOI0 = new ROI(255, 255, 255, 255);
      // Undeclared exception!
      try { 
        realGrayImage0.set(2158, 255, float0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 510
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(16, 16, (float) 0);
      realGrayImage1.multiply((float) 16);
      RealGrayImage realGrayImage2 = new RealGrayImage(realGrayImage1);
      realGrayImage2.getJavaImage();
      realGrayImage2.byteSize();
      RealGrayImage realGrayImage3 = new RealGrayImage(0, 0);
      ROI rOI0 = new ROI(0, 0, 2389, 1004);
      realGrayImage2.addbuffer(16, 135, (float) 0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 847;
      int[] intArray0 = new int[0];
      MemoryImageSource memoryImageSource0 = new MemoryImageSource(128, 847, intArray0, 847, 128);
      RealGrayImage realGrayImage0 = new RealGrayImage(185, 113);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      int int1 = 1;
      // Undeclared exception!
      try { 
        realGrayImage0.clip(847, 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 227;
      int int1 = 0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(227, 0, floatArray0);
      int int2 = 0;
      // Undeclared exception!
      try { 
        realGrayImage0.get(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(16, 16, (float) 0);
      realGrayImage1.X();
      ROI rOI0 = new ROI();
      rOI0.X();
      int int0 = 801;
      ROI rOI1 = new ROI(801, 16, 0, 0);
      RealGrayImage realGrayImage2 = new RealGrayImage(0, 1151);
      RealGrayImage realGrayImage3 = new RealGrayImage(128, 128);
      // Undeclared exception!
      try { 
        realGrayImage3.add((float) 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(16, 16, (float) 0);
      realGrayImage1.X();
      ROI rOI0 = new ROI();
      rOI0.X();
      RealGrayImage realGrayImage2 = realGrayImage0.copy();
      realGrayImage1.toString(rOI0);
      realGrayImage1.copy();
      rOI0.Y();
      realGrayImage2.clear();
      Float.valueOf(1.0F);
      Float float0 = new Float(1695.7264F);
      // Undeclared exception!
      try { 
        realGrayImage2.set(92, 2574, float0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2574
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      // Undeclared exception!
      try { 
        realGrayImage0.set(0, 0, (Float) 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 2313;
      RealGrayImage realGrayImage0 = new RealGrayImage(2313, 2313);
      int int1 = (-3914);
      int int2 = (-1);
      // Undeclared exception!
      try { 
        realGrayImage0.addbuffer(2313, (-3914), (-1), 2313, (float) (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 128);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      ROI rOI0 = new ROI(2, 2, 3, (-1));
      RealGrayImage realGrayImage2 = new RealGrayImage(2, 128);
      // Undeclared exception!
      try { 
        realGrayImage2.add((float) 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[4] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      // Undeclared exception!
      try { 
        realGrayImage0.set(0, 0, (Float) 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 18;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      float[][] floatArray0 = new float[1][1];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      int int0 = (-9);
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        realGrayImage0.add((-9), (-9), (float) (-9), (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[0];
      MemoryImageSource memoryImageSource0 = new MemoryImageSource(128, (-16777216), intArray0, (-16777216), 128);
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(128, 847).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn(memoryImageSource0).when(image0).getSource();
      doReturn(860, 128).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      RealGrayImage realGrayImage0 = new RealGrayImage(image0);
      float float0 = 2873.259F;
      RealGrayImage realGrayImage1 = realGrayImage0.subtract(float0);
      realGrayImage0.getJavaImage();
      int int0 = (-2054);
      realGrayImage1.addbuffer(int0, int0, float0);
      float float1 = (-2215.7F);
      int int1 = 131;
      int int2 = 2073;
      int int3 = 545;
      int int4 = 1;
      ROI rOI0 = new ROI(int1, int2, int3, int4);
      RealGrayImage realGrayImage2 = realGrayImage0.add(float1, rOI0);
      int int5 = 8;
      rOI0.setROI(int5, int3, int5, int1);
      float float2 = 639.5F;
      RealGrayImage realGrayImage3 = realGrayImage2.divide(float2, rOI0);
      realGrayImage3.getJavaImage();
      String string0 = "";
      Float float3 = Float.valueOf(string0);
      RealGrayImage realGrayImage4 = new RealGrayImage();
      int int6 = 862;
      realGrayImage4.set(int3, int6, float3);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      realGrayImage0.copy();
      Float float0 = Float.valueOf((float) 0);
      Float.min(0.14943807F, 4045.9153F);
      RealGrayImage realGrayImage2 = realGrayImage1.clear(float0);
      realGrayImage2.copy();
      realGrayImage1.addSum();
      ROI rOI0 = new ROI(0, 0, 0, 0);
      // Undeclared exception!
      try { 
        realGrayImage0.median(0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 185);
      int int0 = (-1);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      // Undeclared exception!
      try { 
        realGrayImage0.clip(0, (-1), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(19, 19);
      // Undeclared exception!
      try { 
        realGrayImage0.divide((float) 19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn((ImageProducer) null).when(image0).getSource();
      doReturn(0, 0).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(image0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.PixelGrabber", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 128);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      realGrayImage1.addbuffer(2170, 0, 2, 2170, 255.0F);
      realGrayImage0.max();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      realGrayImage1.multiply((float) 0);
      RealGrayImage realGrayImage2 = new RealGrayImage(realGrayImage0);
      realGrayImage2.getJavaImage();
      realGrayImage2.byteSize();
      RealGrayImage realGrayImage3 = new RealGrayImage(0, 0);
      int int0 = (-413);
      ROI rOI0 = new ROI(0, (-413), 0, 436);
      try { 
        Float.valueOf("<PTddz?b!B9}!]\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(19, 19);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      realGrayImage0.copy();
      Float.valueOf((float) 19);
      realGrayImage0.addbuffer(0, 0, (float) 19);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(255, 255);
      // Undeclared exception!
      try { 
        realGrayImage0.multiply((float) 255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      Float.valueOf((-324.5584F));
      realGrayImage0.copy();
      Float float0 = Float.valueOf((-324.5584F));
      Float.min(0.0F, 4045.9153F);
      RealGrayImage realGrayImage2 = realGrayImage1.clear(float0);
      realGrayImage2.copy();
      realGrayImage1.addSum();
      ROI rOI0 = new ROI(0, 0, 0, 0);
      // Undeclared exception!
      try { 
        realGrayImage0.median(0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      ROI rOI0 = new ROI(128, 0, 0, 0);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      // Undeclared exception!
      try { 
        realGrayImage1.clip(128, 1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      int int2 = 3411;
      int int3 = (-1);
      // Undeclared exception!
      try { 
        realGrayImage0.get(3411, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 262;
      RealGrayImage realGrayImage0 = new RealGrayImage(262, 729);
      // Undeclared exception!
      try { 
        realGrayImage0.addSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      int int1 = 255;
      int int2 = 128;
      ROI rOI0 = new ROI();
      rOI0.setROI(128, (-2533), 128, 88);
      // Undeclared exception!
      try { 
        realGrayImage0.subtract(255, 0, (float) 128, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2533
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(16, 16, (float) 0);
      realGrayImage1.multiply((float) 16);
      RealGrayImage realGrayImage2 = new RealGrayImage(realGrayImage1);
      realGrayImage2.getJavaImage();
      realGrayImage2.byteSize();
      RealGrayImage realGrayImage3 = new RealGrayImage(0, 0);
      ROI rOI0 = new ROI(0, 0, 2389, 1004);
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.uy();
      rOI0.lx();
      rOI0.Y();
      realGrayImage1.clip(16, 428);
      // Undeclared exception!
      realGrayImage0.addbuffer(423, 452, (-1945.7543F));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      ROI rOI0 = new ROI(128, 0, 0, 255);
      // Undeclared exception!
      try { 
        realGrayImage0.addbuffer(135, (-4615), (float) 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      RealGrayImage realGrayImage2 = realGrayImage1.addbuffer(2, 2, 0, 2170, 3975.4055F);
      realGrayImage2.toString();
      realGrayImage2.getJavaImage();
      // Undeclared exception!
      try { 
        realGrayImage0.addbuffer((-285), (-16777216), (float) (-16777216));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(47, 0);
      // Undeclared exception!
      realGrayImage0.addbuffer(47, 2650, (float) 2650);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      ROI rOI0 = new ROI();
      RealGrayImage realGrayImage1 = realGrayImage0.divide(3975.4055F);
      ROI rOI1 = new ROI();
      ROI rOI2 = new ROI(0, 0, 0, 0);
      rOI0.ly();
      rOI1.ux();
      rOI1.lx();
      // Undeclared exception!
      try { 
        realGrayImage1.subtract(realGrayImage0, rOI2, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      RealGrayImage realGrayImage2 = realGrayImage1.addbuffer(2, 2, 0, 2170, 3975.4055F);
      realGrayImage2.toString();
      Float float0 = new Float((float) 0);
      float0.floatValue();
      // Undeclared exception!
      try { 
        realGrayImage1.set(460, (-2680), float0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2680
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(16, 16, (float) 0);
      realGrayImage1.X();
      ROI rOI0 = new ROI();
      realGrayImage0.copy();
      realGrayImage1.toString(rOI0);
      RealGrayImage realGrayImage2 = realGrayImage1.copy();
      ROI rOI1 = new ROI();
      ROI rOI2 = new ROI(6, 16, 16, (-433));
      // Undeclared exception!
      try { 
        realGrayImage2.divide(realGrayImage1, rOI2, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -433
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      realGrayImage1.multiply((float) 0);
      RealGrayImage realGrayImage2 = new RealGrayImage(realGrayImage0);
      realGrayImage2.getJavaImage();
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI();
      // Undeclared exception!
      try { 
        realGrayImage1.subtract((float) 0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = (-66);
      int int1 = (-984);
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage((-66), (-984));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      int int0 = 0;
      realGrayImage0.clip(0, 0);
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 0, (float) 1);
      ROI rOI0 = new ROI(0, 1, 0, 9);
      // Undeclared exception!
      try { 
        realGrayImage0.multiply(realGrayImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      int int0 = 16;
      float float0 = 32767.0F;
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(16, 16, 32767.0F);
      realGrayImage0.addbuffer(16, 0, 32767.0F);
      realGrayImage0.X();
      ROI rOI0 = new ROI();
      rOI0.X();
      realGrayImage1.copy();
      realGrayImage0.copy();
      ROI rOI1 = new ROI();
      RealGrayImage realGrayImage2 = null;
      try {
        realGrayImage2 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(16, 16, (float) 0);
      realGrayImage1.X();
      ROI rOI0 = new ROI();
      Integer integer0 = new Integer(0);
      RealGrayImage realGrayImage2 = realGrayImage1.copy();
      realGrayImage1.copy(rOI0);
      realGrayImage2.toString(rOI0);
      RealGrayImage realGrayImage3 = realGrayImage1.copy();
      rOI0.Y();
      realGrayImage3.getJavaImage();
      int int0 = 2800;
      ROI rOI1 = new ROI((-1616), 9, 2800, 7);
      // Undeclared exception!
      try { 
        realGrayImage2.median(7, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1616
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(16, 16, (float) 0);
      realGrayImage1.X();
      ROI rOI0 = new ROI();
      rOI0.X();
      realGrayImage1.toString(rOI0);
      rOI0.ux();
      rOI0.uy();
      rOI0.lx();
      rOI0.Y();
      realGrayImage0.clip(454, 0);
      realGrayImage1.median((-503), rOI0);
      RealGrayImage realGrayImage2 = null;
      try {
        realGrayImage2 = new RealGrayImage((-1), 691);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      ROI rOI0 = new ROI();
      Float float0 = new Float(0.0F);
      RealGrayImage realGrayImage1 = realGrayImage0.clear(float0);
      RealGrayImage realGrayImage2 = realGrayImage1.copy();
      realGrayImage1.addSum();
      Float.sum(0.0F, 0.0F);
      realGrayImage0.getJavaImage();
      realGrayImage0.divide(0.0F);
      realGrayImage0.toString();
      ROI rOI1 = new ROI();
      ROI rOI2 = new ROI(16, 1004, 1667, 1004);
      rOI0.ux();
      rOI0.ly();
      rOI1.ux();
      rOI2.uy();
      rOI0.ux();
      rOI2.lx();
      // Undeclared exception!
      try { 
        realGrayImage1.subtract(realGrayImage2, rOI1, rOI2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI(128, 0, 0, 255);
      assertEquals(128, rOI0.lx());
      assertEquals(255, rOI0.ly());
      assertEquals(129, rOI0.X());
      assertEquals(256, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      RealGrayImage realGrayImage1 = new RealGrayImage(128, 128);
      assertEquals(128, realGrayImage1.X());
      assertEquals(128, realGrayImage1.Y());
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      ROI rOI2 = new ROI();
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertNotNull(rOI2);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      
      // Undeclared exception!
      try { 
        realGrayImage1.divide(realGrayImage0, rOI2, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      realGrayImage1.addbuffer(2, 2, 0, 2170, 3975.4055F);
      realGrayImage1.max();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      realGrayImage1.max();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(16, 16, (float) 0);
      realGrayImage1.X();
      ROI rOI0 = new ROI();
      rOI0.X();
      realGrayImage1.copy();
      realGrayImage1.copy();
      rOI0.Y();
      // Undeclared exception!
      try { 
        realGrayImage0.addbuffer(1143, (-1451), 514.143F);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(16, 16, (float) 0);
      realGrayImage1.X();
      ROI rOI0 = new ROI();
      int int0 = new Integer(0);
      RealGrayImage realGrayImage2 = realGrayImage1.copy();
      realGrayImage2.toString(rOI0);
      realGrayImage1.copy();
      ROI rOI1 = new ROI(16, 0, 44, 44);
      rOI1.Y();
      rOI0.setROI(44, 0, 45, (-4369));
      RealGrayImage realGrayImage3 = new RealGrayImage(16, 0);
      realGrayImage1.getJavaImage();
      RealGrayImage realGrayImage4 = new RealGrayImage(realGrayImage0);
      realGrayImage0.getJavaImage();
      // Undeclared exception!
      try { 
        realGrayImage2.add(16, 0, (float) (-4369), rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(16, 16, (float) 0);
      realGrayImage1.X();
      ROI rOI0 = new ROI();
      rOI0.X();
      realGrayImage0.copy();
      realGrayImage1.toString(rOI0);
      realGrayImage1.copy();
      rOI0.Y();
      int int0 = 1143;
      rOI0.setROI(16, 0, 1, 0);
      // Undeclared exception!
      try { 
        realGrayImage1.divide((float) 1143, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      RealGrayImage realGrayImage2 = realGrayImage1.addbuffer(2, 2, 0, 2170, 3975.4055F);
      realGrayImage2.toString();
      ROI rOI0 = new ROI(16, 19, 2170, (-2957));
      // Undeclared exception!
      try { 
        realGrayImage2.median(2170, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2957
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      ROI rOI0 = new ROI(128, 0, 0, 255);
      ROI rOI1 = new ROI();
      RealGrayImage realGrayImage1 = new RealGrayImage(128, 128);
      rOI0.Y();
      RealGrayImage realGrayImage2 = realGrayImage1.addbuffer(0, 128, (float) 128);
      // Undeclared exception!
      try { 
        realGrayImage0.multiply(realGrayImage2, rOI1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      RealGrayImage realGrayImage2 = realGrayImage1.addbuffer(2, 2, 0, 2170, 3975.4055F);
      realGrayImage2.toString();
      realGrayImage2.getJavaImage();
      ROI rOI0 = new ROI(0, 19, 2170, (-2957));
      realGrayImage0.sqrSum();
      rOI0.setROI((-2957), 19, 935, 0);
      // Undeclared exception!
      try { 
        realGrayImage2.median(2170, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1, 1);
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI();
      rOI1.X();
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      realGrayImage0.toString(rOI0);
      realGrayImage0.copy();
      rOI1.Y();
      int int0 = 1;
      // Undeclared exception!
      try { 
        realGrayImage1.divide((float) 128, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      float[][] floatArray0 = new float[0][1];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI();
      // Undeclared exception!
      try { 
        realGrayImage0.subtract(0.0F, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      float[][] floatArray0 = new float[0][1];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      int int0 = 1;
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        realGrayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(47, 0);
      int int1 = 16;
      realGrayImage0.addbuffer(16, 0, (float) 16);
      // Undeclared exception!
      realGrayImage0.addbuffer(47, 2650, 0.0F);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      float[][] floatArray0 = new float[3][4];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 2681.01F;
      floatArray1[1] = (-1168.73F);
      floatArray1[2] = (-32768.0F);
      floatArray1[3] = (-1.0F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      floatArray2[0] = (-32768.0F);
      floatArray2[1] = (-32768.0F);
      floatArray2[2] = (-1.0F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[2];
      floatArray3[0] = 2681.01F;
      floatArray3[1] = (-32768.0F);
      floatArray0[2] = floatArray3;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(262, 729);
      assertEquals(729, realGrayImage0.Y());
      assertEquals(262, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realGrayImage0.subtract(535.80304F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(19, 19);
      assertEquals(19, realGrayImage0.Y());
      assertEquals(19, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertEquals(19, realGrayImage0.Y());
      assertEquals(19, realGrayImage0.X());
      assertEquals(19, realGrayImage1.Y());
      assertEquals(19, realGrayImage1.X());
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      RealGrayImage realGrayImage2 = realGrayImage0.copy();
      assertEquals(19, realGrayImage0.Y());
      assertEquals(19, realGrayImage0.X());
      assertEquals(19, realGrayImage2.X());
      assertEquals(19, realGrayImage2.Y());
      assertNotNull(realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      
      Float float0 = Float.valueOf((float) 19);
      assertEquals(19.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.min(0.14943807F, 4045.9153F);
      assertEquals(0.14943807F, float1, 0.01F);
      
      RealGrayImage realGrayImage3 = realGrayImage1.clear(float0);
      assertEquals(19, realGrayImage0.Y());
      assertEquals(19, realGrayImage0.X());
      assertEquals(130321.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(19, realGrayImage1.Y());
      assertEquals(19, realGrayImage1.X());
      assertEquals(19.0F, realGrayImage1.min(), 0.01F);
      assertEquals(19.0F, realGrayImage1.max(), 0.01F);
      assertEquals(6859.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(6859.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(130321.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(19, realGrayImage3.Y());
      assertEquals(19, realGrayImage3.X());
      assertEquals(19.0F, realGrayImage3.min(), 0.01F);
      assertEquals(19.0F, realGrayImage3.max(), 0.01F);
      assertEquals(6859.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(6859.0F, realGrayImage3.absSum(), 0.01F);
      assertNotNull(realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      
      RealGrayImage realGrayImage4 = realGrayImage3.copy();
      assertEquals(19, realGrayImage0.Y());
      assertEquals(19, realGrayImage0.X());
      assertEquals(130321.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(19, realGrayImage1.Y());
      assertEquals(19, realGrayImage1.X());
      assertEquals(19.0F, realGrayImage1.min(), 0.01F);
      assertEquals(19.0F, realGrayImage1.max(), 0.01F);
      assertEquals(6859.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(6859.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(130321.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(19, realGrayImage3.Y());
      assertEquals(19, realGrayImage3.X());
      assertEquals(19.0F, realGrayImage3.min(), 0.01F);
      assertEquals(19.0F, realGrayImage3.max(), 0.01F);
      assertEquals(6859.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(6859.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(19.0F, realGrayImage4.max(), 0.01F);
      assertEquals(19.0F, realGrayImage4.min(), 0.01F);
      assertEquals(19, realGrayImage4.X());
      assertEquals(19, realGrayImage4.Y());
      assertEquals(130321.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals(6859.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(6859.0F, realGrayImage4.absSum(), 0.01F);
      assertNotNull(realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage4);
      assertSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage3);
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      
      // Undeclared exception!
      try { 
        realGrayImage4.addbuffer((-1007), (-1007), 0.0F);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 255;
      RealGrayImage realGrayImage0 = new RealGrayImage(255, 255);
      assertEquals(255, realGrayImage0.Y());
      assertEquals(255, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      int int1 = 2158;
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotNull(realGrayImage0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(0, 0, (-2134.87F));
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertNotNull(realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(2, floatArray0.length);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      int int0 = realGrayImage0.X();
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, int0);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertEquals(2, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy();
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertNotNull(realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertEquals(2, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      double double0 = realGrayImage1.sqrSum();
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(2, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      RealGrayImage realGrayImage3 = realGrayImage1.add((float) 0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0, realGrayImage3.X());
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertNotNull(realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage1, realGrayImage3);
      assertSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertEquals(2, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        realGrayImage3.multiply(0, 662, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 662
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.divide(3975.4055F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotNull(realGrayImage1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      
      String string0 = realGrayImage1.toString();
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      ROI rOI2 = new ROI();
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertNotNull(rOI2);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      
      int int0 = rOI1.ux();
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, int0);
      assertNotSame(rOI1, rOI0);
      assertNotSame(rOI1, rOI2);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(rOI1.equals((Object)rOI2));
      
      int int1 = 255;
      rOI2.setROI(34, 255, 0, 22);
      assertEquals(234, rOI2.Y());
      assertEquals(0, rOI2.ux());
      assertEquals(34, rOI2.lx());
      assertEquals(255, rOI2.ly());
      assertEquals(35, rOI2.X());
      assertEquals(22, rOI2.uy());
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        realGrayImage1.max(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      RealGrayImage realGrayImage2 = realGrayImage1.addbuffer(0, 255, 0, (-1237), (-324.5584F));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(255, realGrayImage2.Y());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertNotNull(realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      
      Float float0 = realGrayImage1.max();
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage((float[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 255;
      RealGrayImage realGrayImage0 = new RealGrayImage(255, 255);
      assertEquals(255, realGrayImage0.Y());
      assertEquals(255, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(0, 0, 1944.8F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertNotNull(realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      RealGrayImage realGrayImage2 = new RealGrayImage(realGrayImage0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertNotNull(realGrayImage2);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      
      RealGrayImage realGrayImage3 = realGrayImage2.addbuffer(801, 3, (float) 801);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(1.541767203E9, realGrayImage3.sqrSum(), 0.01);
      assertEquals(801.0F, realGrayImage3.max(), 0.01F);
      assertEquals(1924803.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(3, realGrayImage3.Y());
      assertEquals(801, realGrayImage3.X());
      assertEquals(801.0F, realGrayImage3.min(), 0.01F);
      assertEquals(1924803.0F, realGrayImage3.addSum(), 0.01F);
      assertNotNull(realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      
      int int0 = realGrayImage2.X();
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0, int0);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage3);
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage3));
      
      RealGrayImage realGrayImage4 = realGrayImage2.copy();
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage4.min(), 0.01F);
      assertEquals(0, realGrayImage4.Y());
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(0, realGrayImage4.X());
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertNotNull(realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage4);
      assertNotSame(realGrayImage4, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      
      double double0 = realGrayImage3.sqrSum();
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(801.0F, realGrayImage3.max(), 0.01F);
      assertEquals(1924803.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(3, realGrayImage3.Y());
      assertEquals(801, realGrayImage3.X());
      assertEquals(801.0F, realGrayImage3.min(), 0.01F);
      assertEquals(1924803.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(1.541767203E9, double0, 0.01);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage3));
      assertFalse(realGrayImage2.equals((Object)realGrayImage4));
      assertFalse(realGrayImage3.equals((Object)realGrayImage4));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      
      RealGrayImage realGrayImage5 = realGrayImage4.add((-543.0F));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage4.min(), 0.01F);
      assertEquals(0, realGrayImage4.Y());
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(0, realGrayImage4.X());
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals(0, realGrayImage5.X());
      assertEquals(0, realGrayImage5.Y());
      assertEquals(0.0F, realGrayImage5.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage5.min(), 0.01F);
      assertEquals(0.0, realGrayImage5.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage5.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage5.max(), 0.01F);
      assertNotNull(realGrayImage5);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage5);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage5);
      assertNotSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage4);
      assertNotSame(realGrayImage4, realGrayImage3);
      assertSame(realGrayImage4, realGrayImage5);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertNotSame(realGrayImage5, realGrayImage0);
      assertNotSame(realGrayImage5, realGrayImage1);
      assertSame(realGrayImage5, realGrayImage4);
      assertNotSame(realGrayImage5, realGrayImage3);
      assertNotSame(realGrayImage5, realGrayImage2);
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage3));
      assertFalse(realGrayImage2.equals((Object)realGrayImage4));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertFalse(realGrayImage5.equals((Object)realGrayImage0));
      assertFalse(realGrayImage5.equals((Object)realGrayImage1));
      assertFalse(realGrayImage5.equals((Object)realGrayImage3));
      assertFalse(realGrayImage5.equals((Object)realGrayImage2));
      
      // Undeclared exception!
      try { 
        realGrayImage4.multiply(0, 1204, (float) 1204, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1204
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(realGrayImage0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      Float float0 = Float.valueOf("0");
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.0F);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = float1.floatValue();
      assertEquals(1.0F, float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      // Undeclared exception!
      try { 
        realGrayImage0.set((-1070), 1008, (Float) 1.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1008
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      RealGrayImage realGrayImage2 = realGrayImage0.addbuffer(2, 11, 11, 2170, 3417.204F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(3417.204F, realGrayImage2.max(), 0.01F);
      assertEquals(75178.48F, realGrayImage2.absSum(), 0.01F);
      assertEquals(2.56900248E8, realGrayImage2.sqrSum(), 0.01);
      assertEquals(2, realGrayImage2.X());
      assertEquals(3417.204F, realGrayImage2.min(), 0.01F);
      assertEquals(11, realGrayImage2.Y());
      assertEquals(75178.48F, realGrayImage2.addSum(), 0.01F);
      assertNotNull(realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      
      String string0 = realGrayImage0.toString();
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      
      ROI rOI0 = new ROI(11, 2071, 16, 14);
      assertEquals(14, rOI0.uy());
      assertEquals(2071, rOI0.ly());
      assertEquals(6, rOI0.X());
      assertEquals(2058, rOI0.Y());
      assertEquals(11, rOI0.ux());
      assertEquals(16, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = 227;
      int int1 = 0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      RealGrayImage realGrayImage3 = new RealGrayImage(227, 0, floatArray0);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(227, realGrayImage3.X());
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertNotNull(realGrayImage3);
      assertEquals(1, floatArray0.length);
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        realGrayImage3.get(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(0, 471, (float) 0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(471, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotNull(realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      RealGrayImage realGrayImage2 = new RealGrayImage(0, 0);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertNotNull(realGrayImage2);
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      
      RealGrayImage realGrayImage3 = realGrayImage0.subtract(realGrayImage2);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0, realGrayImage3.X());
      assertNotNull(realGrayImage3);
      assertSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage3);
      assertSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      
      RealGrayImage realGrayImage4 = realGrayImage1.subtract((-1.0F));
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(471, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(471, realGrayImage4.Y());
      assertEquals(32767.0F, realGrayImage4.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(0, realGrayImage4.X());
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertNotNull(realGrayImage4);
      assertSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage3);
      assertSame(realGrayImage4, realGrayImage1);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float[][] floatArray0 = new float[0][1];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      assertEquals(0, floatArray0.length);
      
      ImageProducer imageProducer0 = realGrayImage0.getJavaImage();
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertNotNull(imageProducer0);
      assertEquals(0, floatArray0.length);
      
      int int0 = 1;
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        realGrayImage0.add(1, 1, (float) 1, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(16, 16, (float) 0);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(16, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(16, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotNull(realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      RealGrayImage realGrayImage2 = realGrayImage1.multiply((float) 16);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(16, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(16, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(16, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(16, realGrayImage2.X());
      assertNotNull(realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage1, realGrayImage2);
      assertSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      
      RealGrayImage realGrayImage3 = new RealGrayImage(realGrayImage1);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(16, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(16, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(16, realGrayImage3.X());
      assertEquals(16, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertNotNull(realGrayImage3);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      
      ImageProducer imageProducer0 = realGrayImage3.getJavaImage();
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(16, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(16, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(16, realGrayImage3.X());
      assertEquals(16, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertNotNull(imageProducer0);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      
      realGrayImage3.byteSize();
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(16, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(16, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(16, realGrayImage3.X());
      assertEquals(16, realGrayImage3.Y());
      assertEquals(Float.NaN, realGrayImage3.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(Double.NaN, realGrayImage3.sqrSum(), 0.01);
      assertEquals(Float.NaN, realGrayImage3.addSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      
      RealGrayImage realGrayImage4 = new RealGrayImage(0, 0);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(0, realGrayImage4.X());
      assertEquals(0, realGrayImage4.Y());
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage4.min(), 0.01F);
      assertNotNull(realGrayImage4);
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      
      ROI rOI0 = new ROI(0, 0, 2389, 1004);
      assertEquals(2390, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(2389, rOI0.lx());
      assertEquals(1005, rOI0.Y());
      assertEquals(1004, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(2390, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(2389, rOI0.lx());
      assertEquals(1005, rOI0.Y());
      assertEquals(1004, rOI0.ly());
      assertEquals(0, int0);
      
      int int1 = rOI0.ly();
      assertEquals(2390, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(2389, rOI0.lx());
      assertEquals(1005, rOI0.Y());
      assertEquals(1004, rOI0.ly());
      assertEquals(1004, int1);
      assertFalse(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(2390, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(2389, rOI0.lx());
      assertEquals(1005, rOI0.Y());
      assertEquals(1004, rOI0.ly());
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.uy();
      assertEquals(2390, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(2389, rOI0.lx());
      assertEquals(1005, rOI0.Y());
      assertEquals(1004, rOI0.ly());
      assertEquals(0, int3);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      
      int int4 = rOI0.lx();
      assertEquals(2390, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(2389, rOI0.lx());
      assertEquals(1005, rOI0.Y());
      assertEquals(1004, rOI0.ly());
      assertEquals(2389, int4);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      
      int int5 = rOI0.Y();
      assertEquals(2390, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(2389, rOI0.lx());
      assertEquals(1005, rOI0.Y());
      assertEquals(1004, rOI0.ly());
      assertEquals(1005, int5);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      
      realGrayImage1.clip(16, 428);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(4096.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(16.0F, realGrayImage1.min(), 0.01F);
      assertEquals(16.0F, realGrayImage1.max(), 0.01F);
      assertEquals(16, realGrayImage1.Y());
      assertEquals(4096.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(16, realGrayImage1.X());
      assertEquals(65536.0, realGrayImage1.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage1, realGrayImage2);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      // Undeclared exception!
      try { 
        realGrayImage0.median(0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(19, 19);
      assertEquals(19, realGrayImage0.Y());
      assertEquals(19, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertEquals(19, realGrayImage0.Y());
      assertEquals(19, realGrayImage0.X());
      assertEquals(19, realGrayImage1.X());
      assertEquals(19, realGrayImage1.Y());
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      RealGrayImage realGrayImage2 = realGrayImage0.copy();
      assertEquals(19, realGrayImage0.Y());
      assertEquals(19, realGrayImage0.X());
      assertEquals(19, realGrayImage2.X());
      assertEquals(19, realGrayImage2.Y());
      assertNotNull(realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      
      RealGrayImage realGrayImage3 = realGrayImage2.addbuffer(19, 19, (float) 19);
      assertEquals(19, realGrayImage0.Y());
      assertEquals(19, realGrayImage0.X());
      assertEquals(19, realGrayImage2.X());
      assertEquals(19, realGrayImage2.Y());
      assertEquals(19, realGrayImage3.Y());
      assertEquals(19, realGrayImage3.X());
      assertNotNull(realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      
      Float float0 = Float.valueOf((float) 19);
      assertEquals(19.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      RealGrayImage realGrayImage4 = realGrayImage0.addbuffer(0, 0, (float) 19);
      assertEquals(19, realGrayImage0.Y());
      assertEquals(19, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage4.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(0, realGrayImage4.X());
      assertEquals(0, realGrayImage4.Y());
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertNotNull(realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage3);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      int int0 = 16;
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(16, 16, (float) 0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(16, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(16, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertNotNull(realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      int int1 = realGrayImage1.X();
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(16, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(16, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(16, int1);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertTrue(int1 == int0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      RealGrayImage realGrayImage2 = realGrayImage0.copy();
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertNotNull(realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      
      String string0 = realGrayImage1.toString(rOI0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(16, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(16, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals("16:16\n0.0 \n", string0);
      assertNotNull(string0);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      
      RealGrayImage realGrayImage3 = realGrayImage1.copy();
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(16, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(16, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(16, realGrayImage3.X());
      assertEquals(16, realGrayImage3.Y());
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertNotNull(realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      
      int int2 = rOI0.Y();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      realGrayImage2.clip(1143, 16);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage3));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      
      // Undeclared exception!
      try { 
        realGrayImage0.addbuffer(1143, (-1451), (float) 16);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 8;
      floatArray0[1] = (float) 8;
      floatArray0[2] = (float) (-883);
      floatArray0[3] = (float) 8;
      floatArray0[4] = (float) (-883);
      floatArray0[5] = (float) 8;
      floatArray0[6] = (float) (-883);
      floatArray0[7] = (float) 8;
      floatArray0[8] = 0.0F;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage((-883), 8, floatArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.clear(float0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertNotNull(realGrayImage1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy();
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertNotNull(realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertEquals(5, floatArray0.length);
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      float float1 = realGrayImage1.addSum();
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertEquals(5, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      float float2 = Float.sum(0.0F, 0.0F);
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(float2, float1, 0.01F);
      
      ImageProducer imageProducer0 = realGrayImage0.getJavaImage();
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(imageProducer0);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage0, realGrayImage1);
      assertEquals(5, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      RealGrayImage realGrayImage3 = realGrayImage0.divide(0.0F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0, realGrayImage3.X());
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertNotNull(realGrayImage3);
      assertSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertSame(realGrayImage3, realGrayImage0);
      assertEquals(5, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      String string0 = realGrayImage0.toString();
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      assertSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage0, realGrayImage1);
      assertEquals(5, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      ROI rOI2 = new ROI();
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertNotNull(rOI2);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      
      int int0 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int0);
      assertNotSame(rOI0, rOI2);
      assertNotSame(rOI0, rOI1);
      assertFalse(rOI0.equals((Object)rOI2));
      assertFalse(rOI0.equals((Object)rOI1));
      
      int int1 = rOI0.ly();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int1);
      assertNotSame(rOI0, rOI2);
      assertNotSame(rOI0, rOI1);
      assertTrue(int1 == int0);
      assertFalse(rOI0.equals((Object)rOI2));
      assertFalse(rOI0.equals((Object)rOI1));
      
      int int2 = rOI1.ux();
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, int2);
      assertNotSame(rOI1, rOI0);
      assertNotSame(rOI1, rOI2);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(rOI1.equals((Object)rOI2));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int3);
      assertNotSame(rOI0, rOI2);
      assertNotSame(rOI0, rOI1);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(rOI0.equals((Object)rOI2));
      assertFalse(rOI0.equals((Object)rOI1));
      
      int int4 = rOI2.lx();
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(0, int4);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      
      // Undeclared exception!
      try { 
        realGrayImage1.subtract(realGrayImage2, rOI1, rOI2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.divide(3975.4055F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertNotNull(realGrayImage1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      
      String string0 = realGrayImage1.toString();
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      ROI rOI2 = new ROI();
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertEquals(1, rOI2.Y());
      assertNotNull(rOI2);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      
      int int1 = rOI1.ux();
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, int1);
      assertNotSame(rOI1, rOI2);
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI2));
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int1 == int0);
      
      int int2 = 34;
      int int3 = 255;
      rOI2.setROI(34, 255, 0, 22);
      assertEquals(34, rOI2.lx());
      assertEquals(234, rOI2.Y());
      assertEquals(0, rOI2.ux());
      assertEquals(255, rOI2.ly());
      assertEquals(22, rOI2.uy());
      assertEquals(35, rOI2.X());
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        realGrayImage1.max(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(0, 471, (float) 0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(471, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotNull(realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      RealGrayImage realGrayImage2 = new RealGrayImage(0, 0);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0, realGrayImage2.Y());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertNotNull(realGrayImage2);
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      
      RealGrayImage realGrayImage3 = realGrayImage0.subtract(realGrayImage2);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0, realGrayImage2.Y());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0, realGrayImage3.Y());
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertNotNull(realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      
      // Undeclared exception!
      try { 
        realGrayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.divide(3975.4055F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertNotNull(realGrayImage1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      
      ROI rOI1 = new ROI();
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      ROI rOI2 = new ROI(0, 0, 0, 0);
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertNotNull(rOI2);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      
      int int0 = rOI0.ly();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int0);
      assertNotSame(rOI0, rOI1);
      assertNotSame(rOI0, rOI2);
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(rOI0.equals((Object)rOI2));
      
      int int1 = rOI1.lx();
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, int1);
      assertNotSame(rOI1, rOI0);
      assertNotSame(rOI1, rOI2);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(rOI1.equals((Object)rOI2));
      assertTrue(int1 == int0);
      
      ROI rOI3 = new ROI();
      assertEquals(0, rOI3.ux());
      assertEquals(0, rOI3.uy());
      assertEquals(0, rOI3.ly());
      assertEquals(0, rOI3.lx());
      assertEquals(1, rOI3.X());
      assertEquals(1, rOI3.Y());
      assertNotNull(rOI3);
      assertFalse(rOI3.equals((Object)rOI0));
      assertFalse(rOI3.equals((Object)rOI2));
      assertFalse(rOI3.equals((Object)rOI1));
      
      // Undeclared exception!
      try { 
        realGrayImage1.multiply(0, 0, (float) 0, rOI3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      float[][] floatArray0 = new float[0][1];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      assertEquals(0, floatArray0.length);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      ROI rOI2 = new ROI((-184), (-184), (-1), (-1));
      assertEquals(184, rOI2.Y());
      assertEquals(184, rOI2.X());
      assertEquals((-184), rOI2.uy());
      assertEquals((-1), rOI2.ly());
      assertEquals((-1), rOI2.lx());
      assertEquals((-184), rOI2.ux());
      assertNotNull(rOI2);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        realGrayImage0.subtract((-4366.1177F), rOI2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -184
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      RealGrayImage realGrayImage2 = realGrayImage1.multiply((float) 0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertNotNull(realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      
      RealGrayImage realGrayImage3 = new RealGrayImage(realGrayImage0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertNotNull(realGrayImage3);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      
      RealGrayImage realGrayImage4 = null;
      try {
        realGrayImage4 = new RealGrayImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(19, 19);
      assertEquals(19, realGrayImage0.Y());
      assertEquals(19, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertEquals(19, realGrayImage0.Y());
      assertEquals(19, realGrayImage0.X());
      assertEquals(19, realGrayImage1.Y());
      assertEquals(19, realGrayImage1.X());
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      RealGrayImage realGrayImage2 = realGrayImage0.copy();
      assertEquals(19, realGrayImage0.Y());
      assertEquals(19, realGrayImage0.X());
      assertEquals(19, realGrayImage2.X());
      assertEquals(19, realGrayImage2.Y());
      assertNotNull(realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      
      Float float0 = Float.valueOf((float) 19);
      assertEquals(19.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.min(0.14943807F, 4045.9153F);
      assertEquals(0.14943807F, float1, 0.01F);
      
      RealGrayImage realGrayImage3 = realGrayImage1.clear(float0);
      assertEquals(19, realGrayImage0.Y());
      assertEquals(19, realGrayImage0.X());
      assertEquals(19, realGrayImage1.Y());
      assertEquals(6859.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(19, realGrayImage1.X());
      assertEquals(19.0F, realGrayImage1.min(), 0.01F);
      assertEquals(130321.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(19.0F, realGrayImage1.max(), 0.01F);
      assertEquals(6859.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(130321.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(19, realGrayImage3.Y());
      assertEquals(19, realGrayImage3.X());
      assertEquals(6859.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(19.0F, realGrayImage3.min(), 0.01F);
      assertEquals(6859.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(19.0F, realGrayImage3.max(), 0.01F);
      assertNotNull(realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertSame(realGrayImage3, realGrayImage1);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      
      RealGrayImage realGrayImage4 = realGrayImage3.copy();
      assertEquals(19, realGrayImage0.Y());
      assertEquals(19, realGrayImage0.X());
      assertEquals(19, realGrayImage1.Y());
      assertEquals(6859.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(19, realGrayImage1.X());
      assertEquals(19.0F, realGrayImage1.min(), 0.01F);
      assertEquals(130321.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(19.0F, realGrayImage1.max(), 0.01F);
      assertEquals(6859.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(130321.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(19, realGrayImage3.Y());
      assertEquals(19, realGrayImage3.X());
      assertEquals(6859.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(19.0F, realGrayImage3.min(), 0.01F);
      assertEquals(6859.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(19.0F, realGrayImage3.max(), 0.01F);
      assertEquals(6859.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(19.0F, realGrayImage4.min(), 0.01F);
      assertEquals(19.0F, realGrayImage4.max(), 0.01F);
      assertEquals(6859.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(130321.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals(19, realGrayImage4.Y());
      assertEquals(19, realGrayImage4.X());
      assertNotNull(realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage4, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      
      float float2 = realGrayImage1.addSum();
      assertEquals(19, realGrayImage0.Y());
      assertEquals(19, realGrayImage0.X());
      assertEquals(19, realGrayImage1.Y());
      assertEquals(6859.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(19, realGrayImage1.X());
      assertEquals(19.0F, realGrayImage1.min(), 0.01F);
      assertEquals(130321.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(19.0F, realGrayImage1.max(), 0.01F);
      assertEquals(6859.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(6859.0F, float2, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertNotEquals(float2, float1, 0.01F);
      
      ROI rOI0 = new ROI(19, 0, 19, 0);
      assertEquals(0, rOI0.uy());
      assertEquals(19, rOI0.ux());
      assertEquals(19, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      realGrayImage0.median(19, rOI0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      RealGrayImage realGrayImage1 = new RealGrayImage(128, 128);
      assertEquals(128, realGrayImage1.X());
      assertEquals(128, realGrayImage1.Y());
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      RealGrayImage realGrayImage2 = new RealGrayImage(3127, 128);
      assertEquals(128, realGrayImage2.Y());
      assertEquals(3127, realGrayImage2.X());
      assertNotNull(realGrayImage2);
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      
      rOI0.setROI((-1559), 128, 0, (-988));
      assertEquals(1117, rOI0.Y());
      assertEquals(1560, rOI0.X());
      assertEquals(128, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals((-1559), rOI0.ux());
      assertEquals((-988), rOI0.uy());
      
      RealGrayImage realGrayImage3 = new RealGrayImage(128, 128);
      assertEquals(128, realGrayImage3.Y());
      assertEquals(128, realGrayImage3.X());
      assertNotNull(realGrayImage3);
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      
      // Undeclared exception!
      try { 
        realGrayImage0.add(2329, 3127, (float) 2329, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2139
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(16, 16, (float) 0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(16, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(16, realGrayImage1.X());
      assertNotNull(realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      int int0 = realGrayImage1.X();
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(16, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(16, realGrayImage1.X());
      assertEquals(16, int0);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy();
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(16, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(16, realGrayImage1.X());
      assertEquals(16, realGrayImage2.X());
      assertEquals(16, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertNotNull(realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      
      RealGrayImage realGrayImage3 = realGrayImage1.copy(rOI0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(16, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(16, realGrayImage1.X());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(1, realGrayImage3.X());
      assertEquals(1, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertNotNull(realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      
      String string0 = realGrayImage2.toString(rOI0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(16, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(16, realGrayImage1.X());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(16, realGrayImage2.X());
      assertEquals(16, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals("16:16\n0.0 \n", string0);
      assertNotNull(string0);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage2.equals((Object)realGrayImage3));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      
      RealGrayImage realGrayImage4 = realGrayImage1.copy();
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(16, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(16, realGrayImage1.X());
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage4.min(), 0.01F);
      assertEquals(16, realGrayImage4.Y());
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(16, realGrayImage4.X());
      assertEquals(0.0F, realGrayImage4.max(), 0.01F);
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertNotNull(realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertNotSame(realGrayImage4, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      
      ROI rOI1 = new ROI(16, 0, 44, 44);
      assertEquals(0, rOI1.uy());
      assertEquals(16, rOI1.ux());
      assertEquals(44, rOI1.ly());
      assertEquals(29, rOI1.X());
      assertEquals(45, rOI1.Y());
      assertEquals(44, rOI1.lx());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int1 = rOI1.Y();
      assertEquals(0, rOI1.uy());
      assertEquals(16, rOI1.ux());
      assertEquals(44, rOI1.ly());
      assertEquals(29, rOI1.X());
      assertEquals(45, rOI1.Y());
      assertEquals(44, rOI1.lx());
      assertEquals(45, int1);
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int1 == int0);
      
      rOI0.setROI(44, 0, 45, (-4369));
      assertEquals(2, rOI0.X());
      assertEquals(4370, rOI0.Y());
      assertEquals(45, rOI0.lx());
      assertEquals(44, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals((-4369), rOI0.uy());
      assertNotSame(rOI0, rOI1);
      assertFalse(rOI0.equals((Object)rOI1));
      
      RealGrayImage realGrayImage5 = new RealGrayImage(16, 0);
      assertEquals(32767.0F, realGrayImage5.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage5.max(), 0.01F);
      assertEquals(0.0, realGrayImage5.sqrSum(), 0.01);
      assertEquals(0, realGrayImage5.Y());
      assertEquals(0.0F, realGrayImage5.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage5.addSum(), 0.01F);
      assertEquals(16, realGrayImage5.X());
      assertNotNull(realGrayImage5);
      assertFalse(realGrayImage5.equals((Object)realGrayImage1));
      assertFalse(realGrayImage5.equals((Object)realGrayImage3));
      assertFalse(realGrayImage5.equals((Object)realGrayImage0));
      assertFalse(realGrayImage5.equals((Object)realGrayImage2));
      assertFalse(realGrayImage5.equals((Object)realGrayImage4));
      
      ImageProducer imageProducer0 = realGrayImage1.getJavaImage();
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(16, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(16, realGrayImage1.X());
      assertNotNull(imageProducer0);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage5);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage5);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage5));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage5));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      
      // Undeclared exception!
      try { 
        realGrayImage4.copy(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      
      int int1 = 255;
      ROI rOI0 = new ROI(128, 0, 0, 255);
      assertEquals(129, rOI0.X());
      assertEquals(256, rOI0.Y());
      assertEquals(128, rOI0.lx());
      assertEquals(255, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      RealGrayImage realGrayImage1 = new RealGrayImage(128, 128);
      assertEquals(128, realGrayImage1.Y());
      assertEquals(128, realGrayImage1.X());
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      int int2 = rOI0.Y();
      assertEquals(129, rOI0.X());
      assertEquals(256, rOI0.Y());
      assertEquals(128, rOI0.lx());
      assertEquals(255, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(256, int2);
      assertNotSame(rOI0, rOI1);
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      RealGrayImage realGrayImage2 = realGrayImage1.addbuffer(0, 128, (float) 128);
      assertEquals(128, realGrayImage1.Y());
      assertEquals(128, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(128, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertNotNull(realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      
      // Undeclared exception!
      try { 
        realGrayImage1.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      RealGrayImage realGrayImage1 = new RealGrayImage(255, 255);
      assertEquals(255, realGrayImage1.Y());
      assertEquals(255, realGrayImage1.X());
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      // Undeclared exception!
      try { 
        realGrayImage1.multiply((float) 255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 2676;
      floatArray0[2] = (float) 2676;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 2676;
      RealGrayImage realGrayImage0 = new RealGrayImage(2676, 0, floatArray0);
      assertEquals(2676, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotNull(realGrayImage0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 2676.0F, 2676.0F, 0.0F, 0.0F, 2676.0F}, floatArray0, 0.01F);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      Float float0 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.min(16.0F, 1267.5498F);
      assertEquals(16.0F, float1, 0.01F);
      
      RealGrayImage realGrayImage1 = realGrayImage0.clear((Float) 0.0F);
      assertEquals(2676, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(2676, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertNotNull(realGrayImage1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 2676.0F, 2676.0F, 0.0F, 0.0F, 2676.0F}, floatArray0, 0.01F);
      
      RealGrayImage realGrayImage2 = realGrayImage0.copy();
      assertEquals(2676, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(2676, realGrayImage2.X());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertNotNull(realGrayImage2);
      assertSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertEquals(6, floatArray0.length);
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertArrayEquals(new float[] {0.0F, 2676.0F, 2676.0F, 0.0F, 0.0F, 2676.0F}, floatArray0, 0.01F);
      
      float float2 = realGrayImage2.addSum();
      assertEquals(2676, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(2676, realGrayImage2.X());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      assertSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertEquals(6, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertNotEquals(float2, float1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 2676.0F, 2676.0F, 0.0F, 0.0F, 2676.0F}, floatArray0, 0.01F);
      
      ROI rOI1 = new ROI(0, 386, 3382, 0);
      assertEquals(387, rOI1.Y());
      assertEquals(386, rOI1.ly());
      assertEquals(3382, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(3383, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      rOI1.setROI(2676, 386, 0, 396);
      assertEquals(0, rOI1.ux());
      assertEquals(2676, rOI1.lx());
      assertEquals(11, rOI1.Y());
      assertEquals(386, rOI1.uy());
      assertEquals(2677, rOI1.X());
      assertEquals(396, rOI1.ly());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        realGrayImage0.median(0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 386
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(16, 16, (float) 0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(16, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(16, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotNull(realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      RealGrayImage realGrayImage2 = realGrayImage1.multiply((float) 16);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(16, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(16, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(16, realGrayImage2.X());
      assertEquals(16, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertNotNull(realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage1);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      
      RealGrayImage realGrayImage3 = new RealGrayImage(realGrayImage1);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(16, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(16, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(16, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(16, realGrayImage3.Y());
      assertNotNull(realGrayImage3);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      
      ImageProducer imageProducer0 = realGrayImage3.getJavaImage();
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(16, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(16, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(16, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(16, realGrayImage3.Y());
      assertNotNull(imageProducer0);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      
      realGrayImage3.byteSize();
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(16, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(16, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(Double.NaN, realGrayImage3.sqrSum(), 0.01);
      assertEquals(Float.NaN, realGrayImage3.addSum(), 0.01F);
      assertEquals(16, realGrayImage3.X());
      assertEquals(Float.NaN, realGrayImage3.absSum(), 0.01F);
      assertEquals(16, realGrayImage3.Y());
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      
      RealGrayImage realGrayImage4 = new RealGrayImage(0, 0);
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage4.min(), 0.01F);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals(0, realGrayImage4.X());
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(0, realGrayImage4.Y());
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertNotNull(realGrayImage4);
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      
      ROI rOI0 = new ROI((-413), 140, (-1182), (-1));
      assertEquals((-413), rOI0.lx());
      assertEquals(770, rOI0.X());
      assertEquals(140, rOI0.ly());
      assertEquals(142, rOI0.Y());
      assertEquals((-1182), rOI0.ux());
      assertEquals((-1), rOI0.uy());
      assertNotNull(rOI0);
      
      try { 
        Float.valueOf("image fetch aborted or errored");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      Float float0 = Float.valueOf((-324.5584F));
      assertEquals((-324.5584F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      RealGrayImage realGrayImage2 = realGrayImage0.copy();
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertNotNull(realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      
      Float float1 = Float.valueOf((-324.5584F));
      assertEquals((-324.5584F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = Float.min(0.0F, 4045.9153F);
      assertEquals(0.0F, float2, 0.01F);
      
      RealGrayImage realGrayImage3 = realGrayImage1.clear(float1);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertNotNull(realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      
      RealGrayImage realGrayImage4 = realGrayImage3.copy();
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals(0, realGrayImage4.Y());
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage4.min(), 0.01F);
      assertEquals(0, realGrayImage4.X());
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertNotNull(realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage4);
      assertSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      
      float float3 = realGrayImage1.addSum();
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, float3, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(float3, float2, 0.01F);
      
      float float4 = Float.sum(0, (-1.0F));
      assertEquals((-1.0F), float4, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      
      ImageProducer imageProducer0 = realGrayImage1.getJavaImage();
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertNotNull(imageProducer0);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      RealGrayImage realGrayImage5 = realGrayImage1.divide(0.0F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals((-32768.0F), realGrayImage5.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage5.min(), 0.01F);
      assertEquals(0, realGrayImage5.X());
      assertEquals(0.0F, realGrayImage5.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage5.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage5.sqrSum(), 0.01);
      assertEquals(0, realGrayImage5.Y());
      assertNotNull(realGrayImage5);
      assertNotSame(realGrayImage0, realGrayImage5);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertSame(realGrayImage1, realGrayImage5);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage5, realGrayImage0);
      assertSame(realGrayImage5, realGrayImage3);
      assertSame(realGrayImage5, realGrayImage1);
      assertNotSame(realGrayImage5, realGrayImage2);
      assertNotSame(realGrayImage5, realGrayImage4);
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage5.equals((Object)realGrayImage0));
      assertFalse(realGrayImage5.equals((Object)realGrayImage2));
      assertFalse(realGrayImage5.equals((Object)realGrayImage4));
      
      String string0 = realGrayImage1.toString();
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      assertNotSame(realGrayImage0, realGrayImage5);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertSame(realGrayImage1, realGrayImage5);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage5));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI(0, 0, 2389, 1004);
      assertEquals(2390, rOI1.X());
      assertEquals(1004, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(2389, rOI1.lx());
      assertEquals(1005, rOI1.Y());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int0 = rOI1.ux();
      assertEquals(2390, rOI1.X());
      assertEquals(1004, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(2389, rOI1.lx());
      assertEquals(1005, rOI1.Y());
      assertEquals(0, int0);
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int1 = rOI1.ly();
      assertEquals(2390, rOI1.X());
      assertEquals(1004, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(2389, rOI1.lx());
      assertEquals(1005, rOI1.Y());
      assertEquals(1004, int1);
      assertNotSame(rOI1, rOI0);
      assertFalse(int1 == int0);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int2 = rOI1.ux();
      assertEquals(2390, rOI1.X());
      assertEquals(1004, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(2389, rOI1.lx());
      assertEquals(1005, rOI1.Y());
      assertEquals(0, int2);
      assertNotSame(rOI1, rOI0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int3 = rOI1.uy();
      assertEquals(2390, rOI1.X());
      assertEquals(1004, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(2389, rOI1.lx());
      assertEquals(1005, rOI1.Y());
      assertEquals(0, int3);
      assertNotSame(rOI1, rOI0);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int4 = rOI1.ux();
      assertEquals(2390, rOI1.X());
      assertEquals(1004, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(2389, rOI1.lx());
      assertEquals(1005, rOI1.Y());
      assertEquals(0, int4);
      assertNotSame(rOI1, rOI0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertTrue(int4 == int0);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int5 = rOI1.lx();
      assertEquals(2390, rOI1.X());
      assertEquals(1004, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(2389, rOI1.lx());
      assertEquals(1005, rOI1.Y());
      assertEquals(2389, int5);
      assertNotSame(rOI1, rOI0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        realGrayImage0.subtract(realGrayImage1, rOI0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(16, 16, (float) 0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(16, realGrayImage1.X());
      assertEquals(16, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertNotNull(realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      int int0 = realGrayImage1.X();
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(16, realGrayImage1.X());
      assertEquals(16, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(16, int0);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realGrayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      Float float0 = new Float((-324.5584F));
      assertEquals((-324.5584F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      RealGrayImage realGrayImage2 = realGrayImage0.copy();
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertNotNull(realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      
      Float float1 = Float.valueOf((-324.5584F));
      assertEquals((-324.5584F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = Float.min(0.0F, 4045.9153F);
      assertEquals(0.0F, float2, 0.01F);
      
      RealGrayImage realGrayImage3 = realGrayImage1.clear(float1);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.X());
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertNotNull(realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      
      RealGrayImage realGrayImage4 = realGrayImage3.copy();
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.X());
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage4.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(0, realGrayImage4.X());
      assertEquals(0, realGrayImage4.Y());
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertNotNull(realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage4);
      assertSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertNotSame(realGrayImage4, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      
      ImageProducer imageProducer0 = realGrayImage4.getJavaImage();
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.X());
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage4.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(0, realGrayImage4.X());
      assertEquals(0, realGrayImage4.Y());
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertNotNull(imageProducer0);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage4);
      assertSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertNotSame(realGrayImage4, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage4));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      
      float float3 = realGrayImage1.addSum();
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, float3, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertEquals(float3, float2, 0.01F);
      
      String string0 = realGrayImage1.toString();
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      
      ImageProducer imageProducer1 = realGrayImage2.getJavaImage();
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertNotNull(imageProducer1);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage4);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(imageProducer1, imageProducer0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage2.equals((Object)realGrayImage3));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage4));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(imageProducer1.equals((Object)imageProducer0));
      
      // Undeclared exception!
      try { 
        realGrayImage2.get((-1783), 1891);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1891
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(16, 16, (float) 0);
      int int0 = realGrayImage1.X();
      assertEquals(16, int0);
      
      RealGrayImage realGrayImage2 = new RealGrayImage(5740, 16);
      RealGrayImage realGrayImage3 = new RealGrayImage(realGrayImage0);
      RealGrayImage realGrayImage4 = realGrayImage1.multiply((float) 255);
      assertEquals(0.0F, realGrayImage4.min(), 0.01F);
      assertEquals(16, realGrayImage1.Y());
      
      Float float0 = new Float((float) 5740);
      float0.floatValue();
      Float.valueOf(3429.0F);
      Float.valueOf(3429.0F);
      Float float1 = Float.valueOf(3429.0F);
      Float.min(3429.0F, 3429.0F);
      realGrayImage2.set(0, 0, float1);
      assertEquals(16, realGrayImage2.Y());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      int int0 = 2;
      ROI rOI0 = new ROI();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ux();
      rOI0.lx();
      ROI rOI1 = new ROI();
      rOI1.X();
      rOI1.Y();
      // Undeclared exception!
      try { 
        realGrayImage0.subtract(realGrayImage1, rOI1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      RealGrayImage realGrayImage2 = realGrayImage1.addbuffer(2, 2, 0, 2170, 3975.4055F);
      String string0 = realGrayImage2.toString();
      assertEquals("2:2\n3975.4055 3975.4055 \n3975.4055 3975.4055 \n", string0);
      assertEquals(3975.4055F, realGrayImage2.max(), 0.01F);
      assertEquals(2, realGrayImage2.Y());
      assertEquals(2, realGrayImage2.X());
      
      Float float0 = realGrayImage1.max();
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      int int0 = 2;
      float float0 = 3975.4055F;
      int int1 = 33;
      ROI rOI0 = new ROI(33, 33, 1, 2);
      rOI0.setROI(0, 2, 0, 442);
      // Undeclared exception!
      try { 
        realGrayImage1.subtract(22, (-411), 3975.4055F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -409
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      float[][] floatArray0 = new float[0][1];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      realGrayImage0.getJavaImage();
      // Undeclared exception!
      try { 
        realGrayImage0.add(1, 1, (float) 1, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(262, 729);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        realGrayImage0.multiply(0, 435, 255.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = 0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      ROI rOI0 = new ROI(0, 45, 19, 1433);
      // Undeclared exception!
      try { 
        realGrayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 45
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }
}

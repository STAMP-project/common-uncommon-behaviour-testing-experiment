/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 18:51:38 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import java.awt.image.BufferedImage;
import jigl.image.InterpolationMethod;
import jigl.image.types.InterpolatedRealGrayImage;
import jigl.image.types.RealGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InterpolatedRealGrayImage_ESTest extends InterpolatedRealGrayImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(8, 8, 8);
      assertNotNull(bufferedImage0);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(8, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(8, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(8, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(8, bufferedImage0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(8, bufferedImage0.getType());
      
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(bufferedImage0);
      assertNotNull(interpolatedRealGrayImage0);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(8, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(8, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(8, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(8, bufferedImage0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(8, bufferedImage0.getType());
      assertEquals(0.0F, interpolatedRealGrayImage0.addSum(), 0.01F);
      assertEquals(8, interpolatedRealGrayImage0.X());
      assertEquals(0.0F, interpolatedRealGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, interpolatedRealGrayImage0.sqrSum(), 0.01);
      assertEquals(8, interpolatedRealGrayImage0.Y());
      assertEquals(0.0F, interpolatedRealGrayImage0.min(), 0.01F);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(0.0F, interpolatedRealGrayImage0.max(), 0.01F);
      
      interpolatedRealGrayImage0.splat(0.0F, 4.0F, 0.0F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(8, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(8, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(8, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(8, bufferedImage0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(8, bufferedImage0.getType());
      assertEquals(0.0F, interpolatedRealGrayImage0.addSum(), 0.01F);
      assertEquals(8, interpolatedRealGrayImage0.X());
      assertEquals(0.0F, interpolatedRealGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, interpolatedRealGrayImage0.sqrSum(), 0.01);
      assertEquals(8, interpolatedRealGrayImage0.Y());
      assertEquals(0.0F, interpolatedRealGrayImage0.min(), 0.01F);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(0.0F, interpolatedRealGrayImage0.max(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(3, 3);
      assertNotNull(interpolatedRealGrayImage0);
      assertEquals(3, interpolatedRealGrayImage0.Y());
      assertEquals(3, interpolatedRealGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      
      interpolatedRealGrayImage0.splat(0.0F, 0.38410583F, 0.0F);
      assertEquals(3, interpolatedRealGrayImage0.Y());
      assertEquals(3, interpolatedRealGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(3, 3);
      assertNotNull(interpolatedRealGrayImage0);
      assertEquals(3, interpolatedRealGrayImage0.Y());
      assertEquals(3, interpolatedRealGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      
      interpolatedRealGrayImage0.splat(1.0F, 1.0F, 2236.8354F);
      assertEquals(3, interpolatedRealGrayImage0.Y());
      assertEquals(3, interpolatedRealGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(3, 3);
      assertNotNull(interpolatedRealGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedRealGrayImage0.Y());
      assertEquals(3, interpolatedRealGrayImage0.X());
      
      interpolatedRealGrayImage0.splat(0.18844329F, 0.18844329F, 3);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedRealGrayImage0.Y());
      assertEquals(3, interpolatedRealGrayImage0.X());
      
      interpolatedRealGrayImage0.accum(0.18844329F, 0.18844329F, 0.18844329F);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedRealGrayImage0.Y());
      assertEquals(3, interpolatedRealGrayImage0.X());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(3, 3);
      assertNotNull(interpolatedRealGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedRealGrayImage0.X());
      assertEquals(3, interpolatedRealGrayImage0.Y());
      
      interpolatedRealGrayImage0.splat(0.38410583F, 0.38410583F, 3);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedRealGrayImage0.X());
      assertEquals(3, interpolatedRealGrayImage0.Y());
      
      interpolatedRealGrayImage0.accum(0.0F, 0.38410583F, 0.0F);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedRealGrayImage0.X());
      assertEquals(3, interpolatedRealGrayImage0.Y());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(3, 3);
      assertNotNull(interpolatedRealGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedRealGrayImage0.Y());
      assertEquals(3, interpolatedRealGrayImage0.X());
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.LINEAR;
      interpolatedRealGrayImage0.setInterpolationMethod(interpolationMethod0);
      assertEquals(InterpolationMethod.LINEAR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedRealGrayImage0.Y());
      assertEquals(3, interpolatedRealGrayImage0.X());
      
      // Undeclared exception!
      try { 
        interpolatedRealGrayImage0.interp(3, 2.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.InterpolatedRealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(3, 3);
      assertNotNull(interpolatedRealGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedRealGrayImage0.X());
      assertEquals(3, interpolatedRealGrayImage0.Y());
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.LINEAR;
      interpolatedRealGrayImage0.setInterpolationMethod(interpolationMethod0);
      assertEquals(InterpolationMethod.LINEAR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedRealGrayImage0.X());
      assertEquals(3, interpolatedRealGrayImage0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedRealGrayImage0.interp(0.0F, 2.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.InterpolatedRealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(3, 3);
      assertNotNull(interpolatedRealGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedRealGrayImage0.X());
      assertEquals(3, interpolatedRealGrayImage0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedRealGrayImage0.interp(0.38410583F, 2.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.InterpolatedRealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(3, 3);
      assertNotNull(interpolatedRealGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedRealGrayImage0.Y());
      assertEquals(3, interpolatedRealGrayImage0.X());
      
      interpolatedRealGrayImage0.splat(0.0F, 2.0F, 3);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedRealGrayImage0.Y());
      assertEquals(3, interpolatedRealGrayImage0.X());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(38, 38);
      assertNotNull(interpolatedRealGrayImage0);
      assertEquals(38, interpolatedRealGrayImage0.X());
      assertEquals(38, interpolatedRealGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedRealGrayImage0.setInterpolationMethod(interpolationMethod0);
      assertEquals(InterpolationMethod.CUBIC, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(38, interpolatedRealGrayImage0.X());
      assertEquals(38, interpolatedRealGrayImage0.Y());
      
      interpolatedRealGrayImage0.splat(0.0F, 0.0F, 38);
      assertEquals(InterpolationMethod.CUBIC, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(38, interpolatedRealGrayImage0.X());
      assertEquals(38, interpolatedRealGrayImage0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedRealGrayImage0.interp(2.0F, 2.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.InterpolatedRealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(3, 3);
      assertNotNull(interpolatedRealGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedRealGrayImage0.X());
      assertEquals(3, interpolatedRealGrayImage0.Y());
      
      interpolatedRealGrayImage0.splat(0.0F, 0.0F, 3);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedRealGrayImage0.X());
      assertEquals(3, interpolatedRealGrayImage0.Y());
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedRealGrayImage0.setInterpolationMethod(interpolationMethod0);
      assertEquals(InterpolationMethod.CUBIC, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedRealGrayImage0.X());
      assertEquals(3, interpolatedRealGrayImage0.Y());
      
      Float float0 = interpolatedRealGrayImage0.interp(0, 0.0F);
      assertNotNull(float0);
      assertEquals(InterpolationMethod.CUBIC, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedRealGrayImage0.X());
      assertEquals(3, interpolatedRealGrayImage0.Y());
      assertEquals(3.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(3, 3);
      assertNotNull(interpolatedRealGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedRealGrayImage0.Y());
      assertEquals(3, interpolatedRealGrayImage0.X());
      
      interpolatedRealGrayImage0.splat((-0.5F), (-0.5F), 0.0F);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedRealGrayImage0.Y());
      assertEquals(3, interpolatedRealGrayImage0.X());
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.LINEAR;
      interpolatedRealGrayImage0.setInterpolationMethod(interpolationMethod0);
      assertEquals(3, interpolatedRealGrayImage0.Y());
      assertEquals(InterpolationMethod.LINEAR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedRealGrayImage0.X());
      
      Float float0 = interpolatedRealGrayImage0.interp((-0.5F), (-0.5F));
      assertNotNull(float0);
      assertEquals(3, interpolatedRealGrayImage0.Y());
      assertEquals(InterpolationMethod.LINEAR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedRealGrayImage0.X());
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(1, 58, 1);
      assertNotNull(bufferedImage0);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(58, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(58, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(bufferedImage0);
      assertNotNull(interpolatedRealGrayImage0);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(58, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(58, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0.0F, interpolatedRealGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, interpolatedRealGrayImage0.min(), 0.01F);
      assertEquals(0.0, interpolatedRealGrayImage0.sqrSum(), 0.01);
      assertEquals(58, interpolatedRealGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(0.0F, interpolatedRealGrayImage0.max(), 0.01F);
      assertEquals(0.0F, interpolatedRealGrayImage0.absSum(), 0.01F);
      assertEquals(1, interpolatedRealGrayImage0.X());
      
      interpolatedRealGrayImage0.accum(0.0F, 1, 1);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(58, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(58, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3.0F, interpolatedRealGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, interpolatedRealGrayImage0.min(), 0.01F);
      assertEquals(58, interpolatedRealGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(3.0F, interpolatedRealGrayImage0.max(), 0.01F);
      assertEquals(9.0, interpolatedRealGrayImage0.sqrSum(), 0.01);
      assertEquals(3.0F, interpolatedRealGrayImage0.absSum(), 0.01F);
      assertEquals(1, interpolatedRealGrayImage0.X());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(3, 3);
      assertNotNull(interpolatedRealGrayImage0);
      assertEquals(3, interpolatedRealGrayImage0.Y());
      assertEquals(3, interpolatedRealGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      
      interpolatedRealGrayImage0.splat(0.0F, 0.0F, 3);
      assertEquals(3, interpolatedRealGrayImage0.Y());
      assertEquals(3, interpolatedRealGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      
      interpolatedRealGrayImage0.accum(0.0F, 0.0F, (-1074.0F));
      assertEquals(3, interpolatedRealGrayImage0.Y());
      assertEquals(3, interpolatedRealGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      
      Float float0 = interpolatedRealGrayImage0.interp(0.0F, 0.0F);
      assertNotNull(float0);
      assertEquals(3, interpolatedRealGrayImage0.Y());
      assertEquals(3, interpolatedRealGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals((-2145.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(8, 0);
      assertNotNull(interpolatedRealGrayImage0);
      assertEquals((-32768.0F), interpolatedRealGrayImage0.max(), 0.01F);
      assertEquals(0, interpolatedRealGrayImage0.Y());
      assertEquals(0.0F, interpolatedRealGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, interpolatedRealGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, interpolatedRealGrayImage0.sqrSum(), 0.01);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(32767.0F, interpolatedRealGrayImage0.min(), 0.01F);
      assertEquals(8, interpolatedRealGrayImage0.X());
      
      InterpolatedRealGrayImage interpolatedRealGrayImage1 = interpolatedRealGrayImage0.copy();
      assertNotNull(interpolatedRealGrayImage1);
      assertEquals((-32768.0F), interpolatedRealGrayImage0.max(), 0.01F);
      assertEquals(0, interpolatedRealGrayImage0.Y());
      assertEquals(0.0F, interpolatedRealGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, interpolatedRealGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, interpolatedRealGrayImage0.sqrSum(), 0.01);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(32767.0F, interpolatedRealGrayImage0.min(), 0.01F);
      assertEquals(8, interpolatedRealGrayImage0.X());
      assertEquals(0.0F, interpolatedRealGrayImage1.addSum(), 0.01F);
      assertEquals(32767.0F, interpolatedRealGrayImage1.min(), 0.01F);
      assertEquals(0.0, interpolatedRealGrayImage1.sqrSum(), 0.01);
      assertEquals(8, interpolatedRealGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage1.getInterpolationMethod());
      assertEquals((-32768.0F), interpolatedRealGrayImage1.max(), 0.01F);
      assertEquals(0, interpolatedRealGrayImage1.Y());
      assertEquals(0.0F, interpolatedRealGrayImage1.absSum(), 0.01F);
      assertNotSame(interpolatedRealGrayImage0, interpolatedRealGrayImage1);
      assertNotSame(interpolatedRealGrayImage1, interpolatedRealGrayImage0);
      assertFalse(interpolatedRealGrayImage1.equals((Object)interpolatedRealGrayImage0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(0, 1363);
      assertNotNull(interpolatedRealGrayImage0);
      assertEquals((-32768.0F), interpolatedRealGrayImage0.max(), 0.01F);
      assertEquals(1363, interpolatedRealGrayImage0.Y());
      assertEquals(0.0F, interpolatedRealGrayImage0.absSum(), 0.01F);
      assertEquals(0, interpolatedRealGrayImage0.X());
      assertEquals(0.0F, interpolatedRealGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, interpolatedRealGrayImage0.sqrSum(), 0.01);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(32767.0F, interpolatedRealGrayImage0.min(), 0.01F);
      
      InterpolatedRealGrayImage interpolatedRealGrayImage1 = interpolatedRealGrayImage0.copy();
      assertNotNull(interpolatedRealGrayImage1);
      assertEquals((-32768.0F), interpolatedRealGrayImage0.max(), 0.01F);
      assertEquals(1363, interpolatedRealGrayImage0.Y());
      assertEquals(0.0F, interpolatedRealGrayImage0.absSum(), 0.01F);
      assertEquals(0, interpolatedRealGrayImage0.X());
      assertEquals(0.0F, interpolatedRealGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, interpolatedRealGrayImage0.sqrSum(), 0.01);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(32767.0F, interpolatedRealGrayImage0.min(), 0.01F);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage1.getInterpolationMethod());
      assertEquals(32767.0F, interpolatedRealGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), interpolatedRealGrayImage1.max(), 0.01F);
      assertEquals(0.0F, interpolatedRealGrayImage1.addSum(), 0.01F);
      assertEquals(0, interpolatedRealGrayImage1.X());
      assertEquals(1363, interpolatedRealGrayImage1.Y());
      assertEquals(0.0F, interpolatedRealGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, interpolatedRealGrayImage1.sqrSum(), 0.01);
      assertNotSame(interpolatedRealGrayImage0, interpolatedRealGrayImage1);
      assertNotSame(interpolatedRealGrayImage1, interpolatedRealGrayImage0);
      assertFalse(interpolatedRealGrayImage1.equals((Object)interpolatedRealGrayImage0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(1212, 1212);
      assertNotNull(interpolatedRealGrayImage0);
      assertEquals(1212, interpolatedRealGrayImage0.Y());
      assertEquals(1212, interpolatedRealGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      
      // Undeclared exception!
      try { 
        interpolatedRealGrayImage0.accum(3.0F, 3.0F, 1212);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.InterpolatedRealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(8, 3734);
      assertNotNull(realGrayImage0);
      assertEquals(8, realGrayImage0.X());
      assertEquals(3734, realGrayImage0.Y());
      
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(realGrayImage0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = null;
      try {
        interpolatedRealGrayImage0 = new InterpolatedRealGrayImage((RealGrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(1355, 1355);
      assertNotNull(interpolatedRealGrayImage0);
      assertEquals(1355, interpolatedRealGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(1355, interpolatedRealGrayImage0.X());
      
      InterpolatedRealGrayImage interpolatedRealGrayImage1 = new InterpolatedRealGrayImage(interpolatedRealGrayImage0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = null;
      try {
        interpolatedRealGrayImage0 = new InterpolatedRealGrayImage((InterpolatedRealGrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3589, 746, 1);
      assertNotNull(bufferedImage0);
      assertEquals(1, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3589, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(746, bufferedImage0.getHeight());
      assertEquals(3589, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(746, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(bufferedImage0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = null;
      try {
        interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(3, (-130));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(1, 58, 1);
      assertNotNull(bufferedImage0);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(58, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(58, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(bufferedImage0);
      assertNotNull(interpolatedRealGrayImage0);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(58, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(58, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.0F, interpolatedRealGrayImage0.addSum(), 0.01F);
      assertEquals(58, interpolatedRealGrayImage0.Y());
      assertEquals(0.0, interpolatedRealGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, interpolatedRealGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, interpolatedRealGrayImage0.min(), 0.01F);
      assertEquals(1, interpolatedRealGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(0.0F, interpolatedRealGrayImage0.max(), 0.01F);
      
      interpolatedRealGrayImage0.splat(0.0F, 0.0F, 1);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(58, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(58, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1.0F, interpolatedRealGrayImage0.addSum(), 0.01F);
      assertEquals(58, interpolatedRealGrayImage0.Y());
      assertEquals(1.0, interpolatedRealGrayImage0.sqrSum(), 0.01);
      assertEquals(1.0F, interpolatedRealGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, interpolatedRealGrayImage0.min(), 0.01F);
      assertEquals(1, interpolatedRealGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(1.0F, interpolatedRealGrayImage0.max(), 0.01F);
      
      InterpolatedRealGrayImage interpolatedRealGrayImage1 = interpolatedRealGrayImage0.copy();
      assertNotNull(interpolatedRealGrayImage1);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(58, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(58, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1.0F, interpolatedRealGrayImage0.addSum(), 0.01F);
      assertEquals(58, interpolatedRealGrayImage0.Y());
      assertEquals(1.0, interpolatedRealGrayImage0.sqrSum(), 0.01);
      assertEquals(1.0F, interpolatedRealGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, interpolatedRealGrayImage0.min(), 0.01F);
      assertEquals(1, interpolatedRealGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(1.0F, interpolatedRealGrayImage0.max(), 0.01F);
      assertEquals(1.0, interpolatedRealGrayImage1.sqrSum(), 0.01);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage1.getInterpolationMethod());
      assertEquals(0.0F, interpolatedRealGrayImage1.min(), 0.01F);
      assertEquals(58, interpolatedRealGrayImage1.Y());
      assertEquals(1.0F, interpolatedRealGrayImage1.absSum(), 0.01F);
      assertEquals(1.0F, interpolatedRealGrayImage1.max(), 0.01F);
      assertEquals(1.0F, interpolatedRealGrayImage1.addSum(), 0.01F);
      assertEquals(1, interpolatedRealGrayImage1.X());
      assertNotSame(interpolatedRealGrayImage0, interpolatedRealGrayImage1);
      assertNotSame(interpolatedRealGrayImage1, interpolatedRealGrayImage0);
      assertFalse(interpolatedRealGrayImage1.equals((Object)interpolatedRealGrayImage0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(1355, 1355);
      assertNotNull(interpolatedRealGrayImage0);
      assertEquals(1355, interpolatedRealGrayImage0.X());
      assertEquals(1355, interpolatedRealGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      
      InterpolationMethod interpolationMethod0 = interpolatedRealGrayImage0.getInterpolationMethod();
      assertEquals(1355, interpolatedRealGrayImage0.X());
      assertEquals(1355, interpolatedRealGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolationMethod0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(3, 3);
      assertNotNull(interpolatedRealGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedRealGrayImage0.Y());
      assertEquals(3, interpolatedRealGrayImage0.X());
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedRealGrayImage0.setInterpolationMethod(interpolationMethod0);
      assertEquals(InterpolationMethod.CUBIC, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedRealGrayImage0.Y());
      assertEquals(3, interpolatedRealGrayImage0.X());
      
      // Undeclared exception!
      try { 
        interpolatedRealGrayImage0.splat(0.0F, 3, (-572.0F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.InterpolatedRealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(1355, 1355);
      assertNotNull(interpolatedRealGrayImage0);
      assertEquals(1355, interpolatedRealGrayImage0.Y());
      assertEquals(1355, interpolatedRealGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.LINEAR;
      interpolatedRealGrayImage0.interpolationMethod = interpolationMethod0;
      assertEquals(1355, interpolatedRealGrayImage0.Y());
      assertEquals(1355, interpolatedRealGrayImage0.X());
      assertEquals(InterpolationMethod.LINEAR, interpolatedRealGrayImage0.getInterpolationMethod());
      
      // Undeclared exception!
      try { 
        interpolatedRealGrayImage0.splat(1355, 1583.6741F, 1583.6741F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1583
         //
         verifyException("jigl.image.types.InterpolatedRealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(8, 8);
      assertNotNull(interpolatedRealGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedRealGrayImage0.X());
      assertEquals(8, interpolatedRealGrayImage0.Y());
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedRealGrayImage0.setInterpolationMethod(interpolationMethod0);
      assertEquals(8, interpolatedRealGrayImage0.X());
      assertEquals(8, interpolatedRealGrayImage0.Y());
      assertEquals(InterpolationMethod.CUBIC, interpolatedRealGrayImage0.getInterpolationMethod());
      
      // Undeclared exception!
      try { 
        interpolatedRealGrayImage0.accum(255.0F, 255.0F, 255.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 255
         //
         verifyException("jigl.image.types.InterpolatedRealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(1355, 1355);
      assertNotNull(interpolatedRealGrayImage0);
      assertEquals(1355, interpolatedRealGrayImage0.Y());
      assertEquals(1355, interpolatedRealGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.LINEAR;
      interpolatedRealGrayImage0.interpolationMethod = interpolationMethod0;
      assertEquals(1355, interpolatedRealGrayImage0.Y());
      assertEquals(1355, interpolatedRealGrayImage0.X());
      assertEquals(InterpolationMethod.LINEAR, interpolatedRealGrayImage0.getInterpolationMethod());
      
      // Undeclared exception!
      try { 
        interpolatedRealGrayImage0.accum(1355, 1355, 1355);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1355
         //
         verifyException("jigl.image.types.InterpolatedRealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(38, 38);
      assertNotNull(interpolatedRealGrayImage0);
      assertEquals(38, interpolatedRealGrayImage0.X());
      assertEquals(38, interpolatedRealGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedRealGrayImage0.setInterpolationMethod(interpolationMethod0);
      assertEquals(38, interpolatedRealGrayImage0.X());
      assertEquals(38, interpolatedRealGrayImage0.Y());
      assertEquals(InterpolationMethod.CUBIC, interpolatedRealGrayImage0.getInterpolationMethod());
      
      // Undeclared exception!
      try { 
        interpolatedRealGrayImage0.interp(2.0F, 1021.604F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1021
         //
         verifyException("jigl.image.types.InterpolatedRealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(8, 8);
      assertNotNull(interpolatedRealGrayImage0);
      assertEquals(8, interpolatedRealGrayImage0.X());
      assertEquals(8, interpolatedRealGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedRealGrayImage0.setInterpolationMethod(interpolationMethod0);
      assertEquals(8, interpolatedRealGrayImage0.X());
      assertEquals(8, interpolatedRealGrayImage0.Y());
      assertEquals(InterpolationMethod.CUBIC, interpolatedRealGrayImage0.getInterpolationMethod());
      
      // Undeclared exception!
      try { 
        interpolatedRealGrayImage0.interp(8, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("jigl.image.types.InterpolatedRealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(3, 3);
      assertNotNull(interpolatedRealGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedRealGrayImage0.X());
      assertEquals(3, interpolatedRealGrayImage0.Y());
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedRealGrayImage0.setInterpolationMethod(interpolationMethod0);
      assertEquals(InterpolationMethod.CUBIC, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedRealGrayImage0.X());
      assertEquals(3, interpolatedRealGrayImage0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedRealGrayImage0.interp(3, (-285.09F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -285
         //
         verifyException("jigl.image.types.InterpolatedRealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(3, 3);
      assertNotNull(interpolatedRealGrayImage0);
      assertEquals(3, interpolatedRealGrayImage0.Y());
      assertEquals(3, interpolatedRealGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.LINEAR;
      interpolatedRealGrayImage0.setInterpolationMethod(interpolationMethod0);
      assertEquals(3, interpolatedRealGrayImage0.Y());
      assertEquals(3, interpolatedRealGrayImage0.X());
      assertEquals(InterpolationMethod.LINEAR, interpolatedRealGrayImage0.getInterpolationMethod());
      
      // Undeclared exception!
      try { 
        interpolatedRealGrayImage0.interp(2.0F, (-1.0F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.InterpolatedRealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(1355, 1355);
      assertNotNull(interpolatedRealGrayImage0);
      assertEquals(1355, interpolatedRealGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(1355, interpolatedRealGrayImage0.X());
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.LINEAR;
      interpolatedRealGrayImage0.interpolationMethod = interpolationMethod0;
      assertEquals(1355, interpolatedRealGrayImage0.Y());
      assertEquals(InterpolationMethod.LINEAR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(1355, interpolatedRealGrayImage0.X());
      
      // Undeclared exception!
      try { 
        interpolatedRealGrayImage0.interp(1355, 1355);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1355
         //
         verifyException("jigl.image.types.InterpolatedRealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(1212, 1212);
      assertNotNull(interpolatedRealGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedRealGrayImage0.getInterpolationMethod());
      assertEquals(1212, interpolatedRealGrayImage0.Y());
      assertEquals(1212, interpolatedRealGrayImage0.X());
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.LINEAR;
      interpolatedRealGrayImage0.setInterpolationMethod(interpolationMethod0);
      assertEquals(1212, interpolatedRealGrayImage0.Y());
      assertEquals(1212, interpolatedRealGrayImage0.X());
      assertEquals(InterpolationMethod.LINEAR, interpolatedRealGrayImage0.getInterpolationMethod());
      
      // Undeclared exception!
      try { 
        interpolatedRealGrayImage0.interp(2.0F, 1212);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1212
         //
         verifyException("jigl.image.types.InterpolatedRealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(1355, 1355);
      // Undeclared exception!
      interpolatedRealGrayImage0.copy();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = null;
      try {
        interpolatedRealGrayImage0 = new InterpolatedRealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = null;
      try {
        interpolatedRealGrayImage0 = new InterpolatedRealGrayImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(48, 48);
      InterpolatedRealGrayImage interpolatedRealGrayImage1 = new InterpolatedRealGrayImage((RealGrayImage) interpolatedRealGrayImage0);
      assertEquals(48, interpolatedRealGrayImage1.X());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      InterpolatedRealGrayImage interpolatedRealGrayImage0 = new InterpolatedRealGrayImage(3, 3);
      InterpolatedRealGrayImage interpolatedRealGrayImage1 = new InterpolatedRealGrayImage(interpolatedRealGrayImage0);
      assertEquals(3, interpolatedRealGrayImage1.X());
  }
}

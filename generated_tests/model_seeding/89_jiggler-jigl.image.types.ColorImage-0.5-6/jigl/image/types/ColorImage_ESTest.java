/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 19:46:07 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.awt.image.Raster;
import java.awt.image.RescaleOp;
import javax.swing.JLayeredPane;
import jigl.image.ColorModel;
import jigl.image.InterpolationMethod;
import jigl.image.ROI;
import jigl.image.types.ColorImage;
import jigl.image.types.InterpolatedColorImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ColorImage_ESTest extends ColorImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 196;
      int int1 = 5;
      BufferedImage bufferedImage0 = new BufferedImage(196, 5, 5);
      assertNotNull(bufferedImage0);
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(196, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(5, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(5, bufferedImage0.getType());
      assertEquals(196, bufferedImage0.getTileWidth());
      assertEquals(5, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      
      ColorImage colorImage0 = new ColorImage(bufferedImage0);
      assertNotNull(colorImage0);
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(196, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(5, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(5, bufferedImage0.getType());
      assertEquals(196, bufferedImage0.getTileWidth());
      assertEquals(5, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(196, colorImage0.X());
      assertEquals(5, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int int2 = 44;
      // Undeclared exception!
      try { 
        colorImage0.plane(44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 44
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      ROI rOI0 = new ROI(3673, 3673, (-1), (-1));
      assertNotNull(rOI0);
      assertEquals(3673, rOI0.ly());
      assertEquals((-1), rOI0.uy());
      assertEquals(3673, rOI0.lx());
      assertEquals(3675, rOI0.Y());
      assertEquals((-1), rOI0.ux());
      assertEquals(3675, rOI0.X());
      
      rOI0.setROI((-4058), (-1473), (-1473), 3673);
      assertEquals(3673, rOI0.ly());
      assertEquals((-1473), rOI0.uy());
      assertEquals(5147, rOI0.Y());
      assertEquals(2586, rOI0.X());
      assertEquals((-1473), rOI0.lx());
      assertEquals((-4058), rOI0.ux());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      int int0 = 168;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(0, 0, 168);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      int int0 = (-1812);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1812);
      intArray0[1] = (-1812);
      ROI rOI0 = new ROI(169, 181, 276, 322);
      assertNotNull(rOI0);
      assertEquals(108, rOI0.X());
      assertEquals(276, rOI0.lx());
      assertEquals(322, rOI0.ly());
      assertEquals(169, rOI0.ux());
      assertEquals(181, rOI0.uy());
      assertEquals(142, rOI0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(169, (-1812), intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ColorImage colorImage0 = null;
      try {
        colorImage0 = new ColorImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      int int0 = 3673;
      int int1 = 923;
      ROI rOI0 = new ROI(3673, 923, (-1), (-1));
      assertNotNull(rOI0);
      assertEquals(923, rOI0.ly());
      assertEquals((-1), rOI0.uy());
      assertEquals((-1), rOI0.ux());
      assertEquals(3675, rOI0.X());
      assertEquals(3673, rOI0.lx());
      assertEquals(925, rOI0.Y());
      
      int int2 = (-588);
      int int3 = 0;
      int int4 = (-1293);
      rOI0.setROI((-588), 0, (-1293), (-699));
      assertEquals(706, rOI0.X());
      assertEquals((-699), rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals((-1293), rOI0.ux());
      assertEquals((-588), rOI0.lx());
      assertEquals(700, rOI0.Y());
      
      int int5 = rOI0.X();
      assertEquals(706, int5);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertEquals(706, rOI0.X());
      assertEquals((-699), rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals((-1293), rOI0.ux());
      assertEquals((-588), rOI0.lx());
      assertEquals(700, rOI0.Y());
      
      int int6 = rOI0.Y();
      assertEquals(700, int6);
      assertFalse(int6 == int1);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int5);
      assertFalse(int6 == int4);
      assertFalse(int6 == int2);
      assertEquals(706, rOI0.X());
      assertEquals((-699), rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals((-1293), rOI0.ux());
      assertEquals((-588), rOI0.lx());
      assertEquals(700, rOI0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(0, 0, 1185);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.absSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      
      int[] intArray0 = interpolatedColorImage0.absSum();
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int int0 = (-1798);
      ROI rOI0 = new ROI(1, (-1798), 1, 16);
      assertNotNull(rOI0);
      assertEquals(1815, rOI0.Y());
      assertEquals((-1798), rOI0.uy());
      assertEquals(1, rOI0.lx());
      assertEquals(16, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.ux());
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.set(158, (-1798), integerArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.get((-896), 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(0, 0, 1185);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int int0 = (-2161);
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int1 = (-487);
      rOI0.setROI((-487), (-487), (-356), (-487));
      assertEquals((-487), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals((-356), rOI0.lx());
      assertEquals((-487), rOI0.uy());
      assertEquals((-487), rOI0.ux());
      assertEquals(132, rOI0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((-2161), (-2161), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2161
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      int[] intArray0 = new int[0];
      int int0 = 2297;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addbuffer((-255), 176, 255, (-255), intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(496, 496);
      assertNotNull(interpolatedColorImage0);
      assertEquals(496, interpolatedColorImage0.X());
      assertEquals(496, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      int[] intArray0 = new int[6];
      intArray0[0] = 496;
      intArray0[1] = 496;
      intArray0[2] = 2410;
      intArray0[3] = 2410;
      intArray0[4] = 496;
      intArray0[5] = 496;
      // Undeclared exception!
      interpolatedColorImage0.addbuffer(496, 496, 1350, 2410, intArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.multiply(0, 0);
      assertSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage1, interpolatedColorImage0);
      assertNotNull(interpolatedColorImage1);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      
      InterpolatedColorImage interpolatedColorImage2 = (InterpolatedColorImage)interpolatedColorImage1.add(0, 260);
      assertSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage0, interpolatedColorImage2);
      assertSame(interpolatedColorImage1, interpolatedColorImage0);
      assertSame(interpolatedColorImage1, interpolatedColorImage2);
      assertSame(interpolatedColorImage2, interpolatedColorImage0);
      assertSame(interpolatedColorImage2, interpolatedColorImage1);
      assertNotNull(interpolatedColorImage2);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage2.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage2.getColorModel());
      assertEquals(0, interpolatedColorImage2.Y());
      assertEquals(0, interpolatedColorImage2.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.plane(3471);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3471
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clear(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.get(391, 2862, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 0;
      int int1 = 345;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 345);
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(345, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.multiply(0, 0);
      assertSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage1, interpolatedColorImage0);
      assertNotNull(interpolatedColorImage1);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(345, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(345, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      
      int int2 = (-16777216);
      int[] intArray0 = new int[2];
      intArray0[0] = 345;
      intArray0[1] = 345;
      // Undeclared exception!
      try { 
        interpolatedColorImage1.addbuffer((-16777216), (-16777216), intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int int0 = 2773;
      int int1 = 3240;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.min(3240);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3240
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 345);
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(345, interpolatedColorImage0.Y());
      
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.multiply(0, 0);
      assertSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage1, interpolatedColorImage0);
      assertNotNull(interpolatedColorImage1);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(345, interpolatedColorImage0.Y());
      assertEquals(345, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      
      int[] intArray0 = new int[2];
      intArray0[1] = 345;
      // Undeclared exception!
      try { 
        interpolatedColorImage1.addbuffer((-16777216), (-16777216), intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1738;
      intArray0[1] = (-1224);
      intArray0[2] = 1738;
      // Undeclared exception!
      try { 
        colorImage0.multiply((-1224), 1738, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int int0 = (-28);
      ROI rOI0 = new ROI((-28), (-28), (-28), (-28));
      assertNotNull(rOI0);
      assertEquals((-28), rOI0.ly());
      assertEquals((-28), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-28), rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals((-28), rOI0.ux());
      
      int int1 = rOI0.ux();
      assertEquals((-28), int1);
      assertTrue(int1 == int0);
      assertEquals((-28), rOI0.ly());
      assertEquals((-28), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-28), rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals((-28), rOI0.ux());
      
      int int2 = rOI0.lx();
      assertEquals((-28), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-28), rOI0.ly());
      assertEquals((-28), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-28), rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals((-28), rOI0.ux());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 345);
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(345, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.multiply(0, 0);
      assertSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage1, interpolatedColorImage0);
      assertNotNull(interpolatedColorImage1);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(345, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(345, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      
      int int0 = 3471;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(3471, 4743);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3471
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = Integer.valueOf(686);
      assertEquals(686, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      ROI rOI0 = new ROI(16, (-1798), 1, 158);
      assertNotNull(rOI0);
      assertEquals((-1798), rOI0.uy());
      assertEquals(16, rOI0.lx());
      assertEquals(158, rOI0.ly());
      assertEquals(16, rOI0.X());
      assertEquals(1, rOI0.ux());
      assertEquals(1957, rOI0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.set(0, 1, integerArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 345;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 345);
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(345, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.multiply(0, 0);
      assertSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage1, interpolatedColorImage0);
      assertNotNull(interpolatedColorImage1);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(345, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(345, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      
      InterpolatedColorImage interpolatedColorImage2 = new InterpolatedColorImage(2, 2);
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage2);
      assertEquals(ColorModel.RGB, interpolatedColorImage2.getColorModel());
      assertEquals(2, interpolatedColorImage2.X());
      assertEquals(2, interpolatedColorImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage2.getInterpolationMethod());
      
      ROI rOI0 = new ROI(0, 0, (-16777216), 345);
      assertNotNull(rOI0);
      assertEquals(346, rOI0.Y());
      assertEquals((-16777216), rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(345, rOI0.ly());
      assertEquals(16777217, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage2.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16777216
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      rOI0.setROI(180, 180, 180, 173);
      assertEquals(173, rOI0.uy());
      assertEquals(8, rOI0.Y());
      assertEquals(180, rOI0.ly());
      assertEquals(180, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(180, rOI0.ux());
      
      rOI0.setROI(180, 1119, 1119, 180);
      assertEquals(940, rOI0.Y());
      assertEquals(940, rOI0.X());
      assertEquals(180, rOI0.uy());
      assertEquals(180, rOI0.ux());
      assertEquals(1119, rOI0.ly());
      assertEquals(1119, rOI0.lx());
      
      int int0 = rOI0.ux();
      assertEquals(180, int0);
      assertEquals(940, rOI0.Y());
      assertEquals(940, rOI0.X());
      assertEquals(180, rOI0.uy());
      assertEquals(180, rOI0.ux());
      assertEquals(1119, rOI0.ly());
      assertEquals(1119, rOI0.lx());
      
      int int1 = rOI0.uy();
      assertEquals(180, int1);
      assertTrue(int1 == int0);
      assertEquals(940, rOI0.Y());
      assertEquals(940, rOI0.X());
      assertEquals(180, rOI0.uy());
      assertEquals(180, rOI0.ux());
      assertEquals(1119, rOI0.ly());
      assertEquals(1119, rOI0.lx());
      
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      // Undeclared exception!
      try { 
        colorImage0.get(3487, 180, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      // Undeclared exception!
      try { 
        colorImage0.divide(colorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      ColorImage colorImage0 = new ColorImage(Integer.MAX_VALUE, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1812);
      intArray0[1] = (-1812);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(7, 7);
      assertNotNull(colorImage0);
      assertEquals(7, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(7, colorImage0.X());
      
      String string0 = colorImage0.toString();
      assertEquals("7:7\nnull null null null null null null \nnull null null null null null null \nnull null null null null null null \nnull null null null null null null \nnull null null null null null null \nnull null null null null null null \nnull null null null null null null \n7:7\nnull null null null null null null \nnull null null null null null null \nnull null null null null null null \nnull null null null null null null \nnull null null null null null null \nnull null null null null null null \nnull null null null null null null \n7:7\nnull null null null null null null \nnull null null null null null null \nnull null null null null null null \nnull null null null null null null \nnull null null null null null null \nnull null null null null null null \nnull null null null null null null \n", string0);
      assertNotNull(string0);
      assertEquals(7, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(7, colorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.ux();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int2 = rOI0.ly();
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      rOI0.setROI(1745, 0, 0, 561);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(562, rOI0.Y());
      assertEquals(1746, rOI0.X());
      assertEquals(1745, rOI0.lx());
      assertEquals(561, rOI0.ly());
      
      Integer integer0 = colorImage0.minComponent();
      assertNull(integer0);
      assertEquals(7, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(7, colorImage0.X());
      
      int int3 = rOI0.ux();
      assertEquals(0, int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(562, rOI0.Y());
      assertEquals(1746, rOI0.X());
      assertEquals(1745, rOI0.lx());
      assertEquals(561, rOI0.ly());
      
      int int4 = rOI0.lx();
      assertEquals(1745, int4);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(562, rOI0.Y());
      assertEquals(1746, rOI0.X());
      assertEquals(1745, rOI0.lx());
      assertEquals(561, rOI0.ly());
      
      int int5 = rOI0.uy();
      assertEquals(0, int5);
      assertTrue(int5 == int3);
      assertFalse(int5 == int4);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(562, rOI0.Y());
      assertEquals(1746, rOI0.X());
      assertEquals(1745, rOI0.lx());
      assertEquals(561, rOI0.ly());
      
      // Undeclared exception!
      try { 
        colorImage0.multiply(7, 0, 6156, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int int0 = (-1381);
      // Undeclared exception!
      try { 
        colorImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      int int0 = (-1224);
      // Undeclared exception!
      try { 
        colorImage0.minComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 484);
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(484, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage1);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(484, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(484, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = 2698;
      int int1 = 10;
      ROI rOI1 = new ROI(184, 10, 484, (-102));
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(484, rOI1.lx());
      assertEquals(301, rOI1.X());
      assertEquals(10, rOI1.ly());
      assertEquals(113, rOI1.Y());
      assertEquals(184, rOI1.ux());
      assertEquals((-102), rOI1.uy());
      
      rOI1.setROI(156, (-102), (-16777216), 378);
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals((-16777216), rOI1.ux());
      assertEquals(16777373, rOI1.X());
      assertEquals(378, rOI1.ly());
      assertEquals(156, rOI1.lx());
      assertEquals(481, rOI1.Y());
      assertEquals((-102), rOI1.uy());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.divide((ColorImage) interpolatedColorImage0, rOI1, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16777216
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 345);
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(345, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.multiply(0, 0);
      assertSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage1, interpolatedColorImage0);
      assertNotNull(interpolatedColorImage1);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(345, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(345, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      
      int int0 = (-16777216);
      int[] intArray0 = new int[2];
      Integer[] integerArray0 = interpolatedColorImage0.max();
      assertSame(interpolatedColorImage0, interpolatedColorImage1);
      assertEquals(3, integerArray0.length);
      assertNotNull(integerArray0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(345, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      intArray0[0] = 345;
      intArray0[1] = 345;
      ROI rOI0 = new ROI(354, 178, 345, 354);
      assertNotNull(rOI0);
      assertEquals(354, rOI0.lx());
      assertEquals(354, rOI0.ly());
      assertEquals(345, rOI0.ux());
      assertEquals(177, rOI0.Y());
      assertEquals(178, rOI0.uy());
      assertEquals(10, rOI0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(0, 345, 504, 153, 345, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 523
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 16;
      intArray0[1] = 16;
      intArray0[2] = 16;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(16, 16, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clear(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-68);
      ROI rOI0 = new ROI((-519), (-519), (-68), (-519));
      assertNotNull(rOI0);
      assertEquals((-519), rOI0.uy());
      assertEquals(452, rOI0.X());
      assertEquals((-519), rOI0.ux());
      assertEquals((-68), rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals((-519), rOI0.ly());
      
      rOI0.setROI(658, (-519), 3314, (-2100));
      assertEquals(3314, rOI0.lx());
      assertEquals((-2100), rOI0.uy());
      assertEquals(658, rOI0.ux());
      assertEquals(2657, rOI0.X());
      assertEquals(1582, rOI0.Y());
      assertEquals((-519), rOI0.ly());
      
      rOI0.setROI((-68), (-519), 0, 0);
      assertEquals(520, rOI0.Y());
      assertEquals((-519), rOI0.uy());
      assertEquals(69, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals((-68), rOI0.ux());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((-68), (-68), intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int int0 = 0;
      int int1 = 0;
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(0, 0, 0, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(196, 5, 5);
      assertNotNull(bufferedImage0);
      assertEquals(5, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(5, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(196, bufferedImage0.getTileWidth());
      assertEquals(5, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(196, bufferedImage0.getWidth());
      
      ColorImage colorImage0 = new ColorImage(bufferedImage0);
      assertNotNull(colorImage0);
      assertEquals(5, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(5, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(196, bufferedImage0.getTileWidth());
      assertEquals(5, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(196, bufferedImage0.getWidth());
      assertEquals(196, colorImage0.X());
      assertEquals(5, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      colorImage0.InitFromImage(bufferedImage0, 5, 5, 44, 148);
      assertEquals(5, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(5, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(196, bufferedImage0.getTileWidth());
      assertEquals(5, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(196, bufferedImage0.getWidth());
      assertEquals(196, colorImage0.X());
      assertEquals(5, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.ux();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      
      int int2 = rOI0.ly();
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      
      rOI0.setROI(179, 561, 0, 44);
      assertEquals(44, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(180, rOI0.X());
      assertEquals(518, rOI0.Y());
      assertEquals(179, rOI0.lx());
      assertEquals(561, rOI0.ly());
      
      Integer integer0 = colorImage0.minComponent();
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(5, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(5, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(196, bufferedImage0.getTileWidth());
      assertEquals(5, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(196, bufferedImage0.getWidth());
      assertEquals(196, colorImage0.X());
      assertEquals(5, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      Raster raster0 = bufferedImage0.getData();
      assertNotNull(raster0);
      assertEquals(5, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(5, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(196, bufferedImage0.getTileWidth());
      assertEquals(5, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(196, bufferedImage0.getWidth());
      assertEquals(0, raster0.getTransferType());
      assertEquals(0, raster0.getMinY());
      assertEquals(3, raster0.getNumDataElements());
      assertEquals(0, raster0.getSampleModelTranslateX());
      assertEquals(0, raster0.getMinX());
      assertEquals(196, raster0.getWidth());
      assertEquals(5, raster0.getHeight());
      assertEquals(0, raster0.getSampleModelTranslateY());
      assertEquals(3, raster0.getNumBands());
      
      int int3 = rOI0.ux();
      assertEquals(0, int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(44, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(180, rOI0.X());
      assertEquals(518, rOI0.Y());
      assertEquals(179, rOI0.lx());
      assertEquals(561, rOI0.ly());
      
      int int4 = rOI0.lx();
      assertEquals(179, int4);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertEquals(44, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(180, rOI0.X());
      assertEquals(518, rOI0.Y());
      assertEquals(179, rOI0.lx());
      assertEquals(561, rOI0.ly());
      
      int int5 = rOI0.uy();
      assertEquals(44, int5);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertEquals(44, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(180, rOI0.X());
      assertEquals(518, rOI0.Y());
      assertEquals(179, rOI0.lx());
      assertEquals(561, rOI0.ly());
      
      // Undeclared exception!
      try { 
        colorImage0.multiply(0, 44, 5, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 44
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      rOI0.setROI(2773, 1465, 1465, 2773);
      assertEquals(1309, rOI0.Y());
      assertEquals(1309, rOI0.X());
      assertEquals(1465, rOI0.ux());
      assertEquals(1465, rOI0.uy());
      assertEquals(2773, rOI0.lx());
      assertEquals(2773, rOI0.ly());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clip(2773, 2773, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 6;
      ColorImage colorImage0 = new ColorImage(6, 6);
      assertNotNull(colorImage0);
      assertEquals(6, colorImage0.Y());
      assertEquals(6, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int int1 = 5;
      int int2 = 0;
      int int3 = (-865);
      int int4 = (-16777216);
      // Undeclared exception!
      try { 
        colorImage0.max(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.ux();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      
      int int2 = rOI0.ly();
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      
      int int3 = rOI0.ux();
      assertEquals(0, int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      
      int int4 = rOI0.lx();
      assertEquals(0, int4);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      
      int int5 = rOI0.uy();
      assertEquals(0, int5);
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int4);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-16777235);
      intArray0[1] = 160;
      intArray0[2] = 189;
      intArray0[3] = 0;
      intArray0[4] = 160;
      ColorModel colorModel0 = ColorModel.HSV;
      colorImage0.colorModel = colorModel0;
      assertEquals(ColorModel.HSV, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      intArray0[5] = (-1755);
      intArray0[6] = 0;
      intArray0[7] = 0;
      // Undeclared exception!
      try { 
        colorImage0.add(intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ColorImage colorImage1 = new ColorImage();
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertNotNull(colorImage1);
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.Y());
      assertEquals(0, colorImage1.X());
      
      int[] intArray0 = new int[9];
      intArray0[0] = 170;
      intArray0[1] = (-3383);
      intArray0[2] = (-16777216);
      intArray0[3] = 189;
      intArray0[4] = 165;
      intArray0[5] = (-3264);
      intArray0[6] = 158;
      intArray0[7] = 187;
      intArray0[8] = (-2587);
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.ux();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int2 = rOI0.ly();
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int3 = rOI0.ux();
      assertEquals(0, int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int4 = rOI0.lx();
      assertEquals(0, int4);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int5 = rOI0.uy();
      assertEquals(0, int5);
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        colorImage0.add(intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      int int0 = 0;
      int int1 = 2;
      RescaleOp rescaleOp0 = new RescaleOp((-1362.944F), 0.0F, (RenderingHints) null);
      assertNotNull(rescaleOp0);
      assertEquals(1, rescaleOp0.getNumFactors());
      
      // Undeclared exception!
      try { 
        colorImage0.max(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int int0 = 0;
      int int1 = 2;
      RescaleOp rescaleOp0 = new RescaleOp((-1362.944F), 0.0F, (RenderingHints) null);
      assertNotNull(rescaleOp0);
      assertEquals(1, rescaleOp0.getNumFactors());
      
      // Undeclared exception!
      try { 
        colorImage0.min(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(2453, 0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(2453, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      
      Integer integer0 = interpolatedColorImage0.maxComponent();
      assertNull(integer0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(2453, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(194, (-217), 194);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(2773, 2773, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2773
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      int int0 = (-37);
      ROI rOI0 = new ROI((-37), 10, (-37), 1459);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(10, rOI0.uy());
      assertEquals((-37), rOI0.ux());
      assertEquals(1450, rOI0.Y());
      assertEquals(1459, rOI0.ly());
      assertEquals((-37), rOI0.lx());
      
      int int1 = 136;
      rOI0.setROI(2, 136, 157, 7);
      assertEquals(7, rOI0.uy());
      assertEquals(130, rOI0.Y());
      assertEquals(157, rOI0.lx());
      assertEquals(136, rOI0.ly());
      assertEquals(2, rOI0.ux());
      assertEquals(156, rOI0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(158, (-32768), 136, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(196, 5, 5);
      assertNotNull(bufferedImage0);
      assertEquals(196, bufferedImage0.getTileWidth());
      assertEquals(5, bufferedImage0.getHeight());
      assertEquals(196, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(5, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(5, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      
      ColorImage colorImage0 = new ColorImage(bufferedImage0);
      assertNotNull(colorImage0);
      assertEquals(196, bufferedImage0.getTileWidth());
      assertEquals(5, bufferedImage0.getHeight());
      assertEquals(196, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(5, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(5, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(196, colorImage0.X());
      assertEquals(5, colorImage0.Y());
      
      String string0 = colorImage0.toString();
      assertNotNull(string0);
      assertEquals(196, bufferedImage0.getTileWidth());
      assertEquals(5, bufferedImage0.getHeight());
      assertEquals(196, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(5, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(5, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(196, colorImage0.X());
      assertEquals(5, colorImage0.Y());
      
      colorImage0.InitFromImage(bufferedImage0, 5, 5, 43, 148);
      assertEquals(196, bufferedImage0.getTileWidth());
      assertEquals(5, bufferedImage0.getHeight());
      assertEquals(196, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(5, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(5, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(196, colorImage0.X());
      assertEquals(5, colorImage0.Y());
      
      Integer integer0 = colorImage0.minComponent();
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertEquals(196, bufferedImage0.getTileWidth());
      assertEquals(5, bufferedImage0.getHeight());
      assertEquals(196, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(5, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(5, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(196, colorImage0.X());
      assertEquals(5, colorImage0.Y());
      
      ROI rOI0 = new ROI(196, 196, 148, 148);
      assertNotNull(rOI0);
      assertEquals(148, rOI0.ux());
      assertEquals(148, rOI0.uy());
      assertEquals(196, rOI0.ly());
      assertEquals(196, rOI0.lx());
      assertEquals(49, rOI0.X());
      assertEquals(49, rOI0.Y());
      
      // Undeclared exception!
      try { 
        colorImage0.clip(196, 43, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 148
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(4, 2);
      assertNotNull(colorImage0);
      assertEquals(2, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(4, colorImage0.X());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 7;
      intArray0[1] = (-211);
      intArray0[2] = 4;
      ColorImage colorImage1 = colorImage0.addbuffer(7, 255, 7, (-211), intArray0);
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage1, colorImage0);
      assertArrayEquals(new int[] {7, (-211), 4}, intArray0);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertEquals(3, intArray0.length);
      assertNotNull(colorImage1);
      assertEquals(2, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(4, colorImage0.X());
      assertEquals(255, colorImage1.Y());
      assertEquals(7, colorImage1.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      
      ROI rOI0 = new ROI(4, (-1), 4, 0);
      assertNotNull(rOI0);
      assertEquals(4, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(2, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(4, rOI0.ux());
      assertEquals((-1), rOI0.uy());
      
      rOI0.setROI(0, 4, (-1363), 2324);
      assertEquals((-1363), rOI0.ux());
      assertEquals(2324, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(2321, rOI0.Y());
      assertEquals(1364, rOI0.X());
      assertEquals(4, rOI0.uy());
      
      // Undeclared exception!
      try { 
        colorImage0.max((-2107), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2107
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 5;
      BufferedImage bufferedImage0 = new BufferedImage(196, 5, 5);
      assertNotNull(bufferedImage0);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(5, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(5, bufferedImage0.getTileHeight());
      assertEquals(196, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(196, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(5, bufferedImage0.getHeight());
      
      ColorImage colorImage0 = new ColorImage(bufferedImage0);
      assertNotNull(colorImage0);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(5, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(5, bufferedImage0.getTileHeight());
      assertEquals(196, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(196, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(5, bufferedImage0.getHeight());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(196, colorImage0.X());
      assertEquals(5, colorImage0.Y());
      
      colorImage0.InitFromImage(bufferedImage0, 5, 5, 44, 148);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(5, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(5, bufferedImage0.getTileHeight());
      assertEquals(196, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(196, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(5, bufferedImage0.getHeight());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(196, colorImage0.X());
      assertEquals(5, colorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.uy();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int3 = rOI0.ly();
      assertEquals(0, int3);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      rOI0.setROI(179, 561, 0, 44);
      assertEquals(0, rOI0.ux());
      assertEquals(44, rOI0.uy());
      assertEquals(518, rOI0.Y());
      assertEquals(179, rOI0.lx());
      assertEquals(561, rOI0.ly());
      assertEquals(180, rOI0.X());
      
      Integer integer0 = colorImage0.minComponent();
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int3));
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(5, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(5, bufferedImage0.getTileHeight());
      assertEquals(196, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(196, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(5, bufferedImage0.getHeight());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(196, colorImage0.X());
      assertEquals(5, colorImage0.Y());
      
      // Undeclared exception!
      try { 
        colorImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 44
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      
      ColorModel colorModel0 = ColorModel.YIQ;
      interpolatedColorImage0.colorModel = colorModel0;
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.YIQ, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(255, (-531), 964);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      rOI0.setROI(2773, 1465, 1465, 2773);
      assertEquals(2773, rOI0.ly());
      assertEquals(2773, rOI0.lx());
      assertEquals(1465, rOI0.uy());
      assertEquals(1465, rOI0.ux());
      assertEquals(1309, rOI0.Y());
      assertEquals(1309, rOI0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clip(1465, 1465, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      int int0 = 2;
      ROI rOI0 = new ROI(0, 0, 2, (-37));
      assertNotNull(rOI0);
      assertEquals((-37), rOI0.uy());
      assertEquals(38, rOI0.Y());
      assertEquals(2, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(3, rOI0.X());
      
      int int1 = 136;
      int int2 = 0;
      int int3 = (-16777216);
      rOI0.setROI(136, 0, 758, (-16777216));
      assertEquals((-16777216), rOI0.uy());
      assertEquals(758, rOI0.lx());
      assertEquals(623, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(136, rOI0.ux());
      assertEquals(16777217, rOI0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(758, 0, (-1341), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16777216
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      int[] intArray0 = new int[2];
      intArray0[1] = (-1812);
      ROI rOI0 = new ROI(169, 181, 181, 322);
      assertNotNull(rOI0);
      assertEquals(13, rOI0.X());
      assertEquals(181, rOI0.uy());
      assertEquals(142, rOI0.Y());
      assertEquals(169, rOI0.ux());
      assertEquals(181, rOI0.lx());
      assertEquals(322, rOI0.ly());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(169, (-1812), intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(4, 2);
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(4, colorImage0.X());
      assertEquals(2, colorImage0.Y());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 8;
      intArray0[1] = (-211);
      intArray0[2] = 4;
      ColorImage colorImage1 = colorImage0.addbuffer(8, 255, 8, (-211), intArray0);
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage1, colorImage0);
      assertArrayEquals(new int[] {8, (-211), 4}, intArray0);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertEquals(3, intArray0.length);
      assertNotNull(colorImage1);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(4, colorImage0.X());
      assertEquals(2, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(8, colorImage1.X());
      assertEquals(255, colorImage1.Y());
      
      ROI rOI0 = new ROI(4, (-1), 4, 0);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(2, rOI0.Y());
      assertEquals(4, rOI0.ux());
      assertEquals((-1), rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(4, rOI0.lx());
      
      rOI0.setROI(0, 0, (-1363), 2324);
      assertEquals(0, rOI0.lx());
      assertEquals(1364, rOI0.X());
      assertEquals(2325, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(2324, rOI0.ly());
      assertEquals((-1363), rOI0.ux());
      
      // Undeclared exception!
      try { 
        colorImage0.max((-2107), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2107
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }
}

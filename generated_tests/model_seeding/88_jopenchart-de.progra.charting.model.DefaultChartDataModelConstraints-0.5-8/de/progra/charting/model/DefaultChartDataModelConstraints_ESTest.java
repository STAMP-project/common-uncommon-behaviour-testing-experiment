/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 21:02:54 GMT 2019
 */

package de.progra.charting.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.progra.charting.model.AbstractChartDataModel;
import de.progra.charting.model.DefaultChartDataModel;
import de.progra.charting.model.DefaultChartDataModelConstraints;
import java.math.BigInteger;
import java.time.format.ResolverStyle;
import java.util.NoSuchElementException;
import java.util.TreeSet;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultChartDataModelConstraints_ESTest extends DefaultChartDataModelConstraints_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TreeSet<ResolverStyle> treeSet0 = new TreeSet<ResolverStyle>();
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(abstractChartDataModel0).getManualMinimumValue();
      doReturn(treeSet0).when(abstractChartDataModel0).getOrderedValues(anyInt());
      doReturn(true).when(abstractChartDataModel0).isManualScale();
      ResolverStyle resolverStyle0 = ResolverStyle.LENIENT;
      treeSet0.add(resolverStyle0);
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, (short) (-2997), true);
      Number number0 = defaultChartDataModelConstraints0.getMinimumValue();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TreeSet<ResolverStyle> treeSet0 = new TreeSet<ResolverStyle>();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(bigInteger0).when(abstractChartDataModel0).getManualMinimumValue();
      doReturn(treeSet0).when(abstractChartDataModel0).getOrderedValues(anyInt());
      doReturn(true).when(abstractChartDataModel0).isManualScale();
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      treeSet0.add(resolverStyle0);
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, (short) (-2997), true);
      Number number0 = defaultChartDataModelConstraints0.getMinimumValue();
      assertSame(bigInteger0, number0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TreeSet<ResolverStyle> treeSet0 = new TreeSet<ResolverStyle>();
      BigInteger bigInteger0 = BigInteger.ONE;
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(1724.6247436078029).when(abstractChartDataModel0).getFirstColumnValue();
      doReturn(0.5).when(abstractChartDataModel0).getLastColumnValue();
      doReturn(0.5).when(abstractChartDataModel0).getManualMinimumColumnValue();
      doReturn(integer0, bigInteger0).when(abstractChartDataModel0).getManualMinimumValue();
      doReturn(treeSet0, treeSet0).when(abstractChartDataModel0).getOrderedValues(anyInt());
      doReturn(true).when(abstractChartDataModel0).isAutoScale();
      doReturn(true, false, true, true).when(abstractChartDataModel0).isManualScale();
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      treeSet0.add(resolverStyle0);
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, 1427);
      defaultChartDataModelConstraints0.getMinimumColumnValue();
      defaultChartDataModelConstraints0.getMinimumColumnValue();
      defaultChartDataModelConstraints0.getMinimumValue();
      Number number0 = defaultChartDataModelConstraints0.getMinimumValue();
      assertSame(bigInteger0, number0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TreeSet<ResolverStyle> treeSet0 = new TreeSet<ResolverStyle>();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-128);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(bigInteger0).when(abstractChartDataModel0).getManualMinimumValue();
      doReturn(treeSet0).when(abstractChartDataModel0).getOrderedValues(anyInt());
      doReturn(true).when(abstractChartDataModel0).isManualScale();
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      treeSet0.add(resolverStyle0);
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, (short) (-3007), true);
      Number number0 = defaultChartDataModelConstraints0.getMinimumValue();
      assertSame(number0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreeSet<ResolverStyle> treeSet0 = new TreeSet<ResolverStyle>();
      BigInteger bigInteger0 = BigInteger.ONE;
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(1724.6247436078029).when(abstractChartDataModel0).getFirstColumnValue();
      doReturn(0.5).when(abstractChartDataModel0).getLastColumnValue();
      doReturn(bigInteger0).when(abstractChartDataModel0).getManualMaximumValue();
      doReturn(0.5).when(abstractChartDataModel0).getManualMinimumColumnValue();
      doReturn(treeSet0).when(abstractChartDataModel0).getOrderedValues(anyInt());
      doReturn(true).when(abstractChartDataModel0).isAutoScale();
      doReturn(true, false, true).when(abstractChartDataModel0).isManualScale();
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      treeSet0.add(resolverStyle0);
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, 1427);
      defaultChartDataModelConstraints0.getMinimumColumnValue();
      defaultChartDataModelConstraints0.getMinimumColumnValue();
      Number number0 = defaultChartDataModelConstraints0.getMaximumValue();
      assertEquals((short)1, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultChartDataModel defaultChartDataModel0 = new DefaultChartDataModel();
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(defaultChartDataModel0, 480);
      // Undeclared exception!
      try { 
        defaultChartDataModelConstraints0.getMinimumValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.model.DefaultChartDataModelConstraints", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(abstractChartDataModel0).getFirstColumnValue();
      doReturn(0.0).when(abstractChartDataModel0).getLastColumnValue();
      doReturn(true).when(abstractChartDataModel0).isAutoScale();
      doReturn(true).when(abstractChartDataModel0).isManualScale();
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, 0, false);
      // Undeclared exception!
      defaultChartDataModelConstraints0.getMinimumColumnValue();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultChartDataModel defaultChartDataModel0 = new DefaultChartDataModel();
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(defaultChartDataModel0, 639, false);
      // Undeclared exception!
      try { 
        defaultChartDataModelConstraints0.getMinimumColumnValue();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints((AbstractChartDataModel) null, 0);
      // Undeclared exception!
      try { 
        defaultChartDataModelConstraints0.getMinimumColumnValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.model.DefaultChartDataModelConstraints", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints((AbstractChartDataModel) null, (-1707), true);
      // Undeclared exception!
      try { 
        defaultChartDataModelConstraints0.getMaximumValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.model.DefaultChartDataModelConstraints", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(abstractChartDataModel0).getLastColumnValue();
      doReturn(false).when(abstractChartDataModel0).isAutoScale();
      doReturn(true).when(abstractChartDataModel0).isManualScale();
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, (short) (-2997), false);
      defaultChartDataModelConstraints0.getMaximumColumnValue();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultChartDataModel defaultChartDataModel0 = new DefaultChartDataModel();
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(defaultChartDataModel0, (-520));
      // Undeclared exception!
      try { 
        defaultChartDataModelConstraints0.getMaximumColumnValue();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(1724.6247436078029).when(abstractChartDataModel0).getFirstColumnValue();
      doReturn(0.5).when(abstractChartDataModel0).getLastColumnValue();
      doReturn(0.5).when(abstractChartDataModel0).getManualMinimumColumnValue();
      doReturn(true).when(abstractChartDataModel0).isAutoScale();
      doReturn(true, false).when(abstractChartDataModel0).isManualScale();
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, 1427);
      double double0 = defaultChartDataModelConstraints0.getMinimumColumnValue();
      double double1 = defaultChartDataModelConstraints0.getMaximumColumnValue();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1000.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(1724.6247436078029).when(abstractChartDataModel0).getFirstColumnValue();
      doReturn(0.5, 0.0).when(abstractChartDataModel0).getLastColumnValue();
      doReturn(0.5).when(abstractChartDataModel0).getManualMinimumColumnValue();
      doReturn(true, false).when(abstractChartDataModel0).isAutoScale();
      doReturn(true, false, true).when(abstractChartDataModel0).isManualScale();
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, 1427);
      defaultChartDataModelConstraints0.getMinimumColumnValue();
      double double0 = defaultChartDataModelConstraints0.getMinimumColumnValue();
      assertEquals(1000.0, double0, 0.01);
      
      defaultChartDataModelConstraints0.allowManualColScale = false;
      double double1 = defaultChartDataModelConstraints0.getMaximumColumnValue();
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(0.95, (-789.131)).when(abstractChartDataModel0).getFirstColumnValue();
      doReturn((-740.0), 0.95, 0.0).when(abstractChartDataModel0).getLastColumnValue();
      doReturn(0.0).when(abstractChartDataModel0).getManualMaximumColumnValue();
      doReturn(0.0).when(abstractChartDataModel0).getManualMinimumColumnValue();
      doReturn(true, true, false).when(abstractChartDataModel0).isAutoScale();
      doReturn(false, false, true, true, false).when(abstractChartDataModel0).isManualScale();
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, 1427);
      defaultChartDataModelConstraints0.getMinimumColumnValue();
      double double0 = defaultChartDataModelConstraints0.getMinimumColumnValue();
      //  // Unstable assertion: assertEquals((-800.0), double0, 0.01);
      
      double double1 = defaultChartDataModelConstraints0.getMinimumColumnValue();
      double double2 = defaultChartDataModelConstraints0.getMaximumColumnValue();
      //  // Unstable assertion: assertEquals((-1904.401), double2, 0.01);
      
      double double3 = defaultChartDataModelConstraints0.getMaximumColumnValue();
      //  // Unstable assertion: assertEquals(double3, double1, 0.01);
      //  // Unstable assertion: assertEquals(0.0, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TreeSet<ResolverStyle> treeSet0 = new TreeSet<ResolverStyle>();
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(treeSet0).when(abstractChartDataModel0).getOrderedValues(anyInt());
      doReturn(false).when(abstractChartDataModel0).isAutoScale();
      doReturn(false).when(abstractChartDataModel0).isManualScale();
      ResolverStyle resolverStyle0 = ResolverStyle.LENIENT;
      treeSet0.add(resolverStyle0);
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, (short) (-2997));
      // Undeclared exception!
      try { 
        defaultChartDataModelConstraints0.getMinimumValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.time.format.ResolverStyle cannot be cast to java.lang.Number
         //
         verifyException("de.progra.charting.model.DefaultChartDataModelConstraints", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TreeSet<ResolverStyle> treeSet0 = new TreeSet<ResolverStyle>();
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(bigInteger0).when(abstractChartDataModel0).getManualMinimumValue();
      doReturn(treeSet0, treeSet0).when(abstractChartDataModel0).getOrderedValues(anyInt());
      doReturn(true).when(abstractChartDataModel0).isAutoScale();
      doReturn(true, false).when(abstractChartDataModel0).isManualScale();
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      treeSet0.add(resolverStyle0);
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, (short) (-2997), true);
      defaultChartDataModelConstraints0.getMinimumValue();
      // Undeclared exception!
      try { 
        defaultChartDataModelConstraints0.getMinimumValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.time.format.ResolverStyle cannot be cast to java.lang.Number
         //
         verifyException("de.progra.charting.model.DefaultChartDataModelConstraints", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TreeSet<Double> treeSet0 = new TreeSet<Double>();
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(treeSet0).when(abstractChartDataModel0).getOrderedValues(anyInt());
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, 1427);
      Number number0 = defaultChartDataModelConstraints0.getMinimumValue();
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TreeSet<ResolverStyle> treeSet0 = new TreeSet<ResolverStyle>();
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(treeSet0).when(abstractChartDataModel0).getOrderedValues(anyInt());
      doReturn(false).when(abstractChartDataModel0).isAutoScale();
      doReturn(false).when(abstractChartDataModel0).isManualScale();
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      treeSet0.add(resolverStyle0);
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, (short) (-2997), true);
      // Undeclared exception!
      try { 
        defaultChartDataModelConstraints0.getMaximumValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.time.format.ResolverStyle cannot be cast to java.lang.Number
         //
         verifyException("de.progra.charting.model.DefaultChartDataModelConstraints", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TreeSet<ResolverStyle> treeSet0 = new TreeSet<ResolverStyle>();
      BigInteger bigInteger0 = BigInteger.ZERO;
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(bigInteger0).when(abstractChartDataModel0).getManualMinimumValue();
      doReturn(treeSet0, treeSet0).when(abstractChartDataModel0).getOrderedValues(anyInt());
      doReturn(true).when(abstractChartDataModel0).isAutoScale();
      doReturn(true, false).when(abstractChartDataModel0).isManualScale();
      ResolverStyle resolverStyle0 = ResolverStyle.LENIENT;
      treeSet0.add(resolverStyle0);
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, (short) (-2997), true);
      defaultChartDataModelConstraints0.getMinimumValue();
      // Undeclared exception!
      try { 
        defaultChartDataModelConstraints0.getMaximumValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.time.format.ResolverStyle cannot be cast to java.lang.Number
         //
         verifyException("de.progra.charting.model.DefaultChartDataModelConstraints", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TreeSet<Double> treeSet0 = new TreeSet<Double>();
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn(treeSet0).when(abstractChartDataModel0).getOrderedValues(anyInt());
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, 1427);
      Number number0 = defaultChartDataModelConstraints0.getMaximumValue();
      assertEquals(1, number0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TreeSet<ResolverStyle> treeSet0 = new TreeSet<ResolverStyle>();
      AbstractChartDataModel abstractChartDataModel0 = mock(AbstractChartDataModel.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(abstractChartDataModel0).getManualMaximumValue();
      doReturn(treeSet0).when(abstractChartDataModel0).getOrderedValues(anyInt());
      doReturn(true).when(abstractChartDataModel0).isManualScale();
      ResolverStyle resolverStyle0 = ResolverStyle.LENIENT;
      treeSet0.add(resolverStyle0);
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints(abstractChartDataModel0, (short) (-2997), true);
      Number number0 = defaultChartDataModelConstraints0.getMaximumValue();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultChartDataModelConstraints defaultChartDataModelConstraints0 = new DefaultChartDataModelConstraints((AbstractChartDataModel) null, 1321, true);
      // Undeclared exception!
      try { 
        defaultChartDataModelConstraints0.getMaximumColumnValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.model.DefaultChartDataModelConstraints", e);
      }
  }
}
